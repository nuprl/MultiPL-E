name: HumanEval_156_int_to_mini_roman
language: jl
prompt: "\"\"\"\n    Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\
  \n    Examples:\n    >>> int_to_mini_roman(19)\n    \"xix\"\n    >>> int_to_mini_roman(152)\n\
  \    \"clii\"\n    >>> int_to_mini_roman(426)\n    \"cdxxvi\"\n    \"\"\"\nfunction\
  \ int_to_mini_roman(number::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = int_to_mini_roman;\n\t@test(candidate(19)\
  \ == \"xix\")\n\t@test(candidate(152) == \"clii\")\n\t@test(candidate(251) == \"\
  ccli\")\n\t@test(candidate(426) == \"cdxxvi\")\n\t@test(candidate(500) == \"d\"\
  )\n\t@test(candidate(1) == \"i\")\n\t@test(candidate(4) == \"iv\")\n\t@test(candidate(43)\
  \ == \"xliii\")\n\t@test(candidate(90) == \"xc\")\n\t@test(candidate(94) == \"xciv\"\
  )\n\t@test(candidate(532) == \"dxxxii\")\n\t@test(candidate(900) == \"cm\")\n\t\
  @test(candidate(994) == \"cmxciv\")\n\t@test(candidate(1000) == \"m\")\nend\n"
completions: ["    if number < 1 || number > 1000 \n        error(\"Invalid input:\
    \ number must be between 1 and 1000\")\n    else\n        roman = roman_numeral(number)\n\
    \        roman = roman.lower()\n        return roman\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    roman = roman_to_int(\"MCMXCIV\")\n    roman = roman[roman.index(number):roman.index(number)+4]\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number <\
    \ 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    return roman.join(\"\")\nend", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n\
    \        roman_numerals = roman_numerals_of(number)\n        roman_numerals_str\
    \ = roman_numerals.join(\"\")\n        roman_numerals_str = roman_numerals_str.lower()\n\
    \        return roman_numerals_str\nend", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&char.method(|_| _))\n\
    \    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_|\
    \ _))\n    roman = roman.map(&char.method(|_| _))\n    roman = roman.map(&char.method(|_",
  "    if number < 1 || number > 1000\n        error(\"number must be between 1 and\
    \ 1000\")\n    end\n    roman = \"\"\n    roman_numerals = [\n        \"M\",\n\
    \        \"CM\",\n        \"D\",\n        \"CD\",\n        \"C\",\n        \"\
    XC\",\n        \"L\",\n        \"XL\",\n        \"X\",\n        \"IX\",\n    \
    \    \"V\",\n        \"IV\",\n        \"I\"\n    ]\n    roman_numerals_reversed\
    \ = [\n        \"M\",\n        \"CM\",\n        \"D\",\n        \"CD\",\n    \
    \    \"C\",\n        \"XC\",\n        \"L\",\n        \"XL\",\n        \"X\",\n\
    \        \"IX\",\n        \"V\",\n        \"IV\",\n        \"I\"\n    ]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    for roman_numeral in roman_numerals\n\
    \        if number >= roman_numeral\n            roman = roman_numeral + roman\n\
    \            number = number - roman_numeral\n        end\n    end\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    roman = \"\"\n    roman_numerals\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    for roman_numeral in roman_numerals\n\
    \        if number >= roman_numeral\n            roman = roman_numeral + roman\n\
    \            number -= roman_numeral\n            roman = roman.to_string()\n\
    \            break\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Int must be between 1 and\
    \ 1000\")\n    end\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = roman_numerals()\n    for roman_numeral\
    \ in roman_numerals\n        if roman_numeral == \"\"\n            continue\n\
    \        end\n        if roman_numeral == roman_numerals[roman_numeral]\n    \
    \        roman_numeral = roman_numerals[roman_numeral]\n        end\n        if\
    \ roman_numeral > number\n            continue\n        end\n        if roman_numeral\
    \ < number\n            roman_numeral = roman_numerals[roman_numeral]\n      \
    \  end\n        if roman_numeral == number\n            roman = roman_numeral\n\
    \            break\n        end\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    end\n    roman = \"\"\n    roman_digits = Int64[]\n    roman_digits[1]\
    \ = \"M\"\n    roman_digits[2] = \"CM\"\n    roman_digits[3] = \"D\"\n    roman_digits[4]\
    \ = \"CD\"\n    roman_digits[5] = \"C\"\n    roman_digits[6] = \"XC\"\n    roman_digits[7]\
    \ = \"L\"\n    roman_digits[8] = \"XL\"\n    roman_digits[9] = \"X\"\n    roman_digits[10]\
    \ = \"IX\"\n    roman_digits[11] = \"V\"\n    roman_digits[12] = \"IV\"\n    roman_digits[13]\
    \ = \"I\"\n    roman_digits[14] = \"M\"\n    roman_digits[15] = \"CM\"\n    roman_digits[16]\
    \ = \"D\"\n    roman_digits[17] = \"CD\"\n    roman_digits[18] = \"C\"\n    roman_digits[19]\
    \ = \"XC\"\n    roman_digits[20] = \"L\"\n    roman_digits[21] = \"XL\"\n    roman_digits[22]\
    \ = \"X\"\n    roman_digits[23] = \"IX\"\n    roman_digits[24] = \"V\"\n    roman_digits[25]\
    \ = \"IV\"\n    roman_digits[26] = \"I\"\n    roman_digits[27] = \"V\"\n    roman_digits[28]\
    \ = \"IV\"\n    roman_digits[29] = \"I\"\n    roman_digits[30] = \"V\"\n    roman_digits[31]\
    \ = \"IV\"\n    roman_digits[32] = \"I\"\n    roman_digits[33] = \"V\"\n    roman_digits[34]\
    \ = \"IV\"\n    roman_digits[35] = \"I\"\n    roman_digits[36] = \"V\"\n    roman_digits[37]\
    \ = \"IV\"\n    roman_digits[38] = \"I\"\n    roman_digits[39] = \"V\"\n    roman_digits[40]\
    \ = \"IV\"\n    roman_digits[41] = \"I\"\n    roman_digits[42] = \"V\"\n    roman_digits[43]\
    \ = \"IV\"\n    roman_digits[44] = \"I\"\n    roman_digits[45] = \"V\"\n    roman_digits[46]\
    \ = \"IV\"\n    roman_digits[47] = \"I\"\n    roman_digits[48] = \"V\"", "   \
    \ if number == 0 \n        then return \"0\"\n    else if number == 1 \n     \
    \   then return \"x\"\n    else if number == 2 \n        then return \"xx\"\n\
    \    else if number == 3 \n        then return \"xxx\"\n    else if number ==\
    \ 4 \n        then return \"XL\"\n    else if number == 5 \n        then return\
    \ \"LX\"\n    else if number == 6 \n        then return \"XC\"\n    else if number\
    \ == 7 \n        then return \"CXX\"\n    else if number == 8 \n        then return\
    \ \"XXL\"\n    else if number == 9 \n        then return \"LXX\"\n    else if\
    \ number == 10 \n        then return \"XXX\"\n    else if number == 11 \n    \
    \    then return \"XLX\"\n    else if number == 12 \n        then return \"XIX\"\
    \n    else if number == 13 \n        then return \"IXL\"\n    else if number ==\
    \ 14 \n        then return \"V\"\n    else if number == 15 \n        then return\
    \ \"IV\"\n    else if number == 16 \n        then return \"I\"\n    else if number\
    \ == 17 \n        then return \"II\"\n    else if number == 18 \n        then\
    \ return \"III\"\n    else if number == 19 \n        then return \"VII\"\n   \
    \ else if number == 20 \n        then return \"VIII\"\n    else if number == 21\
    \ \n        then return \"IX\"\n    else if number == 22 \n        then return\
    \ \"X\"\n    else if number == 23 \n        then return \"XX\"\n    else if number\
    \ == 24 \n        then return \"XXX\"\n    else if number == 25 \n        then\
    \ return \"XLX\"\n    else if number == 26 \n        then return \"LXX\"\n   \
    \ else if number == 27 \n        then return \"XIX\"\n    else if number == 28\
    \ \n        then return \"IXL\"\n    else if number == 29 \n        then return\
    \ \"VI\"\n    else if number == 30 \n        then return \"IV\"\n    else if number\
    \ == 31 \n        then return \"I\"\n    else if number == 32 \n        then return\
    \ \"II\"\n    else if number == 33 \n        then return \"III\"\n    else if\
    \ number == 34 \n        then return \"VII\"\n    else if number == ", "    roman\
    \ = roman_to_int(\"MCMXCIV\")\n    roman = roman[roman.index(number):roman.index(number)+4]\n\
    \    return roman\nend", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else \n        roman = roman_to_int(roman_to_mini_roman(number))\n\
    \        return int_to_mini_roman(roman)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    else \n        roman_numerals = roman_numerals_table()\n\
    \        roman_numerals_string = \"\"\n        for roman_numeral in roman_numerals\
    \ \n            if roman_numerals[roman_numeral] >= number \n                roman_numerals_string\
    \ += roman_numerals[roman_numeral]\n            else \n                roman_numerals_string\
    \ += roman_numerals[roman_numeral]\n        roman_numerals_string = roman_numerals_string.lower()\n\
    \        return roman_numerals_string\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_reverse = reverse(roman_numerals)\n    roman_numerals_reverse[number]\
    \ = roman_numerals[number]\n    roman_numerals_reverse[number+1] = \"\"\n    return\
    \ join(roman_numerals_reverse, \"\")\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n    return\
    \ roman.join(\"\")\nend", "    if number < 1 || number > 1000\n        error(\"\
    Int must be between 1 and 1000\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(x => x.lowercase())\n    return roman.join(\"\")\nend",
  "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = romans[number]\n    roman = roman.substring(1,roman.length)\n   \
    \ return roman\nend", "    if number == 0 \n        then return \"0\"\n    else\
    \ if number < 0 \n        then return \"-\"\n    else if number < 1000 \n    \
    \    then return int_to_mini_roman(number / 100) + int_to_mini_roman(number %\
    \ 100) + int_to_mini_roman(number % 1000)\n    else if number < 1000000 \n   \
    \     then return int_to_mini_roman(number / 1000) + int_to_mini_roman(number\
    \ % 1000) + int_to_mini_roman(number % 1000000)\n    else if number < 1000000000\
    \ \n        then return int_to_mini_roman(number / 1000000) + int_to_mini_roman(number\
    \ % 1000000) + int_to_mini_roman(number % 1000000000)\n    else if number < 1000000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000) + int_to_mini_roman(number\
    \ % 1000000000) + int_to_mini_roman(number % 1000000000000)\n    else if number\
    \ < 1000000000000000 \n        then return int_to_mini_roman(number / 10000000000000)\
    \ + int_to_mini_roman(number % 10000000000000) + int_to_mini_roman(number % 1000000000000000)\n\
    \    else if number < 1000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 1000000000000000) + int_to_mini_roman(number % 1000000000000000) + int_to_mini_roman(number\
    \ % 100000000000000000)\n    else if number < 1000000000000000000000 \n      \
    \  then return int_to_mini_roman(number / 10000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000) + int_to_mini_roman(number % 100000000000000000)\n    else\
    \ if number < 100000000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 100000000000000000) + int_to_mini_roman(number % 100000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000000)\n    else if number < 1000000000000000000000000000 \n\
    \        then return int_to_mini_roman(number / 10000000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000000) + int_to_mini_roman(number % 1000000000000000000000)\n\
    \    else if number < 10000000000000000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000000000000000000) + int_to_mini_roman(number % 10000000000000000000000)\
    \ + int_to_mini", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    end\n    roman = roman_numerals(number)\n    roman = roman.map(x\
    \ -> lowercase(x))\n    roman = roman.filter(x -> x != \"\")\n    return join(roman,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000\n        error(\"Int must be between 1 and 1000\")\n    end\n    roman\
    \ = \"\"\n    roman_numerals = [\"\", \"c\", \"l\", \"x\", \"i\"]\n    for i =\
    \ 1:number\n        roman_numeral = roman_numerals[roman_numerals.index(\"i\"\
    ) - 1]\n        if number % i == 0\n            roman_numeral += \"i\"\n     \
    \       number /= i\n        else\n            roman_numeral += roman_numerals[roman_numerals.index(i)\
    \ - 1]\n        end\n        roman += roman_numeral\n    end\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    return roman.map(&:first).join(\"\")\nend", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"V\"))\n    roman = roman.map(&char(\"X\"))\n    roman =\
    \ roman.map(&char(\"L\"))\n    roman = roman.map(&char(\"C\"))\n    roman = roman.map(&char(\"\
    D\"))\n    roman = roman.map(&char(\"M\"))\n    roman = roman.map(&char(\"M\"\
    ))\n    roman = roman.map(&char(\"D\"))\n    roman = roman.map(&char(\"C\"))\n\
    \    roman = roman.map(&char(\"L\"))\n    roman = roman.map(&char(\"X\"))\n  \
    \  roman = roman.map(&char(\"V\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input: number must be between 1 and 1000\")\n    end\n\
    \    roman_numerals = roman_numerals(number)\n    roman_numerals = roman_numerals[roman_numerals.lenght-1]\n\
    \    return roman_numerals\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\") \n    else \n\
    \        roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\"\
    , \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        roman_numerals_reversed\
    \ = roman_numerals[0..(length(roman_numerals) - 1)]\n        roman_numerals_reversed.reverse()\n\
    \        roman_numerals_reversed.push(\"I\")\n        roman_numerals_reversed.push(\"\
    V\")\n        roman_numerals_reversed.push(\"IV\")\n        roman_numerals_reversed.push(\"\
    II\")\n        roman_numerals_reversed.push(\"III\")\n        roman_numerals_reversed.push(\"\
    IV\")\n        roman_numerals_reversed.push(\"V\")\n        roman_numerals_reversed.push(\"\
    V\")\n        roman_numerals_reversed.push(\"X\")\n        roman_numerals_reversed.push(\"\
    L\")\n        roman_numerals_reversed.push(\"XL\")\n        roman_numerals_reversed.push(\"\
    XC\")\n        roman_numerals_reversed.push(\"CD\")\n        roman_numerals_reversed.push(\"\
    D\")\n        roman_numerals_reversed.push(\"CM\")\n        roman_numerals_reversed.push(\"\
    M\")\n        roman_numerals_reversed.push(\"M\")\n        roman_numerals_reversed.push(\"\
    MM\")\n        roman_numerals_reversed.push(\"MMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.push(\"MMMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.push(\"MMMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.push(\"MMMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.push(\"MMMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.push(\"MMMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.push(\"MMMM\")\n        roman_numerals_reversed.push(\"\
    MMMM\")\n        roman_numerals_reversed.", "    roman = \"\"\n    roman_numerals\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed = [\n  \
    \      \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed.reverse()\n    for\
    \ i in roman_numerals_reversed:\n        if number >= i:\n            roman =\
    \ roman.concat(i)\n            number -= i\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else \n        roman_numerals = roman_numerals_list(number)\n\
    \        roman_numerals_str = roman_numerals.join(\"\")\n        roman_numerals_str\
    \ = roman_numerals_str.lower()\n        return roman_numerals_str\nend", "   \
    \ roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[1..end]\n    roman_numerals_reversed = roman_numerals_reversed[1..end]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[1..end]", "    if number\
    \ < 1 || number > 1000 \n        error(\"Int must be between 1 and 1000\")\n \
    \   else \n        roman = roman_to_int(roman_to_roman(int_to_roman(number)))\n\
    \        return roman_to_mini_roman(roman)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = roman_to_int()\n    roman = roman[number]\n    roman = roman.substring(0,1)\n\
    \    roman = roman.substring(1,2)\n    roman = roman.substring(2,3)\n    roman\
    \ = roman.substring(3,4)\n    roman = roman.substring(4,5)\n    roman = roman.substring(5,6)\n\
    \    roman = roman.substring(6,7)\n    roman = roman.substring(7,8)\n    roman\
    \ = roman.substring(8,9)\n    roman = roman.substring(9,10)\n    roman = roman.substring(10,11)\n\
    \    roman = roman.substring(11,12)\n    roman = roman.substring(12,13)\n    roman\
    \ = roman.substring(13,14)\n    roman = roman.substring(14,15)\n    roman = roman.substring(15,16)\n\
    \    roman = roman.substring(16,17)\n    roman = roman.substring(17,18)\n    roman\
    \ = roman.substring(18,19)\n    roman = roman.substring(19,20)\n    roman = roman.substring(20,21)\n\
    \    roman = roman.substring(21,22)\n    roman = roman.substring(22,23)\n    roman\
    \ = roman.substring(23,24)\n    roman = roman.substring(24,25)\n    roman = roman.substring(25,26)\n\
    \    roman = roman.substring(26,27)\n    roman = roman.substring(27,28)\n    roman\
    \ = roman.substring(28,29)\n    roman = roman.substring(29,30)\n    roman = roman.substring(30,31)\n\
    \    roman = roman.substring(31,32)\n    roman = roman.substring(32,33)\n    roman\
    \ = roman.substring(33,34)\n    roman = roman.substring(34,35)\n    roman = roman.substring(35,36)\n\
    \    roman = roman.substring(36,37)\n    roman = roman.substring(37,38)\n    roman\
    \ = roman.substring(38,39)\n    roman = roman.substring(39,40)\n    roman = roman.substring(40,41)\n\
    \    roman = roman.substring(41,42)\n    roman = roman.substring(42,43)", "  \
    \  if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_digits = Int64[]\n    for digit in Int64(ceil(log10(number)))::Int64\n\
    \        roman_digits.push(number % 10)\n        number /= 10\n    end\n    for\
    \ roman_digit in roman_digits\n        roman = roman_digit + roman\n    end\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = \"\
    \"\n    roman_nums = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"\
    DCCC\",\"CM\",\n        \"M\",\"MM\",\"MMM\",\"MMMM\",\"MMMMM\",\"MMMMMM\",\"\
    MMMMMMM\",\"MMMMMMMM\",\n        \"MMMMMMMMM\",\"MMMMMMMMMM\",\"MMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMM\",\"MMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMM\",\"MMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMM\",\"MMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMM\",\"\
    MMMMMMMMMMMMMMMMMMM\",\"MMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMM\",\"MMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMM\",\"MMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\"MMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    ,\"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMM",
  "    roman = roman_numeral(number)\n    roman = roman.lower()\n    return roman\n\
    end", "    if number == 0 \n        then return \"0\"\n    else if number < 0\
    \ \n        then return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"Error\"\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n   \
    \ roman = romans[number]\n    roman = roman.substring(1,roman.length)\n    return\
    \ roman\nend", "    if number < 1 || number > 1000 \n        error(\"Invalid input:\
    \ number must be between 1 and 1000\")\n    else \n        roman_numerals = roman_numerals(number)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    c\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    d\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    m\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    l\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    v\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    l\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    c\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    m\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    d\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    v\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\"\
    x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_", " \
    \   if number == 0 \n        then return \"0\"\n    else if number < 0 \n    \
    \    then return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"?\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its decimal equivalent as a string,\n    and return\
    \ it in lowercase.\n    Restrictions: 1 <= num <= 1000", "    if number == 0 \n\
    \        then return \"0\"\n    else if number < 0 \n        then return \"-\"\
    \n    else if number < 100\n        then return int_to_mini_roman(number / 10)\
    \ + int_to_mini_roman(number % 10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 1000\n        then return int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 100)\n\
    \    else if number < 5000\n        then return int_to_mini_roman(number / 5000)\
    \ + int_to_mini_roman(number % 5000) + int_to_mini_roman(number % 1000)\n    else\
    \ if number < 10000\n        then return int_to_mini_roman(number / 10000) + int_to_mini_roman(number\
    \ % 10000) + int_to_mini_roman(number % 5000)\n    else if number < 100000\n \
    \       then return int_to_mini_roman(number / 100000) + int_to_mini_roman(number\
    \ % 100000) + int_to_mini_roman(number % 100000)\n    else if number < 1000000\n\
    \        then return int_to_mini_roman(number / 1000000) + int_to_mini_roman(number\
    \ % 1000000) + int_to_mini_roman(number % 100000)\n    else if number < 5000000\n\
    \        then return int_to_mini_roman(number / 5000000) + int_to_mini_roman(number\
    \ % 5000000) + int_to_mini_roman(number % 1000000)\n    else if number < 10000000\n\
    \        then return int_to_mini_roman(number / 10000000) + int_to_mini_roman(number\
    \ % 10000000) + int_to_mini_roman(number % 5000000)\n    else if number < 50000000\n\
    \        then return int_to_mini_roman(number / 50000000) + int_to_mini_roman(number\
    \ % 50000000) + int_to_mini_roman(number % 10000000)\n    else if number < 100000000\n\
    \        then return int_to_mini_roman(number / 100000000) + int_to_mini_roman(number\
    \ % 100000000) + int_to_mini_roman(number % 50000000)\n    else if number < ",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = Int64[]\n    roman[1] = convert(number)\n    roman[2] = convert(number\
    \ * 10)\n    roman[3] = convert(number * 100)\n    roman[4] = convert(number *\
    \ 1000)\n    roman[5] = convert(number * 10000)\n    roman[6] = convert(number\
    \ * 100000)\n    roman[7] = convert(number * 1000000)\n    roman[8] = convert(number\
    \ * 10000000)\n    roman[9] = convert(number * 100000000)\n    roman[10] = convert(number\
    \ * 1000000000)\n    roman[11] = convert(number * 10000000000)\n    roman[12]\
    \ = convert(number * 100000000000)\n    roman[13] = convert(number * 1000000000000)\n\
    \    roman[14] = convert(number * 10000000000000)\n    roman[15] = convert(number\
    \ * 100000000000000)\n    roman[16] = convert(number * 1000000000000000)\n   \
    \ roman[17] = convert(number * 10000000000000000)\n    roman[18] = convert(number\
    \ * 100000000000000000)\n    roman[19] = convert(number * 1000000000000000000)\n\
    \    roman[20] = convert(number * 10000000000000000000)\n    roman[21] = convert(number\
    \ * 100000000000000000000)\n    roman[22] = convert(number * 1000000000000000000000)\n\
    \    roman[23] = convert(number * 10000000000000000000000)\n    roman[24] = convert(number\
    \ * 100000000000000000000000)\n    roman[25] = convert(number * 1000000000000000000000000)\n\
    \    roman[26] = convert(number * 10000000000000000000000000)\n    roman[27] =\
    \ convert(number * 100000000000000000000000000)\n    roman[28] = convert(number\
    \ * 1000000000000000000000000000)\n    roman[29] = convert(number * 10000000000000000000000000000)\n\
    \    roman[30] = convert(number * 100000000000000000000000000000)\n    roman[31]\
    \ = convert(number * 1000000000000000000000000000000)\n    roman[32] = convert(number\
    \ * 10000000000000000000000000000000)\n    roman[33] = convert(number * 100000000000000000000000000000000)\n\
    \    roman[34] = convert(number * 1000000000000000000000000000000000)\n    roman[35]\
    \ = convert(number * 10000000000000000000000000000000000)\n    roman[36] = convert(number\
    \ * 100000000000000000000000000000000000)\n    roman[37] = convert(number * 1000000000000000000000000000000000000)\n\
    \    roman[38] = convert(number * 100000000000000000000000000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ \"\"\n    roman_numerals = [\n        \"M\",\n        \"CM\",\n        \"D\"\
    ,\n        \"CD\",\n        \"C\",\n        \"XC\",\n        \"L\",\n        \"\
    XL\",\n        \"X\",\n        \"IX\",\n        \"V\",\n        \"IV\",\n    \
    \    \"I\"\n    ]\n    for roman_numeral in roman_numerals\n        if number\
    \ >= roman_numeral\n            roman = roman_numeral + roman\n            number\
    \ -= roman_numeral\n        end\n    end\n    return roman\nend", "    roman =\
    \ \"\"\n    roman_digits = \"MCMXC\"\n    roman_numerals = \"IVXLCDM\"\n    roman_numerals_reversed\
    \ = \"IXCLDM\"\n    roman_numerals_reversed_index = 0\n    roman_numerals_reversed_index_count\
    \ = 0\n    roman_numerals_reversed_index_count_max = 4\n    roman_numerals_reversed_index_count_min\
    \ = 0\n    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numerals_reversed_index_count_max = roman_numerals_reversed_index_count_max\n\
    \    roman_numerals_reversed_index_count_min = roman_numerals_reversed_index_count_min\n\
    \    roman_numer", "    roman = roman_numeral(number)\n    roman = roman.lower()\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number <\
    \ 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_num\
    \ = \"\"\n        roman_num += \"x\"\n        roman_num += \"i\"\n        roman_num\
    \ += \"v\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        roman_num\
    \ += \"d\"\n        roman_num += \"x\"\n        roman_num += \"l\"\n        roman_num\
    \ += \"i\"\n        roman_num += \"x\"\n        roman_num += \"c\"\n        ro",
  "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n    roman\
    \ = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"c\"))\n    roman =\
    \ roman.map(&char(\"d\"))\n    roman = roman.map(&char(\"m\"))\n    roman = roman.map(&char(\"\
    i\"))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"v\"\
    ))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n\
    \    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))\n  \
    \  roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"l\"))\n    roman\
    \ = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n    roman =\
    \ roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"\
    i\"))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"\
    ))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"l\"))\n\
    \    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n  \
    \  roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))\n    roman\
    \ = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"l\"))\n    roman =\
    \ roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"\
    l\"))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"\
    ))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))",
  "    if number == 0 \n        return \"0\"\n    if number == 1 \n        return\
    \ \"x\"\n    if number == 2 \n        return \"xx\"\n    if number == 3 \n   \
    \     return \"xxx\"\n    if number == 4 \n        return \"XL\"\n    if number\
    \ == 5 \n        return \"LX\"\n    if number == 6 \n        return \"LXX\"\n\
    \    if number == 7 \n        return \"LXXX\"\n    if number == 8 \n        return\
    \ \"XC\"\n    if number == 9 \n        return \"XC\"\n    if number == 10 \n \
    \       return \"XL\"\n    if number == 11 \n        return \"LX\"\n    if number\
    \ == 12 \n        return \"LXX\"\n    if number == 13 \n        return \"LXXX\"\
    \n    if number == 14 \n        return \"XC\"\n    if number == 15 \n        return\
    \ \"XL\"\n    if number == 16 \n        return \"LX\"\n    if number == 17 \n\
    \        return \"LXX\"\n    if number == 18 \n        return \"LXXX\"\n    if\
    \ number == 19 \n        return \"C\"\n    if number == 20 \n        return \"\
    D\"\n    if number == 21 \n        return \"DC\"\n    if number == 22 \n     \
    \   return \"DCC\"\n    if number == 23 \n        return \"DCCC\"\n    if number\
    \ == 24 \n        return \"CM\"\n    if number == 25 \n        return \"M\"\n\
    \    if number == 26 \n        return \"M\"\n    if number == 27 \n        return\
    \ \"MM\"\n    if number == 28 \n        return \"MMM\"\n    if number == 29 \n\
    \        return \"MMMM\"\n    if number == 30 \n        return \"MMMMM\"\n   \
    \ if number == 31 \n        return \"MMMMMM\"\n    if number == 32 \n        return\
    \ \"MMMMMMM\"\n    if number == 33 \n        return \"MMMMMMMM\"\n    if number\
    \ == 34 \n        return \"MMMMMMMMM\"\n    if number == 35 \n        return \"\
    MMMMMMMMMM\"\n    if number == 36 \n        return \"MMMMMMMMMMM\"\n    if number\
    \ == 37 \n        return \"MMMMMMMMMMMM\"\n    if number == 38 \n        return\
    \ \"MMMMMMMMMMMMM\"\n    if number == 39 \n        return \"MMMMMMMMMMMMMM\"\n\
    \    if number == 40 \n        return \"MMMMMMMMMMMMMMM\"\n    if number == 41\
    \ \n        return \"MMMMMMMMMMMMMMMM\"\n    if number == 42 \n        return\
    \ \"MMMMMMMMMMMMMMMMM\"\n    if number == 43 \n        return \"MMMMMMMMMMMMMMMMMM\"\
    \n    if number == 44 \n        return \"MMMMMMMMMMMMMMMMMMM\"\n    if number\
    \ == 45 \n        return \"MMMMMMMMMMMMMMMMMMMM\"\n    if number == 46 \n    \
    \    return \"MMMMMMMMMMMMMMMMMMMMM\"\n    if number == 47 \n        return \"\
    MMMMMMMMMMMMMMMMMMMMMM\"\n    if number == 48 \n        return \"MMMM", "    if\
    \ number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ < 1000 \n        return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 1000)\n    else \n        error(\"number\
    \ too large\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = roman_numeral(number)\n\
    \    roman = roman.lower()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse", "    if number\
    \ < 1 || number > 1000\n        error(\"number must be between 1 and 1000\")\n\
    \    end\n    roman_numerals = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10, \"L\"\
    \ => 50,\n        \"C\" => 100, \"D\" => 500, \"M\" => 1000, \"I\" => 1)\n   \
    \ roman_numerals_reverse = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10,\n       \
    \ \"L\" => 50, \"C\" => 100, \"D\" => 500, \"M\" => 1000, \"I\" => 1)\n    roman_numerals_reverse[\"\
    XII\"] = 5\n    roman_numerals_reverse[\"XIV\"] = 5\n    roman_numerals_reverse[\"\
    XIX\"] = 10\n    roman_numerals_reverse[\"XLI\"] = 50\n    roman_numerals_reverse[\"\
    XLII\"] = 50\n    roman_numerals_reverse[\"XLIII\"] = 50\n    roman_numerals_reverse[\"\
    XLIV\"] = 50\n    roman_numerals_reverse[\"XIV\"] = 5\n    roman_numerals_reverse[\"\
    XV\"] = 5\n    roman_numerals_reverse[\"XVI\"] = 10\n    roman_numerals_reverse[\"\
    XVII\"] = 10\n    roman_numerals_reverse[\"XVIII\"] = 10\n    roman_numerals_reverse[\"\
    XIX\"] = 10\n    roman_numerals_reverse[\"XLI\"] = 50\n    roman_numerals_reverse[\"\
    XLII\"] = 50\n    roman_numerals_reverse[\"XLIII\"] = 50\n    roman_numerals_reverse[\"\
    XLIV\"] = 50\n    roman_numerals_reverse[\"XIV\"] = 5\n    roman_numerals_reverse[\"\
    XV\"] = 5\n    roman_numerals_reverse[\"XVI\"] = 10\n    roman_numerals_reverse[\"\
    XVII\"] = 10\n    roman_numerals_reverse[\"XVIII\"] = 10\n    roman_numerals_reverse[\"\
    XIX\"] = 10\n    roman_numerals_reverse[\"XLI\"] = 50\n    roman_numerals_reverse[\"\
    XLII\"] = 50\n    roman_numerals_reverse[\"XLIII\"] = 50\n    roman_numerals_reverse[\"\
    XLIV\"] = 50\n    roman_numerals_reverse[\"XIV\"] = 5\n    roman_numerals_reverse[\"\
    XV\"] = 5\n    ", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = \"\"\n    roman_numerals = [\n        \"M\",\
    \ \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n    ]\n    for roman_numeral in roman_numerals\n        if number\
    \ >= roman_numeral\n            roman = roman_numeral + roman\n            number\
    \ -= roman_numeral\n        end\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\") \n    else \n        roman_numerals = roman_numerals_list(number)\n\
    \        roman_numerals_str = roman_numerals.join(\"\")\n        roman_numerals_str\
    \ = roman_numerals_str.lower()\n        return roman_numerals_str\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    end\n    roman = romans[number]\n    roman = roman.substring(0,roman.length-1)\n\
    \    return roman\nend", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input: number must be between 1 and 1000\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(x -> x.lower)\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    roman =\
    \ roman.map(x -> x.replace(\" \", \"\"))\n    roman = roman.map(x -> x.replace(\"\
    \ \", \"\"))\n    roman = roman.map(x -> x.replace(\" \", \"\"))\n    ", "   \
    \ if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals_strings(number)\n        roman_numerals_string\
    \ = roman_numerals.join(\"\")\n        roman_numerals_string = roman_numerals_string.replace(\"\
    \ \", \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"\
    ,\", \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"-\"\
    , \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"'\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"\\\"\"\
    , \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"(\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\")\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"[\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"]\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"{\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"}\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"!\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"?\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\":\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\";\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\",\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"<\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\">\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"?\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"!\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\",\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"-\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"+\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"*\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"%\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"^\",\
    \ \"\")\n        roman_numerals_string = roman_numerals_string.replace(\"~\",\
    \ \"\")\n        roman_numer", "    roman = roman_to_mini_roman(number)\n    roman\
    \ = roman.substring(0,roman.length-1)\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its mini roman numeral equivalent\
    \ as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <=\
    \ 1000", "    if number < 1 || number > 1000 \n        error(\"number must be\
    \ between 1 and 1000\")\n    else \n        roman_numerals = roman_numerals(number)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"c\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"d\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"m\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"v\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"l\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"n\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"x\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"i\"))\n        roman_numerals = roman_numerals.map(roman_numeral => roman_numeral.insert(0,\
    \ \"x\"))\n        roman_numerals = roman_numerals.map(", "    roman = \"\"\n\
    \    roman_digits = Int64[]\n    roman_digits.push(number)\n    while roman_digits.length\
    \ > 0\n        roman_digits.pop()\n        roman_digits.push(number % 10)\n  \
    \      number /= 10\n    roman_digits.reverse()\n    for digit in roman_digits\n\
    \        roman += mini_roman_digits[digit]\n    return roman\nend", "    roman\
    \ = roman_numeral(number)\n    roman = roman.lower()\n    return roman\nend",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\") \n    else\
    \ \n        roman_numerals = roman_numerals_list(number)\n        roman_numerals_str\
    \ = roman_numerals.map(roman_numeral_to_string)\n        roman_numerals_str.map(lowercase)\n\
    \        roman_numerals_str.map(join)\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = \"\"\n    roman_digits = roman_digits(number)\n    for digit in roman_digits\n\
    \        roman = roman + roman_digit(digit)\n    return roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input: number must be between 1 and 1000\")\n    else \n        roman\
    \ = roman_numeral(number)\n        roman = roman.lower()\n        return roman\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    roman = roman_to_int(\"MCMXCIV\")\n\
    \    roman = roman[roman.index(\"M\") + 1 : roman.index(\"C\")]\n    roman = roman[roman.index(\"\
    C\") + 1 : roman.index(\"X\")]\n    roman = roman[roman.index(\"X\") + 1 : roman.index(\"\
    L\")]\n    roman = roman[roman.index(\"L\") + 1 : roman.index(\"I\")]\n    roman\
    \ = roman[roman.index(\"I\") + 1 : roman.index(\"V\")]\n    roman = roman[roman.index(\"\
    V\") + 1 : roman.index(\"I\")]\n    roman = roman[roman.index(\"I\") + 1 : roman.index(\"\
    X\")]\n    roman = roman[roman.index(\"X\") + 1 : roman.index(\"C\")]\n    roman\
    \ = roman[roman.index(\"C\") + 1 : roman.index(\"M\")]\n    roman = roman[roman.index(\"\
    M\") + 1 : roman.index(\"I\")]\n    roman = roman[roman.index(\"I\") + 1 : roman.index(\"\
    N\")]\n    roman = roman[roman.index(\"N\") + 1 : roman.index(\"M\")]\n    roman\
    \ = roman[roman.index(\"M\") + 1 : roman.index(\"V\")]\n    roman = roman[roman.index(\"\
    V\") + 1 : roman.index(\"X\")]\n    roman = roman[roman.index(\"X\") + 1 : roman.index(\"\
    L\")]\n    roman = roman[roman.index(\"L\") + 1 : roman.index(\"C\")]\n    roman\
    \ = roman[roman.index(\"C\") + 1 : roman.index(\"D\")]\n    roman = roman[roman.index(\"\
    D\") + 1 : roman.index(\"M\")]\n    roman = roman[roman.index(\"M\") + 1 : roman.index(\"\
    V\")]\n    roman = roman[roman.index(\"V\") + 1 : roman.index(\"I\")]\n    roman\
    \ = roman[roman.index(\"I\") + 1 : ", "    if number < 1 || number > 1000 \n \
    \       error(\"Invalid input\") \n    else \n        roman_numerals = roman_numerals_list(number)\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numer",
  "    if number < 1 || number > 1000 \n        error(\"Int must be between 1 and\
    \ 1000\")\n    else \n        roman_numerals = [\"M\", \"CM\", \"D\", \"CD\",\
    \ \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n       \
    \ roman_numerals_reversed = roman_numerals[0..(length(roman_numerals) - 1)]\n\
    \        roman_numerals_reversed[(roman_numerals_reversed == roman_numerals[number])]\
    \ -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 0)] += 1\n\
    \        roman_numerals_reversed[(roman_numerals_reversed == 1)] -= 1\n      \
    \  roman_numerals_reversed[(roman_numerals_reversed == 2)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed\
    \ == 3)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 4)]\
    \ -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 5)] -= 1\n\
    \        roman_numerals_reversed[(roman_numerals_reversed == 6)] -= 1\n      \
    \  roman_numerals_reversed[(roman_numerals_reversed == 7)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed\
    \ == 8)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 9)]\
    \ -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 10)] -= 1\n\
    \        roman_numerals_reversed[(roman_numerals_reversed == 11)] -= 1\n     \
    \   roman_numerals_reversed[(roman_numerals_reversed == 12)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed\
    \ == 13)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 14)]\
    \ -= 1\n        roman_numerals_reversed[(roman_numerals_reversed == 15)] -= 1\n\
    \        roman_numerals_reversed[(roman_numerals_reversed == 16)] -= 1\n     \
    \   roman_numerals_reversed[(roman_numerals_reversed == 17)] -= 1\n        roman_numerals_reversed[(roman_numerals_reversed\
    \ == 18)] -= 1\n        roman_numerals_reversed[(", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = romans[number]\n\
    \    roman = roman.split(\"\")\n    roman = roman.map(&:capitalize)\n    roman\
    \ = roman.join(\"\")\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n    roman\
    \ = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\" \", \"\
    \"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ ", "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n\
    \    end\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals[0..(length(roman_numerals)-1)]\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_", " \
    \   if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = roman_numerals_table()\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed[1] = roman_numerals[1]\n    roman_numerals_reversed[2]\
    \ = roman_numerals[2]\n    roman_numerals_reversed[3] = roman_numerals[3]\n  \
    \  roman_numerals_reversed[4] = roman_numerals[4]\n    roman_numerals_reversed[5]\
    \ = roman_numerals[5]\n    roman_numerals_reversed[6] = roman_numerals[6]\n  \
    \  roman_numerals_reversed[7] = roman_numerals[7]\n    roman_numerals_reversed[8]\
    \ = roman_numerals[8]\n    roman_numerals_reversed[9] = roman_numerals[9]\n  \
    \  roman_numerals_reversed[10] = roman_numerals[10]\n    roman_numerals_reversed[11]\
    \ = roman_numerals[11]\n    roman_numerals_reversed[12] = roman_numerals[12]\n\
    \    roman_numerals_reversed[13] = roman_numerals[13]\n    roman_numerals_reversed[14]\
    \ = roman_numerals[14]\n    roman_numerals_reversed[15] = roman_numerals[15]\n\
    \    roman_numerals_reversed[16] = roman_numerals[16]\n    roman_numerals_reversed[17]\
    \ = roman_numerals[17]\n    roman_numerals_reversed[18] = roman_numerals[18]\n\
    \    roman_numerals_reversed[19] = roman_numerals[19]\n    roman_numerals_reversed[20]\
    \ = roman_numerals[20]\n    roman_numerals_reversed[21] = roman_numerals[21]\n\
    \    roman_numerals_reversed[22] = roman_numerals[22]\n    roman_numerals_reversed[23]\
    \ = roman_numerals[23]\n    roman_numerals_reversed[24] = roman_numerals[24]\n\
    \    roman_numerals_reversed[25] = roman_numerals[25]\n    roman_numerals_reversed[26]\
    \ = roman_numerals[26]\n    roman_numerals_reversed[27] = roman_numerals[", " \
    \   if number == 0 \n        then return \"0\"\n    else if number < 0 \n    \
    \    then return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number\
    \ / 10) + int_to_mini_roman(number % 10)\n    else if number < 500\n        then\
    \ return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 1000\n        then return int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 100)\n\
    \    else return \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if\
    \ number < 1 \n        error(\"Number must be positive\")\n    else if number\
    \ > 1000 \n        error(\"Number must be less than 1000\")\n    else if number\
    \ == 1 \n        return \"x\"\n    else \n        roman_numerals = roman_numerals_generator()\n\
    \        roman_numerals_as_strings = roman_numerals.map(roman_numeral => roman_numeral.to_string())\n\
    \        roman_numerals_as_strings_as_ints = roman_numerals_as_strings.map(roman_numeral\
    \ => roman_numeral.to_int())\n        roman_numerals_as_strings_as_ints_as_strings\
    \ = roman_numerals_as_strings_as_ints.map(roman_numeral => roman_numeral.to_string())\n\
    \        roman_numerals_as_strings_as_ints_as_strings_as_ints = roman_numerals_as_strings_as_ints_as_strings.map(roman_numeral\
    \ => roman_numeral.to_int())\n        roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings\
    \ = roman_numerals_as_strings_as_ints_as_strings_as_ints.map(roman_numeral =>\
    \ roman_numeral.to_string())\n        roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints\
    \ = roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings.map(roman_numeral\
    \ => roman_numeral.to_int())\n        roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings\
    \ = roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints.map(roman_numeral\
    \ => roman_numeral.to_string())\n        roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints\
    \ = roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings.map(roman_numeral\
    \ => roman_numeral.to_int())\n        roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints\
    \ = roman_numerals_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings_as_ints_as_strings.map(roman_numeral\
    \ => ", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    ) \n    else \n        roman_numerals = roman_numerals(number)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_numeral)\n        roman_numerals\
    \ = roman_numerals.map(roman_numeral)\n        roman_numerals = roman_numerals.map(roman_numeral)\n\
    \        roman_numerals = roman_numerals.map(roman_", "    roman = roman_numeral(number)\n\
    \    roman = roman.lower()\n    return roman\nend", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input: number must be between 1 and 1000\"\
    )\n    else \n        roman_numerals = roman_numerals(number)\n        roman_numerals_str\
    \ = roman_numerals.map(|x| x.to_string())\n        roman_numerals_str = roman_numerals_str.map(|x|\
    \ x.to_lowercase())\n        roman_numerals_str = roman_numerals_str.map(|x| x.to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars())\n     \
    \   roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_lowercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|x| x.to_chars().to_uppercase())\n\
    \        roman_numerals_str = roman_numerals_str.map(|", "    roman = roman_to_mini_roman(number)\n\
    \    roman = roman.substring(0,roman.length()-1)\n    return roman\nend", "  \
    \  roman = \"\"\n    roman_digits = \"\"\n    roman_digits_length = \"\"\n   \
    \ roman_digits_length = \"0\"\n    roman_digits_length = roman_digits_length +\
    \ roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digit", "    if number\
    \ < 1 || number > 1000\n        error(\"Number must be between 1 and 1000\")\n\
    \    end\n    roman = \"\"\n    roman_num = [\"\",\"i\",\"ii\",\"iii\",\"iv\"\
    ,\"v\",\"vi\",\"vii\",\"viii\",\"ix\",\"x\",\"xi\",\"xii\",\"xiii\",\"xiv\",\"\
    xix\"]\n    for i = 1:length(roman_num)\n        if number >= roman_num[i]\n \
    \           roman = roman_num[i]\n            number = number - roman_num[i]\n\
    \            break\n        end\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\") \n    else \n        roman_numerals = roman_numerals(number)\n    \
    \    roman_numerals = roman_numerals[1..end]\n        roman_numerals = roman_numerals.join(\"\
    \")\n        roman_numerals = roman_numerals.lower()\n    end\n    return roman_numerals\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = \"\"\n    roman_digits\
    \ = Int64[]\n    roman_digits.push(number)\n    roman_digits.push(number)\n  \
    \  roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    ", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman_numerals = roman_numerals_table()\n    roman_numerals_table\
    \ = roman_numerals[number]\n    roman_numerals_table\nend", "    if number ==\
    \ 0 \n        then return \"0\"\n    else if number < 0 \n        then return\
    \ \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000\n        then return int_to_mini_roman(number/10000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000\n        then return\
    \ int_to_mini_roman(number/100000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000\n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000000\n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000\n        then\
    \ return int_to_mini_roman(number/100000000) + int_to_mini_roman(", "    roman\
    \ = roman_numeral(number)\n    roman = roman.lower()\n    return roman\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000 \n \
    \       error(\"Invalid input\")\n    else \n        roman = roman_to_int(roman_to_str(int_to_roman(number)))\n\
    \        roman = roman.substring(0,roman.length-1)\n        return roman\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer, obtain\
    \ its mini numeral equivalent as a string,\n    and return it in lowercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    roman = roman_to_int(number)\n    roman_str\
    \ = roman_to_str(roman)\n    roman_str = roman_str.lower()\n    return roman_str\n\
    end", "    roman = \"\"\n    roman_digits = roman_digits_table[number]\n    for\
    \ digit in roman_digits\n        roman = roman.(digit)\n    return roman\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000 \n  \
    \      error(\"Invalid input\")\n    else \n        roman = roman_to_int(roman_to_roman(int_to_roman(number)))\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = roman_to_roman(roman)\n        roman = roman_to_int(roman)\n\
    \        roman = ro", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = romans[number]\n    roman = roman.substring(1,roman.length-1)\n\
    \    return roman\nend\n</cell>\n<text>\nNow let's write a function that takes\
    \ a positive integer and returns its decimal equivalent as a string.", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input: number must be\
    \ between 1 and 1000\")\n    end", "    roman = roman_to_int(number)\n    roman\
    \ = roman.to_string()\n    roman = roman.chars().map(&:to_lowercase).collect{|x|\
    \ x.to_s}\n    return roman\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,roman-numerals\
    \ |>\n<code>", "    roman_numerals = roman_numerals(number)\n    roman_numerals_str\
    \ = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase())\n    return\
    \ roman_numerals_str.join(\"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman\
    \ = roman_to_mini_roman(number)\n    roman = roman.substring(0,roman.length-1)\n\
    \    return roman\nend", "    roman = roman_numeral(number)\n    roman = roman.substring(0,roman.length-1)\n\
    \    roman = roman.substring(0,1)\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_to_mini_roman(number)\n        roman = roman.substring(0,roman.length-1)\n\
    \        return roman\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed.reverse()\n    \n    if number\
    \ < 0 or number > 1000 then\n        error(\"Invalid input\")\n    end\n    \n\
    \    if number == 0 then\n        return roman\n    end\n    \n    for i = 1,\
    \ number do\n        roman = roman_numerals[i] + roman\n    end\n    \n    return\
    \ roman\nend", "    if number < 1 || number > 1000\n        error(\"Invalid input\"\
    )\n    end\n    roman = roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n\
    \    roman = roman.map(&:join)\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    for roman_numeral\
    \ in roman_numerals\n        if number >= roman_numeral\n            roman = roman_numeral\
    \ + roman\n            number -= roman_numeral\n        end\n    end\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    else \n        roman = roman_numeral(number)\n\
    \        roman = roman.lower()\n        return roman\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = romans[number]\n    roman = roman.substring(1,roman.length)\n\
    \    return roman\nend", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = romans[number]\n    return roman\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_table = roman_numerals[roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.keys[roman_numerals.keys.size\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[:roman_numerals.", " \
    \   if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    end\n    roman = \"\"\n    digits = Int64[]\n\
    \    roman_digits = Int64[]\n    \n    for digit in Int64[]\n        if number\
    \ % 10 == digit\n            digits.push(digit)\n            roman_digits.push(number\
    \ / 10)\n            number %= 10\n        else\n            digits.push(digit)\n\
    \        end\n    end\n    \n    for digit in digits\n        roman = roman.concat(mini_roman[digit])\n\
    \    end\n    \n    for digit in roman_digits\n        roman = roman.concat(mini_roman[digit])\n\
    \    end\n    \n    return roman\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals_table()\n        roman_numeral = \"\
    \"\n        for i in roman_numerals\n            if number >= i\n            \
    \    roman_numeral += i\n                number -= i\n                break\n\
    \            else\n                roman_numeral += roman_numerals[i]\n      \
    \  end\n        return roman_numeral\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a positive integer and returns the number of its digits\
    \ in the form of a string.\nExamples:\n>>> int_to_digit_string(123)\n\"123\"\n\
    >>> int_to_digit_string(1245)\n\"1245\"\n>>> int_to_digit_string(124567)\n\"124567\"\
    \n>>> int_to_digit_string(1245678)\n\"1245678\"\n>>> int_to_digit_string(123456789)\n\
    \"123456789\"\n>>> int_to_digit_string(1234567890)\n\"1234567890\"\n>>> int_to_digit_string(12345678901)\n\
    \"12345678901\"\n>>> int_to_digit_string(123456789012)\n\"123456789012\"\n>>>\
    \ int_to_digit_string(1234567890123)\n\"1234567890123\"\n>>> int_to_digit_string(12345678901234)\n\
    \"12345678901234\"\n>>> int_to_digit_string(123456789012345)\n\"123456789012345\"\
    \n>>> int_to_digit_string(1234567890123456)\n\"1234567890123456\"\n>>> int_to_digit_string(12345678901234567)\n\
    \"12345678901234567\"\n>>> int_to_digit_string(123456789012345678)\n\"123456789012345678\"\
    \n>>> int_to_digit_string(1234567890123456789)\n\"1234567890123456789\"\n>>> int_to_digit_string(12345678901234567890)\n\
    \"12345678901234567890\"\n>>> int_to_digit_string(123456789012345678901)\n\"123456789012345678901\"\
    \n>>> int_to_digit_string(1234567890123456789012)\n\"1234567890123456789012\"\n\
    >>> int_to_digit_string(12345678901234567890123)\n\"12345678901234567890123\"\n\
    >>> int_to_digit_string(123456789012345678901234)\n\"123456789012345678901234\"\
    \n>>> int_to_digit_string(1234567890123456789012345)\n\"1234567890123456789012345\"\
    \n>>> int_to_digit_string(12345678901234567890123456)\n\"12345678901234567890123456\"\
    \n>>> int_to_digit_string(123456789012345678901234567)\n\"123456789012345678901234567\"\
    \n>>> int_to_digit_string(1234567890123456789012345678)\n\"1234567890123456789012345678\"\
    \n>>> int_to_digit_string(12345678901234567890123456789)\n\"123456789", "    if\
    \ number == 0 \n        then return \"0\"\n    else if number < 0 \n        then\
    \ return \"-\"\n    else if number < 1000 \n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 10000 \n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%1000)\n\
    \    else if number < 100000 \n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%10000)\n    else\
    \ if number < 1000000 \n        then return int_to_mini_roman(number/10000) +\
    \ int_to_mini_roman(number%10000) + int_to_mini_roman(number%100000)\n    else\
    \ if number < 10000000 \n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%100000)\n    else\
    \ if number < 100000000 \n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%10000000)\n \
    \   else if number < 1000000000 \n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%100000000)\n\
    \    else if number < 10000000000 \n        then return int_to_mini_roman(number/100000000)\
    \ + int_to_mini_roman(number%100000000) + int_to_mini_roman(number%1000000000)\n\
    \    else if number < 100000000000 \n        then return int_to_mini_roman(number/1000000000)\
    \ + int_to_mini_roman(number%1000000000) + int_to_mini_roman(number%10000000000)\n\
    \    else if number < 1000000000000 \n        then return int_to_mini_roman(number/100000000000)\
    \ + int_to_mini_roman(number%100000000000) + int_to_mini_roman(number%1000000000000)\n\
    \    else if number < 10000000000000 \n        then return int_to_mini_roman(number/1000000000000)\
    \ + int_to_mini_roman(number%100", "    roman = roman_numerals(number)\n    roman\
    \ = roman.map(&lowercase)\n    roman = roman.map(&char(\"0\"))\n    roman = roman.map(&char(\"\
    1\"))\n    roman = roman.map(&char(\"2\"))\n    roman = roman.map(&char(\"3\"\
    ))\n    roman = roman.map(&char(\"4\"))\n    roman = roman.map(&char(\"5\"))\n\
    \    roman = roman.map(&char(\"6\"))\n    roman = roman.map(&char(\"7\"))\n  \
    \  roman = roman.map(&char(\"8\"))\n    roman = roman.map(&char(\"9\"))\n    roman\
    \ = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"X\"))\n    roman =\
    \ roman.map(&char(\"L\"))\n    roman = roman.map(&char(\"C\"))\n    roman = roman.map(&char(\"\
    D\"))\n    roman = roman.map(&char(\"M\"))\n    roman = roman.map(&char(\"V\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 10 \n        then return \"x\"\n    else if number < 100 \n        then return\
    \ \"c\"\n    else if number < 1000 \n        then return \"m\"\n    else if number\
    \ < 10000 \n        then return \"d\"\n    else if number < 100000 \n        then\
    \ return \"l\"\n    else if number < 1000000 \n        then return \"xl\"\n  \
    \  else if number < 10000000 \n        then return \"xc\"\n    else if number\
    \ < 100000000 \n        then return \"xm\"\n    else if number < 1000000000 \n\
    \        then return \"xd\"\n    else if number < 10000000000 \n        then return\
    \ \"xl\"\n    else if number < 100000000000 \n        then return \"xc\"\n   \
    \ else if number < 1000000000000 \n        then return \"xm\"\n    else if number\
    \ < 10000000000000 \n        then return \"xd\"\n    else if number < 100000000000000\
    \ \n        then return \"xl\"\n    else if number < 1000000000000000 \n     \
    \   then return \"xc\"\n    else if number < 10000000000000000 \n        then\
    \ return \"xm\"\n    else if number < 100000000000000000 \n        then return\
    \ \"xd\"\n    else if number < 1000000000000000000 \n        then return \"xl\"\
    \n    else if number < 10000000000000000000 \n        then return \"xc\"\n   \
    \ else if number < 100000000000000000000 \n        then return \"xm\"\n    else\
    \ if number < 1000000000000000000000 \n        then return \"xd\"\n    else if\
    \ number < 10000000000000000000000 \n        then return \"xl\"\n    else if number\
    \ < 100000000000000000000000 \n        then return \"xc\"\n    else if number\
    \ < 1000000000000000000000000 \n        then return \"xm\"\n    else if number\
    \ < 10000000000000000000000000 \n        then return \"xd\"\n    else if number\
    \ < 100000000000000000000000000 \n        then return \"xl\"\n    else if number\
    \ < 1000000000000000000000000000 \n        then return \"xc\"\n    else if number\
    \ < 10000000000000000000000000000 \n        then return \"xm\"\n    else if number\
    \ < 100000000000000000000000000000 \n        then return \"xd\"\n    else if number\
    \ < 1000000000000000000000000000000 \n        then return \"xl\"\n    else if ",
  "    roman = roman_to_int()\n    roman = roman[number]\n    return roman\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n   \
    \     throw(ArgumentError(\"Invalid input: number must be between 1 and 1000\"\
    ))\n    end\n    roman = Int64[]\n    roman = roman.push(\"M\")\n    roman = roman.push(\"\
    CM\")\n    roman = roman.push(\"D\")\n    roman = roman.push(\"CD\")\n    roman\
    \ = roman.push(\"C\")\n    roman = roman.push(\"XC\")\n    roman = roman.push(\"\
    L\")\n    roman = roman.push(\"XL\")\n    roman = roman.push(\"X\")\n    roman\
    \ = roman.push(\"IX\")\n    roman = roman.push(\"V\")\n    roman = roman.push(\"\
    IV\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman\
    \ = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"\
    I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman\
    \ = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"\
    I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman\
    \ = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"\
    I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman\
    \ = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"\
    I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman\
    \ = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"\
    I\")\n    roman = roman.push(\"I\")\n    roman = roman.push(\"I\")\n    roman\
    \ = roman.push(\"I", "    roman_numerals = roman_numerals(number)\n    roman_numerals.sort!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numerals.reverse!\n    roman_numerals.reverse!\n    roman_numerals.reverse!\n\
    \    roman_numer", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = String[]\n    roman[1] = roman[2] = roman[3]\
    \ = roman[4] = roman[5] = roman[6] = roman[7] = roman[8] = roman[9] = roman[10]\
    \ = roman[11] = roman[12] = roman[13] = roman[14] = roman[15] = roman[16] = roman[17]\
    \ = roman[18] = roman[19] = roman[20] = roman[21] = roman[22] = roman[23] = roman[24]\
    \ = roman[25] = roman[26] = roman[27] = roman[28] = roman[29] = roman[30] = roman[31]\
    \ = roman[32] = roman[33] = roman[34] = roman[35] = roman[36] = roman[37] = roman[38]\
    \ = roman[39] = roman[40] = roman[41] = roman[42] = roman[43] = roman[44] = roman[45]\
    \ = roman[46] = roman[47] = roman[48] = roman[49] = roman[50] = roman[51] = roman[52]\
    \ = roman[53] = roman[54] = roman[55] = roman[56] = roman[57] = roman[58] = roman[59]\
    \ = roman[60] = roman[61] = roman[62] = roman[63] = roman[64] = roman[65] = roman[66]\
    \ = roman[67] = roman[68] = roman[69] = roman[70] = roman[71] = roman[72] = roman[73]\
    \ = roman[74] = roman[75] = roman[76] = roman[77] = roman[78] = roman[79] = roman[80]\
    \ = roman[81] = roman[82] = roman[83] = roman[84] = roman[85] = roman[86] = roman[87]\
    \ = roman[88] = roman[89] = roman[90] = roman[91] = roman[92] = roman[93] = roman[94]\
    \ = roman[95] = roman[96] = roman[97] = roman[98] = roman[99] = roman[100] = roman[101]\
    \ = roman[102] = roman[103] = roman[104] = ", "    if number < 1 || number > 1000\
    \ \n        error(\"Int must be between 1 and 1000\")\n    end\n    roman = \"\
    \"\n    roman_digits = Int64[]\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_digits.push(number)\n    roman_digits.push(number)\n    roman_digits.push(number)\n\
    \    roman_", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    )\n    end\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\"\
    , \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals[0..(length(roman_numerals)-1)]\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_", " \
    \   if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = roman_numerals_table()\n    roman_numerals_length = length(roman_numerals)\n\
    \    roman_numerals_index = 0\n    roman_numerals_index += roman_numerals_length\n\
    \    roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += ro", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\")\n    end\n    roman = \"\"\n\
    \    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = [\"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals[0..(length(roman_numerals)\
    \ - 1)]\n    for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman_numeral_reverse = roman_numerals_reverse[roman_numerals_reverse.index(roman_numeral)..end]\n\
    \            roman_numeral_reverse = roman_numeral_reverse.reverse()\n       \
    \     roman_numeral += roman_numeral_reverse\n        end\n    end\n    return\
    \ roman\nend", "    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\"\
    , \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n    ]\n    roman_numerals_reversed = [\n        \"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman_numerals = Dict(\"I\" =>\
    \ 1, \"V\" => 5, \"X\" => 10, \"L\" => 50,\n                         \"C\" =>\
    \ 100, \"D\" => 500, \"M\" => 1000)\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ 1, \"V\" => 5, \"X\" => 10,\n                                 \"L\" => 50, \"\
    C\" => 100, \"D\" => 500,\n                                 \"M\" => 1000)\n \
    \   roman_numerals_reverse[\"XII\"] = 5\n    roman_numerals_reverse[\"XIII\"]\
    \ = 10\n    roman_numerals_reverse[\"IV\"] = 5\n    roman_numerals_reverse[\"\
    VI\"] = 5\n    roman_numerals_reverse[\"VII\"] = 10\n    roman_numerals_reverse[\"\
    VIII\"] = 5\n    roman_numerals_reverse[\"IX\"] = 10\n    roman_numerals_reverse[\"\
    X\"] = 10\n    roman_numerals_reverse[\"XI\"] = 10\n    roman_numerals_reverse[\"\
    XII\"] = 10\n    roman_numerals_reverse[\"XIV\"] = 10\n    roman_numerals_reverse[\"\
    XV\"] = 10\n    roman_numerals_reverse[\"XVI\"] = 10\n    roman_numerals_reverse[\"\
    XVII\"] = 10\n    roman_numerals_reverse[\"XVIII\"] = 10\n    roman_numerals_reverse[\"\
    XIX\"] = 10\n    roman_numerals_reverse[\"XX\"] = 10\n    roman_numerals_reverse[\"\
    XXX\"] = 10\n    roman_numerals_reverse[\"XL\"] = 50\n    roman_numerals_reverse[\"\
    L\"] = 50\n    roman_numerals_reverse[\"LX\"] = 50\n    roman_numerals_reverse[\"\
    LXX\"] = 50\n    roman_numerals_reverse[\"LXXX\"] = 50\n    roman_numerals_reverse[\"\
    XC\"] = 100\n    roman_numerals_reverse[\"C\"] = 100\n    roman_numerals_reverse[\"\
    CC\"] = 100\n    roman_numerals_reverse[\"CD\"] = 100\n    roman_numerals_reverse[\"\
    CM\"] = 100\n    roman_numerals_reverse[\"D\"] = 500\n    roman_numerals_reverse[\"\
    DC\"] = 500\n    roman_numerals_reverse[\"DCC\"] = 500\n    roman_numerals_reverse[\"\
    DCD\"] = 500", "    roman = roman_to_int(number)\n    roman_str = roman_to_str(roman)\n\
    \    roman_str = roman_str[roman_str.length..-1]\n    return roman_str\nend",
  "    if number == 0 \n        then return \"0\"\n    else if number < 0 \n     \
    \   then return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000\n        then return int_to_mini_roman(number/10000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000\n        then return\
    \ int_to_mini_roman(number/100000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000\n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000000\n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000\n        then\
    \ return int_to_mini_roman(number/100000000) + int_to_mini_roman(", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_length = length(roman_numerals)\n\
    \    roman_numerals_index = 0\n    roman_numerals_string = \"\"\n    while roman_numerals_index\
    \ < roman_numerals_length\n        if roman_numerals[roman_numerals_index] ==\
    \ number\n            roman_numerals_string += roman_numerals[roman_numerals_index]\n\
    \            roman_numerals_index += 1\n        else\n            roman_numerals_string\
    \ += roman_numerals[roman_numerals_index + 1]\n            roman_numerals_index\
    \ += 2\n        end\n    end\n    return roman_numerals_string\nend\n</cell>\n\
    <code language=julia-1.5>", "    roman = \"\"\n    roman_digits = \"\"\n    \n\
    \    if number < 1 \n        error(\"number must be positive\")\n    \n    if\
    \ number < 100\n        roman = \"x\"\n        roman_digits = string_to_roman_digits(number)\n\
    \    \n    elseif number < 1000\n        roman = \"l\"\n        roman_digits =\
    \ string_to_roman_digits(number)\n    \n    elseif number < 10000\n        roman\
    \ = \"c\"\n        roman_digits = string_to_roman_digits(number)\n    \n    elseif\
    \ number < 100000\n        roman = \"d\"\n        roman_digits = string_to_roman_digits(number)\n\
    \    \n    elseif number < 1000000\n        roman = \"m\"\n        roman_digits\
    \ = string_to_roman_digits(number)\n    \n    elseif number < 10000000\n     \
    \   roman = \"i\"\n        roman_digits = string_to_roman_digits(number)\n   \
    \ \n    elseif number < 100000000\n        roman = \"v\"\n        roman_digits\
    \ = string_to_roman_digits(number)\n    \n    elseif number < 1000000000\n   \
    \     roman = \"f\"\n        roman_digits = string_to_roman_digits(number)\n \
    \   \n    elseif number < 10000000000\n        roman = \"p\"\n        roman_digits\
    \ = string_to_roman_digits(number)\n    \n    elseif number < 100000000000\n \
    \       roman = \"n\"\n        roman_digits = string_to_roman_digits(number)\n\
    \    \n    elseif number < 1000000000000\n        roman = \"k\"\n        roman_digits\
    \ = string_to_roman_digits(number)\n    \n    elseif number < 10000000000000\n\
    \        roman = \"q\"\n        roman_digits = string_to_roman_digits(number)\n\
    \    \n    elseif number < 100000000000000\n        roman = \"x\"\n        roman_digits\
    \ = string_to_roman_digits(number)\n    \n    elseif number < 1000000000000000\n\
    \        roman = \"y\"\n        roman_digits = string_to_roman_digits(number)\n\
    \    \n    elseif number < 10000000000000000\n        roman = \"z\"\n        roman_digits\
    \ = string_to_roman_digits(number)\n    \n    else\n        error(\"number too\
    \ large\")\n    end\n    \n    return roman_digits + roman\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in upper", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\n        roman\
    \ = romans[number]\n        roman = roman.substring(1,roman.length)\n        return\
    \ roman\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_table = roman_numerals[roman_numerals.keys[roman_numerals.keys.index(number)]]\n\
    \    roman_numerals_table\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n  \
    \  roman_numerals = roman_numerals_array\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_numerals[number] = roman_numerals[number]\n\
    \    roman_numerals[number] = roman_numerals[number]\n    roman_numerals[number]\
    \ = roman_numerals[number]\n    roman_", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = romans[number]\n    roman\
    \ = roman.substring(1,roman.length)\n    return roman\nend", "    if number <\
    \ 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_table()\n        roman_numeral = \"\"\n        for roman_numeral_char\
    \ in roman_numerals[number-1] \n            roman_numeral += roman_numeral_char\n\
    \        return roman_numeral.lower()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_to_mini_roman(number)\n        roman = roman.lower()\n\
    \        return roman\nend", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = Int64[]\n    roman[1] = convert(number)\n\
    \    roman[2] = convert(number * 10)\n    roman[3] = convert(number * 100)\n \
    \   roman[4] = convert(number * 1000)\n    roman[5] = convert(number * 10000)\n\
    \    roman[6] = convert(number * 100000)\n    roman[7] = convert(number * 1000000)\n\
    \    roman[8] = convert(number * 10000000)\n    roman[9] = convert(number * 100000000)\n\
    \    roman[10] = convert(number * 1000000000)\n    roman[11] = convert(number\
    \ * 10000000000)\n    roman[12] = convert(number * 100000000000)\n    roman[13]\
    \ = convert(number * 1000000000000)\n    roman[14] = convert(number * 10000000000000)\n\
    \    roman[15] = convert(number * 100000000000000)\n    roman[16] = convert(number\
    \ * 1000000000000000)\n    roman[17] = convert(number * 10000000000000000)\n \
    \   roman[18] = convert(number * 100000000000000000)\n    roman[19] = convert(number\
    \ * 100000000000000001)\n    roman[20] = convert(number * 100000000000000002)\n\
    \    roman[21] = convert(number * 100000000000000003)\n    roman[22] = convert(number\
    \ * 100000000000000004)\n    roman[23] = convert(number * 100000000000000005)\n\
    \    roman[24] = convert(number * 100000000000000006)\n    roman[25] = convert(number\
    \ * 100000000000000007)\n    roman[26] = convert(number * 100000000000000008)\n\
    \    roman[27] = convert(number * 100000000000000009)\n    roman[28] = convert(number\
    \ * 100000000000000010)\n    roman[29] = convert(number * 100000000000000011)\n\
    \    roman[30] = convert(number * 100000000000000012)\n    roman[31] = convert(number\
    \ * 100000000000000013)\n    roman[32] = convert(number * 100000000000000014)\n\
    \    roman[33] = convert(number * 100000000000000015)\n    roman[34] = convert(number\
    \ * 100000000000000016)\n    roman[35] = convert(number * 100000000000000017)\n\
    \    roman[36] = convert(number * 100000000000000018)\n    roman[37] = convert(number\
    \ * 100000000000000019)\n    roman[38] = convert(number * 100000000000000020)\n",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals_table[number]\n        roman_numerals\
    \ = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numer", "    roman_numerals = roman_numerals_table()\n    roman_numerals_length\
    \ = length(roman_numerals)\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numer",
  "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n    roman\
    \ = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n    roman =\
    \ roman.map(&char(\"c\"))\n    roman = roman.map(&char(\"d\"))\n    roman = roman.map(&char(\"\
    v\"))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"\
    ))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"x\"))\n\
    \    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))\n  \
    \  roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"x\"))\n    roman\
    \ = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))\n    roman =\
    \ roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"\
    l\"))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"\
    ))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"l\"))\n\
    \    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n  \
    \  roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"l\"))\n    roman\
    \ = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n    roman =\
    \ roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"\
    x\"))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"x\"\
    ))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))",
  "    if number < 1 || number > 1000 \n        error(\"number must be between 1 and\
    \ 1000\")\n    roman = \"\"\n    roman_numerals = roman_numerals(number)\n   \
    \ for roman_numeral in roman_numerals \n        roman = roman + roman_numeral\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number <\
    \ 1 || number > 1000 \n        error(\"Invalid input: number must be between 1\
    \ and 1000\")\n    end\n    roman = romans[number]\n    roman = roman.split(\"\
    \")\n    roman = roman.map(&:capitalize)\n    roman = roman.join(\"\")\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = \"\"\n    roman_digits\
    \ = \"\"\n    \n    if number < 1 \n        error(\"number must be positive\"\
    )\n    \n    if number < 100\n        roman = \"x\"\n    \n    if number < 500\n\
    \        roman = \"l\"\n    \n    if number < 1000\n        roman = \"c\"\n  \
    \  \n    if number < 5000\n        roman = \"d\"\n    \n    if number < 10000\n\
    \        roman = \"m\"\n    \n    if number < 50000\n        roman = \"f\"\n \
    \   \n    if number < 100000\n        roman = \"p\"\n    \n    if number < 500000\n\
    \        roman = \"s\"\n    \n    if number < 1000000\n        roman = \"x\"\n\
    \    \n    if number < 5000000\n        roman = \"l\"\n    \n    if number < 10000000\n\
    \        roman = \"c\"\n    \n    if number < 50000000\n        roman = \"d\"\n\
    \    \n    if number < 100000000\n        roman = \"m\"\n    \n    if number <\
    \ 500000000\n        roman = \"f\"\n    \n    if number < 1000000000\n       \
    \ roman = \"p\"\n    \n    if number < 5000000000\n        roman = \"s\"\n   \
    \ \n    if number < 10000000000\n        roman = \"x\"\n    \n    if number <\
    \ 50000000000\n        roman = \"l\"\n    \n    if number < 100000000000\n   \
    \     roman = \"c\"\n    \n    if number < 500000000000\n        roman = \"d\"\
    \n    \n    if number < 1000000000000\n        roman = \"m\"\n    \n    if number\
    \ < 5000000000000\n        roman = \"f\"\n    \n    if number < 10000000000000\n\
    \        roman = \"p\"\n    \n    if number < 50000000000000\n        roman =\
    \ \"s\"\n    \n    if number < 100000000000000\n        roman = \"x\"\n    \n\
    \    if number < 500000000000000\n        roman = \"l\"\n    \n    if number <\
    \ 1000000000000000\n        roman = \"c\"\n    \n    if number < 5000000000000000\n\
    \        roman = \"d\"\n    \n    if number < 10000000000000000\n        roman\
    \ = \"m\"\n    \n    if number < 50000000000000000\n        roman = \"f\"\n  \
    \  \n    if number < 100000000000000000\n        roman = \"p\"\n    \n    if number\
    \ < 500000000000000000\n        roman = \"s\"\n    \n    if number < 1000000000000000000\n\
    \        roman", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = Int64[]\n    roman[1] = [\"M\"]\n    roman[2]\
    \ = [\"D\", \"C\", \"L\", \"X\", \"V\", \"I\"]\n    roman[3] = [\"M\", \"C\",\
    \ \"D\", \"L\", \"X\", \"V\", \"I\"]\n    roman[4] = [\"M\", \"C\", \"D\", \"\
    L\", \"X\", \"V\"]\n    roman[5] = [\"M\", \"C\", \"D\", \"L\", \"X\"]\n    roman[6]\
    \ = [\"M\", \"C\", \"D\", \"L\"]\n    roman[7] = [\"M\", \"C\", \"D\"]\n    roman[8]\
    \ = [\"M\", \"C\"]\n    roman[9] = [\"M\"]\n    roman[10] = [\"C\", \"D\", \"\
    L\", \"X\", \"V\", \"I\"]\n    roman[11] = [\"C\", \"D\", \"L\", \"X\", \"V\"\
    ]\n    roman[12] = [\"C\", \"D\", \"L\", \"X\"]\n    roman[13] = [\"C\", \"D\"\
    , \"L\"]\n    roman[14] = [\"C\", \"D\"]\n    roman[15] = [\"C\"]\n    roman[16]\
    \ = [\"D\", \"C\", \"L\", \"X\", \"V\", \"I\"]\n    roman[17] = [\"D\", \"C\"\
    , \"L\", \"X\", \"V\"]\n    roman[18] = [\"D\", \"C\", \"L\", \"X\"]\n    roman[19]\
    \ = [\"D\", \"C\", \"L\"]\n    roman[20] = [\"D\", \"C\"]\n    roman[21] = [\"\
    D\"]\n    roman[22] = [\"C\", \"D\", \"L\", \"X\", \"V\", \"I\"]\n    roman[23]\
    \ = [\"C\", \"D\", \"L\", \"X\", \"V\"]\n    roman[24] = [\"C\", \"D\", \"L\"\
    , \"X\"]\n    roman[25] = [\"C\", \"D\", \"L\"]\n    roman[26] = [\"C\", \"D\"\
    ]\n    roman[27] = [\"C\"]\n    roman[28] = [\"D\", \"C\", \"L\", \"X\", \"V\"\
    , \"I\"]\n    roman[29] = [\"D\", \"C\", \"L\", \"X\", \"V\"]\n    roman[30] =\
    \ [\"D\", \"C\", \"L\", \"X\"]\n    roman[31] = [\"D\", \"C\", \"L\"]\n    roman[32]\
    \ = [\"D\", \"C\"]\n    roman[33] = [\"D\"]\n    roman", "    if number < 1 ||\
    \ number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\"\
    \ => \"c\", \"D\" => \"d\", \"M\" => \"m\")\n    roman_numerals_reverse = Dict(\"\
    i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\",\
    \ \"d\" => \"D\", \"m\" => \"M\")\n    roman_numerals_reverse[\"I\"] = \"i\"\n\
    \    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"X\"]\
    \ = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"", "    if number == 0 \n\
    \        then return \"0\"\n    else if number < 0 \n        then return \"-\"\
    \n    else if number < 100\n        then return int_to_mini_roman(number//10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number//100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number//1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 5000\n        then return int_to_mini_roman(number//5000)\
    \ + int_to_mini_roman(number%5000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 10000\n        then return\
    \ int_to_mini_roman(number//10000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%5000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000\n        then return int_to_mini_roman(number//100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%5000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000000\n        then return int_to_mini_roman(number//1000000) + int_to_mini_roman(number%1000000)\
    \ + int_to_mini_roman(number%5000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 10000000\n        then\
    \ return int_to_mini_roman(number//10000000) + int_to_mini_roman(number%10000000)\
    \ + int_to_mini_roman(number%5000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse.reverse()\n    roman_numerals_reverse.reverse()\n\
    \    ", "    roman = \"\"\n    \n    if number < 1 \n        roman = \"x\"\n \
    \       return roman\n    \n    if number < 10 \n        roman = \"x\"\n     \
    \   return roman\n    \n    if number < 100 \n        roman = \"x\"\n        return\
    \ roman\n    \n    if number < 1000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 10000 \n        roman = \"x\"\n        return roman\n \
    \   \n    if number < 100000 \n        roman = \"x\"\n        return roman\n \
    \   \n    if number < 1000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 10000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 100000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 1000000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 10000000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 100000000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 1000000000000 \n        roman = \"x\"\n        return roman\n\
    \    \n    if number < 10000000000000 \n        roman = \"x\"\n        return\
    \ roman\n    \n    if number < 100000000000000 \n        roman = \"x\"\n     \
    \   return roman\n    \n    if number < 1000000000000000 \n        roman = \"\
    x\"\n        return roman\n    \n    if number < 10000000000000000 \n        roman\
    \ = \"x\"\n        return roman\n    \n    if number < 100000000000000000 \n \
    \       roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000000000000\
    \ \n        roman = \"", "    if number == 0 \n        then return \"0\"\n   \
    \ else if number < 0 \n        then return \"-\"\n    else if number < 100\n \
    \       then return int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number//100)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000\n        then return int_to_mini_roman(number//1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000\n        then return int_to_mini_roman(number//10000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000\n        then return int_to_mini_roman(number//100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 1000000\n        then return\
    \ int_to_mini_roman(number//1000000) + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000000\n        then return int_to_mini_roman(number//10000000) +\
    \ int_to_mini_roman(number%10000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 100000000\n        then return int_to_mini_roman(number//100000000)\
    \ + int_to_mini_roman(number%100000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 100", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    end\n    roman = \"\"\n    roman_numerals = [\n        \"M\",\
    \ \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n    ]\n    for roman_numeral in roman_numerals\n        if number\
    \ >= roman_numeral\n            roman = roman_numeral + roman\n            number\
    \ -= roman_numeral\n        end\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    roman = roman_to_int(number)\n    roman = roman.to_string()\n\
    \    roman = roman.chars().filter(elem -> elem >= 'a' && elem <= 'z').collect{|elem|\
    \ elem.to_s() + elem}.join(\"\")\n    return roman\nend", "    if number < 1 ||\
    \ number > 1000 \n        error(\"number must be between 1 and 1000\")\n    else\
    \ \n        roman = roman_numeral(number)\n        roman = roman.lower()\n   \
    \     return roman\nend", "    roman = String.empty\n    roman = roman.concat\
    \ [\n        roman.concat [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\"\
    , \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    ]\n    roman = roman.concat\
    \ [\n        roman.concat [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"\
    , \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"]\n    ]\n    roman = roman.concat [\n\
    \        roman.concat [\"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\"\
    , \"XIX\", \"XX\", \"XXI\", \"XXII\"]\n    ]\n    roman = roman.concat [\n   \
    \     roman.concat [\"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\"\
    , \"XXIX\", \"XXX\", \"XXXI\", \"XXXII\"]\n    ]\n    roman = roman.concat [\n\
    \        roman.concat [\"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"XXXVII\"\
    , \"XXXVIII\", \"XXXIX\", \"XXXXX\", \"XXXXXI\", \"XXXXXII\"]\n    ]\n    roman\
    \ = roman.concat [\n        roman.concat [\"XXXXXIII\", \"XXXXXIV\", \"XXXXXV\"\
    , \"XXXXXVI\", \"XXXXXVII\", \"XXXXXVIII\", \"XXXXXIX\", \"XXXXXX\", \"XXXXXXI\"\
    , \"XXXXXXII\"]\n    ]\n    roman = roman.concat [\n        roman.concat [\"XXXXXXIII\"\
    , \"XXXXXXIV\", \"XXXXXXV\", \"XXXXXXVI\", \"XXXXXXVII\", \"XXXXXXVIII\", \"XXXXXXIX\"\
    , \"XXXXXV\", \"XXXXXVI\", \"XXXXXVII\", \"XXXXXVIII\", \"XXXXXIX\", \"XXXXXXVIII\"\
    , \"XXXXXXIX\", \"XXXXXXVII\", \"XXXXXXVIII\", \"XXXXXXIX\", \"XXXXXXVI\", \"\
    XXXXXXV\", \"XXXXXXVI\", \"XXXXXXVII\", \"XXXXXXVIII\", \"XXXXXXIX\", \"XXXXXXI\"\
    , \"XXXXXXI\", \"XXXXXXII\", \"XXXXXXIII\", \"XXXXXXIV\", \"XXXXXXIV\", \"XXXXXXIV\"\
    , \"XXXXXXIV\", \"XXXXXXIV\", \"XXXXXXIV\", \"XXXXXXIV", "    if number < 1 ||\
    \ number > 1000\n        error(\"Invalid input\")\n    end\n    roman = romans[number]\n\
    \    return roman\nend", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input: number must be between 1 and 1000\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_reversed = roman_numerals_reversed_table()\n\
    \    roman_numerals_reversed[1] = roman_numerals[1]\n    roman_numerals_reversed[2]\
    \ = roman_numerals[2]\n    roman_numerals_reversed[3] = roman_numerals[3]\n  \
    \  roman_numerals_reversed[4] = roman_numerals[4]\n    roman_numerals_reversed[5]\
    \ = roman_numerals[5]\n    roman_numerals_reversed[6] = roman_numerals[6]\n  \
    \  roman_numerals_reversed[7] = roman_numerals[7]\n    roman_numerals_reversed[8]\
    \ = roman_numerals[8]\n    roman_numerals_reversed[9] = roman_numerals[9]\n  \
    \  roman_numerals_reversed[10] = roman_numerals[10]\n    roman_numerals_reversed[11]\
    \ = roman_numerals[11]\n    roman_numerals_reversed[12] = roman_numerals[12]\n\
    \    roman_numerals_reversed[13] = roman_numerals[13]\n    roman_numerals_reversed[14]\
    \ = roman_numerals[14]\n    roman_numerals_reversed[15] = roman_numerals[15]\n\
    \    roman_numerals_reversed[16] = roman_numerals[16]\n    roman_numerals_reversed[17]\
    \ = roman_numerals[17]\n    roman_numerals_reversed[18] = roman_numerals[18]\n\
    \    roman_numerals_reversed[19] = roman_numerals[19]\n    roman_numerals_reversed[20]\
    \ = roman_numerals[20]\n    roman_numerals_reversed[21] = roman_numerals[21]\n\
    \    roman_numerals_reversed[22] = roman_numerals[22]\n    roman_numerals_reversed[23]\
    \ = roman_numerals[23]\n    roman_numerals_reversed[24] = roman_numerals[24]\n\
    \    roman_numerals_reversed[25] = roman_numerals[25]\n    roman_numerals_reversed[26]\
    \ = roman_numerals[26]\n    roman_numerals_", "    if number == 0 \n        then\
    \ return \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if\
    \ number < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000\n        then return int_to_mini_roman(number/10000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000\n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000000\n        then return int_to_mini_roman(number/1000000) + int_to_mini_roman(number%1000000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000000\n        then return int_to_mini_roman(number/10000000) +\
    \ int_to_mini_roman(number%10000000) + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000\n        then\
    \ return int_to_mini_roman(number/100000000) + int_to_mini_roman(", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_table = roman_numerals[roman_numerals.keys[roman_numerals.keys.index(number)]:end]\n\
    \    return roman_numerals_table[roman_numerals_table.keys.index(number)]\nend",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\n\
    \        roman_numerals = roman_numerals_generator()\n        roman_numerals_string\
    \ = roman_numerals.next()\n        roman_numerals_string = roman_numerals_string[number-1..end]\n\
    \        return roman_numerals_string.lower()\n    end\nend\n</code>\n<|/ a tags=julia,roman-numerals\
    \ |>\n<| c |>\nThank you for your answer. Unfortunately, I cannot use any external\
    \ packages. I edited my question to clarify this.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does not use any external packages.\n<|/ c |>\n<| c |>\nThank\
    \ you for your answer. Unfortunately, I cannot use any external packages. I edited\
    \ my question to clarify this.\n<|/ c |>\n<| c |>\nI added a solution that does\
    \ not use any external packages.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a Julia\
    \ package for this: https://github.com/jamiewilson/roman-numerals\n<code>\njulia>\
    \ using RomanNumerals", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    end\n    roman = \"\"\n    digits = Int64(ceil(log10(number)))\n\
    \    roman_digits = Int64(ceil(log10(roman.length)))\n    \n    for digit in digits:\n\
    \        roman_digit = Int64(ceil(log10(digit)))\n        if roman_digit > roman_digits\
    \ \n            error(\"Invalid input\")\n        end\n        roman_digit = roman_digit\
    \ - roman_digits\n        roman_digit = roman_digit + roman.length\n        roman_digit\
    \ = roman_digit - digit\n        roman = roman.insert(roman_digit, roman[roman_digit])\n\
    \    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number == 0 \n        then return \"0\"\n    else if number < 0 \n        then\
    \ return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number//10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number//100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number//1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman\
    \ = \"\"\n    roman_numerals = roman_numerals()\n    \n    for numeral in roman_numerals[number]:\n\
    \        if numeral > 9:\n            roman += numeral - 10\n        else:\n \
    \           roman += numeral\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = roman_to_int(number)\n    mini_roman = int_to_mini_roman(roman)\n \
    \   return mini_roman\nend", "    if number < 1 \n        error(\"number must\
    \ be positive\")\n    else if number < 1000 \n        error(\"number must be less\
    \ than 1000\")\n    else if number == 1 \n        return \"x\"\n    else \n  \
    \      roman_numerals = roman_numerals(number)\n        roman_numerals_string\
    \ = roman_numerals.map(roman_numeral => roman_numeral.to_lowercase).join\n   \
    \     roman_numerals_string.insert(0, \"x\")\n        return roman_numerals_string\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = \"\"\n    roman_digits\
    \ = \"\"\n    \n    if number < 1 \n        error(\"The number must be positive\"\
    )\n    \n    if number < 100\n        roman = \"x\"\n    elseif number < 400\n\
    \        roman = \"l\"\n    elseif number < 900\n        roman = \"c\"\n    elseif\
    \ number < 4000\n        roman = \"d\"\n    elseif number < 8000\n        roman\
    \ = \"m\"\n    elseif number < 16000\n        roman = \"f\"\n    elseif number\
    \ < 32000\n        roman = \"p\"\n    elseif number < 64000\n        roman = \"\
    n\"\n    elseif number < 128000\n        roman = \"k\"\n    else\n        error(\"\
    The number must be less than or equal to 128000\")\n    end\n    \n    roman_digits\
    \ = roman\n    \n    for i = 2 to (number-1)\n        roman_digits = roman_digits\
    \ * \"i\"\n    end\n    \n    return roman_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ < 1000 \n        error(\"number must be less than 1000\")\n    else if number\
    \ == 1 \n        return \"x\"\n    else if number == 2 \n        return \"ix\"\
    \n    else if number == 3 \n        return \"xix\"\n    else if number == 4 \n\
    \        return \"lx\"\n    else if number == 5 \n        return \"ixl\"\n   \
    \ else if number == 6 \n        return \"xl\"\n    else if number == 7 \n    \
    \    return \"ixl\"\n    else if number == 8 \n        return \"lxl\"\n    else\
    \ if number == 9 \n        return \"xixl\"\n    else if number == 10 \n      \
    \  return \"ixl\"\n    else if number == 11 \n        return \"lxix\"\n    else\
    \ if number == 12 \n        return \"ixlx\"\n    else if number == 13 \n     \
    \   return \"lxlx\"\n    else if number == 14 \n        return \"xixlx\"\n   \
    \ else if number == 15 \n        return \"ixlx\"\n    else if number == 16 \n\
    \        return \"lxixl\"\n    else if number == 17 \n        return \"ixlx\"\n\
    \    else if number == 18 \n        return \"lxixlx\"\n    else if number == 19\
    \ \n        return \"xixlx\"\n    else if number == 20 \n        return \"ixlx\"\
    \n    else if number == 21 \n        return \"lxixlx\"\n    else if number ==\
    \ 22 \n        return \"ixlx\"\n    else if number == 23 \n        return \"lxixlx\"\
    \n    else if number == 24 \n        return \"ixlx\"\n    else if number == 25\
    \ \n        return \"lxixlx\"\n    else if number == 26 \n        return \"ixlx\"\
    \n    else if number == 27 \n        return \"lxixlx\"\n    else if number ==\
    \ 28 \n        return \"ixlx\"\n    else if number == 29 \n        return \"lxixlx\"\
    \n    else if number == 30 \n        return \"ixlx\"\n    else if number == 31\
    \ \n        return \"lxixlx\"\n    else if number == 32 \n        return \"ixlx\"\
    \n    else if number == 33 \n        return \"lxixlx\"\n    else if number ==\
    \ 34 \n        return \"ixlx\"\n    else if number == 35 \n        return \"lxixlx\"\
    \n    else if number == 36 \n        return \"ixlx\"\n    else if number == 37\
    \ \n", "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n\
    \    end\n    roman = String[]\n    roman[1] = roman[2] = roman[3] = roman[4]\
    \ = roman[5] = roman[6] = roman[7] = roman[8] = roman[9] = roman[10] = roman[11]\
    \ = roman[12] = roman[13] = roman[14] = roman[15] = roman[16] = roman[17] = roman[18]\
    \ = roman[19] = roman[20] = roman[21] = roman[22] = roman[23] = roman[24] = roman[25]\
    \ = roman[26] = roman[27] = roman[28] = roman[29] = roman[30] = roman[31] = roman[32]\
    \ = roman[33] = roman[34] = roman[35] = roman[36] = roman[37] = roman[38] = roman[39]\
    \ = roman[40] = roman[41] = roman[42] = roman[43] = roman[44] = roman[45] = roman[46]\
    \ = roman[47] = roman[48] = roman[49] = roman[50] = roman[51] = roman[52] = roman[53]\
    \ = roman[54] = roman[55] = roman[56] = roman[57] = roman[58] = roman[59] = roman[60]\
    \ = roman[61] = roman[62] = roman[63] = roman[64] = roman[65] = roman[66] = roman[67]\
    \ = roman[68] = roman[69] = roman[70] = roman[71] = roman[72] = roman[73] = roman[74]\
    \ = roman[75] = roman[76] = roman[77] = roman[78] = roman[79] = roman[80] = roman[81]\
    \ = roman[82] = roman[83] = roman[84] = roman[85] = roman[86] = roman[87] = roman[88]\
    \ = roman[89] = roman[90] = roman[91] = roman[92] = roman[93] = roman[94] = roman[95]\
    \ = roman[96] = roman[97] = roman[98] = roman[99] = roman[100] = roman[101] =\
    \ roman[102] = roman[103] = roman", "    if number < 1 || number > 1000 \n   \
    \     error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    for roman_numeral in roman_numerals\n\
    \        if number >= roman_numeral\n            roman_numeral_value = roman_numerals[roman_numerals.index(roman_numeral)]\n\
    \            roman_numeral_value *= number\n            roman_numeral_value %=\
    \ 100\n            roman += roman_numeral_value\n            number -= roman_numeral_value\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"\
    L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\",\
    \ \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"\
    c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\"\
    \ => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"\
    M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\",\
    \ \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"\
    c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\"\
    \ => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"\
    M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\",\
    \ \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"\
    c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\"\
    \ => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"\
    M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\",\
    \ \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"\
    c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\"\
    \ => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"\
    M\" => \"m\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\",\
    \ \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C", "    roman\
    \ = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed.reverse()\n    for roman_numeral\
    \ in roman_numerals\n        if number >= roman_numerals_reversed[roman_numerals.index(roman_numeral)]\
    \ and number < roman_numerals_reversed[roman_numerals.index(roman_numeral) + 1]\n\
    \            roman = roman_numeral + roman\n            number = number - roman_numerals_reversed[roman_numerals.index(roman_numeral)]\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = [\"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    ", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman = romans[number]\n    roman = roman.split(\"i\")[1]\n    roman\
    \ = roman.split(\"v\")[1]\n    roman = roman.split(\"x\")[1]\n    roman = roman.split(\"\
    c\")[1]\n    roman = roman.split(\"d\")[1]\n    roman = roman.split(\"m\")[1]\n\
    \    roman = roman.split(\"l\")[1]\n    roman = roman.split(\"x\")[1]\n    roman\
    \ = roman.split(\"l\")[1]\n    roman = roman.split(\"c\")[1]\n    roman = roman.split(\"\
    m\")[1]\n    roman = roman.split(\"d\")[1]\n    roman = roman.split(\"x\")[1]\n\
    \    roman = roman.split(\"v\")[1]\n    roman = roman.split(\"i\")[1]\n    roman\
    \ = roman.split(\"x\")[1]\n    roman = roman.split(\"l\")[1]\n    roman = roman.split(\"\
    m\")[1]\n    roman = roman.split(\"d\")[1]\n    roman = roman.split(\"c\")[1]\n\
    \    roman = roman.split(\"v\")[1]\n    roman = roman.split(\"i\")[1]\n    roman\
    \ = roman.split(\"x\")[1]\n    roman = roman.split(\"l\")[1]\n    roman = roman.split(\"\
    m\")[1]\n    roman = roman.split(\"d\")[1]\n    roman = roman.split(\"c\")[1]\n\
    \    roman = roman.split(\"v\")[1]\n    roman = roman.split(\"i\")[1]\n    roman\
    \ = roman.split(\"x\")[1]\n    roman = roman.split(\"l\")[1]\n    roman = roman.split(\"\
    m\")[1]\n    roman = roman.split(\"d\")[1]\n    roman = roman.split(\"c\")[1]\n\
    \    roman = roman.split(\"v\")[1]\n    roman = roman.split(\"i\")[1]\n    roman\
    \ = roman.split(\"x\")[1]\n    roman = roman.split(\"l\")[1]\n    roman = roman.split(\"\
    m\")[1]\n    roman = roman.split(\"d\")[1]\n    roman = roman.split(\"c\")[1]\n\
    \    roman = roman", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\"\
    , \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\")\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\") \n    else \n        roman = roman_numerals(number)\n\
    \        roman = roman.map(&lowercase)\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(", "    roman = \"\"\n    roman_digits = \"\
    M\"\n    roman_digits_length = length(roman_digits)\n    roman_digits_length =\
    \ roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    roman_digits_length = roman_digits_length + roman_digits_length\n    roman_digits_length\
    \ = roman_digits_length + roman_digits_length\n    roman_digits_length = roman_digits_length\
    \ + roman_digits_length\n    roman_digits_length = roman_digits_length + roman_digits_length\n\
    \    ", "    roman = roman_to_int(number)\n    mini_roman = int_to_mini_roman(roman)\n\
    \    return mini_roman\nend", "    roman = roman_to_mini_roman(number)\n    roman\
    \ = roman.substring(0,roman.length()-3)\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    roman_numerals = [\n        \"M\", \"CM\", \"D\"\
    , \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \    ]\n    roman_numerals_reversed = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numer", "    if number == 0\
    \ \n        return \"0\"\n    roman = roman_numeral(number)\n    roman = roman.substring(1,roman.length)\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number ==\
    \ 0 \n        then return \"0\"\n    else if number < 0 \n        then return\
    \ \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 5000\n        then return int_to_mini_roman(number/5000)\
    \ + int_to_mini_roman(number%5000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 10000\n        then return\
    \ int_to_mini_roman(number/10000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%5000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 50000\n        then return int_to_mini_roman(number/50000)\
    \ + int_to_mini_roman(number%50000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%5000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000\n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%50000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%5000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500000\n        then return\
    \ int_to_mini_roman(number/500000) + int_to_mini_roman(number", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\n        roman_numerals\
    \ = roman_numerals_table()\n        roman_numerals_string = roman_numerals[number]\n\
    \        roman_numerals_string = roman_numerals_string[roman_numerals_string.len()-1..]\n\
    \        roman_numerals_string = roman_numerals_string.reverse()\n        roman_numerals_string\
    \ = roman_numerals_string.to_lowercase()\n        return roman_numerals_string\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its decimal equivalent as a string,\n    and return it in lowercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000\n  \
    \      error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_digits =\
    \ Int64[]\n    roman_digits[1] = \"M\"\n    roman_digits[2] = \"CM\"\n    roman_digits[3]\
    \ = \"D\"\n    roman_digits[4] = \"CD\"\n    roman_digits[5] = \"C\"\n    roman_digits[6]\
    \ = \"XC\"\n    roman_digits[7] = \"L\"\n    roman_digits[8] = \"XL\"\n    roman_digits[9]\
    \ = \"X\"\n    roman_digits[10] = \"IX\"\n    roman_digits[11] = \"V\"\n    roman_digits[12]\
    \ = \"IV\"\n    roman_digits[13] = \"I\"\n    roman_digits[14] = \"IU\"\n    roman_digits[15]\
    \ = \"U\"\n    roman_digits[16] = \"UU\"\n    roman_digits[17] = \"U\"\n    roman_digits[18]\
    \ = \"UU\"\n    roman_digits[19] = \"M\"\n    roman_digits[20] = \"MM\"\n    roman_digits[21]\
    \ = \"MMM\"\n    roman_digits[22] = \"MMMM\"\n    roman_digits[23] = \"MMMMM\"\
    \n    roman_digits[24] = \"MMMMMM\"\n    roman_digits[25] = \"MMMMMMM\"\n    roman_digits[26]\
    \ = \"MMMMMMMM\"\n    roman_digits[27] = \"MMMMMMMMM\"\n    roman_digits[28] =\
    \ \"MMMMMMMMMM\"\n    roman_digits[29] = \"MMMMMMMMMMM\"\n    roman_digits[30]\
    \ = \"MMMMMMMMMMMM\"\n    roman_digits[31] = \"MMMMMMMMMMMMM\"\n    roman_digits[32]\
    \ = \"MMMMMMMMMMMMMM\"\n    roman_digits[33] = \"MMMMMMMMMMMMMMM\"\n    roman_digits[34]\
    \ = \"MMMMMMMMMMMMMMMM\"\n    roman_digits[35] = \"MMMMMMMMMMMMMMMMM\"\n    roman_digits[36]\
    \ = \"MMMMMMMMMMMMMMMMMM\"\n    roman_digits[37] = \"MMMMMMMMMMMMMMMMMMM\"\n \
    \   roman_digits[38] = \"MMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[39] = \"MMMMMMMMMMMMMMMMMMMMM\"\
    \n    roman_digits[40] = \"MMMMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[41] = \"\
    MMMMMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[42] = \"MMMMMMMMMMMMMMMMMMMMMMMM\"",
  "    roman = roman_to_int(number)\n    roman = roman.to_string()\n    roman = roman.chars.to_list()\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.join()\n    return roman\n\
    end", "    roman_numerals = roman_numerals_strings(number)\n    roman_numerals_as_strings\
    \ = map(roman_numerals.__getitem__, roman_numerals)\n    return \"\".join(roman_numerals_as_strings)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_digits\
    \ = Int64[]\n    roman_digits[1] = \"I\"\n    roman_digits[2] = \"II\"\n    roman_digits[3]\
    \ = \"III\"\n    roman_digits[4] = \"IV\"\n    roman_digits[5] = \"V\"\n    roman_digits[6]\
    \ = \"VI\"\n    roman_digits[7] = \"VII\"\n    roman_digits[8] = \"VIII\"\n  \
    \  roman_digits[9] = \"IX\"\n    roman_digits[10] = \"X\"\n    roman_digits[11]\
    \ = \"XI\"\n    roman_digits[12] = \"XII\"\n    roman_digits[13] = \"XIII\"\n\
    \    roman_digits[14] = \"XIV\"\n    roman_digits[15] = \"XV\"\n    roman_digits[16]\
    \ = \"XVI\"\n    roman_digits[17] = \"XVII\"\n    roman_digits[18] = \"XVIII\"\
    \n    roman_digits[19] = \"XIX\"\n    roman_digits[20] = \"XX\"\n    roman_digits[21]\
    \ = \"XXI\"\n    roman_digits[22] = \"XXII\"\n    roman_digits[23] = \"XXIII\"\
    \n    roman_digits[24] = \"XXIV\"\n    roman_digits[25] = \"XXV\"\n    roman_digits[26]\
    \ = \"XXVI\"\n    roman_digits[27] = \"XXVII\"\n    roman_digits[28] = \"XXVIII\"\
    \n    roman_digits[29] = \"XXIX\"\n    roman_digits[30] = \"XXX\"\n    roman_digits[31]\
    \ = \"XXXI\"\n    roman_digits[32] = \"XXXII\"\n    roman_digits[33] = \"XXXIII\"\
    \n    roman_digits[34] = \"XXXIV\"\n    roman_digits[35] = \"XXXV\"\n    roman_digits[36]\
    \ = \"XXXVI\"\n    roman_digits[37] = \"XXXVII\"\n    roman_digits[38] = \"XXXVIII\"\
    \n    roman_digits[39] = \"XXXIX\"\n    roman_digits[40] = \"XX\"\n    roman_digits[41]\
    \ = \"XXI\"\n    roman_digits[42] = \"XXII\"\n    roman_digits[43] = \"XXIII\"\
    \n    ", "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    roman = roman.map(&char(\"0\"))\n    roman = roman.map(&char(\"1\"))\n  \
    \  roman = roman.map(&char(\"2\"))\n    roman = roman.map(&char(\"3\"))\n    roman\
    \ = roman.map(&char(\"4\"))\n    roman = roman.map(&char(\"5\"))\n    roman =\
    \ roman.map(&char(\"6\"))\n    roman = roman.map(&char(\"7\"))\n    roman = roman.map(&char(\"\
    8\"))\n    roman = roman.map(&char(\"9\"))\n    roman = roman.map(&char(\"x\"\
    ))\n    roman = roman.map(&char(\"X\"))\n    roman = roman.map(&char(\"L\"))\n\
    \    roman = roman.map(&char(\"C\"))\n    roman = roman.map(&char(\"D\"))\n  \
    \  roman = roman.map(&char(\"M\"))\n    roman = roman.map(&char(\"V\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))", "    if number < 1 || number > 1000 \n        error(\"Invalid input: number\
    \ must be between 1 and 1000\")\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_len = length(roman_numerals)\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len\
    \ = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len + 1\n\
    \    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len\
    \ + 1\n    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len\
    \ = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len + 1\n\
    \    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len\
    \ + 1\n    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len\
    \ = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len + 1\n\
    \    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len\
    \ + 1\n    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len\
    \ = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len + 1\n\
    \    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len\
    \ + 1\n    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len\
    \ = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len + 1\n\
    \    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len\
    \ + 1\n    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len\
    \ = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_len + 1\n\
    \    roman_numerals_len = roman_numerals_len + 1\n    roman_numerals_len = roman_numerals_",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = roman_numerals_table()\n    roman_numerals_table = roman_numerals_table()\n\
    \    roman_numerals_table[1] = roman_numerals[1]\n    roman_numerals_table[2]\
    \ = roman_numerals[2]\n    roman_numerals_table[3] = roman_numerals[3]\n    roman_numerals_table[4]\
    \ = roman_numerals[4]\n    roman_numerals_table[5] = roman_numerals[5]\n    roman_numerals_table[6]\
    \ = roman_numerals[6]\n    roman_numerals_table[7] = roman_numerals[7]\n    roman_numerals_table[8]\
    \ = roman_numerals[8]\n    roman_numerals_table[9] = roman_numerals[9]\n    roman_numerals_table[10]\
    \ = roman_numerals[10]\n    roman_numerals_table[11] = roman_numerals[11]\n  \
    \  roman_numerals_table[12] = roman_numerals[12]\n    roman_numerals_table[13]\
    \ = roman_numerals[13]\n    roman_numerals_table[14] = roman_numerals[14]\n  \
    \  roman_numerals_table[15] = roman_numerals[15]\n    roman_numerals_table[16]\
    \ = roman_numerals[16]\n    roman_numerals_table[17] = roman_numerals[17]\n  \
    \  roman_numerals_table[18] = roman_numerals[18]\n    roman_numerals_table[19]\
    \ = roman_numerals[19]\n    roman_numerals_table[20] = roman_numerals[20]\n  \
    \  roman_numerals_table[21] = roman_numerals[21]\n    roman_numerals_table[22]\
    \ = roman_numerals[22]\n    roman_numerals_table[23] = roman_numerals[23]\n  \
    \  roman_numerals_table[24] = roman_numerals[24]\n    roman_numerals_table[25]\
    \ = roman_numerals[25]\n    roman_numerals_table[26] = roman_numerals[26]\n  \
    \  roman_numerals_table[27] = roman_numerals[27]\n    roman_numerals_table[28]\
    \ = roman_numerals[28]\n    roman_numerals_table[", "    if number == 0 \n   \
    \     then return \"0\"\n    else if number < 0 \n        then return \"-\"\n\
    \    else if number < 100\n        then return int_to_mini_roman(number / 10)\
    \ + int_to_mini_roman(number % 10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000)\n    else if number < 1000\n    \
    \    then return int_to_mini_roman(number / 1000) + int_to_mini_roman(number %\
    \ 1000)\n    else return \"?\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman\
    \ = roman_to_int()\n    roman = roman[number]\n    roman = roman.split(\"\")\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.join(\"\")\n    return\
    \ roman\nend", "    if number < 1 || number > 1000\n        error(\"Invalid input\"\
    )\n    end\n    roman = Int64[]\n    roman[1] = convert(number)\n    roman[2]\
    \ = convert(number * 10)\n    roman[3] = convert(number * 100)\n    roman[4] =\
    \ convert(number * 1000)\n    roman[5] = convert(number * 10000)\n    roman[6]\
    \ = convert(number * 100000)\n    roman[7] = convert(number * 1000000)\n    roman[8]\
    \ = convert(number * 10000000)\n    roman[9] = convert(number * 100000000)\n \
    \   roman[10] = convert(number * 1000000000)\n    roman[11] = convert(number *\
    \ 10000000000)\n    roman[12] = convert(number * 100000000000)\n    roman[13]\
    \ = convert(number * 1000000000000)\n    roman[14] = convert(number * 10000000000000)\n\
    \    roman[15] = convert(number * 100000000000000)\n    roman[16] = convert(number\
    \ * 1000000000000000)\n    roman[17] = convert(number * 10000000000000000)\n \
    \   roman[18] = convert(number * 100000000000000000)\n    roman[19] = convert(number\
    \ * 100000000000000001)\n    roman[20] = convert(number * 100000000000000002)\n\
    \    roman[21] = convert(number * 100000000000000003)\n    roman[22] = convert(number\
    \ * 100000000000000004)\n    roman[23] = convert(number * 100000000000000005)\n\
    \    roman[24] = convert(number * 100000000000000006)\n    roman[25] = convert(number\
    \ * 100000000000000007)\n    roman[26] = convert(number * 100000000000000008)\n\
    \    roman[27] = convert(number * 100000000000000009)\n    roman[28] = convert(number\
    \ * 100000000000000010)\n    roman[29] = convert(number * 100000000000000011)\n\
    \    roman[30] = convert(number * 100000000000000012)\n    roman[31] = convert(number\
    \ * 100000000000000013)\n    roman[32] = convert(number * 100000000000000014)\n\
    \    roman[33] = convert(number * 100000000000000015)\n    roman[34] = convert(number\
    \ * 100000000000000016)\n    roman[35] = convert(number * 100000000000000017)\n\
    \    roman[36] = convert(number * 100000000000000018)\n    roman[37] = convert(number\
    \ * 100000000000000019)\n    roman[38] = convert(number * 100000000000000020)\n",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman = roman_numeral + roman\n            number -= roman_numeral\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_digits = Int64[]\n    roman_digits[1] = \"I\"\n \
    \   roman_digits[2] = \"II\"\n    roman_digits[3] = \"III\"\n    roman_digits[4]\
    \ = \"IV\"\n    roman_digits[5] = \"V\"\n    roman_digits[6] = \"VI\"\n    roman_digits[7]\
    \ = \"VII\"\n    roman_digits[8] = \"VIII\"\n    roman_digits[9] = \"IX\"\n  \
    \  roman_digits[10] = \"X\"\n    roman_digits[11] = \"XI\"\n    roman_digits[12]\
    \ = \"XII\"\n    roman_digits[13] = \"XIII\"\n    roman_digits[14] = \"XIV\"\n\
    \    roman_digits[15] = \"XV\"\n    roman_digits[16] = \"XVI\"\n    roman_digits[17]\
    \ = \"XVII\"\n    roman_digits[18] = \"XVIII\"\n    roman_digits[19] = \"XIX\"\
    \n    roman_digits[20] = \"XX\"\n    roman_digits[21] = \"XXI\"\n    roman_digits[22]\
    \ = \"XXII\"\n    roman_digits[23] = \"XXIII\"\n    roman_digits[24] = \"XXIV\"\
    \n    roman_digits[25] = \"XXV\"\n    roman_digits[26] = \"XXVI\"\n    roman_digits[27]\
    \ = \"XXVII\"\n    roman_digits[28] = \"XXVIII\"\n    roman_digits[29] = \"XXIX\"\
    \n    roman_digits[30] = \"XXX\"\n    roman_digits[31] = \"XXXI\"\n    roman_digits[32]\
    \ = \"XXXII\"\n    roman_digits[33] = \"XXXIII\"\n    roman_digits[34] = \"XXXIV\"\
    \n    roman_digits[35] = \"XXXV\"\n    roman_digits[36] = \"XXXVI\"\n    roman_digits[37]\
    \ = \"XXXVII\"\n    roman_digits[38] = \"XXXVIII\"\n    roman_digits[39] = \"\
    XXXIX\"\n    roman_digits[40] = \"XX\"\n    roman_digits[41] = \"XXI\"\n    roman_digits[42]\
    \ = \"XXII\"\n    roman_digits[43] = \"XXIII\"\n    ", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numeral(number)\n\
    \    roman = roman.lower()\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    digits = Int64[]\n    roman_digits = Int64[]\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_digits_index = 0\n    roman_digits_index\
    \ = 0\n    roman_digits_index = 0\n    roman_", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman = String[]\n \
    \   roman[1] = roman[2] = roman[3] = roman[4] = roman[5] = roman[6] = roman[7]\
    \ = roman[8] = roman[9] = roman[10] = roman[11] = roman[12] = roman[13] = roman[14]\
    \ = roman[15] = roman[16] = roman[17] = roman[18] = roman[19] = roman[20] = roman[21]\
    \ = roman[22] = roman[23] = roman[24] = roman[25] = roman[26] = roman[27] = roman[28]\
    \ = roman[29] = roman[30] = roman[31] = roman[32] = roman[33] = roman[34] = roman[35]\
    \ = roman[36] = roman[37] = roman[38] = roman[39] = roman[40] = roman[41] = roman[42]\
    \ = roman[43] = roman[44] = roman[45] = roman[46] = roman[47] = roman[48] = roman[49]\
    \ = roman[50] = roman[51] = roman[52] = roman[53] = roman[54] = roman[55] = roman[56]\
    \ = roman[57] = roman[58] = roman[59] = roman[60] = roman[61] = roman[62] = roman[63]\
    \ = roman[64] = roman[65] = roman[66] = roman[67] = roman[68] = roman[69] = roman[70]\
    \ = roman[71] = roman[72] = roman[73] = roman[74] = roman[75] = roman[76] = roman[77]\
    \ = roman[78] = roman[79] = roman[80] = roman[81] = roman[82] = roman[83] = roman[84]\
    \ = roman[85] = roman[86] = roman[87] = roman[88] = roman[89] = roman[90] = roman[91]\
    \ = roman[92] = roman[93] = roman[94] = roman[95] = roman[96] = roman[97] = roman[98]\
    \ = roman[99] = roman[100] = roman[101] = roman[102] = roman[103] = roman[104]\
    \ = ", "    if number < 1 || number > 1000\n        error(\"Invalid input: number\
    \ must be between 1 and 1000\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    return roman.join(\"\")\nend\n</cell>\n\
    <code language=julia-1.5>\nint_to_mini_roman(19)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(152)\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(426)\n\
    </cell>\n<text>\nExercise: Write a function that converts a positive integer to\
    \ a roman numeral\n    equivalent as a string, and returns the result in lowercase.\
    \ \n    Restrictions: 1 <= num <= 1000", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 1000 \n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000 \n        then return int_to_mini_roman(number/100)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 100000 \n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000000 \n        then return int_to_mini_roman(number/10000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000000 \n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000 \n        then\
    \ return int_to_mini_roman(number/1000000) + int_to_mini_roman(number%1000000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000000 \n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000000000 \n        then return int_to_mini_roman(number/100000000)\
    \ + int_to_mini_roman(number%100000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%", "    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_length = roman_numerals.length\n\
    \    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numeral", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&replace(\" \", \"\"\
    ))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" \", \"\"))\n    roman = roman.map(&replace(\"\
    \ \", \"\"))\n    roman = roman.map(&replace(\" ", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"V\"))\n    roman = roman.map(&char(\"X\"))\n    roman =\
    \ roman.map(&char(\"L\"))\n    roman = roman.map(&char(\"C\"))\n    roman = roman.map(&char(\"\
    D\"))\n    roman = roman.map(&char(\"M\"))\n    roman = roman.map(&char(\"M\"\
    ))\n    roman = roman.map(&char(\"D\"))\n    roman = roman.map(&char(\"C\"))\n\
    \    roman = roman.map(&char(\"L\"))\n    roman = roman.map(&char(\"X\"))\n  \
    \  roman = roman.map(&char(\"V\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\") \n    else \n        roman = roman_to_mini_roman(number)\n\
    \        roman = roman.substring(0,roman.length-1)\n        return roman\n   \
    \ end\nend\n</code>\n<|/ a tags=julia,roman-numerals |>\n<| a dscore=1 |>\n<code>",
  "    if number < 1 || number > 1000 \n        error(\"number must be between 1 and\
    \ 1000\")\n    else \n        roman = roman_numerals(number)\n        roman =\
    \ roman.map(&lowercase)\n        roman = roman.map(&char(\"x\"))\n        roman\
    \ = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"c\"))\n       \
    \ roman = roman.map(&char(\"d\"))\n        roman = roman.map(&char(\"v\"))\n \
    \       roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"x\"\
    ))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"l\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.map(&char(\"i\"))\n        roman = roman.map(&char(\"\
    x\"))\n        roman = roman.", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    return roman.join(\"\")\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number < 1 || number > 1000\n        error(\"Int must be between 1 and 1000\"\
    )\n    end\n    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    for\
    \ roman_numeral in roman_numerals\n        if number >= roman_numeral\n      \
    \      roman_number = number / roman_numeral\n            roman_number %= roman_numeral\n\
    \            roman += roman_numeral * roman_number\n            number -= roman_number\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that converts a positive integer to a binary string.\nThe binary\
    \ string should be returned as a string.\nThe binary string should contain only\
    \ \"0\" and \"1\".\nThe function should raise an error if the integer is not positive.",
  "    if number < 1 || number > 1000 \n        error(\"number must be between 1 and\
    \ 1000\")\n    else \n        roman = roman_numeral(number)\n        roman = roman.lower()\n\
    \        return roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman_numerals\
    \ = roman_numerals()\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed.remove(\"i\")\n    roman_numerals_reversed.remove(\"\
    v\")\n    roman_numerals_reversed.remove(\"x\")\n    roman_numerals_reversed.remove(\"\
    l\")\n    roman_numerals_reversed.remove(\"c\")\n    roman_numerals_reversed.remove(\"\
    d\")\n    roman_numerals_reversed.remove(\"m\")\n    roman_numerals_reversed.remove(\"\
    n\")\n    roman_numerals_reversed.remove(\"p\")\n    roman_numerals_reversed.remove(\"\
    l\")\n    roman_numerals_reversed.remove(\"x\")\n    roman_numerals_reversed.remove(\"\
    v\")\n    roman_numerals_reversed.remove(\"i\")\n    roman_numerals_reversed.remove(\"\
    n\")\n    roman_numerals_reversed.remove(\"p\")\n    roman_numerals_reversed.remove(\"\
    c\")\n    roman_numerals_reversed.remove(\"d\")\n    roman_numerals_reversed.remove(\"\
    m\")\n    roman_numerals_reversed.remove(\"l\")\n    roman_numerals_reversed.remove(\"\
    x\")\n    roman_numerals_reversed.remove(\"v\")\n    roman_numerals_reversed.remove(\"\
    i\")\n    roman_numerals_reversed.remove(\"n\")\n    roman_numerals_reversed.remove(\"\
    p\")\n    roman_numerals_reversed.remove(\"c\")\n    roman_numerals_reversed.remove(\"\
    d\")\n    roman_numerals_reversed.remove(\"m\")\n    roman_numerals_reversed.remove(\"\
    l\")\n    roman_numerals_reversed.remove(\"x\")\n    roman_numerals_reversed.remove(\"\
    v\")\n    roman_numerals_reversed.remove(\"i\")\n    roman_numerals_reversed.remove(\"\
    n\")\n    roman_numerals_reversed.remove(\"p\")\n    roman_numerals_reversed.remove(\"\
    c\")\n    roman_numerals_reversed.remove(\"d\")\n    roman_numerals_reversed.remove(\"\
    m\")\n    roman_numerals_reversed.remove(\"l\")\n    roman_numerals_reversed.remove(\"\
    x\")", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    roman = roman.map(&char.upcase)\n    roman = roman.map(&char.downcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(&char.capitalize)\n    roman = roman.map(&char.swapcase)\n\
    \    roman = roman.map(", "    roman = roman_to_int(number)\n    roman = roman.to_string()\n\
    \    roman = roman.chars.to_list()\n    roman = roman.map(&:to_lowercase)\n  \
    \  roman = roman.map(&:to_string)\n    roman = roman.join()\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
