language: jl
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x + 1, y)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsgwjz78y.jl:13\nin expression starting at /tmp/tmpsgwjz78y.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2)\n    end\n\
    end\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work. `choose_num(12,\
    \ 15)` returns `-1` instead of `14`.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've fixed the code now.\n<|/ c |>\n<| c |>\nThis doesn't work either.\
    \ `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed the code now.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work either. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy3x_i1yk.jl:13\nin expression starting at /tmp/tmpy3x_i1yk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.4>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzc_30j3f.jl:13\nin expression starting at /tmp/tmpzc_30j3f.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x <= y \n      \
    \  then return x \n        else return y\n    else \n        choose_num(y,x)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work when `x` is greater than\
    \ `y`\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question, but I\
    \ added it now. Thanks.\n<|/ c |>\n<| a tags=recursion,julia,algorithm |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2btq4n3x.jl:13\nin expression starting at /tmp/tmp2btq4n3x.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend \n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegwrh7q1.jl:13\nin expression starting at /tmp/tmpegwrh7q1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else \n    \
    \    choose_num(x - 2, y - 1)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns n raised to the power of 2. \nFor example, choose_num(12) should\
    \ return 24 and choose_num(13) should return 9. \nWrite a function that takes\
    \ a positive integer n and returns the largest number \nthat is divisible by n.\
    \ For example, choose_num(12) should return 12 and \nchoose_num(13) should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4phogn9a.jl:13\nin expression starting at /tmp/tmp4phogn9a.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about finding the largest\
    \ even number in a given range. Your code doesn't do that.\n<|/ c |>\n<| c |>\n\
    The question was \"How to find the largest even number in a given range?\" The\
    \ code above does exactly that. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did.\
    \ But it returns `-1` for the range `[12, 15]`. That's not what the question asked\
    \ for. Your code returns `14` for the range `[12, 15]`.\n<|/ c |>\n<| c |>\nThe\
    \ code returns 14 for [12, 15]. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did.\
    \ But it returns `-1` for the range `[12, 15]`. That's not what the question asked\
    \ for. Your code returns `14` for the range `[12, 15]`.\n<|/ c |>\n<| a tags=julia,range,function\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzur0fww0.jl:13\nin expression starting at /tmp/tmpzur0fww0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else if x % 2 == 0 \n        then return choose_num(x / 2,\
    \ y)\n        \n    else if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n        \n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd number that is in\
    \ the range [x, y] inclusive. If there's no such \n    number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuwxorugj.jl:13\nin expression starting at /tmp/tmpuwxorugj.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt0hd1ggp.jl:13\nin expression starting at /tmp/tmpt0hd1ggp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(x - y, y)\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxyvcaqu.jl:13\nin expression starting at /tmp/tmpqxyvcaqu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y\n        then return choose_num(y, x)\n  \
    \  else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer number x and returns the number that \n   \
    \ is the sum of all positive integers less than or equal to x.\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3iacndsz.jl:13\nin expression starting at /tmp/tmp3iacndsz.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x > y \n        then return choose_num(y, x)\n        \n    return\
    \ -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number and returns\
    \ its factorial. \nThe factorial of a number $n$ is defined as the product of\
    \ all the integers \nsmaller than $n$. For example, 6! = 6 \xD7 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1 = 720.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn_e5jolu.jl:13\nin expression starting at /tmp/tmpn_e5jolu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        x <- x\n        y <- y\n        if x % 2\
    \ == 0 \n            then return y\n        else \n            x <- x - 1\n  \
    \          y <- y + 1\n            if x % 2 == 0 \n                then return\
    \ y\n            else \n                x <- x - 1\n                y <- y - 1\n\
    \                if x % 2 == 0 \n                    then return y\n         \
    \       else \n                    x <- x - 1\n                    y <- y + 1\n\
    \                    if x % 2 == 0 \n                        then return y\n \
    \                   else \n                        x <- x - 1\n              \
    \          y <- y - 1\n                        if x % 2 == 0 \n              \
    \              then return y\n                        else \n                \
    \            x <- x - 1\n                            y <- y + 1\n            \
    \                if x % 2 == 0 \n                                then return y\n\
    \                            else \n                                return -1\n\
    \    end\nend\n</code>\n<|/ a tags=julia,function,if-statement |>\n<| c |>\nThis\
    \ doesn't work. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi_uuvsd7.jl:13\nin expression starting at /tmp/tmpi_uuvsd7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work. `choose_num(12, 15)` returns `12` instead of `14`.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `choose_num(12, 15)` returns `12` instead of `14`.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpglssfsrw.jl:13\nin expression starting at /tmp/tmpglssfsrw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer and returns\
    \ the sum of its digits. \nFor example, choose_num(12) should return 1 + 2 = 3.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqpc_dmi8.jl:13\nin expression starting at /tmp/tmpqpc_dmi8.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsua6lazy.jl:13\nin expression starting at /tmp/tmpsua6lazy.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprqzmwh04.jl:13\nin expression starting at /tmp/tmprqzmwh04.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    end\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    I edited my answer, I forgot to add the `else` statement in the `if` statement.\
    \ Now it should work.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add the `else` statement\
    \ in the `if` statement. Now it should work.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg_e3fhv6.jl:13\nin expression starting at /tmp/tmpg_e3fhv6.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return cho\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_v6li4ui.jl:13\nin expression starting at /tmp/tmp_v6li4ui.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y\n        then return x\n\
    \        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n     \
    \   \n    return choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number x and returns the sum of its digits. \nFor example,\
    \ if the input is 123, the function should return 1 + 2 + 3 = 6.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp45huwdl9.jl:13\nin expression starting at /tmp/tmp45huwdl9.jl:13\n"
  stdout: ''
