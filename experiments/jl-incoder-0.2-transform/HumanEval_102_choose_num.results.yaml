language: jl
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x + 1, y)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsgwjz78y.jl:13\nin expression starting at /tmp/tmpsgwjz78y.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2)\n    end\n\
    end\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work. `choose_num(12,\
    \ 15)` returns `-1` instead of `14`.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've fixed the code now.\n<|/ c |>\n<| c |>\nThis doesn't work either.\
    \ `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed the code now.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work either. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy3x_i1yk.jl:13\nin expression starting at /tmp/tmpy3x_i1yk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.4>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzc_30j3f.jl:13\nin expression starting at /tmp/tmpzc_30j3f.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x <= y \n      \
    \  then return x \n        else return y\n    else \n        choose_num(y,x)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work when `x` is greater than\
    \ `y`\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question, but I\
    \ added it now. Thanks.\n<|/ c |>\n<| a tags=recursion,julia,algorithm |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2btq4n3x.jl:13\nin expression starting at /tmp/tmp2btq4n3x.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend \n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegwrh7q1.jl:13\nin expression starting at /tmp/tmpegwrh7q1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else \n    \
    \    choose_num(x - 2, y - 1)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns n raised to the power of 2. \nFor example, choose_num(12) should\
    \ return 24 and choose_num(13) should return 9. \nWrite a function that takes\
    \ a positive integer n and returns the largest number \nthat is divisible by n.\
    \ For example, choose_num(12) should return 12 and \nchoose_num(13) should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4phogn9a.jl:13\nin expression starting at /tmp/tmp4phogn9a.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about finding the largest\
    \ even number in a given range. Your code doesn't do that.\n<|/ c |>\n<| c |>\n\
    The question was \"How to find the largest even number in a given range?\" The\
    \ code above does exactly that. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did.\
    \ But it returns `-1` for the range `[12, 15]`. That's not what the question asked\
    \ for. Your code returns `14` for the range `[12, 15]`.\n<|/ c |>\n<| c |>\nThe\
    \ code returns 14 for [12, 15]. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did.\
    \ But it returns `-1` for the range `[12, 15]`. That's not what the question asked\
    \ for. Your code returns `14` for the range `[12, 15]`.\n<|/ c |>\n<| a tags=julia,range,function\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzur0fww0.jl:13\nin expression starting at /tmp/tmpzur0fww0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else if x % 2 == 0 \n        then return choose_num(x / 2,\
    \ y)\n        \n    else if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n        \n    else return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd number that is in\
    \ the range [x, y] inclusive. If there's no such \n    number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuwxorugj.jl:13\nin expression starting at /tmp/tmpuwxorugj.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt0hd1ggp.jl:13\nin expression starting at /tmp/tmpt0hd1ggp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(x - y, y)\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxyvcaqu.jl:13\nin expression starting at /tmp/tmpqxyvcaqu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y\n        then return choose_num(y, x)\n  \
    \  else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer number x and returns the number that \n   \
    \ is the sum of all positive integers less than or equal to x.\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3iacndsz.jl:13\nin expression starting at /tmp/tmp3iacndsz.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x > y \n        then return choose_num(y, x)\n        \n    return\
    \ -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number and returns\
    \ its factorial. \nThe factorial of a number $n$ is defined as the product of\
    \ all the integers \nsmaller than $n$. For example, 6! = 6 \xD7 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1 = 720.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn_e5jolu.jl:13\nin expression starting at /tmp/tmpn_e5jolu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        x <- x\n        y <- y\n        if x % 2\
    \ == 0 \n            then return y\n        else \n            x <- x - 1\n  \
    \          y <- y + 1\n            if x % 2 == 0 \n                then return\
    \ y\n            else \n                x <- x - 1\n                y <- y - 1\n\
    \                if x % 2 == 0 \n                    then return y\n         \
    \       else \n                    x <- x - 1\n                    y <- y + 1\n\
    \                    if x % 2 == 0 \n                        then return y\n \
    \                   else \n                        x <- x - 1\n              \
    \          y <- y - 1\n                        if x % 2 == 0 \n              \
    \              then return y\n                        else \n                \
    \            x <- x - 1\n                            y <- y + 1\n            \
    \                if x % 2 == 0 \n                                then return y\n\
    \                            else \n                                return -1\n\
    \    end\nend\n</code>\n<|/ a tags=julia,function,if-statement |>\n<| c |>\nThis\
    \ doesn't work. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi_uuvsd7.jl:13\nin expression starting at /tmp/tmpi_uuvsd7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work. `choose_num(12, 15)` returns `12` instead of `14`.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `choose_num(12, 15)` returns `12` instead of `14`.\n\
    <|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpglssfsrw.jl:13\nin expression starting at /tmp/tmpglssfsrw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer and returns\
    \ the sum of its digits. \nFor example, choose_num(12) should return 1 + 2 = 3.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqpc_dmi8.jl:13\nin expression starting at /tmp/tmpqpc_dmi8.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsua6lazy.jl:13\nin expression starting at /tmp/tmpsua6lazy.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprqzmwh04.jl:13\nin expression starting at /tmp/tmprqzmwh04.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    end\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    I edited my answer, I forgot to add the `else` statement in the `if` statement.\
    \ Now it should work.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add the `else` statement\
    \ in the `if` statement. Now it should work.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg_e3fhv6.jl:13\nin expression starting at /tmp/tmpg_e3fhv6.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    else \n        then return choose_num(x / 2, y)\n    else \n  \
    \      then return cho\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_v6li4ui.jl:13\nin expression starting at /tmp/tmp_v6li4ui.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y\n        then return x\n\
    \        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n     \
    \   \n    return choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number x and returns the sum of its digits. \nFor example,\
    \ if the input is 123, the function should return 1 + 2 + 3 = 6.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp45huwdl9.jl:13\nin expression starting at /tmp/tmp45huwdl9.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 ? x : choose_num(x / 2, y / 2)\nend\n\
    </code>\n<|/ a |>\n<| c |>\nI believe this answer should be the accepted one.\
    \ While the other answers give a more detailed explanation on how to solve the\
    \ problem, this one actually explains how to solve the problem and also gives\
    \ a solution that is more efficient than other solutions.\n<|/ c |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7yhkt9sd.jl:13\nin expression starting at /tmp/tmp7yhkt9sd.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else \n    \
    \    choose_num(x - 2, y + 1)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number and returns its factorial. \nFor example, factorial(4) == 24. \nThe function\
    \ should work for any positive integer number.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcosnijc_.jl:13\nin expression starting at /tmp/tmpcosnijc_.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x div 2, y div 2)\n    end\nend\n</code>\n\
    <|/ a tags=julia,recursion,performance |>\n<| c |>\nThanks for the answer. Your\
    \ code works, but it takes too much time for large numbers. I tested it on Julia\
    \ 1.5.1 and it took about 2 minutes for choose_num(10^6, 10^6). Do you know any\
    \ way to make it faster?\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it\
    \ took about 2 minutes for choose_num(10^6, 10^6). Do you know any way to make\
    \ it faster?\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it took about\
    \ 2 minutes for choose_num(10^6, 10^6). Do you know any way to make it faster?\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it took about 2 minutes for\
    \ choose_num(10^6, 10^6). Do you know any way to make it faster?\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 1.5.1 and it took about 2 minutes for choose_num(10^6,\
    \ 10^6). Do you know any way to make it faster?\n<|/ c |>\n<| a tags=julia,recursion,performance\
    \ |>\nI believe that your algorithm is correct, but your implementation is not.\
    \ \nThe algorithm is correct, but your implementation is not. \nThe algorithm\
    \ is correct because you only need to check whether x is less than or equal to\
    \ y, and if so, return x. \nThe implementation is incorrect because you only need\
    \ to check whether x is less than or equal to y, and if so, return y. You also\
    \ need to check whether x is greater than or equal to y, and if so, return x.\
    \ \nThe implementation is incorrect because you only need to check whether x is\
    \ less than or equal to y, and if so, return y. You also need to check whether\
    \ x is greater than or equal to y, and if so, return y. You also need to check\
    \ whether x is less than or equal to y, and if so, return x. You also need to\
    \ check whether x is greater than or equal to y, and if so, return y. You also\
    \ need to check whether x is less than or equal to y, and if so, return x. You\
    \ also need to check whether x is greater than or equal to y, and if so, return\
    \ y. You also need to check whether x is less than \nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5dgwa3cj.jl:13\nin expression starting at /tmp/tmp5dgwa3cj.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu0crq5c3.jl:13\nin expression starting at /tmp/tmpu0crq5c3.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis does not answer the question. OP asked for a function that\
    \ returns -1 if there is no even number in the range. Your function returns 0\
    \ when there is no even number in the range.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've edited my answer to reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr9b4apcj.jl:13\nin expression starting at /tmp/tmpr9b4apcj.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns the sum of all \nthe even numbers up to and including n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpozlmnztz.jl:13\nin expression starting at /tmp/tmpozlmnztz.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer number and returns its \nfactorial.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmfd67ao8.jl:13\nin expression starting at /tmp/tmpmfd67ao8.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpevjvz8c7.jl:13\nin expression starting at /tmp/tmpevjvz8c7.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\n    if x == y\
    \ \n        then return x\n    end\n    if x % 2 == 0 \n        then return choose_num(x\
    \ / 2, y)\n    end\n    if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n    end\n    if x == y / 2 \n        then return x\n    end\n    if y /\
    \ 2 == x \n        then return y\n    end\n    if y / 2 == x / 2 \n        then\
    \ return y\n    end\n    return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits\nof $n$ that are divisible by $3$.\
    \ For example, if the input is $n = 12$, then\nthe function should return $2$.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg19oxomm.jl:13\nin expression starting at /tmp/tmpg19oxomm.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x - y, y)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.1>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(13, 12)\n</cell>\n<code language=julia-1.1>\nchoose_num(12, 12)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(12, 13)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(12, 14)\n</cell>\n<code language=julia-1.1>\nchoose_num(12, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(13, 13)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.1>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(14, 13)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(14, 14)\n</cell>\n<code language=julia-1.1>\nchoose_num(14, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(15, 13)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(15, 14)\n</cell>\n<code language=julia-1.1>\nchoose_num(15, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(16, 15)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(17, 15)\n</cell>\n<code language=julia-1.1>\nchoose_num(18, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(19, 15)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(20, 15)\n</cell>\n<code language=julia-1.1>\nchoose_num(21, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(22, 15)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(23, 15)\n</cell>\n<code language=julia-1.1>\nchoose_num(24, 15)\n</cell>\n\
    <code language=julia-1.1>\nchoose_num(25, 15)\n</cell>\n<code language=julia-1.1>\n\
    choose_num(26, 15)\n</cell>\n<code language=julia-1.1>\nchoose_num(27, 15)\n</cell>\n\
    <code language=julia-1.1>\ncho\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8jleqb56.jl:13\nin expression starting at /tmp/tmp8jleqb56.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        x % 2 == 0 && y % 2 == 0 &&\
    \ choose_num(x / 2, y / 2)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,function\
    \ |>\n<| a tags=julia,recursion,function |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu29m9_9f.jl:13\nin expression starting at /tmp/tmpu29m9_9f.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x % 2 == 0 \n            then return x\n\
    \        else \n            if y % 2 == 0 \n                then return y\n  \
    \          else \n                if x % 2 == y % 2 \n                    then\
    \ return x\n                else \n                    if x % 2 == y % 2 \n  \
    \                      then return y\n                    else \n            \
    \            if x % 2 == y % 2 \n                            then return x\n \
    \                       else \n                            if x % 2 == y % 2 \n\
    \                                then return y\n                            else\
    \ \n                                if x % 2 == y % 2 \n                     \
    \               then return x\n                                else \n       \
    \                             if x % 2 == y % 2 \n                           \
    \             then return y\n                                    else \n     \
    \                                   if x % 2 == y % 2 \n                     \
    \                       then return x\n                                      \
    \  else \n                                            if x % 2 == y % 2 \n   \
    \                                             then return y\n                \
    \                            else \n                                         \
    \       if x % 2 == y % 2 \n                                                 \
    \   then return x\n                                                else \n   \
    \                                                 if x % 2 == y % 2 \n       \
    \                                                 then return y\n            \
    \                                        else \n                             \
    \                           if x % 2 == y % 2 \n                             \
    \                               then return x\n                              \
    \                          else \n                                           \
    \                 if x % 2 == y % 2 \n                                       \
    \                         then return y\n                                    \
    \                        else \n                                             \
    \                   if x % 2 == y % 2 \n                                     \
    \                               then return x\n                              \
    \                                      else \n                               \
    \                         if x % 2 == y % 2 \n                               \
    \                             then return y\n                                \
    \                            else \n                                         \
    \                       if x % 2 == y % 2 \n                                 \
    \                                   then return x\n                          \
    \                                          else \n                           \
    \                             if x % 2 == y % 2 \n                           \
    \                                 then return y\n                            \
    \                                else \n                                     \
    \                           if x % 2 == y % 2 \n                             \
    \                                       then return x\n                      \
    \                                              else \n                       \
    \                                 if x % 2 == y % 2 \n                       \
    \                                     then return y\n                        \
    \                                    else \n                                 \
    \                               if x % 2 == y % 2 \n                         \
    \                                           then return x\n                  \
    \                                                  else \n                   \
    \                                     if x % 2 == y % 2 \n                   \
    \                                         then return y\n                    \
    \                                        else \n                             \
    \                                   if x % 2 == y % 2 \n                     \
    \                                               then return x\n              \
    \                                                      else \n               \
    \                                         if x % 2 == y % 2 \n               \
    \                                             then return y\n                \
    \                                            else \n                         \
    \                                       if x % 2 == y % 2 \n                 \
    \                                                   then return x\n          \
    \                                                          else \n           \
    \                                             if x % 2 == y % 2 \n           \
    \                                                 then return y\n            \
    \                                                else \n                     \
    \                                           if x % 2 == y % 2 \n             \
    \                                                       then return x\n      \
    \                                                              else \n       \
    \                                                 if x % 2 == y % 2 \n       \
    \                                                     then return y\n        \
    \                                                    else \n                 \
    \                                               if x % 2 == y % 2 \n         \
    \                                                           then return x\n  \
    \                                                                  else \n   \
    \                                                     if x % 2 == \nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp44cwnvva.jl:13\nin expression starting at /tmp/tmp44cwnvva.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else \n    \
    \    choose_num(x - 2, y - 1)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<|\
    \ c |>\nI appreciate your answer, but this doesn't really answer the question.\
    \ As I understand it, the question is asking how to implement the recursive function\
    \ `choose_num` without using an explicit `if` statement. Your answer doesn't do\
    \ that, and it also doesn't explain why you chose to use recursion in the first\
    \ place.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show a way to\
    \ implement the function without an explicit `if` statement. My answer was based\
    \ on the fact that OP wanted to implement it using recursion.\n<|/ c |>\n<| c\
    \ |>\nI appreciate your answer, but this doesn't really answer the question. As\
    \ I understand it, the question is asking how to implement the recursive function\
    \ `choose_num` without using an explicit `if` statement. Your answer doesn't do\
    \ that, and it also doesn't explain why you chose to use recursion in the first\
    \ place.\n<|/ c |>\n<| a dscore=1 |>\nThe answer by is correct, but I thought\
    \ I'd add some explanation as to why it works.\nThe function choose_num is defined\
    \ as follows:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprcj9u4j3.jl:13\nin expression starting at /tmp/tmprcj9u4j3.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=julia,recursion |>\nI wrote a Julia package that does\
    \ this called \"choose_num\". It works by finding the smallest number in the range\
    \ [x, y] that divides evenly into n. \n<code>\njulia> choose_num(12, 15)\n14\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc4_lnqqu.jl:13\nin expression starting at /tmp/tmpc4_lnqqu.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(y - 1, x)\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer n and returns the number of \ndigits in the number n. For example,\
    \ choose_num(12) should return 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp70vmpyv_.jl:13\nin expression starting at /tmp/tmp70vmpyv_.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x > y \n        then return choose_num(y, x)\n        \n    return\
    \ -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the\n    biggest odd number that is in the range [x, y] inclusive. If there's\
    \ no such \n    number, then the function should return -1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprztgp44x.jl:13\nin expression starting at /tmp/tmprztgp44x.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y \n            then\
    \ return x\n        else \n            if x % 2 == 0 \n                then return\
    \ choose_num(x / 2, y)\n            else \n                if y % 2 == 0 \n  \
    \                  then return choose_num(x, y / 2)\n                else \n \
    \                   if x > y \n                        then return choose_num(x\
    \ / 2, y)\n                    else \n                        if x < y \n    \
    \                        then return choose_num(x, y / 2)\n                  \
    \      else return -1\n</code>\n<|/ a tags=recursion,math,haskell |>\n<| a dscore=0\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp44t_ljav.jl:13\nin expression starting at /tmp/tmp44t_ljav.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 && choose_num(x / 2, y / 2) * choose_num(x\
    \ / 2, y / 2) >= x && choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2) <= y\n\
    \        then return choose_num(x / 2, y / 2) * choose_num(x / 2, y / 2)\n   \
    \     else return -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb34dgncl.jl:13\nin expression starting at /tmp/tmpb34dgncl.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=recursion,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpft5t9zea.jl:13\nin expression starting at /tmp/tmpft5t9zea.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x) \n        else return x \n    else return y \n\
    end \n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of numbers and returns the number\
    \ of positive numbers in the array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsm9smndu.jl:13\nin expression starting at /tmp/tmpsm9smndu.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the biggest odd number that is in the range [x, y] inclusive.\
    \ If there's no such number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfsnsxkjm.jl:13\nin expression starting at /tmp/tmpfsnsxkjm.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\n    if x == y\
    \ \n        then return x\n    end\n    if x % 2 == 0 \n        then return choose_num(x\
    \ / 2, y)\n    end\n    if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n    end\n    if x > y \n        then return choose_num(y, x)\n    end\n\
    \    return -1\nend\n</cell>\n<code language=julia-1.4>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\nbiggest odd number that is in the range [x, y] inclusive.\
    \ If there's no such \nnumber, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmaz9jf8s.jl:13\nin expression starting at /tmp/tmpmaz9jf8s.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x - y, y)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,function,if-statement |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_gathis5.jl:13\nin expression starting at /tmp/tmp_gathis5.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two positive numbers x and y and\
    \ returns the\n    biggest odd number that is in the range [x, y] inclusive. If\
    \ there's no such\n    number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7xmvmmn2.jl:13\nin expression starting at /tmp/tmp7xmvmmn2.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y\n            then\
    \ return x\n        else if x % 2 == 0\n            then return choose_num(x /\
    \ 2, y)\n        else return choose_num(x / 2, y)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI see no reason to downvote this answer. Maybe because you didn't explain\
    \ what was wrong with OP's code? I see no reason to downvote this answer either.\
    \ Maybe because you didn't explain what was wrong with OP's code? I see no reason\
    \ to downvote this answer either. Maybe because you didn't explain what was wrong\
    \ with OP's code? I see no reason to downvote this answer either. Maybe because\
    \ you didn't explain what was wrong with OP's code? I see no reason to downvote\
    \ this answer either. Maybe because you didn't explain what was wrong with OP's\
    \ code? I see no reason to downvote this answer either. Maybe because you didn't\
    \ explain what was wrong with OP's code? I see no reason to downvote this answer\
    \ either. Maybe because you didn't explain what was wrong with OP's code? I see\
    \ no reason to downvote this answer either. Maybe because you didn't explain what\
    \ was wrong with OP's code? I see no reason to downvote this answer either. Maybe\
    \ because you didn't explain what was wrong with OP's code? I see no reason to\
    \ downvote this answer either. Maybe because you didn't explain what was wrong\
    \ with OP's code? I see no reason to downvote this answer either. Maybe because\
    \ you didn't explain what was wrong with OP's code? I see no reason to downvote\
    \ this answer either. Maybe because you didn't explain what was wrong with OP's\
    \ code? I see no reason to downvote this answer either. Maybe because you didn't\
    \ explain what was wrong with OP's code? I see no reason to downvote this answer\
    \ either. Maybe because you didn't explain what was wrong with OP's code? I see\
    \ no reason to downvote this answer either. Maybe because you didn't explain what\
    \ was wrong with OP's code? I see no reason to downvote this answer either. Maybe\
    \ because you didn't explain what was wrong with OP's code? I see no reason to\
    \ downvote this answer either. Maybe because you didn't explain what was wrong\
    \ with OP's code? I see no \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm6g_y3f9.jl:13\nin expression starting at /tmp/tmpm6g_y3f9.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu0crq5c3.jl:13\nin expression starting at /tmp/tmpu0crq5c3.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else if x % 2 == 0 \n        then return choose_num(x / 2,\
    \ y)\n        \n    else if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n        \n    else if x % 2 == y % 2 \n        then return x\n        \n\
    \    else if x % 2 == y % 2 \n        then return y\n        \n    else return\
    \ -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer number x and returns the number\
    \ of times it appears in the list [x, x + 1, ..., x + 10] inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8n1ar34s.jl:13\nin expression starting at /tmp/tmp8n1ar34s.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp4c8e17a.jl:13\nin expression starting at /tmp/tmpp4c8e17a.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a positive number x and returns the smallest\
    \ number \nthat is greater than or equal to x. If there's no such number, then\
    \ the function should \nreturn -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfiyg5szl.jl:13\nin expression starting at /tmp/tmpfiyg5szl.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(y - 1, x)\n    end\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis code doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<|\
    \ c |>\nIt works fine for me. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for me either. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nIt\
    \ works for me too. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work for me\
    \ either. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6y9otrhr.jl:13\nin expression starting at /tmp/tmp6y9otrhr.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer number and\
    \ returns its factorial. \nThe factorial of a number $n$ is defined as the product\
    \ of all the integers \nsmaller than $n$. For example, 5! = 5 x 4 x 3 x 2 x 1\
    \ = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk2bpb6ct.jl:13\nin expression starting at /tmp/tmpk2bpb6ct.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(x - y, x + y)\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl6__66ip.jl:13\nin expression starting at /tmp/tmpl6__66ip.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| c |>\nThis is not the correct answer. Try `choose_num(12,\
    \ 15)` which returns `14` instead of `-1`.\n<|/ c |>\n<| c |>\nThe function returns\
    \ -1 when there is no even number in the range. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\nYes, it returns `-1` when there is no even number in the range. Try it\
    \ yourself. `choose_num(12, 15)` returns `14` instead of `-1`.\n<|/ c |>\n<| c\
    \ |>\nYes, it returns -1 when there is no even number in the range. Try it yourself.\
    \ `choose_num(12, 15)` returns `14` instead of `-1`.\n<|/ c |>\n<| c |>\nYes,\
    \ it returns -1 when there is no even number in the range. Try it yourself. `choose_num(12,\
    \ 15)` returns `14` instead of `-1`.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppzz1mldb.jl:13\nin expression starting at /tmp/tmppzz1mldb.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y\n        then return choose_num(y, x)\n  \
    \  else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else return choose_num(x / 2, y)\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer x and returns its factorial. \nFor example,\
    \ factorial(5) == 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxrt8k1mr.jl:13\nin expression starting at /tmp/tmpxrt8k1mr.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == y \n            then return x\n \
    \       else \n            if x % 2 == 0 \n                then return choose_num(x\
    \ / 2, y)\n            else \n                if y % 2 == 0 \n               \
    \     then return choose_num(x, y / 2)\n                else \n              \
    \      if x % 2 == y % 2 \n                        then return x\n           \
    \         else \n                        if x % 2 == y % 2 \n                \
    \            then return y\n                        else \n                  \
    \          if x % 2 != y % 2 \n                                then return -1\n\
    \                            else \n                                return choose_num(x\
    \ / 2, y / 2)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 13)\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 14)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 13)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 14)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(14, 13)\n</cell>\n<code language=julia-1.5>\nchoose_num(14, 14)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(14, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(15, 14)\n</cell>\n<code language=julia-1.5>\nchoose_num(15, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(16, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(17, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(18, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(19, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(20, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(21, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(22, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(23, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(24, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoe9vijfb.jl:13\nin expression starting at /tmp/tmpoe9vijfb.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(x - y, x + y)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a positive integer number and returns its factorial.\
    \ \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv_h0nmb5.jl:13\nin expression starting at /tmp/tmpv_h0nmb5.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer number\
    \ and returns its factorial. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7\
    \ 2 \xD7 1 = 120\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfm6adese.jl:13\nin expression starting at /tmp/tmpfm6adese.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsuxfmjhd.jl:13\nin expression starting at /tmp/tmpsuxfmjhd.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how to write\
    \ an `if` statement that returns `-1` when `x` is greater than `y`.\n<|/ c |>\n\
    <| c |>\nI added a solution that does exactly that\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to know how to write an `if` statement that returns\
    \ `-1` when `x` is greater than `y`.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ does exactly that\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to know how to write an `if` statement that returns `-1` when `x` is greater\
    \ than `y`.\n<|/ c |>\n<| a tags=julia,if-statement |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprp36rkyh.jl:13\nin expression starting at /tmp/tmprp36rkyh.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number x and returns the number of \ntimes it appears in the\
    \ list [x, x + 1, ..., x + 100] inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm7x5uybd.jl:13\nin expression starting at /tmp/tmpm7x5uybd.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x < y \n        then return choose_num(x,\
    \ y)\n    else if x == y \n        then return x\n    else return -1\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67chx69p.jl:13\nin expression starting at /tmp/tmp67chx69p.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number x and returns the sum of its\
    \ digits. \nIf the number is negative, return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpouc525nh.jl:13\nin expression starting at /tmp/tmpouc525nh.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number x and returns\
    \ the sum of its digits. \nFor example, if the number is 123, then the function\
    \ should return 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_838js5c.jl:13\nin expression starting at /tmp/tmp_838js5c.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x div 2, y div 2)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer and returns\
    \ the factorial of \nthat number. For example, factorial(5) = 5 x 4 x 3 x 2 x\
    \ 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp91mrmmui.jl:13\nin expression starting at /tmp/tmp91mrmmui.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend \n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,if-statement\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9q_6j46t.jl:13\nin expression starting at /tmp/tmp9q_6j46t.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x > y \n        then return choose_num(y, x)\n        \n    return\
    \ -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes a positive integer $n$ and returns the\
    \ number of \ndigits in the number $n$. For example, if the number is 123, then\
    \ your function should return 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_xycz7lk.jl:13\nin expression starting at /tmp/tmp_xycz7lk.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd number that is in the range [x, y] inclusive. If there's no such\n    number,\
    \ then the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6t8ez566.jl:13\nin expression starting at /tmp/tmp6t8ez566.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x div 2, y div 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv1wqbauk.jl:13\nin expression starting at /tmp/tmpv1wqbauk.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x) \n        else return x \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp075goko0.jl:13\nin expression starting at /tmp/tmp075goko0.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n \
    \       \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n      \
    \  \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n        \n \
    \   if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n    if\
    \ x % 2 == 0\n        then return choose_num(x / 2, y)\n        \n    if y % 2\
    \ == 0\n        then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\n     \
    \   then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n        \n    if y % 2 == 0\n        then return\
    \ choose_num(x, y / 2)\n        \n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y)\n        \n    if y % 2 == 0\n        then return choose_num(x, y /\
    \ 2)\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n     \
    \   \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n        \n\
    \    if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n    if\
    \ x % 2 == 0\n        then return choose_num(x / 2, y)\n        \n    if y % 2\
    \ == 0\n        then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\n     \
    \   then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n        \n    if y % 2 == 0\n        then return\
    \ choose_num(x, y / 2)\n        \n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y)\n        \n    if y % 2 == 0\n        then return choose_num(x, y /\
    \ 2)\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0\n        then return choose_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2n54xwr5.jl:13\nin expression starting at /tmp/tmp2n54xwr5.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(y - 1, x)\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if x is greater than y\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ x is greater than y\n<|/ c |>\n<| c |>\nThis doesn't work if x is greater than\
    \ y\n<|/ c |>\n<| c |>\nThis doesn't work if x is greater than y\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if x is greater than y\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpes1xmvxl.jl:13\nin expression starting at /tmp/tmpes1xmvxl.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y\n        then return choose_num(y, x)\n  \
    \  else if x == y\n        then return x\n    else if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    else if y % 2 == 0\n        then return choose_num(x,\
    \ y / 2)\n    else return -1\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of numbers and returns the number of even\nnumbers in the\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl4ust_0p.jl:13\nin expression starting at /tmp/tmpl4ust_0p.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend \n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9q7u_zcn.jl:13\nin expression starting at /tmp/tmp9q7u_zcn.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to write an\
    \ `if` statement in Julia.\n<|/ c |>\n<| c |>\nI thought this was the answer to\
    \ the question. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ how to write an if statement in Julia. He was asking how to write an if statement\
    \ in Julia. He was asking how to write an if statement in Julia. He was asking\
    \ \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm_o2q9ly.jl:13\nin expression starting at /tmp/tmpm_o2q9ly.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2\n        then return x\n        \n    return -1\n\
    end\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the\n    biggest odd number that is in the range [x, y] inclusive. If there's\
    \ no such \n    number, then the function should return -1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq1udovtv.jl:13\nin expression starting at /tmp/tmpq1udovtv.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number and returns its \nfactorial.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj8yq00_f.jl:13\nin expression starting at /tmp/tmpj8yq00_f.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <code language=julia-0.6>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpodbwy554.jl:13\nin expression starting at /tmp/tmpodbwy554.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y\n        then return x\n\
    \        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n     \
    \   \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n\
    \    if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n        \n \
    \   if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n    if\
    \ x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n        \n    if y\
    \ % 2 == 0\n        then return choose_num(x, y / 2)\n        \n    if x % 2 ==\
    \ 0\n        then return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n\
    \        then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n     \
    \   then return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n      \
    \  then return choose_num(x, y / 2)\n        \n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y / 2)\n        \n    if y % 2 == 0\n        then return\
    \ choose_num(x, y / 2)\n        \n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y / 2)\n        \n    if y % 2 == 0\n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y\
    \ / 2)\n        \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n \
    \       \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n      \
    \  \n    if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n       \
    \ \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n  \
    \  if x % 2 == 0\n        then return choose_num(x / 2, y / 2)\n        \n   \
    \ if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n    if x\
    \ % 2 == 0\n        then return choose_num(x / 2, y / 2)\n        \n    if y %\
    \ 2 == 0\n        then return choose_num(x, y / 2)\n        \n    if x % 2 ==\
    \ 0\n        then \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpitug48yx.jl:13\nin expression starting at /tmp/tmpitug48yx.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x > y \n        then return choose_num(y, x)\n        \n    return\
    \ -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number x and returns\
    \ the sum of its digits. \nFor example, if the number is 123, then the function\
    \ should return 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkci7p1i8.jl:13\nin expression starting at /tmp/tmpkci7p1i8.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else \n        then return choose_num(x div 2, y div 2)\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp39co8zev.jl:13\nin expression starting at /tmp/tmp39co8zev.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x < y \n        then return choose_num(x,\
    \ y)\n    else return x\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the biggest odd integer number that is in the range [x,\
    \ y] inclusive. If there's no such number, then the function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo8mk_dzg.jl:13\nin expression starting at /tmp/tmpo8mk_dzg.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else \n        choose_num(x - y, x + y)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, choose_num(12) should return 2, and choose_num(123) should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_nptue3u.jl:13\nin expression starting at /tmp/tmp_nptue3u.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\n    if x == y\
    \ \n        then return x\n    end\n    if x % 2 == 0 \n        then return choose_num(x\
    \ / 2, y)\n    end\n    if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n    end\n    return -1\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer $n$ and returns the number of digits\nof $n$ that\
    \ are greater than or equal to $10$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxceduri.jl:13\nin expression starting at /tmp/tmpmxceduri.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n \
    \       \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n      \
    \  \n    return -1\nend\n</cell>\n<code language=julia-1.4>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer number\
    \ x and returns the sum of its digits. \nFor example, if the number is 123, then\
    \ the function should return 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ga1hmuh.jl:13\nin expression starting at /tmp/tmp1ga1hmuh.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x <= y \n      \
    \  then return x\n        else return y\n    end\n    if x == y \n        then\
    \ return x\n        else return y\n    end\n    if x == 0\n        then return\
    \ -1\n    end\n    if y == 0\n        then return -1\n    end\n    if x % 2 ==\
    \ 0\n        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n  \
    \      then return choose_num(x, y / 2)\n    end\n    if x > y\n        then return\
    \ choose_num(x / 2, y)\n    end\n    if y > x\n        then return choose_num(x,\
    \ y / 2)\n    end\n    if x == y\n        then return x\n    end\n    if x > y\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y > x\n        then\
    \ return choose_num(x, y / 2)\n    end\n    if x == 0\n        then return -1\n\
    \    end\n    if y == 0\n        then return -1\n    end\n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n      \
    \  then return choose_num(x, y / 2)\n    end\n    if x > y\n        then return\
    \ choose_num(x / 2, y)\n    end\n    if y > x\n        then return choose_num(x,\
    \ y / 2)\n    end\n    if x == y\n        then return x\n    end\n    if x > y\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y > x\n        then\
    \ return choose_num(x, y / 2)\n    end\n    if x == 0\n        then return -1\n\
    \    end\n    if y == 0\n        then return -1\n    end\n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n      \
    \  then return choose_num(x, y / 2)\n    end\n    if x > y\n        then return\
    \ choose_num(x / 2, y)\n    end\n    if y > x\n        then return choose_num(x,\
    \ y / 2)\n    end\n    if x == y\n        then return x\n    end\n    if x > y\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y > x\n        then\
    \ return choose_num(x, y / 2)\n    end\n    if x == 0\n        then return -1\n\
    \    end\n    if y == 0\n        then return -1\n    end\n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n      \
    \  then return choose_num(x, y / 2)\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp0b0h9ig.jl:13\nin expression starting at /tmp/tmpp0b0h9ig.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdn84yln0.jl:13\nin expression starting at /tmp/tmpdn84yln0.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\n    if x == y\
    \ \n        then return x\n    end\n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y)\n    end\n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n\
    \    end\n    return -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number x and returns the sum of its digits. \nFor example, choose_num(12) should\
    \ return 1 + 2 = 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr0m1rsq8.jl:13\nin expression starting at /tmp/tmpr0m1rsq8.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ an integer $n$ and returns the factorial of $n$.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpseon7k_e.jl:13\nin expression starting at /tmp/tmpseon7k_e.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else if x % 2 == 0 \n        then return choose_num(x / 2,\
    \ y)\n        \n    else if y % 2 == 0 \n        then return choose_num(x, y /\
    \ 2)\n        \n    else if x % 2 == y % 2 \n        then return x\n        \n\
    \    else return -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such number, then the function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqq6dasd1.jl:13\nin expression starting at /tmp/tmpqq6dasd1.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else if x == y \n        then return x\n    else \n        x % 2 == 0 ? x\
    \ : x + 1\nend\n</cell>\n<code language=julia-1.1>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer number x and\
    \ returns the \nsmallest integer number that is in the range [x, y] inclusive.\
    \ If there's no such \nnumber, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcw1b4nhl.jl:13\nin expression starting at /tmp/tmpcw1b4nhl.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such \n    number, then the function should return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0_2jpz48.jl:13\nin expression starting at /tmp/tmp0_2jpz48.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n    \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    \n\
    \    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \n    if x\
    \ % 2 == y % 2\n        then return choose_num(x / 2, y / 2)\n    \n    if x %\
    \ 2 == y % 2 \n        then return choose_num(x, y / 2)\n    \n    return -1\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the\n    biggest odd integer number that is in the range [x, y] inclusive. If\
    \ \n    there's no such number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2sl3t_uh.jl:13\nin expression starting at /tmp/tmp2sl3t_uh.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else \n        then return choose_num(x - y, y)\n    end\nend\n</cell>\n<code\
    \ language=julia-0.6>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer x and returns the number of times it appears\
    \ in the list [1, 2, 3, ..., x].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzfnm0vtx.jl:13\nin expression starting at /tmp/tmpzfnm0vtx.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work for `choose_num(12, 15)` which should return\
    \ `14`.\n<|/ c |>\n<| c |>\nIt should return 14. I've tested it and it works.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I guess you didn't test it properly.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I guess you didn't test it properly.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I guess you didn't test it properly.\
    \ `choose_num(12, 15)` should return `14`. `choose_num(13, 12)` should return\
    \ `-1`. `choose_num(12, 13)` should return `-1`. `choose_num(13, 14)` should return\
    \ `14`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps79n2qot.jl:13\nin expression starting at /tmp/tmps79n2qot.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThis doesn't work. `choose_num(12, 15)` returns `-1` instead of\
    \ `14`.\n<|/ c |>\n<| c |>\nYeah, I fixed it now. Thanks!\n<|/ c |>\n<| c |>\n\
    This doesn't work. `choose_num(12, 15)` returns `-1` instead of `14`.\n<|/ c |>\n\
    <| c |>\nYeah, I fixed it now. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn2klwiha.jl:13\nin expression starting at /tmp/tmpn2klwiha.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x < y \n        then return choose_num(y,\
    \ x)\n    else return x\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7oz7jab6.jl:13\nin expression starting at /tmp/tmp7oz7jab6.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(y - 1, x)\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \nfactorial. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2wgubuhm.jl:13\nin expression starting at /tmp/tmp2wgubuhm.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz_dpp9st.jl:13\nin expression starting at /tmp/tmpz_dpp9st.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number and returns\
    \ its factorial. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2hhjhog_.jl:13\nin expression starting at /tmp/tmp2hhjhog_.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else \n        then return choose_num(x div 2, y div 2)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of numbers and returns\
    \ the number of even numbers in the array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1pt62_rq.jl:13\nin expression starting at /tmp/tmp1pt62_rq.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two positive numbers x and y and returns the\n    biggest odd number that is\
    \ in the range [x, y] inclusive. If there's no such\n    number, then the function\
    \ should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpokykzn5j.jl:13\nin expression starting at /tmp/tmpokykzn5j.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x + 1, y)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer number and returns its factorial.\
    \ \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw6lo3dzk.jl:13\nin expression starting at /tmp/tmpw6lo3dzk.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x) \n        else return x \n    else \n        then\
    \ return choose_num(y, x) \n        else return -1 \nend \n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvyp67ghc.jl:13\nin expression starting at /tmp/tmpvyp67ghc.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer number x and\
    \ returns the \n    biggest odd integer number that is in the range [x, y] inclusive.\
    \ If \n    there's no such number, then the function should return -1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkukkefmh.jl:13\nin expression starting at /tmp/tmpkukkefmh.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x == y / 2 \n        then return x\n        \n    if y / 2 % 2 ==\
    \ 0 \n        then return choose_num(x, y / 2)\n        \n    if y / 2 % 2 ==\
    \ 1 \n        then return choose_num(x / 2, y)\n        \n    return -1\nend\n\
    </cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes two positive numbers x and y and returns the\n\
    \    biggest odd number that is in the range [x, y] inclusive. If there's no such\
    \ \n    number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz6exc4he.jl:13\nin expression starting at /tmp/tmpz6exc4he.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x % 2 == 0 \n          \
    \  then return x\n        else \n            if y % 2 == 0 \n                then\
    \ return y\n            else \n                if x % 2 == y % 2 \n          \
    \          then return x\n                else \n                    if x % 2\
    \ != y % 2 \n                        then return -1\n                    else\
    \ \n                        if x % 2 == y % 2 \n                            then\
    \ return choose_num(x div 2, y div 2)\n                        else \n       \
    \                     if x % 2 != y % 2 \n                                then\
    \ return -1\n                                else \n                         \
    \           return choose_num(x div 2, y div 2)\n</code>\n<|/ a |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27827824)\n\
    <|/ c |>\n<| c |>\nThe question was \"how to find the biggest even number in range\
    \ [x, y]\", and I provided a solution that works. I didn't say it was the best\
    \ solution, just that it works. I didn't say it is the best solution, just that\
    \ it works. I didn't say it is the best solution, just that it works. I didn't\
    \ say it is the best solution, just that it works. I didn't say it is the best\
    \ solution, just that it works. I didn't say it is the best solution, just that\
    \ it works. I didn't say it is the best solution, just that it works. I didn't\
    \ say it is the best solution, just that it works. I didn't say it is the best\
    \ solution, just that it works. I didn't say it is the best solution, just that\
    \ it works. I didn't say it is the best solution, just that it works. I didn't\
    \ say it is the best solution, just that it works. I didn't say it is the best\
    \ solution, just that it works. I didn't say it is the best solution, just that\
    \ it works. I didn't say it is the best solution, just that it works. I didn't\
    \ say it is the best solution, just that it works. I didn't say it is the best\
    \ solution, just that it works. I didn't say it is the best solution, just that\
    \ it works. I didn't say it is the best solution, just that it works. I didn't\
    \ say it is the best solution, just that it works. I didn't say it is the best\
    \ solution, just that it works. I didn't say it is the best solution, just that\
    \ it works. I didn't say it is the best solution, just that it works. I didn't\
    \ say it is the best solution, just that it works. I didn't say \nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph0tftcm7.jl:13\nin expression starting at /tmp/tmph0tftcm7.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyvi8z65c.jl:13\nin expression starting at /tmp/tmpyvi8z65c.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n \
    \       \n    return -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number x and returns the \n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such \n    number, then the function should return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp33986rah.jl:13\nin expression starting at /tmp/tmp33986rah.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y \n            then\
    \ return x\n        else \n            if x % 2 == 0 \n                then return\
    \ choose_num(x / 2, y)\n            else \n                if y % 2 == 0 \n  \
    \                  then return choose_num(x, y / 2)\n                else \n \
    \                   if x > y \n                        then return choose_num(y,\
    \ x)\n                    else \n                        return -1\n</code>\n\
    <|/ a tags=recursion,big-o,time-complexity,big-theta,algorithm |>\n<| a tags=recursion,big-o,time-complexity,big-theta,algorithm\
    \ |>\n<code>\ndef choose_num(x: int, y: int) -> int:\n    if x < y:\n        return\
    \ choose_num(y, x)\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n\
    \        return choose_num(x / 2, y)\n    else:\n        return choose_num(x,\
    \ y / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a tags=recursion,big-o,time-complexity,big-theta,algorithm\
    \ |>\n<code>\ndef choose_num(x: int, y: int) -> int:\n    if x < y:\n        return\
    \ choose_num(y, x)\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n\
    \        return choose_num(x / 2, y)\n    else:\n        return choose_num(x,\
    \ y / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a tags=recursion,big-o,time-complexity,big-theta,algorithm\
    \ |>\n<code>\ndef choose_num(x: int, y: int) -> int:\n    if x < y:\n        return\
    \ choose_num(y, x)\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n\
    \        return choose_num(x / 2, y)\n    else:\n        return choose_num(x,\
    \ y / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\ndef choose_num(x: int, y: int) -> int:\n    if x < y:\n        return\
    \ choose_num(y, x)\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n\
    \        return choose_num(x / 2, y)\n    else:\n        return choose_num(x,\
    \ y / 2)\n</code>\n<|/ a tags=recursion,big-o,time-complexity,big\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpknfr631c.jl:13\nin expression starting at /tmp/tmpknfr631c.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number and returns its factorial. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprd0kcua3.jl:13\nin expression starting at /tmp/tmprd0kcua3.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == y \n            then return x\n \
    \       else \n            if x % 2 == 0 \n                then return choose_num(x\
    \ / 2, y)\n            else \n                if y % 2 == 0 \n               \
    \     then return choose_num(x, y / 2)\n                else \n              \
    \      if x % 2 == y % 2 \n                        then return choose_num(x /\
    \ 2, y / 2)\n                    else \n                        if x % 2 == y\
    \ % 2 \n                            then return choose_num(x / 2, y / 2)\n   \
    \                     else \n                            if x % 2 == 0 \n    \
    \                            then return choose_num(x / 2, y)\n              \
    \              else \n                                if y % 2 == 0 \n       \
    \                             then return choose_num(x, y / 2)\n             \
    \                   else \n                                    return -1\n</code>\n\
    <|/ a tags=haskell,recursion |>\n<| c |>\nThis doesn't work. Try it with `choose_num(13,\
    \ 12)`.\n<|/ c |>\n<| c |>\nI fixed the bug, thank you!\n<|/ c |>\n<| c |>\nI\
    \ fixed the bug, thank you!\n<|/ c |>\n<| c |>\nI fixed the bug, thank you!\n\
    <|/ c |>\n<| a |>\n<code>\nchoose_num :: Int -> Int -> Int\nchoose_num x y = if\
    \ x > y then -1 else if x == y then x else if x `mod` 2 == 0 then choose_num (x/2)\
    \ y else if y `mod` 2 == 0 then choose_num (x,y/2) else if x `mod` 2 == y `mod`\
    \ 2 then choose_num (x/2) (y/2) else -1\n</code>\n<|/ a tags=haskell,recursion\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `choose_num(13, 12)`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thank you!\n<|/ c |>\n<| a |>\n<code>\nchoose_num\
    \ :: Int -> Int -> Int\nchoose_num x y = if x > y then -1 else if x == y then\
    \ x else if x `mod` 2 == 0 then choose_num (x/2) y else if y `mod` 2 == 0 then\
    \ choose_num (x,y/2) else if x `mod` 2 == y `mod` 2 then choose_num (x/2) (y/2)\
    \ else -1\n</code>\n<|/ a tags=haskell,recursion dscore=0 |>\n<|\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvqxldz95.jl:13\nin expression starting at /tmp/tmpvqxldz95.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 \n            ? if x == y \n     \
    \           then return x \n                else return -1\n            : \n \
    \               x % 2 == 0 && y % 2 == 1 \n                    ? if x == y \n\
    \                        then return x \n                        else return -1\n\
    \                    : \n                        x % 2 == 1 && y % 2 == 0 \n \
    \                           ? if x == y \n                                then\
    \ return x \n                                else return -1\n                \
    \            : \n                                x % 2 == 1 && y % 2 == 1 \n \
    \                                   ? if x == y \n                           \
    \             then return x \n                                        else return\
    \ -1\n                                    : \n                               \
    \         x % 2 == 0 && y % 2 == 1 \n                                        \
    \    ? if x == y \n                                                then return\
    \ x \n                                                else return -1\n       \
    \                                     : \n                                   \
    \             x % 2 == 1 && y % 2 == 0 \n                                    \
    \                ? if x == y \n                                              \
    \          then return x \n                                                  \
    \      else return -1\n                                                    : \n\
    \                                                        x % 2 == 0 && y % 2 ==\
    \ 1 \n                                                            ? if x == y\
    \ \n                                                                then return\
    \ x \n                                                                else return\
    \ -1\n                                                            : \n       \
    \                                                         x % 2 == 1 && y % 2\
    \ == 1 \n                                                                    ?\
    \ if x == y \n                                                               \
    \         then return x \n                                                   \
    \                     else return -1\n                                       \
    \                             : \n                                           \
    \                             x % 2 == 0 && y % 2 == 0 \n                    \
    \                                                        ? if x == y \n      \
    \                                                                          then\
    \ return x \n                                                                \
    \                else return -1\n                                            \
    \                                : \n                                        \
    \                                        x % 2 == 1 && y % 2 == 1 \n         \
    \                                                                           ?\
    \ if x == y \n                                                               \
    \                         then return x \n                                   \
    \                                                     else return -1\n       \
    \                                                                            \
    \ : \n                                                                       \
    \                 x % 2 == 0 && y % 2 == 0 \n                                \
    \                                                            ? if x == y \n  \
    \                                                                            \
    \                  then return x \n                                          \
    \                                                      else return -1\n      \
    \                                                                            \
    \          : \n                                                              \
    \                                  x % 2 == 1 && y % 2 == 0 \n               \
    \                                                                            \
    \         ? if x == y \n                                                     \
    \                                                   then return x \n         \
    \                                                                            \
    \                   else return -1\n                                         \
    \                                                           : \n             \
    \                                                                            \
    \               x % 2 == 0 && y % 2 == 1 \n                                  \
    \                                                                          ? if\
    \ x == y \n                                                                  \
    \                                              then return x \n              \
    \                                                                            \
    \                      else return -1\n                                      \
    \                                                                      : \n  \
    \                                                                            \
    \                                  x % 2 == 1 && y % 2 == 1 \n               \
    \                                                                            \
    \                         ? if x == y \n                                     \
    \                                                                            \
    \       then return x \n                                                     \
    \                                                                   else return\
    \ -1\n                                                                       \
    \                                             : \n                           \
    \                                                                            \
    \                 x % 2 == 0 && y % 2 == 0 \n                                \
    \                                                                            \
    \                ? if x == y \n                                              \
    \                                                                            \
    \      then return x \n                                                      \
    \                                                                          else\
    \ return -1\n                                                                \
    \                                                            : \n            \
    \                                                                            \
    \                                        x % 2 == 1 && y % 2 == 0 \n         \
    \                                                                            \
    \           \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzx6k2nmk.jl:13\nin expression starting at /tmp/tmpzx6k2nmk.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,if-statement |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_u4hh7tj.jl:13\nin expression starting at /tmp/tmp_u4hh7tj.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == 0 \n            then return y\n \
    \       else \n            if y % x == 0 \n                then return y\n   \
    \         else \n                if x % y == 0 \n                    then return\
    \ y\n                else \n                    return choose_num(x - 1, y)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 12)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 13)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 14)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 15)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 16)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 17)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 18)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 19)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 20)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 21)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 22)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 23)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 24)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 25)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 26)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 27)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 28)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 29)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 30)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 31)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 32)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, 33)\n</cell>\n<code language=julia-1.3>\n\
    choose_num(13, 34)\n</cell>\n<code language=julia-1.3>\nchoose_num(13, 35)\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(13, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjt4igsgq.jl:13\nin expression starting at /tmp/tmpjt4igsgq.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\nend\n</code>\n<|/ a |>\n\
    <| a tags=julia,if-statement |>\nThe answer by is correct, but I wanted to add\
    \ that you can also use ifelse, which is a bit more concise and readable than\
    \ if/else.\n<code>\njulia> ifelse(x < y, choose_num(y, x), choose_num(x, y))\n\
    14\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI came across this question\
    \ while trying to solve a similar problem. My solution was to create a function\
    \ which returned the biggest even number between x and y inclusive. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7wme6xb7.jl:13\nin expression starting at /tmp/tmp7wme6xb7.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else \n        then return choose_num(x div 2, y div 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9o93vzdf.jl:13\nin expression starting at /tmp/tmp9o93vzdf.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y\n        then return x\n    else if x % 2\
    \ == 0\n        then return choose_num(x / 2, y)\n    else \n        then return\
    \ choose_num(x / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ $n$ and returns $n$ if it is even, otherwise returns $n + 1$.\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmc6zcvdd.jl:13\nin expression starting at /tmp/tmpmc6zcvdd.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x + 1, y)\nend\n</code>\n<|/ a tags=julia,recursion,function\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2q87wgt.jl:13\nin expression starting at /tmp/tmpi2q87wgt.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y \n            then\
    \ return x\n        else \n            if x % 2 == 0 \n                then return\
    \ choose_num(x / 2, y)\n            else \n                if y % 2 == 0 \n  \
    \                  then return choose_num(x, y / 2)\n                else \n \
    \                   if x > y \n                        then return choose_num(y,\
    \ x)\n                    else \n                        return -1\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis code doesn't work. Try it with `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an\
    \ example where it fails?\n<|/ c |>\n<| c |>\nThe code you posted doesn't work.\
    \ Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\nThe code\
    \ you posted doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| a tags=algorithm,math,big-o\
    \ |>\nThe algorithm is as follows:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy3tu1a17.jl:13\nin expression starting at /tmp/tmpy3tu1a17.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        then return x\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ and returns the sum of its digits. \nFor example, choose_num(12) should return\
    \ 1 + 2 = 3. \nThe function should work for negative numbers as well. \nFor example,\
    \ choose_num(-12) should return -1 + 2 = -2.\nusing Test\n\n@testset begin\n\n\
    candidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6zz11maq.jl:13\nin expression starting at /tmp/tmp6zz11maq.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 ? x : choose_num(x / 2, y / 2)\nend\n\
    </cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer number and returns its factorial.\
    \ \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6gpwjbhe.jl:13\nin expression starting at /tmp/tmp6gpwjbhe.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y \n            then\
    \ return x\n        else \n            if x % 2 == 0 \n                then return\
    \ x\n            else \n                if y % 2 == 0 \n                    then\
    \ return y\n                else \n                    if x % 2 == y % 2 \n  \
    \                      then return x\n                    else \n            \
    \            if x % 2 == y % 2 \n                            then return y\n \
    \                       else \n                            if x % 2 == y % 2 \n\
    \                                then return x\n                            else\
    \ \n                                if x % 2 == y % 2 \n                     \
    \               then return y\n                                else \n       \
    \                             return -1\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. Can you give me an example where it doesn't work?\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Can you give me an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an\
    \ example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you give me an example where it doesn't work?\n<|/ c |>\n<| a tags=math,algorithm,language-agnostic\
    \ |>\n<code>\ndef choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n    \
    \    then return choose_num(y, x)\n    else \n        if x == y \n           \
    \ then return x\n        else \n            if x % 2 == 0 \n                then\
    \ return x\n            else \n                if y % 2 == 0 \n              \
    \      then return y\n                else \n                    if x % 2 == y\
    \ % 2 \n                        then return x\n                    else \n   \
    \                     if x % 2 == y % 2 \n                            then return\
    \ y\n                        else \n                            if x % 2 == y\
    \ % 2 \n                                then return x\n                      \
    \      else \n                                if x % 2 == y % 2 \n           \
    \                         then return y\n                                else\
    \ \n                                    return -1\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine. Can you give me an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an\
    \ example where it doesn't work?\n<|/ c |>\n<| \nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6mt5dr38.jl:13\nin expression starting at /tmp/tmp6mt5dr38.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == y \n            then return x\n \
    \       else \n            if x % 2 == 0 \n                then return choose_num(x\
    \ / 2, y)\n            else \n                if y % 2 == 0 \n               \
    \     then return choose_num(x, y / 2)\n                else \n              \
    \      if x % 2 == y % 2 \n                        then return choose_num(x /\
    \ 2, y / 2)\n                    else \n                        if x % 2 == y\
    \ % 2 \n                            then return choose_num(x / 2, y)\n       \
    \                 else \n                            if x % 2 == 0 \n        \
    \                        then return choose_num(x, y / 2)\n                  \
    \          else \n                                if y % 2 == 0 \n           \
    \                         then return choose_num(x / 2, y)\n                 \
    \               else \n                                    return -1\nend\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdyhn9iw7.jl:13\nin expression starting at /tmp/tmpdyhn9iw7.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpevjvz8c7.jl:13\nin expression starting at /tmp/tmpevjvz8c7.jl:13\n"
  stdout: ''
  timestamp: 1659821913
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x) \n        else return x \n    else return y \n\
    end \n</cell>\n<code language=julia-1.4>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the\n    biggest odd integer number that is in the range [x, y] inclusive. If\
    \ \n    there's no such number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_a3gp9e6.jl:13\nin expression starting at /tmp/tmp_a3gp9e6.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x - y, y)\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkv5l34_o.jl:13\nin expression starting at /tmp/tmpkv5l34_o.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \n    factorial. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0s35_gjt.jl:13\nin expression starting at /tmp/tmp0s35_gjt.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2\n        then return x\n        \n    return -1\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number and returns\
    \ its \n    factorial. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7\
    \ 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw_b5pol9.jl:13\nin expression starting at /tmp/tmpw_b5pol9.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x < y \n        then return choose_num(x,\
    \ y)\n    else if x == y \n        then return x\n    else if x % 2 == 0\n   \
    \     then return choose_num(x / 2, y)\n    else \n        then return choose_num(x\
    \ / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer number\
    \ x and returns the \n    number of digits in the number x.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3usf_v8q.jl:13\nin expression starting at /tmp/tmp3usf_v8q.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer and returns the sum\
    \ of its digits. \nFor example, choose_num(12) should return 1 + 2 = 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp0zv9if6.jl:13\nin expression starting at /tmp/tmpp0zv9if6.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return x\n        \n    if x % 2 ==\
    \ y % 2 \n        then return y\n        \n    return -1\nend\n</cell>\n<code\
    \ language=julia-1.4>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzn57e36n.jl:13\nin expression starting at /tmp/tmpzn57e36n.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(y - 1, x)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0eis8lj6.jl:13\nin expression starting at /tmp/tmp0eis8lj6.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == 0\n            then return y\n  \
    \      else \n            if y == 0\n                then return x\n         \
    \   else \n                if x % 2 == 0\n                    then return choose_num(x\
    \ / 2, y)\n                else \n                    if y % 2 == 0\n        \
    \                then return choose_num(x, y / 2)\n                    else \n\
    \                        if x % 2 == 0\n                            then return\
    \ choose_num(x / 2, y)\n                        else \n                      \
    \      if y % 2 == 0\n                                then return choose_num(x,\
    \ y / 2)\n                            else \n                                if\
    \ x % 2 == 0\n                                    then return choose_num(x / 2,\
    \ y)\n                                else \n                                \
    \    if y % 2 == 0\n                                        then return choose_num(x,\
    \ y / 2)\n                                    else \n                        \
    \                if x % 2 == 0\n                                            then\
    \ return choose_num(x / 2, y)\n                                        else \n\
    \                                            if y % 2 == 0\n                 \
    \                               then return choose_num(x, y / 2)\n           \
    \                                 else \n                                    \
    \            if x % 2 == 0\n                                                 \
    \   then return choose_num(x / 2, y)\n                                       \
    \         else \n                                                    if y % 2\
    \ == 0\n                                                        then return choose_num(x,\
    \ y / 2)\n                                                    else \n        \
    \                                                if x % 2 == 0\n             \
    \                                               then return choose_num(x / 2,\
    \ y)\n                                                        else \n        \
    \                                                    if y % 2 == 0\n         \
    \                                                       then return choose_num(x,\
    \ y / 2)\n                                                            else \n\
    \                                                                if x % 2 == 0\n\
    \                                                                    then return\
    \ choose_num(x / 2, y)\n                                                     \
    \               else \n                                                      \
    \  if x % 2 == 0\n                                                           \
    \ then return choose_num(x / 2, y)\n                                         \
    \               else \n                                                      \
    \      if y % 2 == 0\n                                                       \
    \         then return choose_num(x, y / 2)\n                                 \
    \                           else \n                                          \
    \                      if x % 2 == 0\n                                       \
    \                             then return choose_num(x / 2, y)\n             \
    \                                                       else \n              \
    \                                          if x % 2 == 0\n                   \
    \                                         then return choose_num(x / 2, y)\n \
    \                                                       else \n              \
    \                                              if y % 2 == 0\n               \
    \                                                 then return choose_num(x, y\
    \ / 2)\n                                                            else \n  \
    \                                                              if x % 2 == 0\n\
    \                                                                    then return\
    \ choose_num(x / 2, y)\n                                                     \
    \               else \n                                                      \
    \  if x % 2 == 0\n                                                           \
    \ then return choose_num(x / 2, y)\n                                         \
    \               else \n                                                      \
    \      if y % 2 == 0\n                                                       \
    \         then return choose_num(x, y / 2)\n                                 \
    \                           else \n                                          \
    \                      if x % 2 == 0\n                                       \
    \                             then return choose_num(x / 2, y)\n             \
    \                                                       else \n              \
    \                                          if x % 2 == 0\n                   \
    \                                         then return choose_num(\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjbwd3f6s.jl:13\nin expression starting at /tmp/tmpjbwd3f6s.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer and\
    \ returns the factorial of that number. \nFor example, factorial(5) = 5 \xD7 4\
    \ \xD7 3 \xD7 2 \xD7 1 = 3628800.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwgf183n1.jl:13\nin expression starting at /tmp/tmpwgf183n1.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such\n    number, then the function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp50desftj.jl:13\nin expression starting at /tmp/tmp50desftj.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == 0\n            then return y\n  \
    \      else \n            if y % 2 == 0\n                then return choose_num(x\
    \ / 2, y)\n                else return choose_num(x / 2, y + 1)\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem 7: Choosing\
    \ Numbers\nWrite a function called choose_num that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such number, then the\n    function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiyx62i2c.jl:13\nin expression starting at /tmp/tmpiyx62i2c.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    return -1\nend\n</cell>\n<code language=julia-1.1>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer\
    \ number and returns its \n    factorial. For example, factorial(5) = 5 * 4 *\
    \ 3 * 2 * 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t\
    @test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnz9nnond.jl:13\nin expression starting at /tmp/tmpnz9nnond.jl:13\n"
  stdout: ''
  timestamp: 1659821921
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n        \n\
    \    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n        \n    if\
    \ x % 2 == 1 \n        then return choose_num(x / 2, y)\n        \n    if y %\
    \ 2 == 1 \n        then return choose_num(x, y / 2)\n        \n    if x % 2 ==\
    \ 1 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 1 \n\
    \        then return choose_num(x, y / 2)\n        \n    if x % 2 == 0 \n    \
    \    then return choose_num(x / 2, y)\n        \n    if y % 2 == 0 \n        then\
    \ return choose_num(x, y / 2)\n        \n    if x % 2 == 1 \n        then return\
    \ choose_num(x / 2, y)\n        \n    if y % 2 == 1 \n        then return choose_num(x,\
    \ y / 2)\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2,\
    \ y)\n        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == 1 \n        then return choose_num(x / 2, y)\n    \
    \    \n    if y % 2 == 1 \n        then return choose_num(x, y / 2)\n        \n\
    \    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n        \n    if\
    \ y % 2 == 0 \n        then return choose_num(x, y / 2)\n        \n    if x %\
    \ 2 == 1 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 ==\
    \ 1 \n        then return choose_num(x, y / 2)\n        \n    if x % 2 == 0 \n\
    \        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0 \n    \
    \    then return choose_num(x, y / 2)\n        \n    if x % 2 == 1 \n        then\
    \ return choose_num(x / 2, y)\n        \n    if y % 2 == 1 \n        then return\
    \ choose_num(x, y / 2)\n        \n    if x % 2 == 0 \n        then return choose_num(x\
    \ / 2, y)\n        \n    if y % 2 == 0 \n        then return choose_\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpajhsc0t5.jl:13\nin expression starting at /tmp/tmpajhsc0t5.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz_dpp9st.jl:13\nin expression starting at /tmp/tmpz_dpp9st.jl:13\n"
  stdout: ''
  timestamp: 1659821919
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp4c8e17a.jl:13\nin expression starting at /tmp/tmpp4c8e17a.jl:13\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        choose_num(x, y)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ positive numbers x and y and returns the\n    biggest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl4h68h5a.jl:13\nin expression starting at /tmp/tmpl4h68h5a.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else \n        x % 2 == 0 && y % 2 == 0\n            then return\
    \ choose_num(x / 2, y / 2)\n            \n        else return -1\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd number that is in the range [x, y] inclusive. If there's no such\n    number,\
    \ then the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkkzxiecm.jl:13\nin expression starting at /tmp/tmpkkzxiecm.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return x\n        \n    if x % 2 ==\
    \ y % 2 \n        then return y\n        \n    if x % 2 != y % 2 \n        then\
    \ return choose_num(x / 2, y / 2)\n        \n    if x % 2 != y % 2 \n        then\
    \ return choose_num(x, y / 2)\n        \n    return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a\
    \ positive integer number and returns its \n    factorial. Factorial of a number\
    \ is defined as the product of its \n    individual digits. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl_fu2spm.jl:13\nin expression starting at /tmp/tmpl_fu2spm.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpezzt1q5j.jl:13\nin expression starting at /tmp/tmpezzt1q5j.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y\n        then return choose_num(y, x)\n  \
    \  else return x\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two positive numbers x and y and returns the\n    biggest odd integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyw5mjdbf.jl:13\nin expression starting at /tmp/tmpyw5mjdbf.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        \n    else if x < y \n        then return\
    \ choose_num(x, y)\n        \n    else if x == y \n        then return x\n   \
    \     \n    else \n        then return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer number and returns its \n    factorial. For example, factorial(5)\
    \ = 5 * 4 * 3 * 2 * 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphrb1_5x_.jl:13\nin expression starting at /tmp/tmphrb1_5x_.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else \n        choose_num(y - 1, x)\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 13)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 16)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 17)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 18)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 19)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 20)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 21)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 22)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 23)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 24)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 25)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 26)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 27)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 28)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 29)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 30)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 31)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 32)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 33)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 34)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 35)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 36)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(13, 37)\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9q_lohn_.jl:13\nin expression starting at /tmp/tmp9q_lohn_.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThis doesn't answer the question. `choose_num(12, 15)` should return\
    \ `14`, not `-1`.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that does return 14\n<|/ c |>\n<| a tags=julia,if-statement |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeh05w5yy.jl:13\nin expression starting at /tmp/tmpeh05w5yy.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else \n    \
    \    choose_num(x + 1, y)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a positive integer number and returns its \nfactorial. For\
    \ example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppqsbl9ea.jl:13\nin expression starting at /tmp/tmppqsbl9ea.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y \n            then\
    \ return x\n        else \n            if x % 2 == 0 \n                then return\
    \ x\n            else \n                if y % 2 == 0 \n                    then\
    \ return y\n                else \n                    if x > y \n           \
    \             then return choose_num(y, x)\n                    else return -1\n\
    end\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer number and returns\
    \ its \nfactorial. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 =\
    \ 120.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd8oehkrm.jl:13\nin expression starting at /tmp/tmpd8oehkrm.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else if x %\
    \ 2 == 0 \n        then return choose_num(x / 2, y)\n    else return choose_num(x\
    \ / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer x and returns the number\
    \ of digits in x. \nFor example, choose_num(12) should return 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpci8tb7uq.jl:13\nin expression starting at /tmp/tmpci8tb7uq.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        choose_num(x + 1, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \nfactorial. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyzn_vjep.jl:13\nin expression starting at /tmp/tmpyzn_vjep.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y\n        then return x\n\
    \        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n     \
    \   \n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n        \n\
    \    return -1\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes two positive numbers x\
    \ and y and returns the\n    biggest odd number that is in the range [x, y] inclusive.\
    \ If there's no such\n    number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf76stwfg.jl:13\nin expression starting at /tmp/tmpf76stwfg.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n \
    \       \n    return -1\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ number x and returns the sum of its digits. \nFor example, choose_num(12) should\
    \ return 1 + 2 = 3.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprp1v3_u_.jl:13\nin expression starting at /tmp/tmprp1v3_u_.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else \n        if x == y \n            then\
    \ return x\n        else \n            if x % 2 == 0 \n                then return\
    \ choose_num(x / 2, y)\n            else \n                if y % 2 == 0 \n  \
    \                  then return choose_num(x, y / 2)\n                else \n \
    \                   if x > y \n                        then return choose_num(x\
    \ / 2, y / 2)\n                    else \n                        return -1\n\
    </code>\n<|/ a tags=algorithm,math,python,recursion |>\n<| a tags=algorithm,math,python,recursion\
    \ |>\n<code>\ndef choose_num(x: int, y: int) -> int:\n    if x < y:\n        return\
    \ choose_num(y, x)\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n\
    \        return choose_num(x / 2, y)\n    elif y % 2 == 0:\n        return choose_num(x,\
    \ y / 2)\n    else:\n        return -1\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please don't post only code as an answer, but also provide an explanation what\
    \ your code does and how it solves the problem of the question. Answers with an\
    \ explanation are usually more helpful and of better quality, and are more likely\
    \ to attract upvotes.\n<|/ c |>\n<| a tags=algorithm,math,python,recursion |>\n\
    <code>\ndef choose_num(x: int, y: int) -> int:\n    if x < y:\n        return\
    \ choose_num(y, x)\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n\
    \        return choose_num(x / 2, y)\n    elif y % 2 == 0:\n        return choose_num(x,\
    \ y / 2)\n    else:\n        return -1\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please don't post only code as an answer, but also provide an explanation what\
    \ your code does and how it solves the problem of the question. Answers with an\
    \ explanation are usually more helpful and of better quality, and are more likely\
    \ to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x: int,\
    \ y: int) -> int:\n    if x < y:\n        return choose_num(y, x)\n    elif x\
    \ == y:\n        return x\n    elif x % 2 == 0:\n        return choose_num(x /\
    \ 2, y)\n    elif y % 2 == 0:\n        return choose_num(x, y / 2)\n    else:\n\
    \        return -1\n</code>\n<|/ a tags=algorithm,math,python,recursion |>\n<|\
    \ a dscore=0 |>\n<code>\ndef choose_num(x: int, y: int) -> int:\n    if x < \n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfeo348p3.jl:13\nin expression starting at /tmp/tmpfeo348p3.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9o28dbx9.jl:13\nin expression starting at /tmp/tmp9o28dbx9.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| c |>\nThis doesn't work. `choose_num(12, 15)` returns `-1`, not `14`.\n\
    <|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out.\n<|/ c |>\n<| a\
    \ tags=julia,if-statement |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmy9so8pt.jl:13\nin expression starting at /tmp/tmpmy9so8pt.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of numbers and returns\
    \ the number of \ntimes each number appears in the array. For example:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9m_w3eyx.jl:13\nin expression starting at /tmp/tmp9m_w3eyx.jl:13\n"
  stdout: ''
  timestamp: 1659821923
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2q6k8a1w.jl:13\nin expression starting at /tmp/tmp2q6k8a1w.jl:13\n"
  stdout: ''
  timestamp: 1659821923
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 != y \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl0pvfsco.jl:13\nin expression starting at /tmp/tmpl0pvfsco.jl:13\n"
  stdout: ''
  timestamp: 1659821922
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ two positive numbers x and y and returns the\n    biggest odd integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6pl7rap.jl:13\nin expression starting at /tmp/tmpf6pl7rap.jl:13\n"
  stdout: ''
  timestamp: 1659821923
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question at all. You're just rewriting\
    \ `choose_num` without explaining what it does.\n<|/ c |>\n<| c |>\nI added a\
    \ description of what it does. I hope it helps.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question at all. You're just rewriting `choose_num` without explaining\
    \ what it does.\n<|/ c |>\n<| c |>\nI added a description of what it does. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThis doesn't answer the question at all. You're\
    \ just rewriting `choose_num` without explaining what it does.\n<|/ c |>\n<| a\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4ylvo8ch.jl:13\nin expression starting at /tmp/tmp4ylvo8ch.jl:13\n"
  stdout: ''
  timestamp: 1659821923
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y\n        then return x\n    else if x < y\n\
    \        then return choose_num(x + 2, y)\n    else return choose_num(x, y - 1)\n\
    end\n</cell>\n<code language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the\n    biggest odd integer number that is in the range [x, y] inclusive. If\
    \ \n    there's no such number, then the function should return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcrdu0562.jl:13\nin expression starting at /tmp/tmpcrdu0562.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(x div 2, y div 2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer number and\
    \ returns its \nfactorial. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3lp0oh0s.jl:13\nin expression starting at /tmp/tmp3lp0oh0s.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else \n        if x == y \n            then return x\n \
    \       else \n            if x % 2 == 0 \n                then return choose_num(x\
    \ / 2, y)\n            else \n                if y % 2 == 0 \n               \
    \     then return choose_num(x, y / 2)\n                else \n              \
    \      if x % 2 == y % 2 \n                        then return choose_num(x /\
    \ 2, y / 2)\n                    else \n                        if x % 2 == y\
    \ % 2 \n                            then return choose_num(x / 2, y / 2)\n   \
    \                     else \n                            if x % 2 == 0 \n    \
    \                            then return choose_num(x / 2, y)\n              \
    \              else \n                                if y % 2 == 0 \n       \
    \                             then return choose_num(x, y / 2)\n             \
    \                   else \n                                    if x % 2 == y %\
    \ 2 \n                                        then return choose_num(x / 2, y\
    \ / 2)\n                                    else \n                          \
    \              if x % 2 == 0 \n                                            then\
    \ return choose_num(x / 2, y)\n                                        else \n\
    \                                            if y % 2 == 0 \n                \
    \                                then return choose_num(x, y / 2)\n          \
    \                                  else \n                                   \
    \             if x % 2 == y % 2 \n                                           \
    \         then return choose_num(x / 2, y / 2)\n                             \
    \                   else \n                                                  \
    \  if x % 2 == 0 \n                                                        then\
    \ return choose_num(x / 2, y)\n                                              \
    \      else \n                                                        if y % 2\
    \ == 0 \n                                                            then return\
    \ choose_num(x, y / 2)\n                                                     \
    \   else \n                                                            if x %\
    \ 2 == y % 2 \n                                                              \
    \  then return choose_num(x / 2, y / 2)\n                                    \
    \                        else \n                                             \
    \                   if x % 2 == 0 \n                                         \
    \                           then return choose_num(x / 2, y)\n               \
    \                                                     else \n                \
    \                                        if y % 2 == 0 \n                    \
    \                                        then return choose_num(x, y / 2)\n  \
    \                                                                  else \n   \
    \                                                     if x % 2 == y % 2 \n   \
    \                                                         then return choose_num(x\
    \ / 2, y / 2)\n                                                              \
    \      else \n                                                        if x % 2\
    \ == 0 \n                                                            then return\
    \ choose_num(x / 2, y)\n                                                     \
    \               else \n                                                      \
    \  if y % 2 == 0 \n                                                          \
    \  then return choose_num(x, y / 2)\n                                        \
    \                            else \n                                         \
    \               if x % 2 == y % 2 \n                                         \
    \                   then return choose_num(x / 2, y / 2)\n                   \
    \                                                 else \n                    \
    \                                    if x % 2 == 0 \n                        \
    \                                    then return choose_num(x / 2, y)\n      \
    \                                                              else \n       \
    \                                                 if y % 2 == 0 \n           \
    \                                                 then return choose_num(x, y\
    \ / 2)\n                                                                    else\
    \ \n                                                        if x % 2 == y % 2\
    \ \n                                                            then return choose_num(x\
    \ / 2, y \nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx8z4mvv9.jl:13\nin expression starting at /tmp/tmpx8z4mvv9.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ $n$ and returns the number of \ntimes $n$ is divisible by $3$. For example,\
    \ \n$$\n3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\\
    times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times\
    \ 3\\times 3\\times 3\\times 3\\times 3\\times 3\\times 3\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9twr7j8_.jl:13\nin expression starting at /tmp/tmp9twr7j8_.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x\nend\n</cell>\n<code language=julia-1.1>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd number that is in the range [x, y]\
    \ inclusive. If there's no such\n    number, then the function should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqus85itb.jl:13\nin expression starting at /tmp/tmpqus85itb.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x <= y \n      \
    \  then return x \n        else return y\n    end\n    if x == y \n        then\
    \ return x \n        else return y\n    end\n    if x == 0\n        then return\
    \ -1\n    end\n    if y == 0\n        then return -1\n    end\n    if x % 2 ==\
    \ 0\n        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n  \
    \      then return choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n        then return\
    \ choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y)\n    end\n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n\
    \    end\n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n    end\n\
    \    if y % 2 == 0\n        then return choose_num(x, y / 2)\n    end\n    if\
    \ x % 2 == 0\n        then return choose_num(x / 2, y)\n    end\n    if y % 2\
    \ == 0\n        then return choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n      \
    \  then return choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n        then return\
    \ choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n        then return choose_num(x\
    \ / 2, y)\n    end\n    if y % 2 == 0\n        then return choose_num(x, y / 2)\n\
    \    end\n    if x % 2 == 0\n        then return choose_num(x / 2, y)\n    end\n\
    \    if y % 2 == 0\n        then return choose_num(x, y / 2)\n    end\n    if\
    \ x % 2 == 0\n        then return choose_num(x / 2, y)\n    end\n    if y % 2\
    \ == 0\n        then return choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n\
    \        then return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n      \
    \  then return choose_num(x, y / 2)\n    end\n    if x % 2 == 0\n        then\
    \ return choose_num(x / 2, y)\n    end\n    if y % 2 == 0\n        then return\
    \ choose_num(x, y / 2)\n    end\n    if x % 2 == \nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc00yxrfu.jl:13\nin expression starting at /tmp/tmpc00yxrfu.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        x % 2 == 0 && y % 2 == 0 \n            ? return choose_num(x\
    \ / 2, y / 2)\n            : return  x + choose_num(y - 1, y - 1)\nend\n</code>\n\
    <|/ a tags=julia,recursion,function |>\n<| c |>\nThis doesn't work. Try `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. What error\
    \ are you getting?\n<|/ c |>\n<| c |>\nIt doesn't work for `choose_num(12, 15)`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I edited my post to include\
    \ a link to the code I tested it with.\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works. I edited my post to include a link to the code I tested it with.\n\
    <|/ c |>\n<| a tags=julia,recursion,function |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps_od6fxi.jl:13\nin expression starting at /tmp/tmps_od6fxi.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer number x and returns\
    \ the \nsmallest odd number that is in the range [x, x] inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxib0huaw.jl:13\nin expression starting at /tmp/tmpxib0huaw.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz9k1kptk.jl:13\nin expression starting at /tmp/tmpz9k1kptk.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x < y \n        then return choose_num(x,\
    \ y)\n    else return x\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpni47oiwb.jl:13\nin expression starting at /tmp/tmpni47oiwb.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number x and returns the number of\
    \ digits in x. \nFor example, choose_num(12) should return 2.\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjjkw0m0t.jl:13\nin expression starting at /tmp/tmpjjkw0m0t.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer number and returns its \nfactorial.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\
    \t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj8yq00_f.jl:13\nin expression starting at /tmp/tmpj8yq00_f.jl:13\n"
  stdout: ''
  timestamp: 1659821917
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n</code>\n<|/ a tags=recursion,julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `choose_num(12, 15)` returns `-1` instead\
    \ of `14`.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited the answer to\
    \ include a link to the documentation where you can see that `choose_num(12, 15)`\
    \ returns `14`.\n<|/ c |>\n<| c |>\nI see that now. Thanks for your help.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy_jvbcbn.jl:13\nin expression starting at /tmp/tmpy_jvbcbn.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=julia,if-statement |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpakijiuxi.jl:13\nin expression starting at /tmp/tmpakijiuxi.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.3>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy5zx1ak_.jl:13\nin expression starting at /tmp/tmpy5zx1ak_.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given number appears\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\
    \t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33,\
    \ 12354) == 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6,\
    \ 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\
    \t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw06qopn1.jl:13\nin expression starting at /tmp/tmpw06qopn1.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two positive numbers\
    \ x and y and returns the\n    biggest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpofa94xr5.jl:13\nin expression starting at /tmp/tmpofa94xr5.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y\n        then return\
    \ x\n        \n    else if x % 2 == 0\n        then return choose_num(x / 2, y)\n\
    \        \n    else return choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.3>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer number and returns its \nfactorial. For example: factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpott_e4ss.jl:13\nin expression starting at /tmp/tmpott_e4ss.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpix5nm69l.jl:13\nin expression starting at /tmp/tmpix5nm69l.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x == y \n        then return x\n    else if x <\
    \ y \n        then return choose_num(x + 1, y)\n    else return choose_num(x,\
    \ y - 1)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5q7hb5pw.jl:13\nin expression starting at /tmp/tmp5q7hb5pw.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</code>\n<|/\
    \ a tags=julia,if-statement |>\n<| c |>\nI like the idea of using recursion to\
    \ solve this problem. I'm going to try this out and see how it works.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses recursion.\n<|/ c |>\n<| a dscore=2 |>\n\
    This problem can be solved using recursion. \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjuu3rfec.jl:13\nin expression starting at /tmp/tmpjuu3rfec.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two positive numbers x and y and returns the\n    biggest\
    \ odd integer number that is in the range [x, y] inclusive. If \n    there's no\
    \ such number, then the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpufkdw16q.jl:13\nin expression starting at /tmp/tmpufkdw16q.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y\n        then return choose_num(y, x)\n  \
    \  else return x\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer number\
    \ x and returns the number of digits in x. \nFor example, choose_num(12) should\
    \ return 2.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjsko7qiy.jl:13\nin expression starting at /tmp/tmpjsko7qiy.jl:13\n"
  stdout: ''
  timestamp: 1659821924
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer number and returns\
    \ its factorial. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp88kklyj2.jl:13\nin expression starting at /tmp/tmp88kklyj2.jl:13\n"
  stdout: ''
  timestamp: 1659821925
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer $n$ and returns the number of digits\nof $n$. For example,\
    \ choose_num(12) should return 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpchzssk0i.jl:13\nin expression starting at /tmp/tmpchzssk0i.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else return\
    \ choose_num(x / 2, y)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes two positive numbers x and y and returns the\n    biggest odd integer\
    \ number that is in the range [x, y] inclusive. If \n    there's no such number,\
    \ then the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp391ndfi9.jl:13\nin expression starting at /tmp/tmp391ndfi9.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y \n        then return\
    \ x\n        \n    else if x % 2 == 0 \n        then return choose_num(x / 2,\
    \ y)\n        \n    else \n        then return choose_num(x / 2, y)\n        \n\
    \    else \n        then return choose_num(x / 2, y)\n        \n    else \n  \
    \      then return choose_num(x / 2, y)\n        \n    else \n        then return\
    \ choose_num(x / 2, y)\n        \n    else \n        then return choose_num(x\
    \ / 2, y)\n        \n    else \n        then return choose_num(x / 2, y)\n   \
    \     \n    else \n        then return choose_num(x / 2, y)\n        \n    else\
    \ \n        then return choose_num(x / 2, y)\n        \n    else \n        then\
    \ return choose_num(x / 2, y)\n        \n    else \n        then return choose_num(x\
    \ / 2, y)\n        \n    else \n        then return choose_num(x / 2, y)\n   \
    \     \n    else \n        then return choose_num(x / 2, y)\n        \n    else\
    \ \n        then return choose_num(x / 2, y)\n        \n    else \n        then\
    \ return choose_num(x / 2, y)\n        \n    else \n        then return choose_num(x\
    \ / 2, y)\n        \n    else \n        then return choose_num(x / 2, y)\n   \
    \     \n    else \n        then return choose_num(x / 2, y)\n        \n    else\
    \ \n        then return choose_num(x / 2, y)\n        \n    else \n        then\
    \ return choose_num(x / 2, y)\n        \n    else \n        then return choose_num(x\
    \ / 2, y)\n        \n    else \n        then return choose_num(x / 2, y)\n   \
    \     \n    else \n        then return choose_num(x / 2, y)\n        \n    else\
    \ \n        then return choose_num(x / 2, y)\n        \n    else \n        then\
    \ return choose_num(x / 2, y)\n        \n    else \n        then return choose_num(x\
    \ / 2, y)\n        \n    else \n        then return choose_num(x / 2, y)\n   \
    \     \n    else \n        then return choose_num(x / 2, y)\n        \n    else\
    \ \n        then return choose_num(x / 2, y)\n        \n    else \n        then\
    \ return choose_num(x / 2, y)\n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnjf51gm1.jl:13\nin expression starting at /tmp/tmpnjf51gm1.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else return x \nend \n</cell>\n<code language=julia-1.5>\nchoose_num(12, 15)\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(13, 12)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 13)\n</cell>\n<code language=julia-1.5>\nchoose_num(12, 14)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(13, 14)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(14, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(15, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(16, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(17, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(18, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(19, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(20, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(21, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(22, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(23, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(24, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(25, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(26, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(27, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(28, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(29, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(30, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(31, 15)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(32, 15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(33, 15)\n</cell>\n<code language=julia-1.5>\nchoose_num(34, 15)\n</cell>\n\
    <code language=\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2_8em2sf.jl:13\nin expression starting at /tmp/tmp2_8em2sf.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n    \
    \    \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n        \n\
    \    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n      \
    \  \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n      \
    \  \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n        \n\
    \    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n        \n    if\
    \ x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n        \n  \
    \  if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n        \n  \
    \  if x % 2 == 0 \n        then return choose_num(x / 2, y)\n        \n    if\
    \ y % 2 == 0 \n        then return choose_num(x, y / 2)\n        \n    if x %\
    \ 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n        \n    if\
    \ x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n        \n    if\
    \ x % 2 == 0 \n        then return choose_num(x / 2, y)\n        \n    if y %\
    \ 2 == 0 \n        then return choose_num(x, y / 2)\n        \n    if x % 2 ==\
    \ y % 2 \n        then return choose_num(x / 2, y / 2)\n        \n    if x % 2\
    \ == y % 2 \n        then return choose_num(x, y / 2)\n        \n    if x % 2\
    \ == 0 \n        then return choose_num(x / 2, y)\n        \n    if y % 2 == 0\
    \ \n        then return choose_num(x, y / 2)\n        \n    if x % 2 == y % 2\
    \ \n        then return choose_num(x / 2, y / 2)\n        \n    if x % 2 == y\
    \ % 2 \n        then return choose_num(x, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzzfxbmlt.jl:13\nin expression starting at /tmp/tmpzzfxbmlt.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        else return x\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer and returns\
    \ the sum of its digits. \nFor example, choose_num(12) should return 1 + 2 + 3\
    \ = 6.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprawjv0bx.jl:13\nin expression starting at /tmp/tmprawjv0bx.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n    else if x < y \n        then return choose_num(x,\
    \ y)\n    else if x == y \n        then return x\n    else \n        then return\
    \ -1\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t\
    @test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0jehtd77.jl:13\nin expression starting at /tmp/tmp0jehtd77.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else \n\
    \        then return choose_num(x / 2, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer number and returns its \nfactorial. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_h2_efcy.jl:13\nin expression starting at /tmp/tmp_h2_efcy.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y\n        then return x\n  \
    \  else if x % 2 == 0\n        then return choose_num(x / 2, y)\n    else \n \
    \       then return choose_num(x / 2, y)\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe code you posted is incorrect. `choose_num(12, 15)` returns\
    \ `14` instead of `-1`.\n<|/ c |>\n<| c |>\nI fixed the code now. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm7jivso4.jl:13\nin expression starting at /tmp/tmpm7jivso4.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x == y / 2 \n        then return x\n        \n    if y / 2 == x\
    \ \n        then return y\n        \n    if y / 2 == x / 2 \n        then return\
    \ y\n        \n    if y / 2 == x / 2 + 1 \n        then return y\n        \n \
    \   if y / 2 == x / 2 + 2 \n        then return y\n        \n    if y / 2 == x\
    \ / 2 + 3 \n        then return y\n        \n    if y / 2 == x / 2 + 4 \n    \
    \    then return y\n        \n    if y / 2 == x / 2 + 5 \n        then return\
    \ y\n        \n    if y / 2 == x / 2 + 6 \n        then return y\n        \n \
    \   if y / 2 == x / 2 + 7 \n        then return y\n        \n    if y / 2 == x\
    \ / 2 + 8 \n        then return y\n        \n    if y / 2 == x / 2 + 9 \n    \
    \    then return y\n        \n    if y / 2 == x / 2 + 10 \n        then return\
    \ y\n        \n    if y / 2 == x / 2 + 11 \n        then return y\n        \n\
    \    if y / 2 == x / 2 + 12 \n        then return y\n        \n    if y / 2 ==\
    \ x / 2 + 13 \n        then return y\n        \n    if y / 2 == x / 2 + 14 \n\
    \        then return y\n        \n    if y / 2 == x / 2 + 15 \n        then return\
    \ y\n        \n    if y / 2 == x / 2 + 16 \n        then return y\n        \n\
    \    if y / 2 == x / 2 + 17 \n        then return y\n        \n    if y / 2 ==\
    \ x / 2 + 18 \n        then return y\n        \n    if y / 2 == x / 2 + 19 \n\
    \        then return y\n        \n    if y / 2 == x / 2 + 20 \n        then return\
    \ y\n        \n    if y / 2 == x / 2 + 21 \n        then return y\n        \n\
    \    if y / 2 == x / 2 + 22 \n        then return y\n        \n    if y / 2 ==\
    \ x / 2 + 23 \n        then return y\n        \n    if y / 2 == x / 2 + 24 \n\
    \        then return y\n        \n    if y / 2 == x / 2 + 25 \n        then return\
    \ y\n        \n    if y / 2 == x / 2 + 26 \n        then return y\n        \n\
    \    if y / 2 == x / 2 + 27 \n        then return y\n        \n    if y / \nusing\
    \ Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12, 15)\
    \ == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\
    \t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27,\
    \ 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpochcsr3y.jl:13\nin expression starting at /tmp/tmpochcsr3y.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n        \n    else if x == y\n        then return\
    \ x\n        \n    else if x % 2 == 0\n        then return choose_num(x / 2, y)\n\
    \        \n    else return choose_num(x / 2, y)\nend\n</cell>\n<code language=julia-1.1>\n\
    choose_num(12, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer number x and returns the number that is\nthe sum of all even numbers\
    \ from 1 to x.\nusing Test\n\n@testset begin\n\ncandidate = choose_num;\n\t@test(candidate(12,\
    \ 15) == 14)\n\t@test(candidate(13, 12) == -1)\n\t@test(candidate(33, 12354) ==\
    \ 12354)\n\t@test(candidate(5234, 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\
    \t@test(candidate(27, 10) == -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546,\
    \ 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6kn1sdct.jl:13\nin expression starting at /tmp/tmp6kn1sdct.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return choose_num(y, x)\n        \n    if x == y \n        then return\
    \ x\n        \n    if x % 2 == 0 \n        then return choose_num(x / 2, y)\n\
    \        \n    if y % 2 == 0 \n        then return choose_num(x, y / 2)\n    \
    \    \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x / 2, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n        then return choose_num(x, y / 2)\n\
    \        \n    if x % 2 == y % 2 \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt0hd1ggp.jl:13\nin expression starting at /tmp/tmpt0hd1ggp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x < y \n       \
    \ then return choose_num(y, x)\n    else if x == y \n        then return x\n \
    \   else \n        then return choose_num(y - 1, x)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two positive numbers x and y and returns\
    \ the \nbiggest odd number that is in the range [x, y] inclusive. If there's no\
    \ such number, \nthen the function should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13,\
    \ 12) == -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234,\
    \ 5233) == -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) ==\
    \ -1)\n\t@test(candidate(7, 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp22wf3ngk.jl:13\nin expression starting at /tmp/tmp22wf3ngk.jl:13\n"
  stdout: ''
  timestamp: 1659821926
- exit_code: 1
  program: "\"\"\"This function takes two positive numbers x and y and returns the\n\
    \    biggest even integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\n\n    For example:\n\
    \    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    \"\
    \"\"\nfunction choose_num(x::Int64, y::Int64)::Int64 \n    if x > y \n       \
    \ then return -1\n    else if x < y \n        then return choose_num(y, x)\n \
    \   else \n        choose_num(x, y)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes two positive numbers x and y and returns the \nbiggest odd\
    \ number that is in the range [x, y] inclusive. If there's no such \nnumber, then\
    \ the function should return -1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ choose_num;\n\t@test(candidate(12, 15) == 14)\n\t@test(candidate(13, 12) ==\
    \ -1)\n\t@test(candidate(33, 12354) == 12354)\n\t@test(candidate(5234, 5233) ==\
    \ -1)\n\t@test(candidate(6, 29) == 28)\n\t@test(candidate(27, 10) == -1)\n\t@test(candidate(7,\
    \ 7) == -1)\n\t@test(candidate(546, 546) == 546)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2xksuj6z.jl:13\nin expression starting at /tmp/tmp2xksuj6z.jl:13\n"
  stdout: ''
  timestamp: 1659821926
