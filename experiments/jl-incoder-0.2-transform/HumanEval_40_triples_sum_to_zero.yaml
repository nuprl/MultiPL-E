name: HumanEval_40_triples_sum_to_zero
language: jl
prompt: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n \
  \   it returns True if there are three distinct elements in the list that\n    sum\
  \ to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n \
  \   false\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    true\n    >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    false\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    true\n\
  \    >>> triples_sum_to_zero([1])\n    false\n    \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
  \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
  \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
  \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
  \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
  \ 3, 5, -100]) == false)\nend\n"
completions: ["    triples_sum_to_zero(l, 0)\nend", "    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    \n    for x in l\n        for y in l\n            for\
    \ z in l\n                if x+y+z == 0 \n                    triples_sum_to_zero[triples_sum_to_zero\
    \ == 0] += 1\n                end\n            end\n        end\n    end\n   \
    \ \n    return triples_sum_to_zero == 3\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero([1,3,5,0])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers as an input, and returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.", "   \
    \ triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum +=\
    \ i\n        if sum == 0 \n            return true\n    return false\nend", " \
    \   triples_sum_to_zero(l, 0)\nend", "    \n    l = sort(l)\n    \n    sum = 0\n\
    \    \n    for x in l\n        sum += x\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = sum([x == 0 for x in l])\n    return triples_sum_to_zero == 3\nend\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 3, -2, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1, 2, 3, 7])\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n</cell>\n\
    <code language=julia-1.5>\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a list of integers and returns True if there are\
    \ three distinct elements in the list that sum to zero, and False otherwise.",
  "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    \n    sum = 0\n    for\
    \ i in l\n        sum += i\n        if sum == 0\n            return true\n   \
    \ return false\nend", "    sum = 0\n    for i in l\n        sum += i\n       \
    \ if sum == 0 \n            return true\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n     \
    \   sum += i\n        if sum == 0 \n            return true\n        end\n   \
    \ end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ triples_sum_to_zero takes a list of integers as an input.\n    it returns True\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n        if\
    \ sum == 0 \n            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,-4,5])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,-4,-5,6])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,-4,-5,-6,7])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,8])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,9])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,10])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,-10,11])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,12])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,16])\n",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ return false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are two distinct elements in\
    \ the list that sum to zero, and False otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0\n            return true\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ of integers as an input, and returns True if there are two distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    sum = 0\n    for i\
    \ in l\n        sum += i\n        if sum > 0\n            return false\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n    return false\nend",
  "    sum = 0\n    for x in l\n        sum += x\n        if sum == 0 \n         \
    \   return true\n    return false\nend", "    triples_sum_to_zero = zeros(Int64,\
    \ 3)\n    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2] = true\n \
    \   triples_sum_to_zero[3] = true\n    triples_sum_to_zero[1] = (l[1] == 0)\n\
    \    triples_sum_to_zero[2] = (l[2] == 0)\n    triples_sum_to_zero[3] = (l[3]\
    \ == 0)\n    triples_sum_to_zero[1] = (triples_sum_to_zero[1] && triples_sum_to_zero[2])\n\
    \    triples_sum_to_zero[2] = (triples_sum_to_zero[2] && triples_sum_to_zero[3])\n\
    \    triples_sum_to_zero[3] = (triples_sum_to_zero[3] && triples_sum_to_zero[1])\n\
    \    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers as an input,\
    \ and returns True if there are two distinct elements in the list that sum to\
    \ zero, and False otherwise.", "    triples_sum_to_zero = @view l |> Vector{Int64}\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    triples_sum_to_zero = l == sort(l)\n\
    \    \n    return triples_sum_to_zero\nend", "    \n    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers as an input, and returns a list of integers whose\
    \ elements are the sum of the positive integers in the list. For example, if the\
    \ input list is [4, -2, 3], the output should be [4, 6].", "    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ || triples_sum_to_zero(x) == true\n    end\n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n   \
    \     sum += i\n        if sum > 0\n            return false\n        end\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n   \
    \ triples_sum_to_zero takes a list of integers as an input.\n    it returns True\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n        if\
    \ sum == 0 \n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,3,-3,1])\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a list of integers as\
    \ an input and returns a list of integers representing the number of times each\
    \ of the numbers in the list appears in the list.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0\n            return true\n    return\
    \ false\nend", "    triples_sum_to_zero = l == [0, 0, 0]\n    return triples_sum_to_zero\n\
    end", "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n  \
    \          return true\n    return false\nend", "    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0\n            return true\n    return false\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers containing the first n integers in the vector\
    \ that sum to zero.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0, false)\nend", "    triples_sum_to_zero = @view l |> filter((_,i,_,_) -> i\
    \ == 0 || i == 1 || i == 2, lengths(l))\n    triples_sum_to_zero[1]\nend", " \
    \   \n    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.3>", "    triples_sum_to_zero = @view l == [0,0,0]\n  \
    \  return sum(triples_sum_to_zero) == 3\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(vec(1:10000));\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called triples_sum_to_zero that takes a list of integers as an input.\n\
    It returns True if there are three distinct elements in the list that sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero = sum(l) == 0 \n    return triples_sum_to_zero\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0 \n            return true\n        end\n\
    \    end\n    return false\nend", "    triples_sum_to_zero(l, 0, false)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_", "    \n    sum = 0\n    for x in l\n        sum += x\n       \
    \ if sum == 0\n            return true\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test\
    \ triples_sum_to_zero([1, 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2,\
    \ 3, 7]) == false\n@test triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test\
    \ triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called triples_sum_to_zero that takes a list of integers as an input.\nIt returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    \n    sum = 0\n    for i in l\n        sum += i\n  \
    \      if sum > 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns True if there are three distinct elements in the list that\
    \ sum to zero, and False otherwise.", "    \n    triples_sum_to_zero = @view l\
    \ |> filter(x->(x+0)==0, l) |> filter(x->(x+0)==0, l) |> filter(x->(x+0)==0, l)\n\
    \    \n    if length(triples_sum_to_zero) == 3\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers as an input, and returns the number\
    \ of integers in the list that sum to zero.", "    triples_sum_to_zero = l ==\
    \ [0,0,0]\n    return triples_sum_to_zero\nend", "    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0 \n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n    return false\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers as an input and returns\
    \ the number of positive integers in the list.", "    triples_sum_to_zero(l, 0)\n\
    end\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero(l, 0)\nend",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n          \
    \  return true\n    return false\nend", "    triples_sum_to_zero(l, 0)\nend",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n    return false\nend", "    triples_sum_to_zero(l, 0)\nend",
  "    \n    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n     \
    \       return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called triples_sum_to_zero that takes a list of integers\
    \ as an input.\nIt returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n     \
    \   sum += i\n        if sum == 0\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    triples_sum_to_zero\
    \ = false \n    for x in l \n        if x == 0 \n            triples_sum_to_zero\
    \ = true \n            break \n        if x != 0 \n            for y in l \n \
    \               if y == x \n                    triples_sum_to_zero = false \n\
    \                    break \n                if y != x \n                    for\
    \ z in l \n                        if z == x \n                            triples_sum_to_zero\
    \ = false \n                            break \n                        if z !=\
    \ x \n                            triples_sum_to_zero = true \n              \
    \              break \n                    break \n            break \n    return\
    \ triples_sum_to_zero \nend \n</cell>\n<code language=julia-1.4>\n\"\"\"\n   \
    \ triples_sum_to_zero takes a list of integers as an input.\n    it returns True\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ False otherwise.", "    \n    sum = 0\n    for i in l\n        sum += i\n  \
    \      if sum == 0\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ return false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.2 Write a function that checks whether a number\
    \ is prime or not. You may use the Sieve of Eratosthenes or the Miller-Rabin primality\
    \ test.", "    triples_sum_to_zero = @view l |> filter(x->x==0 || x==-3 || x==-7,\
    \ l)\n    return length(triples_sum_to_zero) == 3\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero\
    \ = @. length(l) == 3\n    triples_sum_to_zero = @. sum(l) == 0 && triples_sum_to_zero\n\
    \    return triples_sum_to_zero\nend", "    \n    sum = 0\n    for i in l\n  \
    \      sum += i\n    end\n    \n    if sum == 0 \n        return false\n    else\n\
    \        return true\n    end\nend", "    \n    triples_sum_to_zero = @view l\
    \ |> filter(x->(x+0)==0, l) |> length==3\n    return triples_sum_to_zero\nend",
  "    triples_sum_to_zero = @view l |> group_by(&sum) |> map( x -> length(x) == 3,\
    \ x )\n    return any(triples_sum_to_zero)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(vec)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns the number of integers in the vector\
    \ that are divisible by 3.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert\
    \ triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n    return false\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero\
    \ & l .== 0\n    triples_sum_to_zero = triples_sum_to_zero & l .== 0\n    triples_sum_to_zero\
    \ = triples_sum_to_zero & l ", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>", '    triples_sum_to_zero = l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .||
    l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .||
    l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .||
    l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .||
    l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .||
    l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .||
    l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .==
    0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l .== 0 .|| l ', "    triples_sum_to_zero\
    \ = @view l |> group_by(&sum) |> length == 3 |> length == 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = @view l |> filter(x->x==0 || x==-x, l) |> filter(x->x==0 || x==-x, l) |> filter(x->x==0\
    \ || x==-x, l)\n    return length(triples_sum_to_zero)==3\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    \n    sum = 0\n    for i in l\n     \
    \   sum += i\n        if sum == 0\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0\n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "    sum = 0\n    for i in l\n\
    \        sum += i\n        if sum == 0 \n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0\n            return true\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are two distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero\
    \ = l == sum([i for i in l if i != 0])\n    return triples_sum_to_zero\nend",
  "    triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    sum = 0\n    for x in\
    \ l\n        sum += x\n        if sum == 0 \n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend", "  \
    \  sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n           \
    \ return false\n    return true\nend\n</cell>\n<code language=julia-1.5>", " \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers as an input, and returns a list\
    \ of integers such that each element in the list is an integer multiple of its\
    \ position in the list. For example, if the input list is [1,2,3,4,5], the output\
    \ should be [2,4,6,8,10].", "    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    return length(triples_sum_to_zero) == 3\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the number of\
    \ positive integers in the list.", "    triples_sum_to_zero(l, 0)\nend", "   \
    \ sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero(l, 0, false)\nend", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n    return false\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ as an input, and returns True if there are two distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0, false)\n\
    end", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers as an input, and returns True\
    \ if there are three distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    triples_sum_to_zero = @view l |> filter((x) -> x==0 || x==-3\
    \ || x==-7, l) |> filter((x) -> x==0 || x==-3 || x==-7, l)\n    return length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns the number of integers in the list that are divisible by\
    \ 3.", "    sum = 0\n    for x in l\n        sum += x\n        if sum == 0 \n\
    \            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = l == [0,0,0]\n\
    \    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>", " \
    \   triples_sum_to_zero = l == [0,0,0]\n    return triples_sum_to_zero\nend",
  "    triples_sum_to_zero = \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n", "    sum = 0\n    for x in\
    \ l\n        sum += x\n        if sum == 0 \n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0,\
    \ l)\n    triples_sum_to_zero = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l)\n    triples_sum_to_zero", "    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend", "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero = l .== 0 .|| l .== -3 .|| l .== -5 .|| l\
    \ .== -7 .|| l .== -9 \n    return triples_sum_to_zero\nend", "    triples_sum_to_zero(l,\
    \ 0, false)\nend", "    \n    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0 \n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  triples_sum_to_zero takes a list of integers as an input.\n    it returns True\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ False otherwise.", "    triples_sum_to_zero = false \n    for x in l\n     \
    \   if x != 0\n            if triples_sum_to_zero\n                return false\n\
    \            else\n                triples_sum_to_zero = true\n            end\n\
    \        end\n    end\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0\n            return true\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([1,3,5,0]) == false\n@assert\
    \ triples_sum_to_zero([1,3,-2,1]) == true\n@assert triples_sum_to_zero([1,2,3,7])\
    \ == false\n@assert triples_sum_to_zero([2,4,-5,3,9,7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are two distinct elements in\
    \ the list that sum to zero, and False otherwise.", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum == 0 \n            return true\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.",
  "    sum = 0\n    for i in l\n        sum += i\n        if sum == 0 \n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0 \n            return true\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero = @where sum(l) ==\
    \ 0 \n    return triples_sum_to_zero\nend", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero = \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n", "    sum = 0\n    for i in\
    \ l\n        sum += i\n        if sum > 0\n            return false\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers as an input, and returns a list of all unique elements in the list\
    \ that sum to zero.", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,2,-3,4])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,2,-3,4])\n</", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  triples_sum_to_zero takes a list of integers as an input.\n    it returns True\
    \ if there are three distinct elements in the list that\n    sum to zero, and\
    \ False otherwise.", "    triples_sum_to_zero = sum([triples_sum_to_zero(triple)\
    \ for triple in l])\n    return triples_sum_to_zero == 3\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert\
    \ triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\n4.2 The function is_palindrome\n\
    The function is_palindrome takes as input a list of integers and returns True\
    \ if all the integers in the list are palindromes, and False otherwise.", "  \
    \  \n    triples_sum_to_zero = zeros(Int64, 3)\n    \n    for triple in triples(l)\n\
    \        triples_sum_to_zero[triple] = true\n    end\n    \n    return !any(triples_sum_to_zero)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ as an input, and returns True if there are two distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0 \n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.", "    \n \
    \   sum = 0\n    for i in l\n        sum += i\n        if sum == 0\n         \
    \   return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1,3,5,0]) == false\n@test triples_sum_to_zero([1,3,-2,1])\
    \ == true\n@test triples_sum_to_zero([1,2,3,7]) == false\n@test triples_sum_to_zero([2,4,-5,3,9,7])\
    \ == true\n@test triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers as an input, and returns True\
    \ if there are three distinct elements in the list that sum to zero, and False\
    \ otherwise.", "    \n    triples_sum_to_zero = false\n    \n    for x in l\n\
    \        for y in l\n            for z in l\n                if x + y + z == 0\n\
    \                    triples_sum_to_zero = true\n                    break\n \
    \   return triples_sum_to_zero\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of integers and returns the number of elements in the list\
    \ that sum to zero.", "    triples_sum_to_zero(l, 0)\nend", "    \n    triples_sum_to_zero\
    \ = @view l |> Vector{Int64}\n    \n    triples_sum_to_zero[triples_sum_to_zero\
    \ == 0] = true\n    \n    triples_sum_to_zero[triples_sum_to_zero != 0] = false\n\
    \    \n    triples_sum_to_zero\nend", "    triples_sum_to_zero(l, 0)\nend", " \
    \   triples_sum_to_zero = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n  \
    \  triples_sum_to_zero[2] = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x\
    \ in l\n        if triples_sum_to_zero[x] == 1\n            return true\n    \
    \    end\n    end\n    return false\nend", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero(l, 0)\nend", "    triples_sum_to_zero = zeros(Int64, 3)\n\
    \    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2] = true\n    triples_sum_to_zero[3]\
    \ = true\n    for x in l\n        if triples_sum_to_zero[x] == true\n        \
    \    triples_sum_to_zero[x+3] = true\n        end\n    end\n    return triples_sum_to_zero[1]\
    \ && triples_sum_to_zero[2] && triples_sum_to_zero[3]\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    sum = 0\n    for x in l\n        sum +=\
    \ x\n        if sum == 0 \n            return true\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0]) == false\n\
    @assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero = \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n   \
    \     sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n    \
    \    sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n     \
    \   sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n      \
    \  sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n       \
    \ sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l)\
    \ == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) ==\
    \ 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0\
    \ && \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 &&\
    \ \n        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n\
    \        sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n \
    \       sum(l) == 0 && \n        sum(l) == 0 && \n        sum(l) == 0 && \n  \
    \      sum(l) == 0 && \n        sum(l) == 0 && \n", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    sum = 0\n    for i in l\n        sum += i\n        if sum > 0\n\
    \            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero = l == sum(l)\n   \
    \ return triples_sum_to_zero\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0 \n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers as an input,\
    \ and returns True if there are two distinct elements in the list that sum to\
    \ zero, and False otherwise.", "    triples_sum_to_zero = @view l |> filter(x->x==0\
    \ || x==-x, l) |> length==3\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero\
    \ = l .== 0\n    return triples_sum_to_zero\nend", "    triples_sum_to_zero(l,\
    \ 0)\nend", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>", "    \n    triples_sum_to_zero\
    \ = zeros(3)\n    \n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ || triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero + triples_sum_to_zero\
    \ + triple", "    sum = 0\n    for i in l\n        sum += i\n        if sum >\
    \ 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.", "    triples_sum_to_zero = @view l |> filter(x->(x==0\
    \ || x==-3), l)\n    return length(triples_sum_to_zero) == 3\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n</cell>\n<text>\n\
    Exercise 2\nWrite a function called triples_sum_to_zero that takes a list of integers\
    \ as an input.\nIt returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    sum = 0\n    for i in l\n    \
    \    sum += i\n        if sum == 0\n            return true\n    return false\n\
    end", "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers as an input, and returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.", "    triples_sum_to_zero\
    \ = @view l |> group_by(&sum) |> length == 3 |> length\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(vec(1:100000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend",
  "    sum = 0\n    for x in l\n        sum += x\n        if sum == 0 \n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.", "    sum = 0\n    for i in l\n        sum += i\n    \
    \    if sum == 0\n            return true\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sum = 0\n    for i in l\n        sum += i\n     \
    \   if sum > 0\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ as an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero = l == [0,0,0]\n\
    \    return triples_sum_to_zero\nend", "    sum = 0\n    for i in l\n        sum\
    \ += i\n        if sum == 0\n            return true\n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.", "    triples_sum_to_zero(l, 0)\nend",
  "    triples_sum_to_zero(l, 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers as an input, and returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.", "   \
    \ triples_sum_to_zero = @view l |> Vector{Int64}\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triple", "    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers as an input, and returns True\
    \ if there are two distinct elements in the list that sum to zero, and False otherwise.",
  "    triples_sum_to_zero = @. length(l) == 3 && sum(l) == 0 && all(l[i] > 0 for\
    \ i in 1:3)\n    return triples_sum_to_zero\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
