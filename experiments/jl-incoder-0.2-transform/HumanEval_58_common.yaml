name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two lists.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    return collect(common)\nend",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<text>\nExercise: Write a function that returns the number of\
    \ times each element appears in two lists.", "    \n    common = Set()\n    \n\
    \    for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n \
    \       push!(common, x)\n    end\n    \n    common\nend", "    \n    common =\
    \ Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n\
    \        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for a in l1\n        for b in l2\n        \
    \    if a == b\n                common = Set([a])\n            else\n        \
    \        common = Set([a] ++ common)\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n     \
    \   common = Set([x] ++ common)\n    end\n    return common\nend", "    \n   \
    \ common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for el in l1 \u222A\
    \ l2\n        push!(common, el)\n    end\n    \n    return common\nend", "   \
    \ \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n \
    \   for x in l2\n        push!(common, x)\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for i in l1\n        push!(common,\
    \ i)\n    end\n    \n    for i in l2\n        push!(common, i)\n    end\n    \n\
    \    common\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1 do \n        common.add(x)\n\
    \    end\n    for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set()\n    for x in l1 do \n     \
    \   common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in l1 do \n        common.add(x)\n   \
    \ end\n    for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set()\n    for x in l1 do \n     \
    \   common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in l1 do \n        common.add(x)\n   \
    \ end\n    for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set()\n    for x in l1 do \n     \
    \   common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in l1 do \n        common.add(x)\n   \
    \ end\n    for x in l2 do \n        common.add(x)\n", "    \n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set([x for x in common if x != 0])\n\
    \    return common\nend", "    \n    common = Set()\n    \n    for el in l1 do\
    \ \n        if !contains(common, el) \n            common = Set([el])\n      \
    \  end\n    end\n    \n    for el in l2 do \n        if !contains(common, el)\
    \ \n            common = Set([el])\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for el1 in l1\n        for el2 in l2\n            if el1 == el2\n \
    \               common = Set([el1])\n            else\n                common\
    \ = Set([el1]) \u222A common\n            end\n        end\n    end\n    \n  \
    \  return common\nend", "    \n    common = Set()\n    \n    for x in l1\n   \
    \     if x in l2\n            common.add(x)\n        end\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1 do \n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2 do \n        common = Set([x] ++ common)\n    end\n\
    \    common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end", "    \n    common = Set()\n    for el in l1 \u222A l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>\n@time common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the number of common elements in two vectors.", "    \n    common\
    \ = Set()\n    \n    for el in l1 do \n        common = Set([el]) | common\n \
    \   end\n    \n    for el in l2 do \n        common = Set([el]) | common\n   \
    \ end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of times each element appears in two\
    \ given lists.", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the common elements in two lists.", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    \n    return sort(common)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common =\
    \ Set()\n    for x in l1 do \n        push!(common, x)\n    end\n    for x in\
    \ l2 do \n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are duplicates\
    \ in either list. For example, `common([1,4,3,34,653,2,5], [5,7,1,5,9,653,121])`\
    \ returns `[5, 653]` instead of `[1, 5, 653]`.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I fixed the code. Now it works.\n<|/ c |>\n<| a tags=julia,set\
    \ |>\nI like to use Sets.jl for these kinds of problems:\n<code>\njulia> using\
    \ Sets", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<text>\nThe function above returns a set containing\
    \ the unique common elements. We can now use the function above to find the common\
    \ elements in two lists.", "    \n    common = Set()\n    for a in l1\n      \
    \  for b in l2\n            if a == b\n                common = Set([a])\n   \
    \             break\n            else\n                common = Set([a]) & common\n\
    \        end\n    end\n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend\n</cell>\n<code language=julia-1.4>", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1 do\
    \ \n        push!(common, x)\n    end\n    \n    for x in l2 do \n        push!(common,\
    \ x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of unique elements in a given list.",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    common = Set([x for x in l1 if x in l2])\n    common\
    \ = Set([x for x in l2 if x in l1])\n    common = Set([x for x in l1 if x in common])\n\
    \    common = Set([x for x in l2 if x in common])\n    common = Set([x for x in\
    \ l1 if x in common])\n    common = Set([x for x in l2 if x in common])\n    common\
    \ = Set([x for x in l1 if x in common])\n    common = Set([x for x in l2 if x\
    \ in common])\n    common = Set([x for x in l1 if x in common])\n    common =\
    \ Set([x for x in l2 if x in common])\n    common = Set([x for x in l1 if x in\
    \ common])\n    common = Set([x for x in l2 if x in common])\n    common = Set([x\
    \ for x in l1 if x in common])\n    common = Set([x for x in l2 if x in common])\n\
    \    common = Set([x for x in l1 if x in common])\n    common = Set([x for x in\
    \ l2 if x in common])\n    common = Set([x for x in l1 if x in common])\n    common\
    \ = Set([x for x in l2 if x in common])\n    common = Set([x for x in l1 if x\
    \ in common])\n    common = Set([x for x in l2 if x in common])\n    common =\
    \ Set([x for x in l1 if x in common])\n    common = Set([x for x in l2 if x in\
    \ common])\n    common = Set([x for x in l1 if x in common])\n    common = Set([x\
    \ for x in l2 if x in common])\n    common = Set([x for x in l1 if x in common])\n\
    \    common = Set([x for x in l2 if x in common])\n    common = Set([x for x in\
    \ l1 if x in common])\n    common = Set([x for x in l2 if x in common])\n    common\
    \ = Set([x for x in l1 if x in common])\n    common = Set([x for x in l2 if x\
    \ in common])\n    common = Set([x for x in l1 if x in common])\n    common =\
    \ Set([x for x in l2 if x in common])\n    common = Set([x for x in l1 if x in\
    \ common])\n    common = Set([x for x in l2 if x in common])\n    common = Set([x\
    \ for x in l1 if x in common])\n    common = Set([x for x in l2 if x in common])\n\
    \    common = Set([x for x in l1 if x in common])\n    common = Set([x for x in\
    \ l2 if x in common])\n    common = Set([x for x in l1 if x in common])\n    common\
    \ = Set([x for x in l2 if x in common])\n    common = Set", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return sort(common)\nend", "   \
    \ \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    \n    for x in l1 do \n        push!(common,\
    \ x)\n    end\n    \n    for x in l2 do \n        push!(common, x)\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    for x in l1 do \n        common = common.add(x)\n    end\n\
    \    for x in l2 do \n        common = common.add(x)\n    end\n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend", "    \n\
    \    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for a in l1\n        for b in l2\n            if a == b\n                common\
    \ = Set([a])\n            else\n                common = Set([a] + common)\n \
    \       end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1 \u222A l2\n        push!(common,\
    \ el)\n    end\n    \n    return common\nend", "    \n    common = Set()\n   \
    \ \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    common = Set([i for\
    \ i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common\
    \ = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n\
    \    common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2\
    \ if i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n", " \
    \   \n    common = Set()\n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n                break\n        end\n\
    \    end\n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    \n    return sort(common)\nend", "    \n    common = Set()\n   \
    \ \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<text>\nExercise: Write a function that returns the common\
    \ elements for two lists.\nWrite a function that returns the common elements for\
    \ two lists.\nWrite a function that returns the common elements for two lists.\n\
    Write a function that returns the common elements for two lists.\nWrite a function\
    \ that returns the common elements for two lists.\nWrite a function that returns\
    \ the common elements for two lists.\nWrite a function that returns the common\
    \ elements for two lists.\nWrite a function that returns the common elements for\
    \ two lists.\nWrite a function that returns the common elements for two lists.\n\
    Write a function that returns the common elements for two lists.\nWrite a function\
    \ that returns the common elements for two lists.\nWrite a function that returns\
    \ the common elements for two lists.\nWrite a function that returns the common\
    \ elements for two lists.\nWrite a function that returns the common elements for\
    \ two lists.\nWrite a function that returns the common elements for two lists.\n\
    Write a function that returns the common elements for two lists.\nWrite a function\
    \ that returns the common elements for two lists.\nWrite a function that returns\
    \ the common elements for two lists.\nWrite a function that returns the common\
    \ elements for two lists.\nWrite a function that returns the common elements for\
    \ two lists.\nWrite a function that returns the common elements for two lists.\n\
    Write a function that returns the common elements for two lists.\nWrite a function\
    \ that returns the common elements for two lists.\nWrite a function that returns\
    \ the common elements for two lists.\nWrite a function that returns the common\
    \ elements for two lists.\nWrite a function that returns the common elements for\
    \ two lists.\nWrite a function that returns the common elements for two lists.\n\
    Write a function that returns the common elements for two lists.\nWrite a function\
    \ that returns the common elements for two lists.\nWrite a function that returns\
    \ the common elements for two lists.\nWrite a function that returns the common\
    \ elements for two lists.\nWrite a function that returns the common elements for\
    \ two lists.\nWrite a function that returns the common elements for two lists.\n\
    Write a function that returns the common elements for two lists.\nWrite a function\
    \ that returns the common elements for two lists.\nWrite a function that returns\
    \ the common elements for two lists.\nWrite a function that returns the common\
    \ elements for ", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        common = Set([x] ++ common)\n    end\n    for x in l2\n        common\
    \ = Set([x] ++ common)\n    end\n    return Set([x for x in common if x != 0])\n\
    end", "    \n    common = Set()\n    \n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    \n    return common\nend\n</code>\n<|/\
    \ a tags=julia,set-theory |>\n<| a dscore=2 |>\nI wrote a package called SetOps.jl\
    \ for this. It has many useful set operations, including union, intersection,\
    \ difference, symmetric difference, etc.\n<code>\njulia> using SetOps", "    \n\
    \    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n   \
    \     push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el] + common)\n\
    \    end\n    \n    for el in l2\n        common = Set([el] + common)\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    \n    for\
    \ a in l1\n        for b in l2\n            if a == b\n                common.add(a)\n\
    \            end\n        end\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n\
    \        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        if !contains(common, x)\n            push!(common, x)\n\
    \        end\n    end\n    for x in l2\n        if !contains(common, x)\n    \
    \        push!(common, x)\n        end\n    end\n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el in l1 \n        if !contains(common, el) \n            common = Set([el])\n\
    \        else \n            common = Set([el] ++ common)\n    end\n    \n    for\
    \ el in l2 \n        if !contains(common, el) \n            common = Set([el])\n\
    \        else \n            common = Set([el] ++ common)\n        end\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1 do \n        common = Set([x] + common)\n    end\n    for x in\
    \ l2 do \n        common = Set([x] + common)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in two given vectors.", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    common = Set([x for x in l1 if x in l2])\n    common\
    \ = Set([x for x in l2 if x in l1])\n    common = Set([x for x in l1 if x in l2])\n\
    \    common = Set([x for x in l2 if x in l1])\n    common = Set([x for x in l1\
    \ if x in l2])\n    common = Set([x for x in l2 if x in l1])\n    common = Set([x\
    \ for x in l1 if x in l2])\n    common = Set([x for x in l2 if x in l1])\n   \
    \ common = Set([x for x in l1 if x in l2])\n    common = Set([x for x in l2 if\
    \ x in l1])\n    common = Set([x for x in l1 if x in l2])\n    common = Set([x\
    \ for x in l2 if x in l1])\n    common = Set([x for x in l1 if x in l2])\n   \
    \ common = Set([x for x in l2 if x in l1])\n    common = Set([x for x in l1 if\
    \ x in l2])\n    common = Set([x for x in l2 if x in l1])\n    common = Set([x\
    \ for x in l1 if x in l2])\n    common = Set([x for x in l2 if x in l1])\n   \
    \ common = Set([x for x in l1 if x in l2])\n    common = Set([x for x in l2 if\
    \ x in l1])\n    common = Set([x for x in l1 if x in l2])\n    common = Set([x\
    \ for x in l2 if x in l1])\n    common = Set([x for x in l1 if x in l2])\n   \
    \ common = Set([x for x in l2 if x in l1])\n    common = Set([x for x in l1 if\
    \ x in l2])\n    common = Set([x for x in l2 if x in l1])\n    common = Set([x\
    \ for x in l1 if x in l2])\n    common = Set([x for x in l2 if x in l1])\n   \
    \ common = Set([x for x in l1 if x in l2])\n    common = Set([x for x in l2 if\
    \ x in l1])\n    common = Set([x for x in l1 if x in l2])\n    common = Set([x\
    \ for x in l2 if x in l1])\n    common = Set([x for x in l1 if x in l2])\n   \
    \ common = Set([x for x in l2 if x in l1])\n    common = Set([x for x in l1 if\
    \ x in l2])\n    common = Set([x for x in l2 if x in l1])\n    common = Set([x\
    \ for x in l1 if x in l2])\n    common = Set([x for x in l2 if x in l1])\n   \
    \ common = Set([x for x in l1 if x in l2])\n    common = Set([x for x in l2 if\
    \ x in l1])\n    common = Set", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1 do \n        if x in l2 \n            common.add(x)\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n       \
    \ common.add(i)\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    return common\nend", "    \n\
    \    common = Set()\n    \n    for x in l1 do \n        if !haskey(common, x)\n\
    \            common[x] = true\n        end\n    end\n    \n    for x in l2 do\
    \ \n        if !haskey(common, x)\n            common[x] = true\n        end\n\
    \    end\n    \n    return collect(keys(common))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of unique elements in two lists.", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1 do\
    \ \n        common = Set([x] + common)\n    end\n    for x in l2 do \n       \
    \ common = Set([x] + common)\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1 do \n        common = Set([x]\
    \ ++ common)\n    end\n    for x in l2 do \n        common = Set([x] ++ common)\n\
    \    end\n    return common\nend", "    \n    common = Set()\n    \n    for x\
    \ in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    return common\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] + common)\n    end\n    for x in l2\n\
    \        common = Set([x] + common)\n    end\n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2,\
    \ 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=",
  "    \n    common = Set()\n    \n    for x in l1\n        if x in common\n     \
    \       continue\n        else\n            common = Set([x])\n        end\n \
    \   end\n    \n    for x in l2\n        if x in common\n            continue\n\
    \        else\n            common = Set([x])\n        end\n    end\n    \n   \
    \ return common\nend\n</cell>\n<code language=julia-1.3>", "    \n    common =\
    \ Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return sort(common)\nend", "   \
    \ \n    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    common = Set()\n    \n  \
    \  for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n      \
    \  common.add(i)\n    end\n    \n    return common\nend", "    \n    common =\
    \ Set()\n    for x in l1\n        common = common & Set(l2)\n    end\n    \n \
    \   return common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n\
    \    end\n    for x in l2\n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in common\n        common.add(x)\n    end\n    return common\nend",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1\n        if x in common\n            push!(common, x)\n       \
    \ else\n            push!(common, x)\n        end\n    end\n    \n    for x in\
    \ l2\n        if x in common\n            push!(common, x)\n        else\n   \
    \         push!(common, x)\n        end\n    end\n    \n    return common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.3>", " \
    \   \n    common = Set()\n    common = Set([i for i in l1 if i in l2])\n    common\
    \ = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n\
    \    common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1\
    \ if i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return collect(common)\nend", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   common = Set([x] + common)\n    end\n    for x in l2\n        common = Set([x]\
    \ + common)\n    end\n    return Set([x for x in common if x != 0])\nend", " \
    \   \n    common = Set()\n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common.add(a)\n            end\n        end\n    end\n\
    \    return common\nend", "    \n    common = Set()\n    \n    for x in l1\n \
    \       push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for a in l1\n        for b in l2\n            if a == b\n         \
    \       common = Set([a])\n                break\n            elseif common ==\
    \ Set()\n                common = Set([a])\n            elseif common == Set()\n\
    \                common = Set([a])\n            elseif common == Set()\n     \
    \           common = Set([a])\n            elseif common == Set()\n          \
    \      common = Set([a])\n            elseif common == Set()\n               \
    \ common = Set([a])\n            elseif common == Set()\n                common\
    \ = Set([a])\n            elseif common == Set()\n                common = Set([a])\n\
    \            elseif common == Set()\n                common = Set([a])\n     \
    \       elseif common == Set()\n                common = Set([a])\n          \
    \  elseif common == Set()\n                common = Set([a])\n            elseif\
    \ common == Set()\n                common = Set([a])\n            elseif common\
    \ == Set()\n                common = Set([a])\n            elseif common == Set()\n\
    \                common = Set([a])\n            elseif common == Set()\n     \
    \           common = Set([a])\n            elseif common == Set()\n          \
    \      common = Set([a])\n            elseif common == Set()\n               \
    \ common = Set([a])\n            elseif common == Set()\n                common\
    \ = Set([a])\n            elseif common == Set()\n                common = Set([a])\n\
    \            elseif common == Set()\n                common = Set([a])\n     \
    \       elseif common == Set()\n                common = Set([a])\n          \
    \  elseif common == Set()\n                common = Set([a])\n            elseif\
    \ common == Set()\n                common = Set([a])\n            elseif common\
    \ == Set()\n                common = Set([a])\n            elseif common == Set()\n\
    \                common = Set([a])\n            elseif common == Set()\n     \
    \           common = Set([a])\n            elseif common == Set()\n          \
    \      common = Set([a])\n            elseif common == Set()\n               \
    \ common = Set([a])\n            elseif common == Set()\n                common\
    \ = Set([a])\n            elseif common == Set()\n                common = Set([a])\n\
    \            elseif common == Set()\n                common = Set([a])\n", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = common & Set([x])\n    end\n    for x in l2\n\
    \        common = common & Set([x])\n    end\n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for a in l1\n\
    \        for b in l2\n            if a == b\n                common = Set([a,\
    \ b])\n            end\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nThank you for the answer. Could you please explain how this works?\n<|/\
    \ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\n\
    Thank you for the explanation. Could you please explain how this works?\n<|/ c\
    \ |>\n<| c |>\nThe `Set` type is a mutable set that has `push!` and `pop!` methods.\
    \ `push!` adds an element to the set and `pop!` removes the last element from\
    \ the set. `Set` has `union`, `intersection`, `difference`, `issubset`, `issuperset`,\
    \ `isdisjoint`, and `isordered` methods. `union` returns a new set that is the\
    \ union of the two sets. `intersection` returns a new set that is the intersection\
    \ of the two sets. `difference` returns a new set that is the difference of the\
    \ two sets. `issubset` returns true if the first set is a subset of the second\
    \ set. `issuperset` returns true if the first set is a superset of the second\
    \ set. `isdisjoint` returns true if the two sets are disjoint. `isordered` returns\
    \ true if the two sets are ordered.\n<|/ c |>\n<| c |>\n`Set` has `union`, `intersection`,\
    \ `difference`, `issubset`, `issuperset`, `isdisjoint`, and `isordered` methods.\
    \ `union` returns a new set that is the union of the two sets. `intersection`\
    \ returns a new set that is the intersection of the two sets. `difference` returns\
    \ a new set that is the difference of the two sets. `issubset` returns true if\
    \ the first set is a subset of the second set. `issuperset` returns true if the\
    \ first set is a superset of the second set. `isdisjoint` returns true if the\
    \ two sets are disjoint. `isordered` returns true if the two sets are ordered.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe answer by is very good, but I wanted to add an\
    \ alternative solution that is more efficient and doesn't require the use of a\
    \ Set:\n<code>", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for i in l1\n  \
    \      common.add(i)\n    end\n    \n    for i in l2\n        common.add(i)\n\
    \    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    common = Set()\n    \n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n            else\n              \
    \  common = Set([a] ++ common)\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    for x in l1 do \n        common = common\
    \ & Set([x])\n    end\n    for x in l2 do \n        common = common & Set([x])\n\
    \    end\n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    common = Set()\n    \n    for x in l1 do \n        if x in l2 \n        \
    \    common.add(x)\n        end\n    end\n    \n    return common\nend", "   \
    \ \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for i in l1\n        common.add(i)\n\
    \    end\n    \n    for i in l2\n        common.add(i)\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2\
    \ if i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el in l1\n        push!(common, el)\n    end\n    \n    for el in l2\n\
    \        push!(common, el)\n    end\n    \n    return collect(common)\nend", " \
    \   \n    common = Set()\n    \n    for el in l1 \n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    for el\
    \ in l2 \n        if !contains(common, el)\n            common = Set([el])\n \
    \       end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return collect(common)\nend", "    \n \
    \   common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for elt in l1 do \n        if elt in l2 \n            common = common + [elt]\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el in l1\n        common = Set([el] + common)\n    end\n    \n\
    \    for el in l2\n        common = Set([el] + common)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return collect(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    common = Set()\n    \n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common.add(a)\n            end\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    for a in l1\n        for b in l2\n            if a == b\n\
    \                common = Set([a])\n                break\n            else\n\
    \                common = Set([a] ++ common)\n        end\n    end\n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the unique elements of a list that do not appear\
    \ in another list.", "    \n    common = Set()\n    \n    for x in l1\n      \
    \  push!(common, x)\n    end\n    \n    for x in l2\n        push!(common, x)\n\
    \    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>\n@time common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the unique elements of a given vector. \nHint: Use Set()", "  \
    \  \n    common = Set()\n    for x in l1 do \n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2 do \n        common = Set([x] ++ common)\n    end\n\
    \    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    \n    for el in l1\n        if !contains(common, el)\n        \
    \    common = Set([el])\n        end\n    end\n    \n    for el in l2\n      \
    \  if !contains(common, el)\n            common = Set([el])\n        end\n   \
    \ end\n    \n    return common\nend\n</cell>\n<code language=julia-1.4>", "  \
    \  \n    common = Set()\n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n                break\n        end\n\
    \    end\n    return common\nend", "    \n    common = Set()\n    \n    for el\
    \ in l1 do \n        if !contains(common, el) \n            common = Set([el])\n\
    \        else \n            common = Set([el]) & common\n        end\n    end\n\
    \    \n    for el in l2 do \n        if !contains(common, el) \n            common\
    \ = Set([el])\n        else \n            common = Set([el]) & common\n      \
    \  end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of common elements for two lists.", "    \n    common = Set()\n \
    \   for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n  \
    \  end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.3>\n@time common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the number of unique elements in a given list.\nHint: Use a Set", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I tested it and it\
    \ works perfectly! I still don't understand why my code doesn't work, though.\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for the explanation! I still don't understand why my code\
    \ doesn't work, though.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the explanation! I still don't\
    \ understand why my code doesn't work, though.\n<|/ c |>\n<| a |>\n<code>", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\n\
    The @time macro will give you the runtime in seconds. You can divide this by the\
    \ number of elements to get the average runtime.", "    \n    common = Set()\n\
    \    common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2\
    \ if i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for i in l1\n        common = Set([i | common])\n    end\n    \n  \
    \  for i in l2\n        common = Set([i | common])\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for el in l1\n  \
    \      if !contains(common, el)\n            common = Set([el])\n        end\n\
    \    end\n    \n    for el in l2\n        if !contains(common, el)\n         \
    \   common = Set([el])\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    for x in l1 \n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    return collect(common)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of unique elements in a given vector.", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return sort(common)\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    common = Set()\n    \n\
    \    for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n \
    \       push!(common, x)\n    end\n    \n    return collect(common)\nend", " \
    \   \n    common = Set()\n    \n    for el in l1\n        push!(common, el)\n\
    \    end\n    \n    for el in l2\n        push!(common, el)\n    end\n    \n \
    \   return collect(common)\nend", "    \n    common = Set()\n    \n    for el\
    \ in l1\n        common = Set([el] + common)\n    end\n    \n    for el in l2\n\
    \        common = Set([el] + common)\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    for el\
    \ in l2\n        if !contains(common, el)\n            common = Set([el])\n  \
    \      end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        if x in l2\n         \
    \   common.add(x)\n        end\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    \n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n                break\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n    \
    \    push!(common, x)\n    end\n    \n    return collect(common)\nend", "    \n\
    \    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for el in l1 \u222A\
    \ l2\n        common \u222A= Set(el)\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    for x in l1\n        if x in l2\n            common\
    \ = common + Set([x])\n        end\n    end\n    return common\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n\
    \    end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    \n    for\
    \ el in l1 \n        push!(common, el)\n    end\n    \n    for el in l2\n    \
    \    push!(common, el)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for el in l1\n\
    \        common = Set([el]) & common\n    end\n    \n    for el in l2\n      \
    \  common = Set([el]) & common\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n\
    \        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
