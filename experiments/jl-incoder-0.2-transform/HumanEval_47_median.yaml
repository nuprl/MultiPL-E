name: HumanEval_47_median
language: jl
prompt: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2,\
  \ 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\
  \nfunction median(l::Vector{Int64})::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
  \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
  \ 7]) == 7)\nend\n"
completions: ["    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n       \
    \ return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument, and return the median of the list.",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(DomainError(\n\
    \            \"median requires at least one element\"))\n    end\n    mid = round(Int,\
    \ mid)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function to compute the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest value. \nIf the list is empty, return Inf.",
  "    sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return l[mid/2 - 1] + l[mid/2]/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should work for\
    \ both real and complex numbers. \nThe function should work for any number of\
    \ arguments. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. ", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if length(l)%2==0\n\
    \        return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function to compute the mean of a list of numbers.", "    l = sort(l)\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    \n    mid = l / 2\n    \n    if l[i] < mid\n        return median(l[i+1..end])\n\
    \    else\n        return median(mid..l[i+1..end])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers, rounded to two decimal places.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    l = sort(l)\n    \n    mid = length(l)\n\
    \    \n    if mid == 1\n        return l[1]\n    end\n    \n    if mid % 2 ==\
    \ 0\n        return (l[mid-1] + l[mid]) / 2\n    else\n        return l[mid]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ to compute the mean of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the mean of the numbers.\nThe function\
    \ should raise an error if the list is empty.\nThe function should raise an error\
    \ if the list contains non-numbers.\nThe function should raise an error if the\
    \ list contains negative numbers.", "    l = sort(l)\n    mid = length(l)\n  \
    \  if mid == 0 \n        return NaN\n    \n    if mid == 1\n        return l[1]\n\
    \    \n    if mid%2 == 0\n        return median(l[1..mid/2])\n    else\n     \
    \   return median(l[mid/2..mid])\n    end\nend", "    sort(l)\n    \n    if length(l)%2==0\n\
    \        return l[floor(length(l)/2)]\n    else\n        return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers, rounded\
    \ to two decimal places.", "    sort(l)\n    mid = length(l)\n    if mid == 0\n\
    \        throw(DomainError(\n            \"median requires at least one element\"\
    ))\n    end\n    half = floor(Int64, mid/2)\n    if half == mid\n        return\
    \ l[half]\n    else\n        return (l[half] + l[mid-1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ == 0\n        throw(DomainError())\n    end\n    \n    if mid % 2 == 0\n   \
    \     return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=1)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], dims=2)\n</cell>\n<text>\nMedian Absolute Deviation",
  "    sort(l)\n    l = l[end]\n    i = length(l)\n    if i <= 1\n        return l[1]\n\
    \    end\n    mid = floor(Int64, i/2)\n    if l[mid] < l[mid+1]\n        return\
    \ median(l[mid+1:end])\n    else\n        return median(l[mid+1:end-1]) + l[mid]\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there\
    \ are two equal numbers in the list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two equal numbers in the list. Try it with\
    \ `median([1, 1, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two equal\
    \ numbers in the list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work if there are two equal numbers in the list. Try it with `median([1,\
    \ 1, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two equal numbers\
    \ in the list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2==0\n       \
    \ return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers. Write a test that calls the function with lists of numbers from\
    \ 1 to 10. Test your function with lists of numbers from 1 to 10. Do you get the\
    \ same results as in the previous exercise?", "    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        return median\n    end\n    \n    i = findfirst(x\
    \ -> x > median, l)\n    \n    if i == length(l) || i == 0\n        return median\n\
    \    end\n    \n    j = findfirst(x -> x < median, l)\n    \n    if j == length(l)\
    \ || j == 0\n        return median\n    end\n    \n    if i == j\n        return\
    \ median\n    end\n    \n    if l[i] < median\n        return median\n    end\n\
    \    \n    if l[j] > median\n        return median\n    end\n    \n    if l[i]\
    \ > median\n        return median\n    end\n    \n    if l[j] < median\n     \
    \   return median\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, i.e. how far a data\
    \ point is from the median of the data set. MAD is defined as the median of the\
    \ absolute deviations from the median.", "    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the mean of a list of\
    \ numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n    \
    \    return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the median of a list of numbers,\
    \ rounded to two decimal places.", "    l = sort(l)\n    mid = length(l)\n   \
    \ if mid == 0 \n        return l[1]\n    \n    if mid == 1 \n        return l[1]\n\
    \    \n    if l[mid] == l[mid-1] \n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] + 1 \n        return median(l)\n    \n    if l[mid] == l[mid-1]\
    \ - 1 \n        return median(l)\n    \n    return median(l)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe median is the number in\
    \ the middle of the sorted list of numbers. \nIf the length of the list is even,\
    \ the median is the mean of the two middle numbers. \nIf the length of the list\
    \ is odd, the median is the middle number of the two middle numbers. \nThe function\
    \ should work for any type of list. \nFor example, median([3, 1, 2, 4, 5]) should\
    \ return 3, and median([-10, 4, 6, 1000, 10, 20]) should return 15. \nThe function\
    \ median should work for any type of list. \nFor example, median([3, 1, 2, 4,\
    \ 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return 15.\
    \ \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, ", "    l = sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers, rounded to two decimal places.", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid == 1 \n        return l[1]\n    else \n        return\
    \ (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does\
    \ not answer the question. He wants the median of a list of numbers, not an array.\n\
    <|/ c |>\n<| c |>\nThe question asks for the median of a list of numbers, not\
    \ an array. He also states that he wants the median of a list of numbers. He also\
    \ states that he wants the median of a list of numbers. He also states that he\
    \ wants the median of a list of numbers. He also states that he wants the median\
    \ of a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that ", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median is defined as the\
    \ value separating the higher half of a sample from the lower half. For example,\
    \ if the sample is [3, 1, 2, 4, 5], the median is 3.", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid == 0 \n        return l[1] \n    else \n        return\
    \ l[mid//2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nThe median of a set of numbers is called the \"middle-most\" number. For\
    \ example, in the set {1, 2, 3, 4}, the median is 3. If there are an even number\
    \ of elements in the set, the median is the mean of the two middle numbers. If\
    \ the set has an odd number of elements, then the median is the average of the\
    \ two middle numbers.", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the mean of a list of numbers.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1] \n    \n    mid =\
    \ floor(mid)\n    if mid == 1 \n        return l[1] \n    \n    mid = floor(mid)\n\
    \    if mid == 2 \n        return l[2]\n    \n    mid = floor(mid)\n    if mid\
    \ == 3 \n        return l[3]\n    \n    mid = floor(mid)\n    if mid == 4 \n \
    \       return l[4]\n    \n    mid = floor(mid)\n    if mid == 5 \n        return\
    \ l[5]\n    \n    mid = floor(mid)\n    if mid == 6 \n        return l[6]\n  \
    \  \n    mid = floor(mid)\n    if mid == 7 \n        return l[7]\n    \n    mid\
    \ = floor(mid)\n    if mid == 8 \n        return l[8]\n    \n    mid = floor(mid)\n\
    \    if mid == 9 \n        return l[9]\n    \n    mid = floor(mid)\n    if mid\
    \ == 10 \n        return l[10]\n    \n    mid = floor(mid)\n    if mid == 11 \n\
    \        return l[11]\n    \n    mid = floor(mid)\n    if mid == 12 \n       \
    \ return l[12]\n    \n    mid = floor(mid)\n    if mid == 13 \n        return\
    \ l[13]\n    \n    mid = floor(mid)\n    if mid == 14 \n        return l[14]\n\
    \    \n    mid = floor(mid)\n    if mid == 15 \n        return l[15]\n    \n \
    \   mid = floor(mid)\n    if mid == 16 \n        return l[16]\n    \n    mid =\
    \ floor(mid)\n    if mid == 17 \n        return l[17]\n    \n    mid = floor(mid)\n\
    \    if mid == 18 \n        return l[18]\n    \n    mid = floor(mid)\n    if mid\
    \ == 19 \n        return l[19]\n    \n    mid = floor(mid)\n    if mid == 20 \n\
    \        return l[20]\n    \n    mid = floor(mid)\n    if mid == 21 \n       \
    \ return l[21]\n    \n    mid = floor(mid)\n    if mid == 22 \n        return\
    \ l[22]\n    \n    mid = floor(mid)\n    if mid == 23 \n        return l[23]\n\
    \    \n    mid = floor(mid)\n    if mid == 24 \n        return l[24]\n    \n \
    \   mid = floor(mid)\n    if mid == 25 \n        return l[25]\n    \n    mid =\
    \ floor(mid)\n", "    sort(l)\n    mid = length(l)\n    if mid == 0\n        throw(DomainError())\n\
    \    end\n    return l[mid]\nend", "    sort(l)\n    l = l[end]\n    mid = floor(Int,\
    \ length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that checks that the function returns\
    \ the correct value when given a list of numbers. Write a function that returns\
    \ the median of a list of strings. Write a test that checks that the function\
    \ returns the correct value when given a list of strings. Write a function that\
    \ returns the median of a list of vectors of numbers. Write a test that checks\
    \ that the function returns the correct value when given a list of vectors of\
    \ numbers.", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 1\n \
    \       return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function to compute the mean of a list of numbers.", "   \
    \ l = sort(l)\n    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n\
    \        return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n \
    \   \n    if mid == 1\n        return l[1]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] + l[mid+1]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] + l[mid+1] - l[mid]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ - l[mid+1] + l[mid]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ + l[mid+1] - l[mid] - l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1] - l[mid+1] + l[mid] - l[mid+1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1] + l[mid+1] - l[mid] - l[mid+1] + l[mid]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] - l[mid+1] + l[mid] - l[mid+1] + l[mid] + l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid] -\
    \ l[mid+1] + l[mid] - l[mid] + l[mid+1]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] - l[mid+1] + l[mid] - l[mid+1] + l[mid] - l[mid] + l[mid+1]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid] - l[mid+1]\
    \ + l[mid] - l[mid] + l[mid+1] + l[mid]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] - l[mid+1] + l[mid] - l[mid+1] + l[mid] - l[mid] + l[mid+1]", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n\
    \    \n    if mid == 1 \n        return l[1]\n    \n    if l[mid] == l[mid-1]\
    \ \n        return l[mid]\n    \n    i = mid - 1\n    j = mid + 1\n    \n    while\
    \ i <= j \n        if l[i] < l[j] \n            i += 1\n        else \n      \
    \      j -= 1\n        end \n    \n    if i == j \n        return l[i]\n    \n\
    \    return l[j]\nend", "    sort(l)\n    l = l[end]\n    i = findfirst(x -> x\
    \ < l, l)\n    if i == length(l) \n        return l\n    else \n        return\
    \ l[(i + 1) \xF7 2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a list\
    \ of numbers. Write a test that checks that your function works.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2-1])/2\n    end\nend\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code returns the median of a set of numbers.\
    \ To get the median of a set of numbers, you need to sort the numbers and then\
    \ return the middle value.\n<|/ c |>\n<| c |>\nI believe that median is defined\
    \ as the value that appears more than n/2 times in the set. Your code returns\
    \ the median of a set of numbers. To get the median of a set of numbers, you need\
    \ to sort the numbers and then return the middle value.\n<|/ c |>\n<| c |>\nThe\
    \ median of a set of numbers is defined as the value that appears more than n/2\
    \ times in the set. Your code returns the median of a set of numbers. To get the\
    \ median of a set of numbers, you need to sort the numbers and then return the\
    \ middle value.\n<|/ c |>\n<| c |>\nThe median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. Your code returns\
    \ the median of a set of numbers. To get the median of a set of numbers, you need\
    \ to sort the numbers and then return the middle value.\n<|/ c |>\n<| c |>\nThe\
    \ median of a set of numbers is defined as the value that appears more than n/2\
    \ times in the set. Your code returns the median of a set of numbers. To get the\
    \ median of a set of numbers, you need to sort the numbers and then return the\
    \ middle value.\n<|/ c |>\n<| a tags=julia,median |>\nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ returns the median of a set of numbers. To get the median of a set of numbers,\
    \ you need to sort the numbers and then return the middle value.\n<code>", " \
    \   sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n\
    <text>\nThe median of a list of numbers is defined as the value separating the\
    \ higher half of the list from the lower half. For example, in the list [3, 1,\
    \ 2, 4, 5], the median is 3.", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ == 0 \n        return l[1]\n    \n    mid = floor(mid)\n    if mid % 2 == 0\n\
    \        return l[mid]\n    \n    return l[mid-1] + l[mid]/2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. \nThe median is the number in\
    \ the middle of the sorted list.\nIf the list is empty, return Inf.", "    l =\
    \ sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend", "    l\
    \ = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question. He is asking\
    \ for a way to find the median of a list of Int64s.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"How to find the median of a list of Int64s?\" The answer was \"Use median()\
    \ from Statistics.jl\"\n<|/ c |>\n<| c |>\nThe question was \"How to find the\
    \ median of a list of Int64s?\" The answer was \"Use median() from Statistics.jl\"\
    \n<|/ c |>\n<| a tags=julia |>\nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of numbers is defined as the\
    \ middle number of the set. \nThe median of a set of number", "    sort(l)\n \
    \   l = l[end]\n    mid = floor(Int, length(l)+1)/2\n    if length(l) == 1 \n\
    \        return l\n    if mid == 1 \n        return l[mid]\n    if l[mid] < l[mid-1]\
    \ \n        return median(l[mid-1:end])\n    else \n        return median(l[mid-1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument and return the median\
    \ of the numbers. \nThe median is the number in the middle of the sorted list.\
    \ \nIf the list is empty, return Inf.", "    sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[(length(l)+1)/2-1]\n    else\n        return l[(length(l)+1)/2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument. \nThe function should\
    \ return the median of the numbers in the list.\nThe median is the number in the\
    \ middle of the list that has the highest value.", "    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2==0\n        return l[mid]\n    else\n     \
    \   return 0.5*(l[mid-1]+l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the median of a list of numbers. Write a test that checks that your function\
    \ works.", "    sort(l)\n    return l[floor(Int, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median\
    \ of a finite set of numbers is called the \"typical\" number. For example, the\
    \ median of the set {1, 2, 3} is (approximately) 1.", "    \n    l = sort(l)\n\
    \    \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument.\
    \ \nThe function should return the median of the numbers in the list.\nThe median\
    \ is the number in the middle of the list that has the smallest absolute value.",
  "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n    if length(l)%2==0\n   \
    \     return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2.0\n    end\n\
    end\n</code>\n<|/ a tags=julia,median,statistics |>\n<| c |>\nThis doesn't work\
    \ if there are an even number of elements in the list. For example, median([1,2,3])\
    \ returns 2 instead of 1.\n<|/ c |>\n<| c |>\nI fixed the code so that it works\
    \ with even number of elements. Thanks for pointing out.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe median is defined as the middle value of a sorted list. \n<code>\njulia>\
    \ median([1,2,3])\n1.5", "    l = sort(l)\n    mid = length(l)\n    if mid ==\
    \ 0 \n        return l[1]\n    \n    if mid == 1\n        return l[1]\n    \n\
    \    if l[mid] == l[mid - 1]\n        return l[mid]\n    \n    if l[mid] == l[mid\
    \ - 2]\n        return l[mid]\n    \n    if l[mid] == l[mid - 3]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid - 4]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid - 5]\n        return l[mid]\n    \n    if l[mid] == l[mid\
    \ - 6]\n        return l[mid]\n    \n    if l[mid] == l[mid - 7]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid - 8]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid - 9]\n        return l[mid]\n    \n    if l[mid] == l[mid\
    \ - 10]\n        return l[mid]\n    \n    if l[mid] == l[mid - 11]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid - 12]\n        return l[mid]\n    \n  \
    \  if l[mid] == l[mid - 13]\n        return l[mid]\n    \n    if l[mid] == l[mid\
    \ - 14]\n        return l[mid]\n    \n    if l[mid] == l[mid - 15]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid - 16]\n        return l[mid]\n    \n  \
    \  if l[mid] == l[mid - 17]\n        return l[mid]\n    \n    if l[mid] == l[mid\
    \ - 18]\n        return l[mid]\n    \n    if l[mid] == l[mid - 19]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid - 20]\n        return l[mid]\n    \n  \
    \  if l[mid] == l[mid - 21]\n        return l[mid]\n    \n    if l[mid] == l[mid\
    \ - 22]\n        return l[mid]\n    \n    if l[mid] == l[mid - 23]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid - 24]\n        return l[mid]\n    \n  \
    \  if l[mid] == l[mid - ", "    l = sort(l)\n    mid = floor(Int, length(l)/2)\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a given list of numbers. \nThe mode is the number that appears most\
    \ often in the list.\nFor example, mode([3, 1, 2, 4, 5]) should return 3.\nHint:\
    \ use mode() from the Statistics package.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1] \n    else \n        return l[mid] \nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a list of numbers\
    \ is defined as the value separating the higher half of the list from the lower\
    \ half. For example, in the list [-10, 4, 6, 1000, 10, 20], the median is 10.",
  "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(DomainError(\"\
    \"))\n    end\n    median = l[mid//2]\n    return median\nend", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 1\n        return l[1]\n    elseif mid ==\
    \ 2\n        return 0.5 * (l[1] + l[2])\n    else\n        return 0.5 * (l[floor(Int64,\
    \ mid/2)]\n                     + l[ceil(Int64, mid/2)])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    sort(l)\n    mid = length(l)\n    if mid % 2\
    \ == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2.0\n    end\nend", "    l = sort(l)\n    mid = length(l)\n    if mid\
    \ == 0 \n        return l[1]\n    \n    mid = round(Int64, mid)\n    \n    if\
    \ mid%2 == 0\n        return l[mid/2]\n    \n    return median(l[mid/2:end]) +\
    \ median(l[mid/2:mid-1])\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers, rounded to a specified number of decimal places.", "    sort(l)\n\
    \    l = l[end]\n    i = findfirst(x -> x < l, l)\n    if i == length(l) \n  \
    \      return l\n    else \n        return l[i-1]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers. \nThe median is the number\
    \ in the middle of the list that has the highest number of elements. \nIf the\
    \ list has an even number of elements, then the median is the mean of the two\
    \ middle numbers. \nIf the list has an odd number of elements, then the median\
    \ is the number in the middle of the list that has the lowest number of elements.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend", "    sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| a dscore=2 |>\nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that has the highest value.  \n<code>", "    l = sort(l)\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the standard deviation of a\
    \ list of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n\
    \        return l[1]\n    \n    mid = round(Int64(mid))\n    if mid == 1 \n  \
    \      return l[1]\n    \n    if mid == length(l)\n        return l[mid]\n   \
    \ \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid]\n\
    \    \n    mid = round(Int64(mid))\n    if mid == length(l)\n        return l[mid",
  "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n        throw(DomainError())\n\
    \    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+2]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+2]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+2]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == ", "    sort(l)\n    length(l) == 0 ? Float64(\"NaN\") : l[floor(length(l)\
    \ / 2)]\nend", "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)/2)\n\
    \    if l % 2 == 0\n        return l[mid]\n    else\n        return l[mid-1] +\
    \ l[mid]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. \nThe median is the number in the middle of the sorted list.", " \
    \   l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n\
    \        return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. Write a test\
    \ that passes when the function returns the correct value.", "    \n    l = sort(l)\n\
    \    \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2-1]\n    else\n\
    \        return 0.5 * (l[end] + l[end-1])\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. Write a test\
    \ that checks that your function returns the correct value.", "    sort(l)\n \
    \   mid = floor(length(l)/2)\n    if length(l)%2==0\n        return l[mid]\n \
    \   else\n        return (l[mid]+l[mid-1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers. \nThe function should take a list of numbers as an\
    \ argument and return the mean of the numbers. \nThe function should work for\
    \ any type of numbers, not just Int64. \nThe function should raise an error if\
    \ the list contains any non-numbers.", "    \n    l = sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[floor(length(l)/2)]\n    end\n    \n    mid = floor(length(l)/2)\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if\
    \ l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l", "    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers, rounded to two decimal places.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument. \nThe function should return the median of the numbers in the list.\
    \ \nThe median is the number in the middle of the list that has the highest value.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ to compute the mean of a list of numbers. If the list is empty, return 0.0.",
  "    sort(l)\n    return l[floor(length(l)/ 2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ median of a list of numbers, rounded to a specified number of decimal places.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    \n    sort(l)\n    \n   \
    \ mid = length(l)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a list of numbers.", "    \n    l = sort(l)\n    \n    if length(l)\
    \ == 0 \n        return NaN\n    end\n    \n    mid = floor(Int, length(l)/2)\n\
    \    \n    if length(l) % 2 == 0 \n        return l[mid]\n    else\n        return\
    \ (l[mid] + l[mid-1])/2\n    end\nend", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(BoundsError(\"median requires at least one element\"\
    ))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    mid\
    \ = round(Int64, mid)\n    \n    if mid == length(l)\n        return l[mid - 1]\n\
    \    end\n    \n    mid = round(Int64, mid)\n    \n    if mid > length(l)\n  \
    \      return l[mid - 1]\n    end\n    \n    mid = round(Int64, mid)\n    \n \
    \   if mid < length(l)\n        return l[mid]\n    end\n    \n    throw(BoundsError(\"\
    median requires at least one element\"))\nend\n</cell>\n<text>\nmedian", "   \
    \ l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis does not answer the question. `median` does\
    \ not return the median of a vector, it returns the median of a sorted vector.\
    \ `median` does not sort the vector in place, it returns a sorted vector. `sort`\
    \ returns a sorted vector. `sort!` sorts the vector in place. `sort!` does not\
    \ return a sorted vector. `sort!` sorts the vector in place.\n<|/ c |>\n<| c |>\n\
    I agree with you. My answer was more of a general solution to median of a vector.\
    \ He asked for a function that returns the median of a vector. He didn't ask for\
    \ median of a sorted vector. He asked for a function that returns the median of\
    \ a sorted vector. He didn't ask for median of a vector. He asked for a function\
    \ that returns the median of a vector. He didn't ask for median of a sorted vector.\
    \ He asked for a function that returns the median of a sorted vector. He didn't\
    \ ask for median of a vector. He asked for a function that returns the median\
    \ of a vector. He didn't ask for median of a sorted vector. He asked for a function\
    \ that returns the median of a sorted vector. He didn't ask for median of a vector.\
    \ He asked for a function that returns the median of a vector. He didn't ask for\
    \ median of a sorted vector. He asked for a function that returns the median of\
    \ a sorted vector. He didn't ask for median of a vector. He asked for a function\
    \ that returns the median of a vector. He didn't ask for median of a sorted vector.\
    \ He asked for a function that returns the median of a sorted vector. He didn't\
    \ ask for median of a vector. He asked for a function that returns the median\
    \ of a vector. He didn't ask for median of a sorted vector. He asked for a function\
    \ that returns the median of a sorted vector. He didn't ask for median of a vector.\
    \ He asked for a function that returns the median of a vector. He didn't ask for\
    \ median of a sorted vector. He asked for a function that returns the median of\
    \ a sorted vector. He didn't ask for median of a vector. He asked for a function\
    \ that returns the median of a vector. He didn't ask for median of a sorted vector.\
    \ He asked for a function that returns the median of a sorted vector. He didn't\
    \ ask for median of a vector. He asked for a function that returns the median\
    \ of a vector. He didn't ask", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n\
    \    if length(l)%2==1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend", "    \n    l = sort(l)\n    n = length(l)\n    \n\
    \    if n < 2\n        return l[1]\n    end\n    \n    mid = floor((n+1)/2)\n\
    \    \n    if l[mid] == l[mid-1]\n        return median(l[mid-1:mid+1])\n    end\n\
    \    \n    if l[mid] == l[mid+1]\n        return median(l[mid-1:mid])\n    end\n\
    \    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:mid+2])\n    end\n\
    \    \n    if l[mid] == l[mid+1]\n        return median(l[mid+2:mid+3])\n    end\n\
    \    \n    if l[mid] == l[mid+2]\n        return median(l[mid+1:mid+3])\n    end\n\
    \    \n    if l[mid] == l[mid+3]\n        return median(l[mid+2:mid+4])\n    end\n\
    \    \n    if l[mid] == l[mid+4]\n        return median(l[mid+3:mid+5])\n    end\n\
    \    \n    if l[mid] == l[mid+5]\n        return median(l[mid+4:mid+6])\n    end\n\
    \    \n    if l[mid] == l[mid+6]\n        return median(l[mid+5:mid+7])\n    end\n\
    \    \n    if l[mid] == l[mid+7]\n        return median(l[mid+6:mid+8])\n    end\n\
    \    \n    if l[mid] == l[mid+8]\n        return median(l[mid+7:mid+9])\n    end\n\
    \    \n    if l[mid] == l[mid+9]\n        return median(l[mid+8:mid+10])\n   \
    \ end\n    \n    if l[mid] == l[mid+10]\n        return median(l[mid+9:mid+11])\n\
    \    end\n    \n    if l[mid] == l[mid+11]\n        return median(l[mid+10:mid+12])\n\
    \    end\n    \n    if l[mid] == l[mid+12]\n        return median(l[mid+11:mid+13])\n\
    \    end\n    \n    if l[mid] == l[mid+13]\n        return median(l[mid+12:mid+14])\n\
    \    end\n    \n    if l[mid] == l[mid+14]\n        return median(l[mid+13:mid+15])\n\
    \    end\n    \n    if l[mid] == l[mid+15]\n        return median(l[mid+14:mid+16])\n\
    \    end\n    \n    if l", "    l = sort(l)\n    mid = length(l)\n    if mid %\
    \ 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2-1])/2\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ l and returns the mean of the elements in the list l.\nTest your function on\
    \ a few examples:", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n\
    \        return l[1]\n    \n    if mid == 1\n        return l[1]\n    \n    if\
    \ l[mid] == l[mid - 1]\n        return l[mid]\n    \n    if l[mid] == l[mid -\
    \ 2]\n        return l[mid]\n    \n    if l[mid] == l[mid - 3]\n        return\
    \ l[mid]\n    \n    return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers. Your function should take a list of numbers as an argument,\
    \ and return a Float64. Your function should also handle empty lists.", "    sort(l)\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend", " \
    \   sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. Your function should take a list of numbers and\
    \ return the median of the numbers. If the length of the list is odd, return the\
    \ middle number. Otherwise, return the average of the two middle numbers.", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend", "    \n\
    \    l = sort(l)\n    \n    if length(l) == 0 \n        return NaN\n    end\n\
    \    \n    mid = floor(Int, length(l) / 2)\n    \n    if length(l) % 2 == 0\n\
    \        return l[mid]\n    else\n        return (l[mid] + l[mid+1]) / 2\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.", " \
    \   sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return 0.5*(l[mid-1] + l[mid])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. Your function should take a list\
    \ of numbers as an argument, and return a Float64 containing the median of the\
    \ numbers in the list.", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return (l[mid-1]+l[mid])/2\n\
    \    end\nend\n</code>\n<|/ a tags=julia,median |>\n<| a |>\nI came up with a\
    \ solution that is more efficient than sorting the entire vector and uses only\
    \ one pass:\n<code>", "    sort(l)\n    return l[floor(Int, length(l)/2)]\nend",
  "    sort(l)\n    \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n\
    \        return (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a list of numbers is defined\
    \ as the value separating the higher half of the numbers from the lower half.\
    \ For example, in the list [-10, 4, 6, 1000, 10, 20], the median is 4.", "   \
    \ l = sort(l)\n    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n\
    \        return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 1\n        return l[1]\n    end\n    \n    if mid % 2 == 0\n  \
    \      return (l[mid-1] + l[mid]) / 2\n    end\n    \n    return (l[mid-1] + l[mid])\
    \ / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers. Write\
    \ a test that checks that your function works.", "    sort(l)\n    length(l) ==\
    \ 0 ? 0.0 : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return a single number.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0\n        return NaN\n    \n    if mid %\
    \ 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mean of a list\
    \ of numbers. If the list is empty, return NaN.", "    \n    median = sort(l)[end]\n\
    \    \n    if length(l)%2==0\n        return median\n    else\n        return\
    \ median/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n   \
    \ if mid == 0 \n        return l[1]\n    \n    if mid % 2 == 0 \n        return\
    \ l[mid / 2]\n    \n    return median(l[mid/2 : end]) + median(l[1 : mid/2])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe\
    \ median of a set of numbers is defined as the value separating the higher half\
    \ of the numbers from the lower half. For example, in the set {1, 2, 3, 4}, the\
    \ median is (2 + 3) / 2 = 2.5.", "    sort(l)\n    mid = length(l)//2\n    if\
    \ length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid] +\
    \ l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>", "    sort(l)\n\
    \    l = l[end]\n    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 ==\
    \ 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.0>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a list of numbers. \nThe\
    \ function should take a list of numbers as an argument and return the median\
    \ of the list.", "    sort(l)\n    length = length(l)\n    if length < 2\n   \
    \     return l[1]\n    end\n    mid = length/2\n    if length%2 == 1\n       \
    \ return median(l[mid-1:mid+1])\n    else\n        return median(l[mid-1:mid+2])\n\
    \    end\nend\n</code>\n<|/ a tags=julia,median,statistics |>\n<| a tags=julia,median,statistics\
    \ |>\nI wrote a package for calculating medians in Julia. \nhttps://github.com/nathanh/median.jl\n\
    <code>\nusing median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,median,statistics\
    \ |>\nI wrote a package for calculating medians in Julia. \nhttps://github.com/nathanh/median.jl\n\
    <code>\nusing median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,median,statistics\
    \ |>\n<code>", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n  \
    \      return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n\
    \    end\nend\n</code>\n<|/ a tags=julia,median |>\n<| c |>\nThis does not answer\
    \ the question. `median` does not return the median of the list. It returns the\
    \ median of the *elements* of the list. `median([3, 1, 2, 4, 5])` returns `3`,\
    \ not `1.5`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my answer.\
    \ Thanks for pointing it out. I've updated my answer accordingly.\n<|/ c |>\n\
    <| a tags=julia,median |>\n<code>", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers, rounded to two decimal places.", "    l = sort(l)\n  \
    \  mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n \
    \       return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers, rounded to two decimal places.", "    sort(l)\n\
    \    mid = length(l)\n    if mid == 0\n        throw(DomainError(\n          \
    \  \"median requires at least one element\"))\n    end\n    \n    if mid % 2 ==\
    \ 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])\
    \ / 2\n    end\nend\n</cell>\n<code language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nThe median of a finite set of numbers is called the \"middle\" of the\
    \ set. For example, the median of the set {1, 2, 3, 4} is (2 + 3) / 2 = 2.5.",
  "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)/2)\n    if length(l)\
    \ % 2 == 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])\
    \ / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mean of a list of numbers.",
  "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n    else\
    \ \n        return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers, rounded to the nearest integer.", "    l = sort(l)\n \
    \   mid = length(l)\n    if mid == 0\n        throw(DomainError(\"\"))\n    end\n\
    \    \n    if mid == 1\n        return l[1]\n    end\n    \n    if mid%2 == 1\n\
    \        return median(l[floor(mid/2):floor(mid/2)+1]) + median(l[mid-1:mid])\n\
    \    end\n    \n    return median(l[floor(mid/2):floor(mid/2)+1]) + median(l[mid-1:mid-1:-1])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. Your function\
    \ should throw an error if there are any non-numeric elements in the list.", " \
    \   l = sort(l)\n    mid = length(l)\n    if mid == 0\n        throw(DomainError())\n\
    \    end\n    mid\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function to compute the mean of a list of\
    \ numbers. \nThe function should take a list of numbers as an argument and return\
    \ the mean of the numbers in the list.\nThe function should throw a DomainError\
    \ if the list is empty.", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1] +\
    \ l[end])/2\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise: Write a function that returns the median of a list of numbers.\
    \ Use median from above. How would you use it?", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest value.", "    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mode of\
    \ a list of numbers. If the list has two or more modes, return any one of them.",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n\
    <|/ a tags=julia,median |>\n<| c |>\nThis code doesn't work if `length(l)` is\
    \ odd. `median([3, 1, 2, 4, 5])` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thank you for pointing it out\n<|/ c |>\n<| a dscore=3 |>\n<code>",
  "    \n    sort(l)\n    \n    mid = length(l)\n    \n    if mid == 1\n        return\
    \ l[1]\n    end\n    \n    if mid == 2\n        return 0.5 * (l[1] + l[2])\n \
    \   end\n    \n    if mid == 3\n        return 0.5 * (l[1] + l[2] + l[3])\n  \
    \  end\n    \n    if mid % 2 == 0\n        return 0.5 * (l[mid/2] + l[mid/2+1])\
    \ \n    end\n    \n    return 0.5 * (l[mid/2] + l[mid/2-1]) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ to compute the mean of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return a Float64 number.", "    sort(l)\n   \
    \ mid = floor(Int, length(l)/2)\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted ", "    l = sort(l)\n    mid = floor(Int,\
    \ length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n \
    \       return (l[mid-1] + l[mid])/2\n    end\nend", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element in the list\"))\n    end\n    mid = floor(mid)\n\
    \    if mid % 2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid]) / 2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the mode of a list of numbers. \nThe mode is the number that appears\
    \ most often in the list.\nThe function should throw an error if the list is not\
    \ sorted.", "    sort(l)\n    return l[floor(Int, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of elements in the list l.\n    >>> mean([3, 1, 2, 4,\
    \ 5])\n    2.5\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    20.0\n    \"\"\"",
  "    \n    sort(l)\n    \n    if length(l)%2==0\n        return l[floor(length(l)//2)]\n\
    \    else\n        return (l[floor(length(l)//2)-1] + l[floor(length(l)//2)])\
    \ / 2\n    end\nend", "    l = sort(l)\n    mid = floor(Int, length(l) / 2)\n\
    \    if length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers. Write a test that passes when the function returns the correct\
    \ result, and a test that fails when the function returns the incorrect result.",
  "    median = sort(l)[end]\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert median([3, 1, 2, 4, 5]) == 3\n@assert median([-10, 4, 6, 1000, 10, 20])\
    \ == 15\n</cell>\n<text>\nExercise 10\nWrite a function that returns the median\
    \ of a list of numbers. Your function should work for both Float64 and Int64 types.",
  "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 0\n\
    \        return l[mid]\n    else\n        return l[mid-1] + l[mid]/2\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a\
    \ list of numbers.", "    \n    l = sort(l)\n    \n    if length(l)%2 == 0\n \
    \       return l[(length(l)+1)/2-1]\n    else\n        return l[length(l)-1]\n\
    \    end\nend", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take an\
    \ argument that is a list of numbers.\nThe function should return the median of\
    \ the list.\nThe function should raise an error if the list is empty.", "    l\
    \ = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mean of a list of numbers.\
    \ Use a for loop to do this.", "    sort(l)\n    length(l) == 0 ? return NaN :\
    \ l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median is defined as the value separating the higher\
    \ half of a data set from the lower half. For example, the median of a set of\
    \ data {1, 2, 3, 4} is (2 + 3 + 4) / 2 = 2.5. Median is the middle value in a\
    \ data set. Median is also known as the middle value in an ordered data set.",
  "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)/2)\n    if length(l)\
    \ % 2 == 1\n        return l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument and return the median\
    \ of the numbers. \nThe median is the number in the middle of the list that is\
    \ the smallest number in the list. \nIf the list has an even number of elements,\
    \ then the median is the mean of the two middle numbers. \nIf the list has an\
    \ odd number of elements, then the median is the number in the middle of the list\
    \ that is the largest number in the list.", "    median = sort(l)[end]\n    return\
    \ median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise: Write a function that returns the median of a list of numbers.\
    \ \nThe function should take a list of numbers and return the median of the list.",
  "    sort(l)\n    mid = length(l)\n    if mid == 0 \n        throw(DomainError(\"\
    \"))\n    end\n    median = (l[mid-1] + l[mid]) / 2\n    return median\nend",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mode of a given list of numbers. \nThe mode is the number that\
    \ appears most frequently in the list.\nFor example, mode([1, 1, 2, 3]) should\
    \ return 1.\nHint: Use a dictionary to keep track of counts of numbers.", "  \
    \  sort(l)\n    return l[floor(Int, length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe median is the number in the middle of the\
    \ sorted list.", "    l = sort(l)\n    mid = floor(Int, length(l) / 2)\n    if\
    \ length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the mode of a given list\
    \ of numbers. \nThe mode is the number that appears most frequently in the list.",
  "    l = sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend", "    sort(l)\n    return l[floor(Int64, length(l)+1)/2]\
    \ \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mean of\
    \ a list of numbers.", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2\
    \ == 1\n        return l[mid]\n    else\n        return 0.5 * (l[mid] + l[mid-1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers. \nThe\
    \ function should take a list of numbers as an argument, and return a single number.",
  "    sort(l)\n    l = l[end]\n    mid = floor(Int, length(l)/2)\n    if length(l)\
    \ % 2 == 0\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n\
    \    end\nend", "    l = sort(l)\n    mid = floor(Int, length(l)+1)/2\n    if\
    \ length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean\
    \ of a list of numbers.", "    sort(l)\n    length(l) == 0 ? return 0.0 : median(l[floor(length(l)/2)])\n\
    end\n</code>\n<|/ a tags=julia,median |>\n<| c |>\nThis doesn't work for me. `median([3,\
    \ 1, 2, 4, 5])` returns `3` instead of `1.5`.\n<|/ c |>\n<| c |>\nI edited the\
    \ answer to include a median function which should work for you\n<|/ c |>\n<|\
    \ c |>\nI added a median function which should work for you\n<|/ c |>\n<| c |>\n\
    I added a median function which should work for you\n<|/ c |>\n<| c |>\nI added\
    \ a median function which should work for you\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend", "    sort(l)\n\
    \    length = length(l)\n    if length < 2\n        return l[1]\n    middle =\
    \ length/2\n    if length%2 == 1\n        return median(l[middle-1:middle+1])\n\
    \    else\n        return median(l[middle-1:middle+2])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a list of numbers\
    \ is defined as the value separating the higher half of the list from the lower\
    \ half. For example, if the list is [3, 1, 2, 4, 5], then the median is 3.", " \
    \   sort(l)\n    mid = length(l)\n    if mid == 0 \n        return l[1]\n    else\
    \ \n        return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the median\
    \ of a list of numbers, rounded to two decimal places.", "    l = sort(l)\n  \
    \  mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n \
    \       return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle number\" because\
    \ it is often the number in the middle. \nThe median is also called the \"middle\
    \ element\" because it is often the element in the middle. \nThe median is also\
    \ called the \"middle percentage\" because it is often the percentage of the data\
    \ that is in the middle.", "    sort(l)\n    length(l) == 0 ? 0.0 : (l[end-1]\
    \ + l[end])/2\nend", "    \n    l = sort(l)\n    \n    if length(l) == 0 \n  \
    \      return Float64(0)\n    end\n    \n    mid = floor(Int, length(l)/2)\n \
    \   \n    if length(l) % 2 == 0 \n        return l[mid]\n    else\n        return\
    \ (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers, rounded to two decimal places.", "    l = sort(l)\n  \
    \  mid = length(l)\n    if mid == 1 \n        return l[1]\n    else \n       \
    \ return (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the mean\
    \ of a list of numbers.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function to compute the mean of a list of numbers.", "    sort(l)\n\
    \    l = l[end]\n    i = findfirst(x -> x < l, l)\n    if i == length(l) \n  \
    \      return l\n    j = findfirst(x -> x > l, l)\n    if j == length(l) \n  \
    \      return l\n    return l[j+1] - l[i]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers, rounded to two decimal places.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nI like your median function but I think it would be better to return\
    \ `mid` instead of `l[mid]` since `mid` will always be an integer.\n<|/ c |>\n\
    <| c |>\nThanks, I changed it to `mid`\n<|/ c |>\n<| a tags=julia |>\nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. \n<code>", "    sort(l)\n    return l[floor(Int, length(l) / 2)]\n\
    end\n</cell>\n<code language=julia-1.1>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.1>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a list of numbers, rounded to\
    \ two decimal places.", "    sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n\
    \    end\nend\n</cell>\n<text>\nThe median of a list is the value that exists\
    \ in the list at or below the middle of the list. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3. The median is the value that exists in the list\
    \ at or below the middle of the list. For example, in the list [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the value that exists in the list at or below\
    \ the middle of the list. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3. The median is the value that exists in the list at or below the middle\
    \ of the list. For example, in the list [3, 1, 2, 4, 5], the median is 3. The\
    \ median is the value that exists in the list at or below the middle of the list.\
    \ For example, in the list [3, 1, 2, 4, 5], the median is 3. The median is the\
    \ value that exists in the list at or below the middle of the list. For example,\
    \ in the list [3, 1, 2, 4, 5], the median is 3. The median is the value that exists\
    \ in the list at or below the middle of the list. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3. The median is the value that exists in the list\
    \ at or below the middle of the list. For example, in the list [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the value that exists in the list at or below\
    \ the middle of the list. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3. The median is the value that exists in the list at or below the middle\
    \ of the list. For example, in the list [3, 1, 2, 4, 5], the median is 3. The\
    \ median is the value that exists in the list at or below the middle of the list.\
    \ For example, in the list [3, 1, 2, 4, 5], the median is 3. The median is the\
    \ value that exists in the list at or below the middle of the list. For example,\
    \ in the list [3, 1, 2, 4, 5], the median is 3. The median is the value that exists\
    \ in the list at or below the middle of the list. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3. The median is the value that exists in the list\
    \ at or below the middle of the list. For example, in the list [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the value that exists in the list at or below\
    \ the middle of the list. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3. The median is the value that exists in the list at or below the middle\
    \ of the list. For example, in the list [3, 1, 2, 4, 5], the median is 3. The\
    \ median is the value that exists in the list at or ", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ median of a list of numbers. \nThe median is the number in the middle of the\
    \ sorted list.", "    sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n    \
    \    return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2+1])/2.0\n \
    \   end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe median of [3, 1, 2, 4,\
    \ 5] should be 3, not 2.\n<|/ c |>\n<| c |>\nThe median of [3, 1, 2, 4, 5] should\
    \ be 3, not 2.\n<|/ c |>\n<| c |>\nThe median of [3, 1, 2, 4, 5] should be 3,\
    \ not 2.\n<|/ c |>\n<| c |>\nThe median of [3, 1, 2, 4, 5] should be 3, not 2.\n\
    <|/ c |>\n<| c |>\nThe median of [3, 1, 2, 4, 5] should be 3, not 2.\n<|/ c |>\n\
    <| a tags=julia,median |>\n<code>", "    l = sort(l)\n    mid = length(l)\n  \
    \  if mid == 0 \n        throw(ZeroDivisionError())\n    end\n    median = (l[mid-1]\
    \ + l[mid]) / 2.0\n    return median\nend", "    \n    sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[floor(length(l)/2)]\n    else\n        return (l[floor(length(l)/2)-1]\
    \ + l[floor(length(l)/2)])/2\n    end\nend", "    \n    l = sort(l)\n    \n  \
    \  if length(l)%2==0\n        return l[floor(length(l)/2)]\n    else\n       \
    \ return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a set of numbers\
    \ is the middle number of the sorted set.", "    sort(l)\n    l = l[end]\n   \
    \ mid = l/2\n    if l % 2 == 0\n        return mid\n    else\n        return (mid\
    \ + l)/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers.", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n \
    \       return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2+1])/2.0\n\
    \    end\nend\n</code>\n<|/ a tags=julia,median,sorting |>\n<| a dscore=2 |>\n\
    The median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. \nThe median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. \nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. \nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. \nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. \nThe median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. \nThe median of a\
    \ set of numbers is defined as the value that appears more than n/2 times in the\
    \ set. \nThe median of a set of numbers is defined as the value that appears more\
    \ than n/2 times in the set. \nThe median of a set of numbers is defined as the\
    \ value that appears more than n/2 times in the set. \nThe median of a set of\
    \ numbers is defined as the value that appears more than n/2 times in the set.\
    \ \nThe median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. \nThe median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. \nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. \nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. \nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. \nThe median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. \nThe median of a\
    \ set of numbers is defined as the value that appears more than n/2 times in the\
    \ set. \nThe median of a set of numbers is defined as the value that appears more\
    \ than n/2 times in the set. \nThe median of a set of numbers is defined as the\
    \ value that appears more than n/2 times in the set. \nThe median of a set of\
    \ numbers is defined as the value that appears more than n/2 times in the set.\
    \ \nThe median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. \nThe median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. \nThe median of a set of number",
  "    \n    median = sort(l)[end]\n    \n    if length(l)%2 == 1\n        return\
    \ median\n    else\n        return median/2\n    end\nend", "    sort(l)\n   \
    \ mid = length(l)//2\n    if length(l)%2==1\n        return l[mid]\n    else\n\
    \        return (l[mid]+l[mid-1])/2\n    end\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=julia,median |>\nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. ", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers, rounded to two decimal places.", "    sort(l)\n\
    \    mid = length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1])/2\n    end\nend", "    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        return median\n    \n    i = length(l)\n  \
    \  \n    while i > 1\n        if l[i - 1] > median\n            median = l[i -\
    \ 1]\n        else\n            i = i - 1\n        end\n    end\n    \n    return\
    \ median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. If\
    \ the list is empty, return 0.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers, rounded to\
    \ two decimal places.", "    sort(l)\n    mid = length(l)//2\n    if length(l)%2\
    \ == 1\n        return l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n\
    \    end\nend", "    \n    median = sort(l)[end]\n    \n    if median == 0\n \
    \       return median\n    else\n        return median\n    end\nend", "    l\
    \ = sort(l)\n    mid = length(l)\n    if mid == 0\n        throw(DomainError())\n\
    \    end\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n     \
    \   return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], dims=1)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], dims=2)\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a robust measure of statistical dispersion, \nwhich measures\
    \ the dispersion of a set of data points from the mean.\nThe MAD can be calculated\
    \ using the median absolute deviation (MAD) formula:", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    \n    if mid % 2 == 0\n    \
    \    return (l[mid-1] + l[mid]) / 2\n    else\n        return l[mid]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the median of a list of numbers, rounded to two\
    \ decimal places.", "    l = sort(l)\n    mid = length(l)\n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.", " \
    \   sort(l)\n    mid = floor(length(l)/2)\n    if length(l) % 2 == 0\n       \
    \ return l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    sort(l)\n    length(l) == 0 ? 0.0 :\
    \ (length(l) / 2)\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    middle\" of the set. For example, in the set {1, 2, 3, 4}, the median is (2 +\
    \ 4) / 2 = 2.5.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ to compute the mean of a list of numbers.", "    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nThe median of a list of numbers is defined as the value\
    \ separating the higher half of the list from the lower half. For example, in\
    \ the list [3, 1, 2, 4, 5], the median is 3.", "    l = sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        return NaN\n    \n    mid = floor(mid)\n    if mid ==\
    \ 0\n        return l[mid]\n    \n    if mid == 1\n        return l[mid]\n   \
    \ \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n        return\
    \ l[1]\n    \n    mid = floor(mid)\n    if mid == 1 \n        return l[1]\n  \
    \  \n    mid = floor(mid)\n    if mid == 2 \n        return l[2]\n    \n    mid\
    \ = floor(mid)\n    if mid == 3 \n        return l[2]\n    \n    mid = floor(mid)\n\
    \    if mid == 4 \n        return l[3]\n    \n    mid = floor(mid)\n    if mid\
    \ == 5 \n        return l[3]\n    \n    mid = floor(mid)\n    if mid == 6 \n \
    \       return l[4]\n    \n    mid = floor(mid)\n    if mid == 7 \n        return\
    \ l[4]\n    \n    mid = floor(mid)\n    if mid == 8 \n        return l[5]\n  \
    \  \n    mid = floor(mid)\n    if mid == 9 \n        return l[5]\n    \n    mid\
    \ = floor(mid)\n    if mid == 10 \n        return l[6]\n    \n    mid = floor(mid)\n\
    \    if mid == 11 \n        return l[6]\n    \n    mid = floor(mid)\n    if mid\
    \ == 12 \n        return l[7]\n    \n    mid = floor(mid)\n    if mid == 13 \n\
    \        return l[7]\n    \n    mid = floor(mid)\n    if mid == 14 \n        return\
    \ l[8]\n    \n    mid = floor(mid)\n    if mid == 15 \n        return l[8]\n \
    \   \n    mid = floor(mid)\n    if mid == 16 \n        return l[9]\n    \n   \
    \ mid = floor(mid)\n    if mid == 17 \n        return l[9]\n    \n    mid = floor(mid)\n\
    \    if mid == 18 \n        return l[10]\n    \n    mid = floor(mid)\n    if mid\
    \ == 19 \n        return l[10]\n    \n    mid = floor(mid)\n    if mid == 20 \n\
    \        return l[11]\n    \n    mid = floor(mid)\n    if mid == 21 \n       \
    \ return l[11]\n    \n    mid = floor(mid)\n    if mid == 22 \n        return\
    \ l[12]\n    \n    mid = floor(mid)\n    if mid == 23 \n        return l[12]\n\
    \    \n    mid = floor(mid)\n    if mid == 24 \n        return l[13]\n    \n \
    \   mid = floor(mid)\n    if mid == 25 \n        return l[13]\n    \n    mid =\
    \ floor(mid)\n    if mid == 26 \n        return l[14]\n    \n", "    median =\
    \ sort(l)[end]\n    return median\nend", "    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Your function should accept a list of numbers and return the median\
    \ of the numbers. Test your function on a list of numbers that you generated in\
    \ the previous exercise.", "    median = sort(l)[end]\n    return median\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sortedlist = sort(l)\n    \n \
    \   if length(sortedlist) == 0 \n        return NaN\n    \n    mid = length(sortedlist)\
    \ / 2\n    \n    if length(sortedlist) % 2 == 0 \n        return sortedlist[mid]\n\
    \    \n    else \n        return (sortedlist[mid] + sortedlist[mid + 1]) / 2\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mean of a list of numbers.", "    l = sort(l)\n\
    \    mid = floor(Int, length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n\
    \    else\n        return 0.5*(l[mid-1]+l[mid])\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the mode of a list of numbers. Your\
    \ function should return the number that appears most frequently in the list.",
  "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n    median\
    \ = (l[mid-1] + l[mid]) / 2.0\n    return median\nend\n</cell>\n<code language=julia-1.4>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument. \nThe function should return the median of the numbers in the list.\n\
    The function should raise an error if the list is empty.", "    sort(l)\n    mid\
    \ = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a list of numbers is defined\
    \ as the value separating the higher half of the list from the lower half. For\
    \ example, in the list [-10, 4, 6, 1000, 10, 20], the median is 4.", "    l =\
    \ sort(l)\n    mid = length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    mid = length(l)\n    if mid % 2\
    \ == 1\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2-1])/2.0\n\
    \    end\nend", "    \n    l = sort(l)\n    \n    if length(l)==1\n        return\
    \ l[1]\n    end\n    \n    mid = floor(Int, length(l)/2)\n    \n    if l[mid]\
    \ == l[mid+1]\n        return median(l[mid+1:end])\n    else\n        return median(l[mid:end-1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a list of numbers. Write\
    \ a test that checks that your function returns the correct value.", "    sort(l)\n\
    \    mid = length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1])/2\n    end\nend", "    l = sort(l)\n    mid\
    \ = length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n      \
    \  return (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of the center of mass. It is defined as:", "    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns the median\
    \ of a list of numbers. Write a test that passes when the function returns the\
    \ correct value.", "    l = sort(l)\n    mid = length(l)\n    if mid == 0 \n \
    \       return l[1]\n    \n    mid = round(Int64, mid)\n    if mid == 1 \n   \
    \     return l[1]\n    \n    if mid == length(l)\n        return l[mid - 1]\n\
    \    \n    mid = round(Int64, mid)\n    if mid == length(l)\n        return l[mid\
    \ - 1]\n    \n    if mid % 2 == 0\n        return median(l[mid-1:mid])\n    else\n\
    \        return median(l[mid-1:mid-1]) + median(l[mid+1:mid+2])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=2)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=3)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=4)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=5)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=6)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=7)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=8)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=9)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=10)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=11)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=12)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=13)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=14)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], digits=15)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, ", "    l = sort(l)\n    mid = length(l)\n    if mid == 0\n        return\
    \ l[1]\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n       \
    \ return (l[mid/2] + l[mid/2 - 1])/2.0\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. If the length of the list is even, the median is\
    \ the mean of the two middle numbers. If the length of the list is odd, the median\
    \ is the middle number.", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe\
    \ median is defined as the value separating the higher half of a data set from\
    \ the lower half. For example, if the data set has N values, the median is the\
    \ value separating the lower half of the data set from the higher half. Median\
    \ is the middle value of a data set.", "    sort(l)\n    return l[floor(Int, length(l)/2)]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mode of a list of numbers. \nThe mode is\
    \ the number that appears most frequently in the list.\nFor example, mode([1,\
    \ 1, 2, 3]) should return 1.\nHint: Use a dictionary to keep track of the frequencies\
    \ of each number.", "    sort(l)\n    mid = length(l)\n    if mid == 0 \n    \
    \    throw(DomainError())\n    end\n    \n    if mid == 1\n        return l[1]\n\
    \    end\n    \n    mid = round(Int64, mid)\n    \n    if l[mid] == l[mid - 1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 2]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 3]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 4]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 5]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid - 6]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 7]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 8]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 9]\n  \
    \      return l[mid]\n    end\n    \n    if l[mid] == l[mid - 10]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 11]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 12]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 13]\n        return l[mid]\n    end\n    \n  \
    \  if l[mid] == l[mid - 14]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 15]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 16]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 17]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 18]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 19]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 20]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 21]\n        return l[mid]\n    end\n    \n  \
    \  if l[mid] == l[mid - 22", "    sort(l)\n    l = l[end]\n    mid = floor(Int,\
    \ length(l) / 2)\n    if length(l) % 2 == 1\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers. \nThe median is the number\
    \ in the middle of the sorted list of numbers.", "    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.", "    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        median = median(sort(l)[1:end-1])\n    end\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Write a test that passes when the function returns the correct median\
    \ and fails otherwise.", "    l = sort(l)\n    mid = length(l)\n    if mid ==\
    \ 0 \n        throw(DomainError(\n            \"median can only be applied to\
    \ a non-empty vector\"))\n    end\n    return l[mid]\nend", "    sort(l)\n   \
    \ return l[floor(Int, length(l)+1)/2] \nend\n</cell>\n<code language=julia-1.0>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the median of a list of numbers, rounded to two decimal places.", "    l = sort(l)\n\
    \    mid = length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid == 1 \n        return l[1]\n    \n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid", "    sort(l)\n    return l[floor(Int64, length(l)/2)]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a list of numbers. Write a test that checks the function\
    \ works as expected.", "    sort(l)\n    mid = length(l)\n    if mid % 2 == 1\n\
    \        return l[mid/2]\n    else\n        return 0.5 * (l[mid/2] + l[mid/2 -\
    \ 1])\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    mid = length(l)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a list of numbers. Your function should take a list\
    \ of numbers and return the median of the numbers. If the length of the list is\
    \ even, the median is the mean of the two middle numbers.", "    sort(l)\n   \
    \ l = l[end]\n    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n \
    \       return l[mid]\n    else\n        return 0.5 * (l[mid-1] + l[mid])\n  \
    \  end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mean\
    \ of a list of numbers."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
