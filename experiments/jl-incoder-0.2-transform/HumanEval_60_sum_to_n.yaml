name: HumanEval_60_sum_to_n
language: jl
prompt: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
  \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
  \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
  \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
completions: ["    if n == 0 \n        then return 0\n    else \n        return n\
    \ + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n==0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.", "    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 1\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.", "    if n < 0\n        error(\"n must be positive\")\n\
    \    else\n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n <= 0\n    then\
    \ return 0\n    else return n*(n+1)/2\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n numbers. \nFor example, sum_to_n(3)\
    \ should return 3 + 4 + 5.", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1\n    else \n        n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1 \n  \
    \      error(\"n must be positive\")\n    else if n == 1 \n        1\n    else\
    \ \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first n prime numbers. \nHint: Use a for loop to iterate from\
    \ 2 to n and use isPrime to test if n is prime.", "    if n == 0\n        0\n\
    \    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else\n        return n *\
    \ (n + 1) / 2\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    elseif n == 0\n        1\n    else\n        sum_to_n(n-1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n numbers from 1 to n.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n\
    \        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise: Write a function that computes the factorial of a number.",
  "    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,\
    \ 0)\n    end\nend", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. \nFor example, factorial(5) ==\
    \ 120.", "    if n <= 0\n        error(\"n must be positive\")\n    else if n\
    \ == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n==0 \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
