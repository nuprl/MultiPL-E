name: HumanEval_60_sum_to_n
language: jl
prompt: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
  \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
  \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
  \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
completions: ["    if n == 0 \n        then return 0\n    else \n        return n\
    \ + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n==0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.", "    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 1\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.", "    if n < 0\n        error(\"n must be positive\")\n\
    \    else\n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n <= 0\n    then\
    \ return 0\n    else return n*(n+1)/2\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n numbers. \nFor example, sum_to_n(3)\
    \ should return 3 + 4 + 5.", "    if n == 0 \n        then return 0\n    else\
    \ \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1\n    else \n        n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1 \n  \
    \      error(\"n must be positive\")\n    else if n == 1 \n        1\n    else\
    \ \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first n prime numbers. \nHint: Use a for loop to iterate from\
    \ 2 to n and use isPrime to test if n is prime.", "    if n == 0\n        0\n\
    \    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else\n        return n *\
    \ (n + 1) / 2\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    elseif n == 0\n        1\n    else\n        sum_to_n(n-1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n numbers from 1 to n.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n\
    \        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise: Write a function that computes the factorial of a number.",
  "    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,\
    \ 0)\n    end\nend", "    if n == 0 \n        then return 0 \n        else return\
    \ n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. \nFor example, factorial(5) ==\
    \ 120.", "    if n <= 0\n        error(\"n must be positive\")\n    else if n\
    \ == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n==0 \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n==1 \n   \
    \     1 \n    else \n        sum_to_n(n-1)+n \nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0 \n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to loop over all prime numbers. \nHint: use an iterator\
    \ to loop over all prime numbers. \nHint: use an iterator to loop over all prime\
    \ numbers. \nHint: use an iterator to loop over all prime numbers. \nHint: use\
    \ an iterator to loop over all prime numbers. \nHint: use an iterator to loop\
    \ over all prime numbers. \nHint: use an iterator to loop over all prime numbers.\
    \ \nHint: use an iterator to loop over all prime numbers. \nHint: use an iterator\
    \ to loop over all prime numbers. \nHint: use an iterator to loop over all prime\
    \ numbers. \nHint: use an iterator to loop over all prime numbers. \nHint: use\
    \ an iterator to loop over all prime numbers. \nHint: use an iterator to loop\
    \ over all prime numbers. \nHint: use an iterator to loop over all prime numbers.\
    \ \nHint: use an iterator to loop over all prime numbers. \nHint: use an iterator\
    \ to loop over all prime numbers. \nHint: use an iterator to loop over all prime\
    \ numbers. \nHint: use an iterator to loop over all prime numbers. \nHint: use\
    \ an iterator to loop over all prime numbers. \nHint: use an iterator to loop\
    \ over all prime numbers. \nHint: use an iterator to loop over all prime numbers.\
    \ \nHint: use an iterator to loop over all prime numbers. \nHint: use an iterator\
    \ to loop over all prime numbers. \nHint: use an iterator to loop over all prime\
    \ numbers. \nHint: use an iterator to loop over all prime numbers. \nHint: use\
    \ an iterator to loop over all prime numbers. \nHint: use an iterator to loop\
    \ over all prime numbers. \nHint: use an iterator to loop over all prime numbers.\
    \ \nHint: use an iterator to loop over all prime numbers. \nHint: use an iterator\
    \ to loop over all prime numbers. \nHint: use an iterator ", "    if n == 0 \n\
    \        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. \nFor example, factorial(5) ==\
    \ 120.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 0\n        error(\"n must be positive\")\n    else\n\
    \        return sum_to_n_aux(n,0)\n    end\nend\nsum_to_n_aux(n::Int64,sum::Int64)::Int64\
    \ = \n    if n == 0\n        sum\n    else\n        sum_to_n_aux(n-1,sum+n)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_impl(n)\n    end\nend\nsum_to_n_impl(n::Int64)::Int64 = \n \
    \   if n == 0\n        0\n    else\n        1 + sum_to_n_impl(n - 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n==1 \n        1 \n    else \n        n+sum_to_n(n-1) \nend\
    \ \n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the factorial of a number.",
  "    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n   \
    \     1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. \nFor example,\
    \ sum_to_n(10) should return 55.", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else if n == 1\n        1\n    else\n        sum_to_n(n - 1) + n\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n < 0\n\
    \        error(\"n must be positive\")\n    else\n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120", "    if n < 1 \n       \
    \ error(\"n must be positive\")\n    else if n == 1 \n        1\n    else \n \
    \       sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. \nHint: Use a recursive\
    \ function.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n and\
    \ returns the sum of the squares of the numbers from 1 to n.", "    if n == 0\
    \ \n        then return 0\n    else if n == 1 \n        then return 1\n    else\
    \ \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 1 \n        1 \n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        sum_to_n_impl(n, 0)\n    end\nend", " \
    \   if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n    \
    \    1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0\n        0\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1\n        error(\"n must be positive\")\n    elseif n\
    \ < 2\n        return 1\n    else\n        return n + sum_to_n(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a number. Recall that $n! = n \\times \\times \\times \\times \\times \\\
    times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times ", "    if n == 0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.", " \
    \   if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return n +\
    \ sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n == 0\n\
    \        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1\n        error(\"n must be >= 1\")\n    end\n    sum\
    \ = 0\n    for i = 1:n\n        sum += i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 1 \n        then return 1\n    else \n        sum_to_n(n-1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) == 120.", "    if n < 0\n        error(\"\
    n must be positive\")\n    elseif n == 0\n        error(\"n must be positive\"\
    )\n    else\n        sum_to_n_aux(n, 0)\n    end\nend", "    if n == 0 \n    \
    \    then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise\nWrite a function that sums numbers from 1 to n but stops when the sum\
    \ is greater than n.", "    if n < 0\n        error(\"n must be positive\")\n\
    \    else\n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n==0 \n        then return 1\n    else \n        sum_to_n(n-1)+n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(0)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(0)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(0)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(0)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(0)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5", "    if n <= 0\n        error(\"n must be positive\")\n\
    \    end\n    sum = 0\n    for i in 1:n\n        sum += i\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number.", "    if n <= 0\n    then return\
    \ 0\n    else return n*(n+1)/2\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the factorial of a given number. \nFor example, factorial(5) =\
    \ 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1", "    if n == 0 \n        then return 0\n   \
    \ else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n <= 0\n        error(\"\
    n must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend", "  \
    \  if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n   \
    \     1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be >= 1\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that sums numbers from 1 to n where n is given as an\
    \ argument.", "    if n == 0 \n        then return 0\n    else if n == 1 \n  \
    \      then return 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be >= 1\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1) \nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n-1) + n\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    else\n        return n + sum_to_n(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(4) == 24. \nHint: use recursion.", "    if n == 1 \n  \
    \      then return 1 \n        else return n*sum_to_n(n-1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be greater than 1\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number test.", "    if n < 1\n        error(\"\
    n must be positive\")\n    end\n    sum = 0\n    for i in 1:n\n        sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use an iterator to loop through\
    \ the numbers from 2 to n. \nHint: use an if statement to check if a number is\
    \ prime.", "    if n < 0\n        error(\"n must be positive\")\n    else if n\
    \ == 0\n        1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n but\
    \ stops when it reaches n.\nHint: Use a while loop and a counter variable.", " \
    \   if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend", "    if n == 0 \n        then return 0 \n        else return n\
    \ + sum_to_n(n-1) \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "    if n < 1 \n        error(\"n must be >= 1\")\n    else if n == 1 \n       \
    \ 1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list\
    \ of numbers and returns the sum of the numbers in the list. For example, if the\
    \ input list is [10, 20, 30], the output should be 60. Hint: use the sum() function!",
  "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.", "    if n < 1\
    \ \n        error(\"n must be positive\")\n    else if n == 1 \n        1\n  \
    \  else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        return n + sum_to_n(n - 1)\n</code>\n<|/\
    \ a tags=recursion,haskell,tail-recursion |>\n<| c |>\nThis doesn't really answer\
    \ the question, since it only shows how to implement a tail recursive function,\
    \ which isn't what the OP asked for.\n<|/ c |>\n<| c |>\nI agree, that's why I\
    \ added the comment \"tail recursive function\"\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/\
    \ a tags=recursion,haskell,tail-recursion |>\n<| c |>\nThis doesn't really answer\
    \ the question, since it only shows how to implement a tail recursive function,\
    \ which isn't what the OP asked for.\n<|/ c |>\n<| c |>\nI agree, that's why I\
    \ added the comment \"tail recursive function\"\n<|/ c |>\n<| a tags=recursion,haskell,tail-recursion\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't really answer the question, since it\
    \ only shows how to implement a tail recursive function, which isn't what the\
    \ OP asked for.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_to_n :: Int -> Int\n\
    sum_to_n n = sum (take n [1..])\n</code>\n<|/ a tags=recursion,haskell,tail-recursion\
    \ |>\n<| c |>\nThis doesn't really answer the question, since it only shows how\
    \ to implement a tail recursive function, which isn't what the OP asked for.\n\
    <|/ c |>\n<| a |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n\
    </code>\n<|/ a tags=recursion,haskell,tail-recursion dscore=0 |>\n<| c |>\nThis\
    \ doesn't really answer the question, since it only shows how to implement a tail\
    \ recursive function, which isn't what the OP asked for.\n<|/ c |>\n<| a tags=recursion,haskell,tail-recursion\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n",
  "    if n < 0\n        error(\"n must be positive\")\n    else\n        return n\
    \ + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else if n == 1\n        1\n    else\n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "    if n<=1\n        1\n    else\n        n*(n+1)/2\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n<0\n        error(\"n must be positive\")\n    else if n==0\n\
    \        error(\"n must be positive\")\n    else if n==1\n        return 1\n \
    \   else\n        return n*(n+1)/2\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n < 1\n       \
    \ error(\"n must be positive\")\n    else\n        return n * (n + 1) / 2\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise: Write\
    \ a function that sums numbers from 1 to n but stops when the sum is greater than\
    \ n.", "    if n < 0\n        error(\"n must be positive\")\n    else\n      \
    \  sum_to_n_impl(n)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n numbers of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:", "    if n < 1 \n        error(\"\
    n must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n==1 \n        1 \n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: use\
    \ the sieve of Eratosthenes algorithm", "    if n==1 \n        1 \n    else \n\
    \        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        then return n + sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n but\
    \ stops when the sum is greater than n.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1\n   \
    \     error(\"n must be positive\")\n    elseif n == 0\n        1\n    else\n\
    \        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. \nFor example,\
    \ sum_to_n(10) should return 55.", "    if n < 1 \n        error(\"n must be positive\"\
    )\n    else if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n<=1\n        1\n\
    \    else\n        n*(n+1)/2\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by k.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n  \
    \      return n * (n + 1) / 2\nend", "    if n <= 0\n        error(\"n must be\
    \ positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend", "    if n==1\
    \ \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n==0 \n   \
    \     then return 0\n    else if n==1 \n        then return 1\n    else \n   \
    \     sum_to_n(n-1)+sum_to_n(n-2)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return n +\
    \ sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n==1 \n        1 \n    else\
    \ \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if n == 0 \n        then return 0\n  \
    \  else \n        then return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as the product of all the positive integers less\
    \ than or equal to $n$. \nFor example, the factorial of $n$ is $n!$ if $n$ is\
    \ positive, and $n! = 1$ otherwise. \nWrite a recursive function factorial(n)\
    \ that returns the factorial of $n$. \nFor example, factorial(3) = 6 because $3!\
    \ = 6 \\times 2 \\times 1$. \nWrite a non-recursive function factorial(n) that\
    \ returns the factorial of $n$. \nFor example, factorial(3) = 6 because $3! =\
    \ 6 \\times 2 \\times 1$. \nWrite a function that returns the factorial of a given\
    \ number. \nThe factorial of a number $n$ is defined as the product of all the\
    \ positive integers less than or equal to $n$. \nFor example, the factorial of\
    \ $n$ is $n!$ if $n$ is positive, and $n! = 1$ otherwise. \nWrite a recursive\
    \ function factorial(n) that returns the factorial of $n$. \nFor example, factorial(3)\
    \ = 6 because $3! = 6 \\times 2 \\times 1$. \nWrite a non-recursive function factorial(n)\
    \ that returns the factorial of $n$. \nFor example, factorial(3) = 6 because $3!\
    \ = 6 \\times 2 \\times 1$. \nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as the product of all\
    \ the positive integers less than or equal to $n$. \nFor example, the factorial\
    \ of $n$ is $n!$ if $n$ is positive, and $n! = 1$ otherwise. \nWrite a recursive\
    \ function factorial(n) that returns the factorial of $n$. \nFor example, factorial(3)\
    \ = 6 because $3! = 6 \\times 2 \\times 1$. \nWrite a non-recursive function factorial(n)\
    \ that returns the factorial of $n$. \nFor example, ", "    if n==1 \n       \
    \ 1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        then return n + sum_to_n(n - 1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_aux(n, 1)\n    end\nend", "    if n == 0\n        0\n    else\n\
    \        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the sum of the first n positive integers.\
    \ \nFor example, sum_to_n(10) should return 55.", "    if n==0 \n        then\
    \ return 0\n    else \n        sum_to_n(n-1)\n        + n\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a number.",
  "    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise: Write a function that sums numbers from 1 to n.\nHint: Use a recursive\
    \ function.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        1 + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the factorial of a number.", "    if n < 1\
    \ \n        error(\"n must be positive\")\n    else if n == 1 \n        1\n  \
    \  else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the first n positive integers. \nFor example, sum_to_n(10) should return\
    \ 55.", "    if n <= 0\n        error(\"n must be positive\")\n    else if n ==\
    \ 1\n        1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that computes the\
    \ factorial of a number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7\
    \ 1 = 120.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n prime numbers. \nHint: Use a for loop and a prime number test.", "    if n<0\n\
    \        error(\"n must be positive\")\n    else\n        return n*(n+1)/2\nend\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.",
  "    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n   \
    \     1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the first n positive integers. \nFor example, sum_to_n(3) should return 7.",
  "    if n == 0 \n        then return 1\n    else \n        sum_to_n(n - 1) + n\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1",
  "    if n == 0\n        0\n    else\n        n + sum_to_n(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nHint: Use a recursive function.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1\n        error(\"n must\
    \ be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend", "    if n\
    \ < 1 \n        error(\"n must be positive\")\n    elseif n < 2\n        1\n \
    \   else\n        n * sum_to_n(n - 1)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of numbers and returns the sum of the numbers\
    \ in the array.", "    if n < 1\n        error(\"n must be positive\")\n    elseif\
    \ n < 2\n        return 1\n    else\n        return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else if\
    \ n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by k.", " \
    \   if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nsum_to_n_impl(n::Int64)::Int64 = \n    if n == 0\n        0\n \
    \   else\n        1 + sum_to_n_impl(n - 1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of numbers and returns the sum of the\
    \ numbers in the array.", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 0\n        error(\"n must be positive\")\n    else if\
    \ n == 0\n        1\n    else\n        sum_to_n(n - 1) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n <= 0\n        error(\"n must be positive\")\n    else if\
    \ n == 1\n        1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n       \
    \ 1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        then return n + sum_to_n(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.", "    if n == 0\
    \ \n        then return 0\n    else if n == 1 \n        then return 1\n    else\
    \ \n        sum_to_n(n - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number.", "    if n < 1\n\
    \        error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n\
    \        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that computes the factorial of a number.", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n < 1\n   \
    \     error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nHint: Use a for loop to iterate over the integers from\
    \ 1 to n.", "    if n == 0\n        0\n    else\n        n * sum_to_n(n - 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n squared.", "    if n == 0\n        0\n    else\n        1 + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the numbers from 1 to n that are divisible by k.", "    if n == 0 \n    \
    \    then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n\
    \        sum_to_n_aux(n, 0)\n    end\nend", "    if n == 0 \n        then return\
    \ 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 1 \n        error(\"n must be positive\")\n    else\
    \ if n == 1 \n        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by 3", "    if n == 0 \n        then return 0\n\
    \    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n == 0\n        0\n    else\n        n + sum_to_n(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 1\n    else \n        then return\
    \ n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 1 \n        error(\"n\
    \ must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0\n        0\n    else\n        n + (sum_to_n(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1\n        error(\"n must be positive\")\n    end\n  \
    \  sum = 0\n    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by 3.", "    if n <= 0\n        error(\"n must\
    \ be positive\")\n    else\n        sum_to_n_aux(n,0)\n    end\nend", "    if\
    \ n <= 0\n    then return 0\n    else return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n < 1 \n        error(\"n must be positive\")\n    else if\
    \ n == 1 \n        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,\
    \ 1)\n    end\nend", "    if n < 1 \n        then return 0\n    else \n      \
    \  return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    else\n        sum_to_n_impl(n)\n    end\nend\nsum_to_n_impl(n::Int64)::Int64\
    \ = \n    if n == 0\n        0\n    else\n        1 + sum_to_n_impl(n - 1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n but stops when the sum is greater than n.", "    if n <= 0\n    then\
    \ return 0\n    else return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0\n  \
    \      0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the factorial of a number.", "    if n <= 0\n      \
    \  error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n  \
    \      sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the first n numbers of the Fibonacci sequence.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else if n == 1\n        1\n    else\n\
    \        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the first n prime numbers. \nHint: Use a for loop and a prime number\
    \ test.", "    if n == 0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n        1\n\
    \    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \      error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n   \
    \ end\nend", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    else if n == 0\n        error(\"n must be positive\")\n\
    \    else\n        sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the factorial of a number.", "    if n <= 0\n    then\
    \ return 0\n    else return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.", "    if n == 0 \n \
    \       then return 0\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the first n positive\
    \ integers starting from 1.", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else\n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n <= 0\n    then return 0\n    else return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.", "    if\
    \ n == 0 \n        then return 0 \n        else return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        sum_to_n(n\
    \ - 1) + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "    if n < 0\n        error(\"n must be positive\")\n    else\n\
    \        return n\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.", "    if n <= 0\n        error(\"n\
    \ must be positive\")\n    else\n        return n + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.", "    if n < 1 \n        error(\"\
    n must be positive\")\n    else if n == 1 \n        1\n    else \n        sum_to_n(n\
    \ - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the numbers from 1 to n that are divisible by 3.", "    if n == 1 \n    \
    \    then return 1\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.", "    if n == 0 \n        then return 0\n    else \n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use the sieve of Eratosthenes\
    \ algorithm", "    if n <= 0\n        error(\"n must be positive\")\n    else\
    \ if n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n numbers\
    \ of the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence\
    \ \n$$Fn = F{n-1} + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a recursive\
    \ function fib(n) that returns the nth number in the Fibonacci sequence. \nFor\
    \ example, fib(0) should return 0, fib(1) should return 1, and fib(2) should return\
    \ 1.", "    if n <= 0\n        error(\"n must be positive\")\n    else\n     \
    \   return n * (n + 1) / 2\nend", "    if n == 0 \n        then return 0\n   \
    \ else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.", "    if n <= 0\n  \
    \      error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n   \
    \ end\nend", "    if n == 0 \n        then return 0 \n        else return n +\
    \ sum_to_n(n - 1)\n</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,haskell |>\n\
    <code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `sum_to_n 10`.\n<|/ c\
    \ |>\n<| c |>\nIt works fine for me. Try `sum_to_n 10`.\n<|/ c |>\n<| c |>\nIt\
    \ works in ghci, but not in my IDE (haskell-ide-console)\n<|/ c |>\n<| c |>\n\
    It works fine for me in ghci too. Try `sum_to_n 10`.\n<|/ c |>\n<| c |>\nIt works\
    \ in ghci, but not in my IDE (haskell-ide-console)\n<|/ c |>\n<| a tags=recursion,haskell\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum $ take n [1..]\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `sum_to_n 10`.\n<|/\
    \ c |>\n<| c |>\nIt works in ghci, but not in my IDE (haskell-ide-console)\n<|/\
    \ c |>\n<| c |>\nIt works in ghci, but not in my IDE (haskell-ide-console)\n<|/\
    \ c |>\n<| c |>\nIt works in ghci, but not in my IDE (haskell-ide-console)\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum $ take\
    \ n [1..]\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\nThis doesn't work.\
    \ Try it with `sum_to_n 10`.\n<|/ c |>\n<| c |>\nIt works in ghci, but not in\
    \ my IDE (haskell-ide-console)\n<|/ c |>\n<| c |>\nIt works in ghci, but not in\
    \ my IDE (haskell-ide-console)\n<|/ c |>\n<| c |>\nIt works in ghci, but not in\
    \ my IDE (haskell-ide-console)\n", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else if n == 1\n        1\n    else\n        sum_to_n(n - 1) + 1\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nThe function should raise an error if n is less than\
    \ or equal to 0.", "    if n < 0\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        0\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.",
  "    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
