language: jl
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns true if the given string\
    \ is a palindrome. For example, \u201CA man, a plan, a canal: Panama\u201D is\
    \ a palindrome.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_1pbxy2.jl:26\nin expression starting at\
    \ /tmp/tmpt_1pbxy2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1 if\
    \ x == reverse(arr[x])\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a string, find the length of the longest substring without repeating\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t\
    @test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4,\
    \ 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7nrhm17f.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nrhm17f.jl:19\n\
    in expression starting at /tmp/tmp7nrhm17f.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        smallest_change = minimum(smallest_change,\
    \ length(arr) - i)\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppvpfv4xa.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvpfv4xa.jl:18\n\
    in expression starting at /tmp/tmppvpfv4xa.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if x != reverse(arr)\n            smallest_change = smallest_change -\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1])\n</cell>\n<text>\nProblem 7: Reverse a string\n\
    Given a string, find the length of the longest substring without reversing the\
    \ entire string. For example, if the given string is \"abracadabra\", the longest\
    \ substring without reversing it is \"abracadabra\".\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmee1q365.jl:27\nin expression starting at\
    \ /tmp/tmpmee1q365.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = Inf \n    \n  \
    \  for i = len-1 downto 1 \n        if arr[i] > arr[i-1] \n            min = min\
    \ + 1 \n        else \n            min = min \n        end \n    end \n    return\
    \ min \nend \n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5,\
    \ 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3,\
    \ 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpkuqxz6j7.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkuqxz6j7.jl:22\n\
    in expression starting at /tmp/tmpkuqxz6j7.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67rx204x.jl:18\nin expression starting at /tmp/tmp67rx204x.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7whg1kxn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7whg1kxn.jl:1\n\
    in expression starting at /tmp/tmp7whg1kxn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for a in arr\n        if a < arr[smallest_change]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvds4yzh.jl:23\nin expression starting at\
    \ /tmp/tmptvds4yzh.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3nj1hyb.jl:89\nin expression starting at\
    \ /tmp/tmpa3nj1hyb.jl:89\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.0>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.0>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.0>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 7\nA palindromic number reads the same backwards and forward. For example,\
    \ 321, 132, 213, 321, 132, 213.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37tl3bil.jl:23\nin expression starting at\
    \ /tmp/tmp37tl3bil.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbax0amg.jl:24\nin expression starting at\
    \ /tmp/tmpbbax0amg.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51ir4cop.jl:26\nin expression starting at\
    \ /tmp/tmp51ir4cop.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    minimum\
    \ = 0\n    maximum = length(arr)-1\n    \n    while minimum < maximum\n      \
    \  mid = minimum + maximum//2\n        if arr[mid] == arr[minimum]\n         \
    \   minimum = mid\n        elseif arr[mid] == arr[maximum]\n            maximum\
    \ = mid\n        else\n            if arr[mid] < arr[minimum]\n              \
    \  minimum = mid\n            elseif arr[mid] > arr[maximum]\n               \
    \ maximum = mid\n            else\n                minimum = mid\n           \
    \     maximum = mid\n            end\n        end\n    end\n    \n    return minimum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrkhnya4.jl:39\nin expression starting at\
    \ /tmp/tmphrkhnya4.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\
    \ \n        return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest =\
    \ smallest / 10\n    \n    if largest == smallest \n        return largest\n \
    \   \n    largest = largest + largest\n    smallest = smallest + smallest\n  \
    \  \n    if largest == smallest \n        return largest\n    \n    largest =\
    \ largest + largest\n    smallest = smallest + smallest\n    \n    if largest\
    \ == smallest \n        return largest\n    \n    largest = largest + largest\n\
    \    smallest = smallest + smallest\n    \n    if largest == smallest \n     \
    \   return largest\n    \n    largest = largest + largest\n    smallest = smallest\
    \ + smallest\n    \n    if largest == smallest \n        return largest\n    \n\
    \    largest = largest + largest\n    smallest = smallest + smallest\n    \n \
    \   if largest == smallest \n        return largest\n    \n    largest = largest\
    \ + largest\n    smallest = smallest + smallest\n    \n    if largest == smallest\
    \ \n        return largest\n    \n    largest = largest + largest\n    smallest\
    \ = smallest + smallest\n    \n    if largest == smallest \n        return largest\n\
    \    \n    largest = largest + largest\n    smallest = smallest + smallest\n \
    \   \n    if largest == smallest \n        return largest\n    \n    largest =\
    \ largest + largest\n    smallest = smallest + smallest\n    \n    if largest\
    \ == smallest \n        return largest\n    \n    largest = largest + largest\n\
    \    smallest = smallest + smallest\n    \n    if largest == smallest \n     \
    \   return largest\n    \n    largest = largest + largest\n    smallest = smallest\
    \ + smallest\n    \n    if largest == smallest \n        return largest\n    \n\
    \    largest = largest + largest\n    smallest = smallest + smallest\n    \n \
    \   if largest == smallest \n        return largest\n    \n    largest = largest\
    \ + largest\n    smallest = smallest + smallest\n    \n    if largest == smallest\
    \ \n        return largest\n    \n    largest = largest + largest\n    smallest\
    \ = smallest + smallest\n    \n    if largest == smallest \n        return largest\n\
    \    \n    largest = largest + largest\n    smallest = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl47qg7xt.jl:1\nin expression starting at /tmp/tmpl47qg7xt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = Inf \n    \n  \
    \  for i = len to 1 \n        if arr[i] > arr[len-i] \n            min = i - 1\
    \ \n            break \n        end\n    end\n    \n    if min == Inf \n     \
    \   return 0 \n    end\n    \n    min = len - min \n    \n    if arr[min] == arr[len-1]\
    \ \n        return min \n    end\n    \n    return min + 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpak03rc0o.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak03rc0o.jl:22\n\
    in expression starting at /tmp/tmpak03rc0o.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Inf \n    for x in arr \n        if x == reverse(arr[x]) \n            smallest_change\
    \ = min(smallest_change, x - 1) \n        else \n            smallest_change =\
    \ min(smallest_change, x - 1) \n    end \n    return smallest_change \nend \n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 4\nA palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 x 99.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv0_nqm2.jl:25\nin expression starting at\
    \ /tmp/tmpnv0_nqm2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 7\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtkz4qam.jl:26\nin expression starting at\
    \ /tmp/tmpdtkz4qam.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7whg1kxn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7whg1kxn.jl:1\n\
    in expression starting at /tmp/tmp7whg1kxn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rk_yjb2.jl:1\nin expression starting at /tmp/tmp_rk_yjb2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    \n    if len == 1 \n        return\
    \ 1 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid-1:mid+1])\n    \n    if arr[mid] == arr[mid+1] \n  \
    \      return smallest_change(arr[mid-1:mid])\n    \n    if arr[mid] == arr[mid-1]\
    \ \n        return smallest_change(arr[mid+1:mid])\n    \n    if arr[mid] == arr[mid+1]\
    \ \n        return smallest_change(arr[mid+1:mid+1])\n    \n    return smallest_change(arr[mid-1:mid+1])\
    \ + smallest_change(arr[mid+1:mid])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2k8crybq.jl:39\nin expression starting at\
    \ /tmp/tmp2k8crybq.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    mid = len/2\n    \n \
    \   if arr[mid] == arr[mid-1] \n        return 1 + smallest_change(arr[mid+1:end])\
    \ \n    else \n        return smallest_change(arr[mid+1:end]) + 1 \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds_0arf4.jl:28\nin expression starting at\
    \ /tmp/tmpds_0arf4.jl:28\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[len-1] == arr[len-2] \n        return\
    \ 0 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid-1:-1:1]) + 1 \n    \n    if arr[mid] == arr[mid+1] \n\
    \        return smallest_change(arr[mid+1:-1:1]) + 1 \n    \n    if arr[mid] ==\
    \ arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1]) + 1 \n    \n  \
    \  if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczi0tk9o.jl:1\nin expression starting at /tmp/tmpczi0tk9o.jl:1\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    \n    if len == 1 \n        return\
    \ 1 \n    \n    if arr[len-1] == arr[len-2] \n        return 0 \n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    return smallest_change(arr[mid-1:mid:-1]) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdb0afzw.jl:33\nin expression starting at\
    \ /tmp/tmpfdb0afzw.jl:33\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        if a < arr[end-1]\n            smallest_change\
    \ = smallest_change + 1\n        else\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktqw3_au.jl:28\nin expression starting at\
    \ /tmp/tmpktqw3_au.jl:28\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 ||\
    \ j >= 0 || k >= 0; i--, j--, k++\n        if arr[i] != arr[j]\n            if\
    \ arr[i] > arr[j]\n                smallest_change = k\n            else\n   \
    \             smallest_change = k + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp99lx60bc.jl:18\nin expression starting at /tmp/tmp99lx60bc.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ - 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8mf0wcl.jl:27\nin expression starting at\
    \ /tmp/tmpg8mf0wcl.jl:27\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    smallest = arr[1]\n \
    \   \n    for i = 2 to len \n        if arr[i] < smallest \n            smallest\
    \ = arr[i] \n        end \n    end \n    \n    if smallest == arr[1] \n      \
    \  return 1 \n    end \n    \n    smallest_change(arr[len+1:end-1]) \n    smallest_change(arr[1:len])\
    \ \nend \nsmallest_change(arr::Vector{Int64}) = smallest_change(arr)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvgkdc6z_.jl:22 expected \"\
    end\", got \"len\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvgkdc6z_.jl:22\n\
    in expression starting at /tmp/tmpvgkdc6z_.jl:22\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes an array of integers and\
    \ returns the number of elements in the array that are less than or equal to 100.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2rerx0x.jl:25\nin expression starting at\
    \ /tmp/tmpb2rerx0x.jl:25\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 to -1 \n        if arr[i] > arr[i+1]\
    \ \n            smallest_change = smallest_change + 1\n            arr[i+1] =\
    \ arr[i]\n            arr[i] = arr[i+1]\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38fr4pv6.jl:28\nin expression starting at\
    \ /tmp/tmp38fr4pv6.jl:28\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxm547m7.jl:18\nin expression starting at /tmp/tmpqxm547m7.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i + 1] \n            smallest_change = i\n            break\n \
    \       end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprgiqnmug.jl:18\nin expression starting at /tmp/tmprgiqnmug.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change(arr,\
    \ 0, length(arr)-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppq94ekcy.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmppq94ekcy.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError: no method\
    \ matching smallest_change(::Vector{Int64}, ::Int64, ::Int64)\n  Closest candidates\
    \ are:\n    smallest_change(::Vector{Int64}) at /tmp/tmppq94ekcy.jl:14\n  Stacktrace:\n\
    \   [1] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmppq94ekcy.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq94ekcy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq94ekcy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppq94ekcy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  MethodError: no method matching smallest_change(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    smallest_change(::Vector{Int64})\
    \ at /tmp/tmppq94ekcy.jl:14\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppq94ekcy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq94ekcy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq94ekcy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppq94ekcy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2]) == 1\n  MethodError: no method matching smallest_change(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    smallest_change(::Vector{Int64})\
    \ at /tmp/tmppq94ekcy.jl:14\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppq94ekcy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq94ekcy.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.co"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)[1]\n      \
    \      smallest_change = smallest_change + 1\n        end\n    end\n    \n   \
    \ return smallest_change\nend\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6xmqim3x.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp6xmqim3x.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6xmqim3x.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6xmqim3x.jl:30\ntest set: Test Failed at /tmp/tmp6xmqim3x.jl:32\n\
    \  Expression: candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xmqim3x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xmqim3x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6xmqim3x.jl:35\n  Expression: candidate([1, 2, 3, 2, 1]) ==\
    \ 0\n   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xmqim3x.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xmqim3x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6xmqim3x.jl:36\n  Expression: candidate([3, 1, 1, 3]) == 0\n\
    \   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xmqim3x.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xmqim3x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp6xmqim3x.jl:37\n  Expression: candidate([1]) == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xmqim3"
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n      \
    \  end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3wdbhcs.jl:24\nin expression starting at\
    \ /tmp/tmpi3wdbhcs.jl:24\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    else\n  \
    \      return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp202_xt9t.jl:27\nin expression starting at\
    \ /tmp/tmp202_xt9t.jl:27\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    else \n        min = Inf \n        for\
    \ i = len to 1 \n            if arr[i] < arr[len-i] \n                min = i\
    \ - 1 \n            end \n        end \n        return min \n    end \nend \n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqfip9_u7.jl:20 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqfip9_u7.jl:20\n\
    in expression starting at /tmp/tmpqfip9_u7.jl:20\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpilj_8km2.jl:18\nin expression starting at /tmp/tmpilj_8km2.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51ir4cop.jl:26\nin expression starting at\
    \ /tmp/tmp51ir4cop.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len <= 1\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwxuu0fc.jl:1\nin expression starting at /tmp/tmpvwxuu0fc.jl:1\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    else\n  \
    \      return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not alphanumeric.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yftptrc.jl:27\nin expression starting at\
    \ /tmp/tmp4yftptrc.jl:27\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = lar\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfza7r21.jl:1\nin expression starting at /tmp/tmpjfza7r21.jl:1\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindrome\
    \ or not. For example, 121 is palindrome and 12321 is not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju87ncad.jl:26\nin expression starting at\
    \ /tmp/tmpju87ncad.jl:26\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    min = len\n    max = len\n    for i = len to 1 by -1\n        if arr[i] >\
    \ arr[max]\n            max = i\n        end\n        if arr[i] < arr[min]\n \
    \           min = i\n        end\n    end\n    if arr[min] == arr[max]\n     \
    \   return 0\n    elseif arr[min] > arr[max]\n        return min + 1\n    else\n\
    \        return min - 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4q8uvu62.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4q8uvu62.jl:18\n\
    in expression starting at /tmp/tmp4q8uvu62.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    minimum\
    \ = minimum(arr)\n    \n    changes = 0\n    \n    for x in arr\n        if minimum\
    \ == minimum(arr[minimum:end])\n            changes += 1\n        end\n    end\n\
    \    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements in the array that are greater\
    \ than the average of the array. For example, if the array is [5, 3, 7, 2, 9,\
    \ 1, 4, 6, 8], the function should return 4 because there are 4 elements that\
    \ are greater than the average of the array.\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwmljvcv.jl:28\nin expression starting at\
    \ /tmp/tmpmwmljvcv.jl:28\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    minimum\
    \ = 0\n    maximum = length(arr)\n    \n    for  i \u2208 reverse(arr) \n    \
    \    minimum = minimum + 1 if i > minimum \n        maximum = maximum - 1 if i\
    \ < maximum \n    end\n    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a given value appears in an array. For example, given [1, 1,\
    \ 2, 3, 4, 4], return 3.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpf01a3a3q.jl:19 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf01a3a3q.jl:20\n\
    in expression starting at /tmp/tmpf01a3a3q.jl:20\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+2:mid+3])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-2:mid-3])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+3:mid+4])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-3:mid-4])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+4:mid+5])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-4:mid-5])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+5:mid+6])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-5:mid-6])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+6:mid+7])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-6:mid-7])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+7:mid+8])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-7:mid-8])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+8:mid+9])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-8:mid-9])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+9:mid+10])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smalle\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaip3nkhz.jl:1\nin expression starting at /tmp/tmpaip3nkhz.jl:1\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for el in arr\n        if\
    \ el == largest\n            largest = el\n        elseif el == smallest\n   \
    \         smallest = el\n        else\n            changes += 1\n        end\n\
    \    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzsxry9g.jl:35\nin expression starting at\
    \ /tmp/tmpwzsxry9g.jl:35\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven an\
    \ array arr of integers, find the minimum number of elements that\nneed to be\
    \ changed to make the array palindromic. A palindromic array is an array that\n\
    is read the same backwards and forwards. In one change, you can change one element\
    \ to any other element.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppngmh5zx.jl:18\nin expression starting at /tmp/tmppngmh5zx.jl:18\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpft09zatz.jl:18\nin expression starting at /tmp/tmpft09zatz.jl:18\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqwf5ovt.jl:29\nin expression starting at\
    \ /tmp/tmpgqwf5ovt.jl:29\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1 \n        while\
    \ i >= 0 and j >= 0 \n            if arr[i] > arr[j] \n                arr[i]\
    \ -= 1\n                smallest_change += 1\n            elseif arr[i] < arr[j]\
    \ \n                arr[j] -= 1\n                smallest_change += 1\n      \
    \      else \n                j -= 1\n            end\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 4\nWrite a function that checks\
    \ if a number is palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"while\" at /tmp/tmp9j8p8kqx.jl:19 expected\
    \ \"end\", got \"j\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9j8p8kqx.jl:19\n\
    in expression starting at /tmp/tmp9j8p8kqx.jl:19\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 7\nA palindromic number reads the same backwards and forward. For example, 321,\
    \ 321, 321, 321, 321, 321, 321, 321.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfdx7w53.jl:26\nin expression starting at\
    \ /tmp/tmplfdx7w53.jl:26\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    change = 0\n    \n    for i = largest + 1; smallest\
    \ >= i\n        change += 1\n        smallest = smallest - i\n    end\n    \n\
    \    return change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7oypidh.jl:30\nin expression starting at\
    \ /tmp/tmpp7oypidh.jl:30\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[len] == arr[len-1] \n        return\
    \ 0 \n    \n    if arr[len] == arr[len-1] \n        return 1 \n    \n    mid =\
    \ len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtcol61d.jl:1\nin expression starting at /tmp/tmpvtcol61d.jl:1\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len == 0 \n        return 0 \n    end\n    \n    min =\
    \ Inf \n    \n    for i = len-1 downto 1 \n        if arr[i] < arr[len-i] \n \
    \           min = i - 1 \n            break\n        end\n    end\n    \n    if\
    \ min == Inf \n        return 0 \n    end\n    \n    count = 0\n    \n    for\
    \ i = len-1 downto 1 \n        if arr[i] > arr[len-i] \n            count += 1\n\
    \            break\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppa37482k.jl:23 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppa37482k.jl:23\n\
    in expression starting at /tmp/tmppa37482k.jl:23\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is palindrome\
    \ or not. For example, 121 is palindrome while 121 is not. Write a test case to\
    \ check your function.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprryxfle6.jl:25\nin expression starting at\
    \ /tmp/tmprryxfle6.jl:25\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n      \
    \  end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3wdbhcs.jl:24\nin expression starting at\
    \ /tmp/tmpi3wdbhcs.jl:24\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpilj_8km2.jl:18\nin expression starting at /tmp/tmpilj_8km2.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindrome\
    \ or not. \nA palindrome is a number that is the same when read from left to right\
    \ and from right to left.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeh7hg96j.jl:26\nin expression starting at\
    \ /tmp/tmpeh7hg96j.jl:26\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    mid = (largest + smallest) / 2\n    \n    if arr[mid]\
    \ == largest\n        return smallest_change(arr[mid+1:end-1]) + largest\n   \
    \ \n    if arr[mid] == smallest\n        return smallest_change(arr[mid+1:end-1])\
    \ + largest\n    \n    return smallest_change(arr[mid+1:end-1]) + largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6hurzhq.jl:1\nin expression starting at /tmp/tmpd6hurzhq.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ce3ymw3.jl:26\nin expression starting at\
    \ /tmp/tmp0ce3ymw3.jl:26\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpjyghfb.jl:1\nin expression starting at /tmp/tmpjpjyghfb.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)\n         \
    \   smallest_change = smallest_change + 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 8\nA palindromic number reads the same backwards and\
    \ forward. For example, 321 is a palindromic number while 321421 is a palindromic\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs7svhs8.jl:25\nin expression starting at\
    \ /tmp/tmpcs7svhs8.jl:25\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that checks if a number is palindrome.\
    \ For example, 121 is palindrome, but 12321 is not.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dk7z4ej.jl:26\nin expression starting at\
    \ /tmp/tmp9dk7z4ej.jl:26\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is palindrome or\
    \ not. For example, 121 is palindrome while 12321 is not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvy7_n1l8.jl:26\nin expression starting at\
    \ /tmp/tmpvy7_n1l8.jl:26\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    mid = (largest + smallest) / 2\n    \n    if arr[mid]\
    \ == largest\n        return smallest_change(arr[mid+1:end]) + largest\n    \n\
    \    if arr[mid] == smallest\n        return smallest_change(arr[mid+1:end]) +\
    \ largest\n    \n    if arr[mid] == largest\n        return smallest_change(arr[mid+1:end])\
    \ + largest\n    \n    if arr[mid] == smallest\n        return smallest_change(arr[mid+1:end])\
    \ + largest\n    \n    return smallest_change(arr[mid+1:end]) + largest\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjaanscau.jl:37\nin expression starting at\
    \ /tmp/tmpjaanscau.jl:37\n"
  stdout: ''
  timestamp: 1659823120
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change_len = length(arr)\n    for i = 1:length(arr)\n    \
    \    if arr[i] > arr[length(arr) - i]\n            smallest_change = smallest_change\
    \ + 1\n        elseif arr[i] < arr[length(arr) - i]\n            smallest_change\
    \ = smallest_change - 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpceozpilm.jl:26\nin expression starting at\
    \ /tmp/tmpceozpilm.jl:26\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    \n    minimum = minimum(arr)\n    \n\
    \    if minimum == 0 \n        return 0 \n    \n    minimum = minimum - 1\n  \
    \  \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum - 1\n\
    \    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum -\
    \ 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6kkhdmj.jl:1\nin expression starting at /tmp/tmpw6kkhdmj.jl:1\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if x != reverse(arr)\n            smallest_change = smallest_change -\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven an array arr of integers, find the minimum number of elements that\n\
    need to be changed to make the array palindromic. A palindromic array is an array\
    \ that\nis read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipftrl36.jl:27\nin expression starting at\
    \ /tmp/tmpipftrl36.jl:27\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        smallest_change = smallest_change + 1\n\
    \        if a != reverse(arr)\n            smallest_change = smallest_change -\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Problem 3\nGiven a string, find the length of the longest substring without repeating\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t\
    @test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4,\
    \ 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vxidhi8.jl:27\nin expression starting at\
    \ /tmp/tmp2vxidhi8.jl:27\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for el in arr\n        if\
    \ el == largest\n            changes += 1\n            largest = el\n        elseif\
    \ el == smallest\n            changes += 1\n            smallest = el\n      \
    \  else\n            changes += 2\n        end\n    end\n    \n    return changes\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76my5bxx.jl:37\nin expression starting at\
    \ /tmp/tmp76my5bxx.jl:37\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7whg1kxn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7whg1kxn.jl:1\n\
    in expression starting at /tmp/tmp7whg1kxn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zok1bf0.jl:1\nin expression starting at /tmp/tmp3zok1bf0.jl:1\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for a in arr\n        if a\
    \ < smallest \n            changes += 1\n        elseif largest < a\n        \
    \    changes += 1\n        else\n            changes += 2\n        end\n    end\n\
    \    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a\
    \ number is palindrome or not. For example, 121 is a palindrome while 12321 is\
    \ not.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphkx23hm5.jl:35\nin expression starting at\
    \ /tmp/tmphkx23hm5.jl:35\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 3\nGiven a string, find the length of the longest substring without repeating\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t\
    @test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4,\
    \ 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmynt_b9.jl:25\nin expression starting at\
    \ /tmp/tmpnmynt_b9.jl:25\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 0])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsri_1pr.jl:26\nin expression starting at\
    \ /tmp/tmpxsri_1pr.jl:26\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for x in arr\n        if x == largest\n            count +=\
    \ 1\n        elseif x == smallest\n            count -= 1\n        else\n    \
    \        count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jdy52fh.jl:30\nin expression starting at\
    \ /tmp/tmp2jdy52fh.jl:30\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 ||\
    \ j >= 0 || k >= 0\n        \n        if arr[i] == arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            \n            if i == 0 && j == 0\n     \
    \           smallest_change = smallest_change + 1\n            \n            if\
    \ i == 0 && j > 0\n                smallest_change = smallest_change + 1\n   \
    \         \n            if j == 0 && k > 0\n                smallest_change =\
    \ smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k == 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k == 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfv8czjhp.jl:1\nin expression starting at /tmp/tmpfv8czjhp.jl:1\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n    \n  \
    \  mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    else \n        return smallest_change(arr[mid+1:end]) + 0 \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlgll1u2.jl:30\nin expression starting at\
    \ /tmp/tmpwlgll1u2.jl:30\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1 if\
    \ x == reverse(arr[x])\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0y2wbpo5.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0y2wbpo5.jl:19\n\
    in expression starting at /tmp/tmp0y2wbpo5.jl:19\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given number appears in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kssujtw.jl:26\nin expression starting at\
    \ /tmp/tmp_kssujtw.jl:26\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgx6ls4g9.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgx6ls4g9.jl:18\n\
    in expression starting at /tmp/tmpgx6ls4g9.jl:18\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr) - 1 \n      \
    \  \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vakchcs.jl:1\nin expression starting at /tmp/tmp2vakchcs.jl:1\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 7: Find the largest palindrome made from the product\
    \ of two 3-digit numbers.\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp867gw0mh.jl:26\nin expression starting at\
    \ /tmp/tmp867gw0mh.jl:26\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67rx204x.jl:18\nin expression starting at /tmp/tmp67rx204x.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    else\n        change = largest - smallest\n        if change\
    \ == 0\n            return 1\n        else\n            return change\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7fl6e9w.jl:28\nin expression starting at\
    \ /tmp/tmpf7fl6e9w.jl:28\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != arr[end-1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp368xrpir.jl:25\nin expression starting at\
    \ /tmp/tmp368xrpir.jl:25\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g8bkg1z.jl:25\nin expression starting at\
    \ /tmp/tmp1g8bkg1z.jl:25\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is palindromic. For example, 121\
    \ is a palindromic number.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjf_00chm.jl:26\nin expression starting at\
    \ /tmp/tmpjf_00chm.jl:26\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqqvk1ts.jl:25\nin expression starting at\
    \ /tmp/tmphqqvk1ts.jl:25\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Inf \n    for x in arr \n        if x == reverse(arr[x]) \n            smallest_change\
    \ = min(smallest_change, length(arr) - x) \n        else \n            smallest_change\
    \ = min(smallest_change, length(arr) - 1) \n    end \n    return smallest_change\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxr6xp0ox.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxr6xp0ox.jl:1\n\
    in expression starting at /tmp/tmpxr6xp0ox.jl:1\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Inf \n    \n    for x in arr \n        smallest_change = min(smallest_change,\
    \ x - reverse(arr)) \n    end \n    \n    return smallest_change\nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1yuihpck.jl:29\n  Test threw
    exception\n  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError:
    no method matching -(::Int64, ::Vector{Int64})\n  For element-wise subtraction,
    use broadcasting with dot syntax: scalar .- array\n  Closest candidates are:\n    -(::Union{Int128,
    Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at ~/.conda/envs/polyglot/share/julia/base/int.jl:85\n    -(::T,
    !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,
    UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:86\n    -(::Union{Int16,
    Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:537\n    ...\n  Stacktrace:\n   [1]
    smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmp1yuihpck.jl:19\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1yuihpck.jl:29 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yuihpck.jl:28\ntest set: Error
    During Test at /tmp/tmp1yuihpck.jl:30\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 3, 2, 2]) == 1\n  MethodError: no method matching -(::Int64, ::Vector{Int64})\n  For
    element-wise subtraction, use broadcasting with dot syntax: scalar .- array\n  Closest
    candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,
    UInt32, UInt64, UInt8}) at ~/.conda/envs/polyglot/share/julia/base/int.jl:85\n    -(::T,
    !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,
    UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:86\n    -(::Union{Int16,
    Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:537\n    ...\n  Stacktrace:\n   [1]
    smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmp1yuihpck.jl:19\n   [2]
    macro expansion\n     @'
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = minimum(arr)\n    \n    for a in arr\n        if a < smallest_change\n   \
    \         smallest_change = a\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8k46kfkt.jl:26\nin expression starting at\
    \ /tmp/tmp8k46kfkt.jl:26\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = smallest_change + 1\n    \
    \        arr[i] = arr[i+1]\n            arr[i+1] = arr[i]\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3128u61h.jl:18\nin expression starting at /tmp/tmp3128u61h.jl:18\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs3vkmns.jl:26\nin expression starting at\
    \ /tmp/tmpcs3vkmns.jl:26\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    else\n  \
    \      return smallest_change(arr[mid-1:mid-1]) + smallest_change(arr[mid+1:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4vilapg.jl:27\nin expression starting at\
    \ /tmp/tmpm4vilapg.jl:27\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for x in arr\n        if x == largest || x == smallest\n \
    \           count += 1\n        else\n            count += diff / x\n        end\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzjd8bwd.jl:28\nin expression starting at\
    \ /tmp/tmpnzjd8bwd.jl:28\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smalle\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3bstjir.jl:1\nin expression starting at /tmp/tmpy3bstjir.jl:1\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7whg1kxn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7whg1kxn.jl:1\n\
    in expression starting at /tmp/tmp7whg1kxn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    smallest_change = Int64(0)\
    \ \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[i-1] \n       \
    \     smallest_change = smallest_change + 1 \n        else \n            smallest_change\
    \ = smallest_change + 0 \n        end \n    end \n    return smallest_change \n\
    end \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpawxzr5xe.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpawxzr5xe.jl:22\n\
    in expression starting at /tmp/tmpawxzr5xe.jl:22\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 2 to -1 \n        if arr[i] != arr[i+1]\
    \ \n            smallest_change = smallest_change + 1\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zsbra50.jl:26\nin expression starting at\
    \ /tmp/tmp4zsbra50.jl:26\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change(arr,\
    \ 0, length(arr)-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppq94ekcy.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmppq94ekcy.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError: no method\
    \ matching smallest_change(::Vector{Int64}, ::Int64, ::Int64)\n  Closest candidates\
    \ are:\n    smallest_change(::Vector{Int64}) at /tmp/tmppq94ekcy.jl:14\n  Stacktrace:\n\
    \   [1] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmppq94ekcy.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq94ekcy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq94ekcy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppq94ekcy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  MethodError: no method matching smallest_change(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    smallest_change(::Vector{Int64})\
    \ at /tmp/tmppq94ekcy.jl:14\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppq94ekcy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq94ekcy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppq94ekcy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppq94ekcy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2]) == 1\n  MethodError: no method matching smallest_change(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    smallest_change(::Vector{Int64})\
    \ at /tmp/tmppq94ekcy.jl:14\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppq94ekcy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppq94ekcy.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.co"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[0] != arr[len-1] \n        return 0\
    \ \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid+1:end]) + 1 \n    \n    return smallest_change(arr[mid+1:end])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojvwi5_8.jl:34\nin expression starting at\
    \ /tmp/tmpojvwi5_8.jl:34\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for x in arr\n        smallest_change = min(smallest_change,\
    \ count_changes(arr,x))\n    end\n    \n    return smallest_change\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpp9w_vxln.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpp9w_vxln.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  UndefVarError: count_changes\
    \ not defined\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmpp9w_vxln.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9w_vxln.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9w_vxln.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9w_vxln.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  UndefVarError: count_changes not defined\n\
    \  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmpp9w_vxln.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9w_vxln.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9w_vxln.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9w_vxln.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2]) == 1\n  UndefVarError: count_changes not defined\n  Stacktrace:\n\
    \   [1] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmpp9w_vxln.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9w_vxln.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9w_vxln.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9w_vxln.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 4, 2]) == 1\n  UndefVarError: count_changes not defined\n \
    \ Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmpp9w_vxln.jl:19\n\
    \   [2] macr"
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1 if\
    \ x == reverse(arr[x])\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of unique elements in an array.\
    \ For example, given [1, 1, 2, 3] it should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplzr3l684.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplzr3l684.jl:19\n\
    in expression starting at /tmp/tmplzr3l684.jl:19\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = smallest_change + 1\n    \
    \    elseif arr[i] < arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1me8g8eu.jl:18\nin expression starting at /tmp/tmp1me8g8eu.jl:18\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        if a < arr[smallest_change]\n         \
    \   smallest_change = smallest_change + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1j3akjp4.jl:26\nin expression starting at\
    \ /tmp/tmp1j3akjp4.jl:26\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+2:mid+3])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-2:mid-3])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+3:mid+4])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-3:mid-4])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+4:mid+5])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-4:mid-5])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+5:mid+6])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-5:mid-6])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+6:mid+7])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-6:mid-7])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+7:mid+8])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-7:mid-8])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+8:mid+9])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-8:mid-9])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+9:mid+10])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopti38s5.jl:103\nin expression starting at\
    \ /tmp/tmpopti38s5.jl:103\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of palindromic\
    \ permutations of an input string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90kmbe6u.jl:23\nin expression starting at\
    \ /tmp/tmp90kmbe6u.jl:23\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrt50kus.jl:18\nin expression starting at /tmp/tmplrt50kus.jl:18\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n    \n  \
    \  min = Int.(minimum(arr))\n    \n    if min == 0 \n        return 0 \n    end\n\
    \    \n    if min == 1 \n        return 1 \n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmwhjlvfl.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmwhjlvfl.jl:1\n\
    in expression starting at /tmp/tmpmwhjlvfl.jl:1\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len == 0 \n        return 0 \n    \n    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest \n        return\
    \ 0 \n    \n    mid = len/2\n    \n    left_half = arr[mid:end]\n    right_half\
    \ = arr[1:mid]\n    \n    left_half_change = smallest_change(left_half)\n    right_half_change\
    \ = smallest_change(right_half)\n    \n    if left_half_change == right_half_change\
    \ \n        return left_half_change \n    \n    if left_half_change > right_half_change\
    \ \n        return left_half_change + 1 \n    \n    return right_half_change +\
    \ 1\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindrome\
    \ or not. \nA palindrome is a number that is the same when read from left to right\
    \ and from right to left.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvc34cit.jl:42\nin expression starting at\
    \ /tmp/tmpxvc34cit.jl:42\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n   \
    \     if arr[i] > arr[i+1] \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvto1_u6s.jl:19\nin expression starting at /tmp/tmpvto1_u6s.jl:19\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:smallest_change\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = i\n            break\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmple96kjzj.jl:24\nin expression starting at\
    \ /tmp/tmple96kjzj.jl:24\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr)-1 downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvb7hw083.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvb7hw083.jl:18\n\
    in expression starting at /tmp/tmpvb7hw083.jl:18\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ce3ymw3.jl:26\nin expression starting at\
    \ /tmp/tmp0ce3ymw3.jl:26\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nA palindromic number reads the same backwards and\
    \ forwards, like 12321. A palindromic number reads the same backwards and forwards,\
    \ like 12321. A palindromic number reads the same backwards and forwards, like\
    \ 12321. A palindromic number reads the same backwards and forwards, like 12321.\
    \ A palindromic number reads the same backwards and forwards, like 12321. A palindromic\
    \ number reads the same backwards and forwards, like 12321. A palindromic number\
    \ reads the same backwards and forwards, like 12321. A palindromic number reads\
    \ the same backwards and forwards, like 12321. A palindromic number reads the\
    \ same backwards and forwards, like 12321. A palindromic number reads the same\
    \ backwards and forwards, like 12321. A palindromic number reads the same backwards\
    \ and forwards, like 12321. A palindromic number reads the same backwards and\
    \ forwards, like 12321. A palindromic number reads the same backwards and forwards,\
    \ like 12321. A palindromic number reads the same backwards and forwards, like\
    \ 12321. A palindromic number reads the same backwards and forwards, like 12321.\
    \ A palindromic number reads the same backwards and forwards, like 12321. A palindromic\
    \ number reads the same backwards and forwards, like 12321. A palindromic number\
    \ reads the same backwards and forwards, like 12321. A palindromic number reads\
    \ the same backwards and forwards, like 12321. A palindromic number reads the\
    \ same backwards and forwards, like 12321. A palindromic number reads the same\
    \ backwards and forwards, like 12321. A palindromic number reads the same backwards\
    \ and forwards, like 12321. A palindromic number reads the same backwards and\
    \ forwards, like 12321. A palindromic number reads the same backwards and forwards,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnaf5vypb.jl:26\nin expression starting at\
    \ /tmp/tmpnaf5vypb.jl:26\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    \n    min = Int.(ceil(Int.(len/2))) \n\
    \    \n    for i = min to len-1 \n        if arr[i] != reverse(arr[i]) \n    \
    \        min = i \n            break\n    end\n    return min \nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary search tree and a key, find the node in the tree with the\
    \ smallest key greater than or equal to the given key. If such a node does not\
    \ exist, output \"Not found\".\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyfbl4knv.jl:21 expected \"\
    end\", got \"len\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyfbl4knv.jl:21\n\
    in expression starting at /tmp/tmpyfbl4knv.jl:21\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxix4wqge.jl:1\nin expression starting at /tmp/tmpxix4wqge.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxm547m7.jl:18\nin expression starting at /tmp/tmpqxm547m7.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\
    \ \n        return smallest_change(arr[mid+1:end]) + 1 \n    \n    if arr[mid]\
    \ == arr[mid+1] \n        return smallest_change(arr[mid+2:end]) + 1 \n    \n\
    \    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0z7p1uzc.jl:1\nin expression starting at /tmp/tmp0z7p1uzc.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 4\nWrite a\
    \ function that returns the number of palindromic permutations of an array. For\
    \ example, if the input array is [1,2,3,4,5,6,7], then the output should be 7.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwo3eclj5.jl:18\nin expression starting at /tmp/tmpwo3eclj5.jl:18\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl16t6sxs.jl:18\nin expression starting at /tmp/tmpl16t6sxs.jl:18\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = minimum(arr)\n    smallest_change = minimum(smallest_change, length(arr))\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements in the vector that are less than\
    \ the mean of the vector.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkw9xte0.jl:19\nin expression starting at\
    \ /tmp/tmpwkw9xte0.jl:19\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbax0amg.jl:24\nin expression starting at\
    \ /tmp/tmpbbax0amg.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51ir4cop.jl:26\nin expression starting at\
    \ /tmp/tmp51ir4cop.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = Inf \n    \n  \
    \  for i = len to 1 \n        if arr[i] < arr[len-i] \n            min = i - 1\
    \ \n            break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] > arr[len-i] \n            min = i - 1 \n            break\n        end\n\
    \    end\n    \n    if min == 0 \n        return 0 \n    end\n    \n    min =\
    \ min + 1\n    \n    for i = len to 1 \n        if arr[i] < arr[len-i] \n    \
    \        min = i - 1 \n            break\n        end\n    end\n    \n    if min\
    \ == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for i\
    \ = len to 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n   \
    \         break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] < arr[len-i] \n            min = i - 1 \n            break\n        end\n\
    \    end\n    \n    if min == 0 \n        return 0 \n    end\n    \n    min =\
    \ min + 1\n    \n    for i = len to 1 \n        if arr[i] > arr[len-i] \n    \
    \        min = i - 1 \n            break\n        end\n    end\n    \n    if min\
    \ == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for i\
    \ = len to 1 \n        if arr[i] < arr[len-i] \n            min = i - 1 \n   \
    \         break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] > arr[len-i] \n            min = i - 1 \n            break\n        end\n\
    \    end\n    \n    if min == 0 \n        return 0 \n    end\n    \n    min =\
    \ min + 1\n    \n    for i = len to 1 \n        if arr[i] < arr[len-i] \n    \
    \        min = i - 1 \n            break\n        end\n    end\n    \n    if min\
    \ == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for i\
    \ = len to 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n   \
    \         break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] < arr[len-i] \n            min = i - \nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpidniofj_.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpidniofj_.jl:22\n\
    in expression starting at /tmp/tmpidniofj_.jl:22\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs3vkmns.jl:26\nin expression starting at\
    \ /tmp/tmpcs3vkmns.jl:26\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    left = 0\n\
    \    right = len - 1\n    \n    while left < right\n        if arr[left] > arr[right]\n\
    \            swap!(arr, left, right)\n            left += 1\n            right\
    \ -= 1\n        else\n            left += 1\n            right -= 1\n        end\n\
    \    end\n    \n    left = 0\n    right = len - 1\n    \n    while left < right\n\
    \        if arr[left] != arr[right]\n            swap!(arr, left, right)\n   \
    \         left += 1\n            right -= 1\n        else\n            left +=\
    \ 1\n            right -= 1\n        end\n    end\n    \n    return len - length(arr)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjj9hp0eg.jl:51\nin expression starting at\
    \ /tmp/tmpjj9hp0eg.jl:51\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = Inf \n    \n  \
    \  for i = len-1 downto 1 \n        if arr[i] > arr[len-i] \n            min =\
    \ i - 1 \n            break \n        end \n    end \n    \n    if min == Inf\
    \ \n        return 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n   \
    \     if arr[i] > arr[len-i] \n            min = i - 1 \n            break \n\
    \        end \n    end \n    \n    if min == Inf \n        return 0 \n    end\
    \ \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i] \n\
    \            min = i - 1 \n            break \n        end \n    end \n    \n\
    \    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp218qwxy9.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp218qwxy9.jl:22\n\
    in expression starting at /tmp/tmp218qwxy9.jl:22\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven a binary search tree and a node in that tree,\
    \ find the in-order successor of that node. For example, given the following tree:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0dgqzbn.jl:26\nin expression starting at\
    \ /tmp/tmpj0dgqzbn.jl:26\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphpwgbt8q.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphpwgbt8q.jl:18\n\
    in expression starting at /tmp/tmphpwgbt8q.jl:18\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = length(arr)-2:-1:1\n        if arr[i] > arr[i+1]\n            smallest_change\
    \ = minimum(smallest_change, length(arr)-i)\n        else\n            smallest_change\
    \ = minimum(smallest_change, length(arr)-i+1)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6ef_974.jl:26\nin expression starting at\
    \ /tmp/tmpe6ef_974.jl:26\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjnw_22yj.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpjnw_22yj.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjnw_22yj.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjnw_22yj.jl:28\ntest set: Test Failed at /tmp/tmpjnw_22yj.jl:30\n\
    \  Expression: candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n   Evaluated: 7 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnw_22yj.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnw_22yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjnw_22yj.jl:31\n  Expression: candidate([1, 4, 2]) == 1\n\
    \   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnw_22yj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnw_22yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjnw_22yj.jl:32\n  Expression: candidate([1, 4, 4, 2]) == 1\n\
    \   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjnw_22yj.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjnw_22yj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjnw_22yj.jl:33\n  Expression: candidate([1, 2, 3, 2, 1]) ==\
    \ 0\n   Evaluated: 5 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj"
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrt50kus.jl:18\nin expression starting at /tmp/tmplrt50kus.jl:18\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change if x\
    \ == reverse(arr[x]) else smallest_change + 1\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that checks if a number is prime\
    \ or not. You may want to use the sieve of Eratosthenes to speed up the process.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpadx4mtse.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpadx4mtse.jl:19\n\
    in expression starting at /tmp/tmpadx4mtse.jl:19\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    largest = largest-smallest\n\
    \    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n \
    \   largest = largest-1\n    largest = largest+1\n    largest = largest-1\n  \
    \  largest = largest+1\n    largest = largest-1\n    largest = largest+1\n   \
    \ largest = largest-1\n    largest = largest+1\n    largest = largest-1\n    largest\
    \ = largest+1\n    largest = largest-1\n    largest = largest+1\n    largest =\
    \ largest-1\n    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n\
    \    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n \
    \   largest = largest+1\n    largest = largest-1\n    largest = largest+1\n  \
    \  largest = largest-1\n    largest = largest+1\n    largest = largest-1\n   \
    \ largest = largest+1\n    largest = largest-1\n    largest = largest+1\n    largest\
    \ = largest-1\n    largest = largest+1\n    largest = largest-1\n    largest =\
    \ largest+1\n    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n\
    \    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n \
    \   largest = largest-1\n    largest = largest+1\n    largest = largest-1\n  \
    \  largest = largest+1\n    largest = largest-1\n    largest = largest+1\n   \
    \ largest = largest-1\n    largest = largest+1\n    largest = largest-1\n    largest\
    \ = largest+1\n    largest = largest-1\n    largest = largest+1\n    largest =\
    \ largest-1\n    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n\
    \    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n \
    \   largest = largest+1\n\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdio1k0xs.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdio1k0xs.jl:1\n\
    in expression starting at /tmp/tmpdio1k0xs.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    \n    minimum = minimum(arr)\n    \n\
    \    if minimum == 0 \n        return len\n    \n    minimum = minimum - 1\n \
    \   \n    if minimum == 0 \n        return len\n    \n    minimum = minimum -\
    \ 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum = minimum\
    \ - 1\n    \n    if minimum == \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoaokobjh.jl:1\nin expression starting at /tmp/tmpoaokobjh.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1] and arr[mid+1] == arr[mid]\n        return\
    \ smallest_change(arr[mid+2:end])\n    \n    if arr[mid] == arr[mid+1] and arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+2:end])\n    \n    if\
    \ arr[mid] == arr[mid-1] and arr[mid+1] == arr[mid]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return\
    \ smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1] and arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return\
    \ smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1] and arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return\
    \ smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1] and arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return\
    \ smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid+1] and arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid-1:end])\n    \n    if\
    \ arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\nusing Test\n\n\
    @testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5,\
    \ 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"arr\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiidz5sof.jl:28\nin expression starting at /tmp/tmpiidz5sof.jl:28\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-i)\n        end\n   \
    \ end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements that need to be changed to make\
    \ the array palindromic. For example, if the input array is [1,2,3,4,5,6,7], then\
    \ your function should return 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra9lrlzu.jl:24\nin expression starting at\
    \ /tmp/tmpra9lrlzu.jl:24\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5,\
    \ 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbr411hc.jl:1\nin expression starting at /tmp/tmpfbr411hc.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr)-1)\n    for\
    \ i = smallest_change, length(arr)-1 do\n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of elements in the array that are odd.\nusing Test\n\n\
    @testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5,\
    \ 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcna50wcf.jl:17\nin expression starting at\
    \ /tmp/tmpcna50wcf.jl:17\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 8\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ x 99.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5o9i_m_.jl:26\nin expression starting at\
    \ /tmp/tmpp5o9i_m_.jl:26\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven an input string, find the length of the longest\
    \ substring without repeating characters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3l2bdjd.jl:26\nin expression starting at\
    \ /tmp/tmpd3l2bdjd.jl:26\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7whg1kxn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7whg1kxn.jl:1\n\
    in expression starting at /tmp/tmp7whg1kxn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q7z_5qg.jl:26\nin expression starting at\
    \ /tmp/tmp1q7z_5qg.jl:26\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\
    \ \n        return 0 \n    \n    mid = ceil(Int64, length(arr)/2)\n    \n    if\
    \ arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end]) + 1\
    \ \n    \n    return smallest_change(arr[mid+1:end]) + 1 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6m9hty1.jl:28\nin expression starting at\
    \ /tmp/tmpu6m9hty1.jl:28\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjns_j_cd.jl:26\nin expression starting at\
    \ /tmp/tmpjns_j_cd.jl:26\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr)\
    \ - 1\n        \n        if arr[i] > arr[j]\n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j]\n            arr[j] = arr[k]\n            arr[k]\
    \ = arr[i]\n        end\n        \n        if arr[i] > arr[k]\n            smallest_change\
    \ = smallest_change + 1\n            arr[i] = arr[k]\n            arr[k] = arr[j]\n\
    \            arr[j] = arr[i]\n        end\n        \n        if arr[j] > arr[k]\n\
    \            smallest_change = smallest_change + 1\n            arr[j] = arr[k]\n\
    \            arr[k] = arr[i]\n            arr[i] = arr[j]\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqod964j.jl:44\nin expression starting at\
    \ /tmp/tmpdqod964j.jl:44\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 7: Find the largest palindromic subarray\nGiven an array\
    \ arr of integers, find the largest palindromic subarray. Palindromic subarray\
    \ is a subarray that is a palindromic array (that is, has the same elements in\
    \ the same order as they appear in the array). For example, given the array arr\
    \ = [1, 2, 3, 5, 4, 7, 9, 6], the largest palindromic subarray is [5, 4, 7, 9,\
    \ 6].\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe78_ux4k.jl:18\nin expression starting at /tmp/tmpe78_ux4k.jl:18\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjns_j_cd.jl:26\nin expression starting at\
    \ /tmp/tmpjns_j_cd.jl:26\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] -= 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] -= 1\n  \
    \      else\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] -= 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tcut5sx.jl:33\nin expression starting at\
    \ /tmp/tmp2tcut5sx.jl:33\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpraofo1cw.jl:105\nin expression starting at\
    \ /tmp/tmpraofo1cw.jl:105\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ palindromic permutations of a given string.\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jtt6po6.jl:26\nin expression starting at\
    \ /tmp/tmp1jtt6po6.jl:26\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = minimum(length(arr)-length(arr))\n    \n    for i = 1:length(arr)\n      \
    \  if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr)-i)\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements in the vector that are less than\
    \ the mean of the vector.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xumju7m.jl:26\nin expression starting at\
    \ /tmp/tmp5xumju7m.jl:26\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len == 0 \n        return 0\n    \n    min = Int.(arr[1])\n\
    \    \n    for i = 2 to len\n        if arr[i] < min \n            min = arr[i]\n\
    \        end\n    end\n    \n    return min\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a\
    \ string, find the length of the longest substring without repeating characters.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4ubz9fku.jl:22 expected \"\
    end\", got \"len\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ubz9fku.jl:22\n\
    in expression starting at /tmp/tmp4ubz9fku.jl:22\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)\n         \
    \   smallest_change = smallest_change + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65jsyqb2.jl:26\nin expression starting at\
    \ /tmp/tmp65jsyqb2.jl:26\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)[1]\n      \
    \      smallest_change = smallest_change + 1\n        end\n    end\n    \n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 4\nA palindromic number reads the same\
    \ both ways. The largest palindrome made from the product of two 2-digit numbers\
    \ is 9009 = 91 x 99.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplztb0rrn.jl:26\nin expression starting at\
    \ /tmp/tmplztb0rrn.jl:26\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    largest = largest * largest\n\
    \    smallest = smallest * smallest\n    \n    largest = largest * largest\n \
    \   smallest = smallest * smallest\n    \n    largest = largest * largest\n  \
    \  smallest = smallest * smallest\n    \n    largest = largest * largest\n   \
    \ smallest = smallest * smallest\n    \n    largest = largest * largest\n    smallest\
    \ = smallest * smallest\n    \n    largest = largest * largest\n    smallest =\
    \ smallest * smallest\n    \n    largest = largest * largest\n    smallest = smallest\
    \ * smallest\n    \n    largest = largest * largest\n    smallest = smallest *\
    \ smallest\n    \n    largest = largest * largest\n    smallest = smallest * smallest\n\
    \    \n    largest = largest * largest\n    smallest = smallest * smallest\n \
    \   \n    largest = largest * largest\n    smallest = smallest * smallest\n  \
    \  \n    largest = largest * largest\n    smallest = smallest * smallest\n   \
    \ \n    largest = largest * largest\n    smallest = smallest * smallest\n    \n\
    \    largest = largest * largest\n    smallest = smallest * smallest\n    \n \
    \   largest = largest * largest\n    smallest = smallest * smallest\n    \n  \
    \  largest = largest * largest\n    smallest = smallest * smallest\n    \n   \
    \ largest = largest * largest\n    smallest = smallest * smallest\n    \n    largest\
    \ = largest * largest\n    smallest = smallest * smallest\n    \n    largest =\
    \ largest * largest\n    smallest = smallest * smallest\n    \n    largest = largest\
    \ * largest\n    smallest = smallest * smallest\n    \n    largest = largest *\
    \ largest\n    smallest = smallest * smallest\n    \n    largest = largest * largest\n\
    \    smallest = smallest * smallest\n    \n    largest = largest * largest\n \
    \   smallest = smallest * smallest\n    \n    largest = largest * largest\n  \
    \  smallest = \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptikdh1vi.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptikdh1vi.jl:1\n\
    in expression starting at /tmp/tmptikdh1vi.jl:1\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzx_sr0q.jl:108\nin expression starting at\
    \ /tmp/tmpmzx_sr0q.jl:108\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len <= 1\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5n39ozrl.jl:1\nin expression starting at /tmp/tmp5n39ozrl.jl:1\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 4\nA palindromic\
    \ number reads the same backwards and forward. For example, 321 is a palindromic\
    \ number while 321421 is a palindromic number but 12321 is not. Find the smallest\
    \ number of digits that need to be changed to make the given number palindromic.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5goges76.jl:18\nin expression starting at /tmp/tmp5goges76.jl:18\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr)\
    \ - 1\n        while i >= 0 && j >= 0 && k >= 0\n            if arr[i] > arr[j]\n\
    \                arr[i] -= 1\n                smallest_change += 1\n         \
    \   elseif arr[j] > arr[k]\n                arr[j] -= 1\n                smallest_change\
    \ += 1\n            elseif arr[k] > arr[i]\n                arr[k] -= 1\n    \
    \            smallest_change += 1\n            else\n                i -= 1\n\
    \                j -= 1\n                k -= 1\n            end\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3otivtw.jl:39\nin expression starting at\
    \ /tmp/tmp_3otivtw.jl:39\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        smallest_change = smallest_change + 1\n\
    \        if a != reverse(arr)\n            smallest_change = smallest_change -\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Problem 8\nWrite a function that returns the number of elements in the array that\
    \ do not equal zero.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4or99wg.jl:27\nin expression starting at\
    \ /tmp/tmpj4or99wg.jl:27\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\
    \ \n        return 0 \n    \n    largest = largest + 1\n    smallest = smallest\
    \ - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n  \
    \  largest = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest\
    \ - 1\n    smallest = smallest + 1\n    \n    largest = largest + 1\n    smallest\
    \ = smallest - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n    largest\
    \ = largest - 1\n    smallest = smallest + 1\n    \n    largest = largest + 1\n\
    \    smallest = smallest - 1\n    \n    largest = largest - 1\n    smallest =\
    \ smallest + 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n    largest\
    \ = largest - 1\n    smallest = smallest + 1\n    \n    largest = largest + 1\n\
    \    smallest = smallest - 1\n    \n    largest = largest - 1\n    smallest =\
    \ smallest + 1\n    \n    largest = largest + 1\n    smallest = smallest - 1\n\
    \    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n    largest\
    \ = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1\n\
    \    smallest = smallest + 1\n    \n    largest = largest + 1\n    smallest =\
    \ smallest - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n    largest\
    \ = largest - 1\n    smallest = smallest + 1\n    \n    largest = largest + 1\n\
    \    smallest = smallest - 1\n    \n    largest = largest - 1\n    smallest =\
    \ smallest + 1\n    \n    largest = largest + 1\n    smallest = smallest - 1\n\
    \    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n    largest\
    \ = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1\n\
    \    smallest = smallest + 1\n    \n    largest = largest + 1\n    smallest =\
    \ smallest - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n    largest\
    \ = largest - 1\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_9h3q83.jl:1\nin expression starting at /tmp/tmp5_9h3q83.jl:1\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvgg7aeb.jl:108\nin expression starting at\
    \ /tmp/tmpbvgg7aeb.jl:108\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return mid\n    end\n \
    \   if left > right\n        left, right = right, left\n    end\n    mid = len/2\n\
    \    left = arr[mid]\n    right = arr[mid+1]\n    if left == right\n        return\
    \ mid\n    end\n    if left > right\n        left, right = right, left\n    end\n\
    \    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n    if left ==\
    \ right\n        return mid\n    end\n    if left > right\n        left, right\
    \ = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n\
    \    if left == right\n        return mid\n    end\n    if left > right\n    \
    \    left, right = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return mid\n    end\n \
    \   if left > right\n        left, right = right, left\n    end\n    mid = len/2\n\
    \    left = arr[mid]\n    right = arr[mid+1]\n    if left == right\n        return\
    \ mid\n    end\n    if left > right\n        left, right = right, left\n    end\n\
    \    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n    if left ==\
    \ right\n        return mid\n    end\n    if left > right\n        left, right\
    \ = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n\
    \    if left == right\n        return mid\n    end\n    if left > right\n    \
    \    left, right = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return mid\n    end\n \
    \   if left > right\n        left, right = right, left\n    end\n    mid = len/2\n\
    \    left = arr[mid]\n    right = arr[mid+1]\n    if left == right\n        return\
    \ mid\n    end\n    if left > right\n        left, right = right, left\n    end\n\
    \    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n    if left ==\
    \ right\n        return mid\n    end\n    if left > right\n        left, right\
    \ = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n\
    \    if left == right\n        return mid\n    end\n    if left > right\n    \
    \    left, right = right, left\n    end\n    mid = len/2\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp764zoy6u.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp764zoy6u.jl:1\n\
    in expression starting at /tmp/tmp764zoy6u.jl:1\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    \n    min = Inf \n    \n    for i =\
    \ len-1 downto 1 \n        if arr[i] > arr[len-i-1] \n            min = i - 1\
    \ \n            break \n        end \n    end \n    \n    if min == Inf \n   \
    \     return 0 \n    end \n    \n    count = 0 \n    \n    for i = len-1 downto\
    \ 1 \n        if arr[i] != arr[len-i-1] \n            count += 1\n           \
    \ break \n        end \n    end \n    \n    return count \nend \n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzvp040h1.jl:21 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzvp040h1.jl:21\n\
    in expression starting at /tmp/tmpzvp040h1.jl:21\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 7: Find the longest palindromic substring in arr\nGiven\
    \ an array arr of strings, find the longest palindromic substring in arr. Return\
    \ null if no such substring exists.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzuiq7v7h.jl:26\nin expression starting at\
    \ /tmp/tmpzuiq7v7h.jl:26\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-1])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid-1:mid+1])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+1:mid+3])\n\
    \    end\n    \n    if arr[mid] == arr[mid+3]\n        return smallest_change(arr[mid+2:mid+4])\n\
    \    end\n    \n    if arr[mid] == arr[mid+4]\n        return smallest_change(arr[mid+3:mid+5])\n\
    \    end\n    \n    if arr[mid] == arr[mid+5]\n        return smallest_change(arr[mid+4:mid+6])\n\
    \    end\n    \n    if arr[mid] == arr[mid+6]\n        return smallest_change(arr[mid+5:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+7]\n        return smallest_change(arr[mid+6:mid+8])\n\
    \    end\n    \n    if arr[mid] == arr[mid+8]\n        return smallest_change(arr[mid+7:mid+9])\n\
    \    end\n    \n    if arr[mid] == arr[mid+9]\n        return smallest_change(arr[mid+8:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+10]\n        return smallest_change(arr[mid+9:mid+11])\n\
    \    end\n    \n    if arr[mid] == arr[mid+11]\n        return smallest_change(arr[mid+10:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+12]\n        return smallest_change(arr[mid+11:mid+13])\n\
    \    end\n    \n    if arr[mid] == arr[mid+13]\n        return smallest_change(arr[mid+12:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+14]\n        return smallest_change(arr[mid+13:mid+15])\n\
    \    end\n    \n    if arr[mid] == arr[mid+15]\n        return smallest_change(arr[mid+14:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+16]\n        return smallest_change(arr[mid+15:mid+\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplq99p3_t.jl:1\nin expression starting at /tmp/tmplq99p3_t.jl:1\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6xh4led.jl:1\nin expression starting at /tmp/tmpl6xh4led.jl:1\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 7\nA palindromic number reads the same backwards and forward. For example, 321,\
    \ 132, 213, 321, 132, 213.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2e9l5wc.jl:24\nin expression starting at\
    \ /tmp/tmpe2e9l5wc.jl:24\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change(arr,\
    \ 0, length(arr)-1) \nend\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpmk985vlx.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpmk985vlx.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError: no method\
    \ matching smallest_change(::Vector{Int64}, ::Int64, ::Int64)\n  Closest candidates\
    \ are:\n    smallest_change(::Vector{Int64}) at /tmp/tmpmk985vlx.jl:14\n  Stacktrace:\n\
    \   [1] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmpmk985vlx.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmk985vlx.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk985vlx.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmk985vlx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  MethodError: no method matching smallest_change(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    smallest_change(::Vector{Int64})\
    \ at /tmp/tmpmk985vlx.jl:14\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpmk985vlx.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmk985vlx.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk985vlx.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmk985vlx.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 4, 2]) == 1\n  MethodError: no method matching smallest_change(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    smallest_change(::Vector{Int64})\
    \ at /tmp/tmpmk985vlx.jl:14\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpmk985vlx.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmk985vlx.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.co"
  timestamp: 1659823132
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for x in arr\n        if x\
    \ == largest or x == smallest\n            changes += 1\n        else\n      \
    \      changes += smallest_change(arr[changes:end])\n    end\n    \n    return\
    \ changes\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3,\
    \ 5, 4, 7, 9, 6])\n</cell>\n<text>\nThe function above is recursive. Let's see\
    \ how it works:\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7gdahs6j.jl:24\nin expression starting at /tmp/tmp7gdahs6j.jl:24\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzx_sr0q.jl:108\nin expression starting at\
    \ /tmp/tmpmzx_sr0q.jl:108\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    end\n    \n    mid = len/2\n    \n  \
    \  if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0zarf8g.jl:1\nin expression starting at /tmp/tmpt0zarf8g.jl:1\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 7\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ x 99.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcw9d8pm.jl:26\nin expression starting at\
    \ /tmp/tmpvcw9d8pm.jl:26\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    end\n    mid = len/2\n    left = arr[mid-1:end]\n\
    \    right = arr[mid+1:end]\n    if left == reverse(right)\n        return 1 +\
    \ smallest_change(arr[mid+1:end])\n    else\n        return smallest_change(arr[mid+1:end])\
    \ + smallest_change(arr[mid-1:end])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n@assert smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1\n@assert smallest_change([1, 2, 3, 2, 1]) == 0\n</cell>\n\
    <text>\nBacktracking\nThe above algorithm is recursive, and can be solved using\
    \ backtracking. Here is a recursive implementation that solves the problem in\
    \ $O(n^2)$ time.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzt55w68h.jl:28\nin expression starting at\
    \ /tmp/tmpzt55w68h.jl:28\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of unique elements in an array. For example, given [1, 1, 2, 3], return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkoqfo24n.jl:18\nin expression starting at /tmp/tmpkoqfo24n.jl:18\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven an array arr of integers, find the minimum number\
    \ of elements that\nneed to be changed to make the array palindromic. A palindromic\
    \ array is an array that\nis read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp5f5q0t.jl:26\nin expression starting at\
    \ /tmp/tmppp5f5q0t.jl:26\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i - 1)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg5onrh20.jl:18\nin expression starting at /tmp/tmpg5onrh20.jl:18\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] else smallest_change\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeix82bis.jl:18\nin expression starting at /tmp/tmpeix82bis.jl:18\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rk_yjb2.jl:1\nin expression starting at /tmp/tmp_rk_yjb2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is palindrome or not. For\
    \ example, 121 is palindrome and 12321 is not.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvoebex35.jl:25\nin expression starting at\
    \ /tmp/tmpvoebex35.jl:25\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given value appears in an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpge_c27y6.jl:26\nin expression starting at\
    \ /tmp/tmpge_c27y6.jl:26\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkv5mn8e4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpkv5mn8e4.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkv5mn8e4.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkv5mn8e4.jl:30\ntest set: Test Failed at /tmp/tmpkv5mn8e4.jl:32\n\
    \  Expression: candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkv5mn8e4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkv5mn8e4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkv5mn8e4.jl:33\n  Expression: candidate([1, 4, 2]) == 1\n\
    \   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkv5mn8e4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkv5mn8e4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkv5mn8e4.jl:34\n  Expression: candidate([1, 4, 4, 2]) == 1\n\
    \   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkv5mn8e4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkv5mn8e4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpkv5mn8e4.jl:38\n  Expression: candidate([0, 1]) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkv5mn8e4.j"
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,2,1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1q80sj4.jl:26\nin expression starting at\
    \ /tmp/tmpk1q80sj4.jl:26\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr)-1 downto 1 \n        smallest_change = minimum(smallest_change,\
    \ length(arr)-i)\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the number\
    \ of elements in the array that are greater than or equal to 50. Your function\
    \ should only use loops and conditionals.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbxsg7kby.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbxsg7kby.jl:18\n\
    in expression starting at /tmp/tmpbxsg7kby.jl:18\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        smallest_change = smallest_change + 1\n\
    \        if a != reverse(arr[a])\n            break\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt_rloh1.jl:26\nin expression starting at\
    \ /tmp/tmpjt_rloh1.jl:26\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrt50kus.jl:18\nin expression starting at /tmp/tmplrt50kus.jl:18\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for i in arr\n        if i == largest || i == smallest\n \
    \           count += 1\n        elseif i == diff \n            count -= 1\n  \
    \      end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45zow184.jl:28\nin expression starting at\
    \ /tmp/tmp45zow184.jl:28\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8co1g6t.jl:24\nin expression starting at\
    \ /tmp/tmpp8co1g6t.jl:24\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4ekqd7t.jl:1\nin expression starting at /tmp/tmps4ekqd7t.jl:1\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[length(arr)-i]\
    \ then\n            smallest_change = i\n        else\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7n_6b0ap.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7n_6b0ap.jl:18\n\
    in expression starting at /tmp/tmp7n_6b0ap.jl:18\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t07szvd.jl:1\nin expression starting at /tmp/tmp2t07szvd.jl:1\n"
  stdout: ''
  timestamp: 1659823131
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Inf \n    for i = length(arr) downto 1 \n        if arr[i] > arr[i-1] \n \
    \           smallest_change = i \n            break \n        end \n    end \n\
    \    return smallest_change \nend \n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1m68xhul.jl:17 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1m68xhul.jl:17\n\
    in expression starting at /tmp/tmp1m68xhul.jl:17\n"
  stdout: ''
  timestamp: 1659823131
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7whg1kxn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7whg1kxn.jl:1\n\
    in expression starting at /tmp/tmp7whg1kxn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpilj_8km2.jl:18\nin expression starting at /tmp/tmpilj_8km2.jl:18\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    if largest == 0\n        return largest\n    \n \
    \   if smallest == 0\n        return smallest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \n    if smallest == 0\n        return largest\n    \n    if largest == smallest\n\
    \        return largest\n    \n    if largest == 0\n        return smallest\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_p7ln1z3.jl:1\nin expression starting at /tmp/tmp_p7ln1z3.jl:1\n"
  stdout: ''
  timestamp: 1659823131
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the array palindromic. A palindromic\
    \ array is an array that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        if a < arr[end-1]\n            smallest_change\
    \ = smallest_change + 1\n        elseif a > arr[end-1]\n            smallest_change\
    \ = smallest_change - 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ palindrome or not.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6xfihkj.jl:28\nin expression starting at\
    \ /tmp/tmpg6xfihkj.jl:28\n"
  stdout: ''
  timestamp: 1659823131
