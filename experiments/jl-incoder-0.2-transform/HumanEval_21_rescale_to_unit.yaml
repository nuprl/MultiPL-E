name: HumanEval_21_rescale_to_unit
language: jl
prompt: "\"\"\" Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    such that the smallest number will become 0 and the largest\
  \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
completions: ["    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n  \
    \  rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (maximum - minimum)\
    \ / length(rescaled_numbers)\n    return rescaled_numbers\nend\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a dscore=2 |>\nThe function below will convert a vector of numbers\
    \ to their percentage representation. \n<code>", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (maximum - minimum) / length(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nLet's try it out!", "    minimum = min(numbers)\n    maximum\
    \ = max(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (maximum - minimum) / length(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wanted to add an answer that\
    \ uses Julia's built-in function clamp.\n<code>\nusing LinearAlgebra", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.4>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays\
    \ |>\nHere's a solution using broadcasting -\n<code>\njulia> using Statistics",
  "    rescaled_numbers = Vector{Float64}(undef, length(numbers))\n    rescaled_numbers[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rescaled_numbers[i] = numbers[i]\
    \ - rescaled_numbers[i-1]\n    end\n    return rescaled_numbers\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function rescale_to_unit takes a list of numbers and returns a list of numbers\
    \ that have been rescaled to a range of [0, 1].", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    minimum == maximum == 0 ? minimum : minimum ==\
    \ maximum ? maximum : minimum + maximum/2.0\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nI wrote a package for this. It has two functions: rescale\
    \ and rescale!\n<code>\nusing Rescale", "    minimum = minimum(numbers)\n    maximum\
    \ = maximum(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (maximum - minimum) / (maximum - minimum)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    minimum = min(numbers)\n    maximum\
    \ = max(numbers)\n    rescaled = minimum + maximum * (numbers - minimum) / (maximum\
    \ - minimum)\n    return rescaled\nend\n</cell>\n<text>\nLet's try it out!", " \
    \   rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (maximum -\
    \ minimum) / maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers\
    \ .- minimum) / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (maximum -\
    \ minimum) / length(rescaled_numbers)\n    return rescaled_numbers\nend", "  \
    \  minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.3>", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled = minimum + maximum * (numbers - minimum)\
    \ / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<text>\nLet's test\
    \ our rescale_to_unit function by applying it to the numbers we generated earlier:",
  "    rescaled = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
