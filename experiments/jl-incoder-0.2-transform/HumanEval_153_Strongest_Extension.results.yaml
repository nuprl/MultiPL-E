language: jl
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vl7q1ta.jl:30\nin expression starting at\
    \ /tmp/tmp2vl7q1ta.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpch_g97ug.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpch_g97ug.jl:1\n\
    in expression starting at /tmp/tmpch_g97ug.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        if extension_upper == extension_lower\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower\n            \n            strength = strength\
    \ + 0.5 \n            \n        elseif extension_upper == extension_lower\n  \
    \          \n            strength = strength + 0.25 \n            \n        elseif\
    \ extension_upper == extension_lower\n            \n            strength = strength\
    \ + 0.125 \n            \n        elseif extension_upper == extension_lower\n\
    \            \n            strength = strength + 0.0625 \n            \n     \
    \   elseif extension_upper == extension_lower\n            \n            strength\
    \ = strength + 0.03125 \n            \n        elseif extension_upper == extension_lower\n\
    \            \n            strength = strength + 0.015625\n            \n    \
    \    elseif extension_upper == extension_lower\n            \n            strength\
    \ = strength + 0.0078125 \n            \n        elseif extension_upper == extension_lower\n\
    \            \n            strength = strength + 0.00390625 \n            \n \
    \       elseif extension_upper == extension_lower\n            \n            strength\
    \ = strength + 0.001953125 \n            \n        elseif extension_upper == extension_lower\n\
    \            \n            strength = strength + 0.0009765625 \n            \n\
    \        elseif extension_upper == extension_lower\n            \n           \
    \ strength = strength + 0.000703125 \n            \n        elseif extension_upper\
    \ == extension_lower\n            \n            strength = strength + 0.0005078125\
    \ \n            \n        elseif extension_upper == extension_lower\n        \
    \    \n            strength = strength + 0.00039453125 \n            \n      \
    \  elseif extension_upper == extension_lower\n            \n            strength\
    \ = strength + 0.0001953125 \n            \n        elseif extension_upper ==\
    \ extension_lower\n            \n            strength = strength + 0.0001220703125\
    \ \n            \n        elseif extension_upper == extension_lower\n        \
    \    \n            strength = strength + 0.00006103515625\n            \n    \
    \    elseif extension_upper == extension_lower\n            \n            strength\
    \ = strength + 0.000030517578125\n            \n        elseif extension_upper\
    \ == extension_lower\n            \n            strength = strength + 0.0000152587890625\n\
    \            \n        elseif extension_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpce5gvasb.jl:1\nin expression starting at /tmp/tmpce5gvasb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    \n    if strength_of_extension == -1\n        return class_name\n \
    \   else\n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp780jpcm_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp780jpcm_.jl:1\n\
    in expression starting at /tmp/tmp780jpcm_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(Int,\
    \ length(extensions))\n    for (i,ext) in enumerate(extensions)\n        extension_strength[i]\
    \ = length(ext) - length(replace(ext, uppercase(ext), \"\"))\n    end\n    \n\
    \    idx = findfirst(x -> x > 0, extension_strength)\n    if idx == nothing\n\
    \        return class_name\n    end\n    \n    idx = idx[1]\n    \n    if extension_strength[idx]\
    \ == 0\n        return class_name\n    end\n    \n    idx = findfirst(x -> x <\
    \ 0, extension_strength)\n    if idx == nothing\n        return class_name\n \
    \   end\n    \n    idx = idx[1]\n    \n    if extension_strength[idx] == 0\n \
    \       return class_name\n    end\n    \n    idx = findfirst(x -> x > 0, extension_strength)\n\
    \    if idx == nothing\n        return class_name\n    end\n    \n    idx = idx[1]\n\
    \    \n    if extension_strength[idx] == 0\n        return class_name\n    end\n\
    \    \n    idx = findfirst(x -> x < 0, extension_strength)\n    if idx == nothing\n\
    \        return class_name\n    end\n    \n    idx = idx[1]\n    \n    if extension_strength[idx]\
    \ == 0\n        return class_name\n    end\n    \n    idx = findfirst(x -> x >\
    \ 0, extension_strength)\n    if idx == nothing\n        return class_name\n \
    \   end\n    \n    idx = idx[1]\n    \n    if extension_strength[idx] == 0\n \
    \       return class_name\n    end\n    \n    idx = findfirst(x -> x < 0, extension_strength)\n\
    \    if idx == nothing\n        return class_name\n    end\n    \n    idx = idx[1]\n\
    \    \n    if extension_strength[idx] == 0\n        return class_name\n    end\n\
    \    \n    idx = findfirst(x -> x > 0, extension_strength)\n    if idx == nothing\n\
    \        return class_name\n    end\n    \n    idx = idx[1]\n    \n    if extension_strength[idx]\
    \ == 0\n        return class_name\n    end\n    \n    idx = findfirst(x -> x <\
    \ 0, extension_strength)\n    if idx == nothing\n        return class_name\n \
    \   end\n    \n    idx = idx[1]\n    \n    if extension_strength[idx] == 0\n \
    \       return class_name\n    end\n    \n    idx = findfirst(x -> x > 0, extension_strength)\n\
    \    if idx == nothing\n        return class_name\n    end\n    \n    idx = idx[1]\n\
    \    \n    if extension_strength[idx] == 0\n        return class_name\n    end\n\
    \    \n    idx = findfirst(x -> x < 0, extension_strength)\n    if idx == nothing\n\
    \        return class_name\n    end\n    \n    idx = idx[1]\n    \n    if extension_strength\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nvwfgfv.jl:1\nin expression starting at /tmp/tmp0nvwfgfv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns a string with the first letter of each string\
    \ in the list repeated n times. \nFor example, if the list is [\"a\", \"b\", \"\
    c\"] and the integer n is 2, the function should return \"aaa\".\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdo9dzl4u.jl:30\nin expression starting at\
    \ /tmp/tmpdo9dzl4u.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the longest common prefix.\
    \ \nFor example, if the input string is \"abcde\" and a list of strings is [\"\
    ab\", \"cd\", \"e\"], the function should return \"ab\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflpg8but.jl:30\nin expression starting at\
    \ /tmp/tmpflpg8but.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_gk_f6p.jl:30\nin expression starting at\
    \ /tmp/tmpl_gk_f6p.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension)\n            \n        elseif islower(extension)\n\
    \            \n            strength = strength + length(extension) - length(extension)\n\
    \            \n        else\n            \n            strength = strength + length(extension)\
    \ - length(extension)\n            \n        end\n        \n    end\n    \n  \
    \  if strength > 0\n        \n        return class_name .. \".\" .. extensions_sorted[end]\n\
    \        \n    else\n        \n        return class_name\n        \n    end\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns a string with\
    \ the first string in the list concatenated with the second string. \nExample:\
    \ \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.a\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.ab\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\", [\"a\", \"b\", \"c\"])\n\"my_string.abc\"\
    \n>>> Concatenate_Strings(\"my_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaif_pk37.jl:53\nin expression starting at\
    \ /tmp/tmpaif_pk37.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        \n        strength = length(extensions_sorted)\n   \
    \     \n    end\n    \n    return class_name * \".\" .* extensions_sorted[strength]\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function that takes as input a class\
    \ name and a list of extensions, and returns the name of the class with the strongest\
    \ extension.\nExample: \n    >>> Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"])\n    \"my_class.AA\"\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3q32wkd1.jl:32\nin expression starting at\
    \ /tmp/tmp3q32wkd1.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        \n        extensions_sorted = sort(extensions)\n        \n        strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n        \n        if strength_of_extension\
    \ == -1\n            return class_name\n        else\n            \n         \
    \   extensions_sorted = sort(extensions)\n            \n            strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n            \n            if\
    \ strength_of_extension == -1\n                return class_name\n           \
    \ else\n                \n                extensions_sorted = sort(extensions)\n\
    \                \n                strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                \n                if strength_of_extension\
    \ == -1\n                    return class_name\n                else\n       \
    \             \n                    extensions_sorted = sort(extensions)\n   \
    \                 \n                    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                    \n                    if strength_of_extension\
    \ == -1\n                        return class_name\n                    else\n\
    \                        \n                        extensions_sorted = sort(extensions)\n\
    \                        \n                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                        \n                        if\
    \ strength_of_extension == -1\n                            return class_name\n\
    \                        else\n                            \n                \
    \            extensions_sorted = sort(extensions)\n                          \
    \  \n                            strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength_of_extension == -1\n                                return\
    \ class_name\n                            else\n                             \
    \   \n                                extensions_sorted = sort(extensions)\n \
    \                               \n                                strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \    \n                                if strength_of_extension == -1\n      \
    \                              return class_name\n                           \
    \     else\n                                    \n                           \
    \         extensions_sorted = sort(extensions)\n                             \
    \       \n                                    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                    \n             \
    \                       if strength_of_extension == -1\n                     \
    \                   return class_name\n                                    else\n\
    \                                        \n                                  \
    \      extensions_sorted = sort(extensions)\n                                \
    \        \n                                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength_of_extension == -1\n             \
    \                               return class_name\n                          \
    \              else\n                                            \n          \
    \                                  extensions_sorted = sort(extensions)\n    \
    \                                        \n                                  \
    \          strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \                                            \n                              \
    \              if strength_of_extension == -1\n                              \
    \                  return class_name\n                                       \
    \     else\n                                                \n               \
    \                                 extensions_sorted = sort(extensions)\n     \
    \                                           \n                               \
    \                 strength_of_extension = extensions_sorted\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpyylezll6.jl:104\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyylezll6.jl:1\n\
    in expression starting at /tmp/tmpyylezll6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_map = Dict{String, Int}()\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        \n        if\
    \ !haskey(strength_map, extension_upper)\n            strength_map[extension_upper]\
    \ = 1\n        else\n            strength_map[extension_upper] += 1\n        end\n\
    \    end\n    \n    strength_sorted = sort(strength_map, reverse=true)\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbtwniqq5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbtwniqq5.jl:1\n\
    in expression starting at /tmp/tmpbtwniqq5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(Int,\
    \ length(extensions))\n    \n    for i=1:length(extensions)\n        extension_strength[i]\
    \ = length(extensions[i])-length(replace(extensions[i], uppercase(extensions[i]),\
    \ \"\"))\n    end\n    \n    extension_strength = sort(extension_strength)\n \
    \   \n    return class_name * \".\" * extensions[extension_strength[1]]\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list of\
    \ strings as arguments. \nThe function should return a string in the following\
    \ format: \n    ClassName[ExtensionName1, ExtensionName2, ..., ExtensionNameN]\n\
    For example, if the string was \"my_class\" and the list of strings was [\"AA\"\
    , \"Be\", \"CC\"] \nthen the function should return \"my_class.AA, my_class.Be,\
    \ my_class.CC\"\nHint: Use a for loop to iterate through the list of strings and\
    \ concatenate them to the string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rkfj4zf.jl:30\nin expression starting at\
    \ /tmp/tmp9rkfj4zf.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdmx3f9mp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmx3f9mp.jl:1\n\
    in expression starting at /tmp/tmpdmx3f9mp.jl:1\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    if\
    \ length(Strongest_Extension) == 0 \n        error(\"No extensions found\")\n\
    \    end\n    \n    return Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and a list of strings and returns\
    \ a string in the following format:\n    ClassName_StrongestExtensionName\nwhere\
    \ ClassName is the string you passed into the function and StrongestExtensionName\
    \ is the strongest extension in the list you passed into the function.\nFor example,\
    \ if you passed \"my_class\" as the string and [\"AA\", \"Be\", \"CC\"] as the\
    \ list of extensions, then the function should return \"my_class.AA\".\nIf you\
    \ passed \"my_class\" as the string and [\"AA\", \"Be\", \"CC\", \"DD\"] as the\
    \ list of extensions, then the function should return \"my_class.AA\".\nIf you\
    \ passed \"my_class\" as the string and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    ] as the list of extensions, then the function should return \"my_class.AA\".\n\
    If you passed \"my_class\" as the string and [\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\"] as the list of extensions, then the function should return \"\
    my_class.AA\".\nIf you passed \"my_class\" as the string and [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"] as the list of extensions, then the\
    \ function should return \"my_class.AA\".\nIf you passed \"my_class\" as the string\
    \ and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"] as the\
    \ list of extensions, then the function should return \"my_class.AA\".\nIf you\
    \ passed \"my_class\" as the string and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\"] as the list of extensions, then the function\
    \ should return \"my_class.AA\".\nIf you passed \"my_class\" as the string and\
    \ [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\"] as the list of extensions, then the function should return \"my_class.AA\"\
    .\nIf you passed \"my_class\" as the string and [\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gpy4bly.jl:36\nin expression starting at\
    \ /tmp/tmp_gpy4bly.jl:36\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.CC\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.NN\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70h6ogzg.jl:30\nin expression starting at\
    \ /tmp/tmp70h6ogzg.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions\n        \n \
    \       if isupper(extension)\n            \n            strength = strength +\
    \ length(extension) - length(extension)\n            \n        elseif islower(extension)\n\
    \            \n            strength = strength + length(extension) - length(extension)\n\
    \            \n        else\n            \n            error(\"The extension's\
    \ name must contain only uppercase letters and lowercase letters\")\n        \
    \    \n        end\n    end\n    \n    if strength > 0\n        \n        return\
    \ class_name * \".\" .* extensions[end]\n        \n    else\n        \n      \
    \  error(\"There are no extensions with the same strength\")\n        \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\
    \n@assert Stron\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_uf2bto.jl:51\nin expression starting at\
    \ /tmp/tmpa_uf2bto.jl:51\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a dictionary and returns the string with the first letter\
    \ of each word capitalized. \nExample: \n>>> capitalize(\"Hello World\", {\"Hello\"\
    : \"Hello\", \"World\": \"World\"})\n\"Hello World\"\n>>> capitalize(\"Hello World\"\
    , {\"Hello\": \"Hello\", \"World\": \"World\", \"Hi\": \"Hi\"})\n\"Hello World\"\
    \n>>> capitalize(\"Hello World\", {\"Hello\": \"Hello\", \"World\": \"World\"\
    , \"Hi\": \"Hi\", \"Hello2\": \"Hello2\"})\n\"Hello World\"\n>>> capitalize(\"\
    Hello World\", {\"Hello\": \"Hello\", \"World\": \"World\", \"Hi\": \"Hi\", \"\
    Hello2\": \"Hello2\", \"Hello3\": \"Hello3\"})\n\"Hello World\"\n>>> capitalize(\"\
    Hello World\", {\"Hello\": \"Hello\", \"World\": \"World\", \"Hi\": \"Hi\", \"\
    Hello2\": \"Hello2\", \"Hello3\": \"Hello3\", \"Hello4\": \"Hello4\"})\n\"Hello\
    \ World\"\n>>> capitalize(\"Hello World\", {\"Hello\": \"Hello\", \"World\": \"\
    World\", \"Hi\": \"Hi\", \"Hello2\": \"Hello2\", \"Hello3\": \"Hello3\", \"Hello4\"\
    : \"Hello4\", \"Hello5\": \"Hello5\"})\n\"Hello World\"\n>>> capitalize(\"Hello\
    \ World\", {\"Hello\": \"Hello\", \"World\": \"World\", \"Hi\": \"Hi\", \"Hello2\"\
    : \"Hello2\", \"Hello3\": \"Hello3\", \"Hello4\": \"Hello4\", \"Hello5\": \"Hello5\"\
    , \"Hello6\": \"Hello6\"})\n\"Hello World\"\n>>> capitalize(\"Hello World\", {\"\
    Hello\": \"Hello\", \"World\": \"World\", \"Hi\": \"Hi\", \"Hello2\": \"Hello2\"\
    , \"Hello3\": \"Hello3\", \"Hello4\": \"Hello4\", \"Hello5\": \"Hello5\", \"Hello6\"\
    : \"Hello6\", \"Hello7\": \"Hello7\"})\n\"Hello World\"\n>>> capitalize(\"Hello\
    \ World\", {\"Hello\": \"Hello\", \"World\": \"World\", \"Hi\": \"Hi\", \"Hello2\"\
    : \"Hello2\", \"Hello3\": \"Hello3\", \"Hello4\": \"Hello4\", \"Hello5\": \"Hello5\"\
    , \"Hello6\": \"Hello6\", \"Hello7\": \"Hello7\", \"Hello8\": \"Hello8\"})\n\"\
    Hello World\"\n>>> capitalize(\"Hello World\", {\"Hello\": \"Hello\", \"World\"\
    : \"World\", \"Hi\": \"Hi\", \"Hello2\": \"\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbdsbtg8w.jl:30\nin expression starting at\
    \ /tmp/tmpbdsbtg8w.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if strmatch(extension, class_name)\n            \n            strength\
    \ += 1\n            \n            if strength > 0\n                break\n   \
    \         end\n        end\n    end\n    \n    if strength == 0\n        \n  \
    \      error(\"No extensions match class name \\\"%s\\\"\" % class_name)\n   \
    \ end\n    \n    return class_name .. \".\" .. extensions_sorted[end]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of uppercase letters in it. \nExample: \n>>> count_upper(\"hello\")\n5\n>>>\
    \ count_upper(\"HELLO\")\n4\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLO\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpuiksv7.jl:43\nin expression starting at\
    \ /tmp/tmprpuiksv7.jl:43\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension.lowercase)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8bdowflr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8bdowflr.jl:1\n\
    in expression starting at /tmp/tmp8bdowflr.jl:1\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings and returns the string with the longest common prefix. \nFor example,\
    \ if the string is \"abc\" and a list of strings is [\"ab\", \"abc\", \"abd\"\
    ] then \nthe function should return \"ab\".\nIf the list is empty or if the string\
    \ has length zero, then the function should return an empty string.\nExample:\
    \ \n>>> Longest_Common_Prefix(\"abc\", [\"ab\", \"abc\", \"abd\"]) == \"ab\"\n\
    True\n>>> Longest_Common_Prefix(\"abc\", []) == \"\"\nTrue\n>>> Longest_Common_Prefix(\"\
    abc\", [\"ab\"]) == \"\"\nTrue\n>>> Longest_Common_Prefix(\"abc\", [\"ab\", \"\
    abc\"]) == \"ab\"\nTrue\n>>> Longest_Common_Prefix(\"abc\", [\"ab\", \"abc\",\
    \ \"abd\"]) == \"ab\"\nTrue\n>>> Longest_Common_Prefix(\"abc\", [\"ab\", \"abc\"\
    , \"abd\", \"efg\"]) == \"ab\"\nTrue\n>>> Longest_Common_Prefix(\"abc\", [\"ab\"\
    , \"abc\", \"abd\", \"efg\", \"hij\"]) == \"ab\"\nTrue\n>>> Longest_Common_Prefix(\"\
    abc\", [\"ab\", \"abc\", \"abd\", \"efg\", \"hij\", \"klm\"]) == \"ab\"\nTrue\n\
    >>> Longest_Common_Prefix(\"abc\", [\"ab\", \"abc\", \"abd\", \"efg\", \"hij\"\
    , \"klm\", \"nop\"]) == \"\"\nTrue\n>>> Longest_Common_Prefix(\"abc\", [\"ab\"\
    , \"abc\", \"abd\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\"]) == \"\"\nTrue\n\
    >>> Longest_Common_Prefix(\"abc\", [\"ab\", \"abc\", \"abd\", \"efg\", \"hij\"\
    , \"klm\", \"nop\", \"qrs\", \"tuv\"]) == \"\"\nTrue\n>>> Longest_Common_Prefix(\"\
    abc\", [\"ab\", \"abc\", \"abd\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\"\
    , \"tuv\", \"wxy\"]) == \"\"\nTrue\n>>> Longest_Common_Prefix(\"abc\", [\"ab\"\
    , \"abc\", \"abd\", \"efg\", \"hij\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fcxg3m1.jl:30\nin expression starting at\
    \ /tmp/tmp5fcxg3m1.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(keys(extension_strength)),\
    \ by=x -> extension_strength[x])\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfim3385h.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfim3385h.jl:1\n\
    in expression starting at /tmp/tmpfim3385h.jl:1\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(lowercase(extension))\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values), by=x->x)\n    \n    return class_name\
    \ * sorted_extensions[1]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a list of strings as arguments and\
    \ returns the string with the longest common prefix. \nFor example, if the input\
    \ string is \"abcde\" and a list of strings is [\"abc\", \"bcd\", \"cde\", \"\
    def\", \"efg\"] \nthen the function should return \"abc\".\nThe function should\
    \ return the empty string if the list of strings contains no strings.\nExample:\
    \ \n>>> Longest_Common_Prefix(\"abcde\", [\"abc\", \"bcd\", \"cde\", \"def\",\
    \ \"efg\"])\n\"abc\"\n>>> Longest_Common_Prefix(\"abcde\", [\"abc\", \"bcd\",\
    \ \"cde\", \"def\", \"efg\", \"hij\"])\n\"\"\n>>> Longest_Common_Prefix(\"abcde\"\
    , [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"hij\", \"klm\"])\n\"abc\"\n\
    >>> Longest_Common_Prefix(\"abcde\", [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"\
    , \"hij\", \"klm\", \"nop\"])\n\"abc\"\n>>> Longest_Common_Prefix(\"abcde\", [\"\
    abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\"\
    ])\n\"abc\"\n>>> Longest_Common_Prefix(\"abcde\", [\"abc\", \"bcd\", \"cde\",\
    \ \"def\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\", \"tuv\"])\n\"abc\"\n>>>\
    \ Longest_Common_Prefix(\"abcde\", [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"\
    , \"hij\", \"klm\", \"nop\", \"qrs\", \"tuv\", \"wxy\"])\n\"abc\"\n>>> Longest_Common_Prefix(\"\
    abcde\", [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"hij\", \"klm\", \"nop\"\
    , \"qrs\", \"tuv\", \"wxy\", \"yz\"])\n\"abc\"\n>>> Longest_Common_Prefix(\"abcde\"\
    , [\"abc\", \"bcd\", \"cde\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd7sig8n.jl:30\nin expression starting at\
    \ /tmp/tmptd7sig8n.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes as input a vector of\
    \ strings and returns a vector of strings where each string in the output vector\
    \ is the concatenation of the strings in the input vector separated by a space.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwncrx8x1.jl:30\nin expression starting at\
    \ /tmp/tmpwncrx8x1.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = cap - sm\n        end\n    end\n    \n    return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == strength, extensions_sorted)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.CC\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z60ab14.jl:40\nin expression starting at\
    \ /tmp/tmp_z60ab14.jl:40\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_gk_f6p.jl:30\nin expression starting at\
    \ /tmp/tmpl_gk_f6p.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension_strength[extension])\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values), by=x->x)\n    \n    Strongest_Extension\
    \ = sorted_extensions[1]\n    \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ah40l1f.jl:30\nin expression starting at\
    \ /tmp/tmp4ah40l1f.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension.lowercase)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength),\
    \ by=x->-x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns the string with\
    \ the longest common prefix among the strings in the list. \nFor example, if the\
    \ list is [\"ab\", \"cd\", \"ef\"] and the string is \"ab\", the function should\
    \ return \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"] and the string is \"\
    abd\", the function should return \"ab\".\nIf the list is [\"ab\", \"cd\", \"\
    ef\"] and the string is \"abd\", the function should return \"ab\".\nIf the list\
    \ is [\"ab\", \"cd\", \"ef\"] and the string is \"abd\", the function should return\
    \ \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"] and the string is \"abd\",\
    \ the function should return \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"]\
    \ and the string is \"abd\", the function should return \"ab\".\nIf the list is\
    \ [\"ab\", \"cd\", \"ef\"] and the string is \"abd\", the function should return\
    \ \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"] and the string is \"abd\",\
    \ the function should return \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"]\
    \ and the string is \"abd\", the function should return \"ab\".\nIf the list is\
    \ [\"ab\", \"cd\", \"ef\"] and the string is \"abd\", the function should return\
    \ \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"] and the string is \"abd\",\
    \ the function should return \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"]\
    \ and the string is \"abd\", the function should return \"ab\".\nIf the list is\
    \ [\"ab\", \"cd\", \"ef\"] and the string is \"abd\", the function should return\
    \ \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"] and the string is \"abd\",\
    \ the function should return \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"]\
    \ and the string is \"abd\", the function should return \"ab\".\nIf the list is\
    \ [\"ab\", \"cd\", \"ef\"] and the string is \"abd\", the function should return\
    \ \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"] and the string is \"abd\",\
    \ the function should return \"ab\".\nIf the list is [\"ab\", \"cd\", \"ef\"]\
    \ and the string is \"abd\", the function should return \"ab\".\nIf the list is\
    \ [\"ab\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t\
    @test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkdep1i83.jl:31\nin expression starting at\
    \ /tmp/tmpkdep1i83.jl:31\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the longest common prefix\
    \ among the list of strings. \nFor example, if the list of strings is [\"AA\"\
    , \"Be\", \"CC\"] and the string \"AB\" then you should return \"AA\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcymkg_21.jl:30\nin expression starting at\
    \ /tmp/tmpcymkg_21.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = 0.0\n    \n    for extension in extensions_sorted\n\
    \        \n        strength_of_extension = length(extension) - length(replace(extension,\
    \ uppercase(extension), \"\"))\n        \n        if strength_of_extension > strength_of_extensions\n\
    \            \n            strength_of_extensions = strength_of_extension\n  \
    \          \n            strongest_extension = extension\n            \n     \
    \   end\n    end\n    \n    return class_name * \".\" strongest_extension\nend\n\
    </cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and a list of strings as arguments and returns\
    \ the string with the longest common prefix. \nFor example, if the input string\
    \ is \"ABC\" and a list of strings is [\"ABC\", \"AB\", \"C\", \"A\"], \nthen\
    \ the output should be \"ABC\".\nIf the input string is \"ABC\" and a list of\
    \ strings is [\"ABC\", \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\"], \nthen the\
    \ output should be \"ABC\".\nIf the input string is \"ABC\" and a list of strings\
    \ is [\"ABC\", \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\", \"D\"], \nthen the\
    \ output should be \"ABC\".\nIf the input string is \"ABC\" and a list of strings\
    \ is [\"ABC\", \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\", \"D\", \"E\"], \nthen\
    \ the output should be \"ABC\".\nIf the input string is \"ABC\" and a list of\
    \ strings is [\"ABC\", \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"], \nthen the output should be \"ABC\".\nIf the input string is \"ABC\"\
    \ and a list of strings is [\"ABC\", \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\", \"G\"], \nthen the output should be \"ABC\".\nIf the input\
    \ string is \"ABC\" and a list of strings is [\"ABC\", \"AB\", \"C\", \"A\", \"\
    BC\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"], \nthen the output should\
    \ be \"ABC\".\nIf the input string is \"ABC\" and a list of strings is [\"ABC\"\
    , \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\"], \nthen the output should be \"ABC\".\nIf the input string is \"ABC\"\
    \ and a list of strings is [\"ABC\", \"AB\", \"C\", \"A\", \"BC\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"], \nthen the output should be\
    \ \"ABC\".\nIf the input string is \"ABC\" and a list of strings is [\"ABC\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpxz3w0y18.jl:18 expected\
    \ \"end\", got \"strongest_extension\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpxz3w0y18.jl:37\nin expression starting at /tmp/tmpxz3w0y18.jl:37\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name * Strongest_Extension(class_name, extensions_sorted[2:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a class name and a list of the extensions\
    \ and returns the name of the class with the strongest extension.\nFor example,\
    \ if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class.AA\"\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h1e6ot3.jl:30\nin expression starting at\
    \ /tmp/tmp9h1e6ot3.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_map = Dict{String, Int}()\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength_map[extension_upper] = length(extension_lower)\n\
    \        strength_map[extension_lower] = length(extension_lower)\n    end\n  \
    \  \n    strength_sorted = sort(strength_map.values)\n    \n    strength_sorted.reverse()\n\
    \    \n    strength_sorted.first\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and a dictionary as input, and\
    \ returns the string with the first letter of each word capitalized. \nExample:\
    \ \n>>> capitalize_first_letter(\"my_class\", {\"AA\", \"Be\", \"CC\"})\n\"MyClass\"\
    \n>>> capitalize_first_letter(\"my_class\", {\"aa\", \"be\", \"cc\"})\n\"MyClass\"\
    \n>>> capitalize_first_letter(\"my_class\", {\"aa\", \"be\", \"cc\", \"dd\"})\n\
    \"MyClass\"\n>>> capitalize_first_letter(\"my_class\", {\"aa\", \"be\", \"cc\"\
    , \"dd\", \"ee\"})\n\"MyClass\"\n>>> capitalize_first_letter(\"my_class\", {\"\
    aa\", \"be\", \"cc\", \"dd\", \"ee\", \"ff\"})\n\"MyClass\"\n>>> capitalize_first_letter(\"\
    my_class\", {\"aa\", \"be\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"})\n\"MyClass\"\
    \n>>> capitalize_first_letter(\"my_class\", {\"aa\", \"be\", \"cc\", \"dd\", \"\
    ee\", \"ff\", \"gg\", \"hh\"})\n\"MyClass\"\n>>> capitalize_first_letter(\"my_class\"\
    , {\"aa\", \"be\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\"})\n\"\
    MyClass\"\n>>> capitalize_first_letter(\"my_class\", {\"aa\", \"be\", \"cc\",\
    \ \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\"})\n\"MyClass\"\n>>> capitalize_first_letter(\"\
    my_class\", {\"aa\", \"be\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"\
    ii\", \"jj\", \"kk\"})\n\"MyClass\"\n>>> capitalize_first_letter(\"my_class\"\
    , {\"aa\", \"be\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"\
    jj\", \"kk\", \"ll\"})\n\"MyClass\"\n>>> capitalize_first_letter(\"my_class\"\
    , {\"aa\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t\
    @test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupewe737.jl:39\nin expression starting at\
    \ /tmp/tmpupewe737.jl:39\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions \n        extension_strength[extension] = count_capital_letters(extension)\
    \ - count_capital_letters(extension)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes the name of a class (a string) and a list of extensions (a list of strings)\n\
    and returns the name of the class with the strongest extension.\nFor example,\
    \ if you are given \"my_class\" as the class and a list of the\nextensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\nreturn 'my_class.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nHint: Use\
    \ a dictionary to store the extensions' strengths.\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vr4q1do.jl:31\nin expression starting at\
    \ /tmp/tmp1vr4q1do.jl:31\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strengths = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strengths[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strengths.values))\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi_gm8idm.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi_gm8idm.jl:1\n\
    in expression starting at /tmp/tmpi_gm8idm.jl:1\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        if\
    \ extension.contains(class_name)\n            strength = extension.count(class_name)\
    \ - extension.count(lowercase(class_name))\n            break\n    end\n    \n\
    \    if strength == -1\n        error(\"No extension found for class $class_name\"\
    )\n    end\n    \n    return class_name * \".\" .* extensions[end]\nend\n</cell>\n\
    <code language=julia-1.4>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns the string\
    \ with the longest common prefix. \nThe common prefix is defined as the longest\
    \ substring of the list that is contained in the string. \nIf the string does\
    \ not contain the longest common prefix, return an empty string.\nFor example,\
    \ if the list is [\"a\", \"b\", \"c\"] and the string is \"ab\", the function\
    \ should return \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and the string is\
    \ \"abc\", the function should return \"\".\nIf the list is [\"a\", \"b\", \"\
    c\"] and the string is \"ac\", the function should return \"a\".\nIf the list\
    \ is [\"a\", \"b\", \"c\"] and the string is \"abd\", the function should return\
    \ \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and the string is \"abcde\", the\
    \ function should return \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and the\
    \ string is \"abce\", the function should return \"a\".\nIf the list is [\"a\"\
    , \"b\", \"c\"] and the string is \"abcefg\", the function should return \"a\"\
    .\nIf the list is [\"a\", \"b\", \"c\"] and the string is \"abcefghij\", the function\
    \ should return \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and the string is\
    \ \"abcefghijk\", the function should return \"a\".\nIf the list is [\"a\", \"\
    b\", \"c\"] and the string is \"abcefghijkl\", the function should return \"a\"\
    .\nIf the list is [\"a\", \"b\", \"c\"] and the string is \"abcefghijklm\", the\
    \ function should return \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and the\
    \ string is \"abcefghijklmn\", the function should return \"a\".\nIf the list\
    \ is [\"a\", \"b\", \"c\"] and the string is \"abcefghijklmn\", the function should\
    \ return \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and the string is \"abcefghijklmn\"\
    , the function should return \"a\".\nIf the list is [\"a\", \"b\", \"c\"] and\
    \ the string is \"ab\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mwf4b1p.jl:36\nin expression starting at\
    \ /tmp/tmp_mwf4b1p.jl:36\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        idx = 1\n        \n        while idx <\
    \ length(extensions_sorted)\n            if extensions_sorted[idx] == extensions_sorted[idx-1]\n\
    \                idx += 1\n            else\n                break\n        end\n\
    \        \n        return class_name * string(extensions_sorted[idx])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns the string with\
    \ the longest common prefix. \nFor example, if the input string is \"my_string\"\
    \ and a list of strings is [\"my_string\", \"my_string1\", \"my_string2\", \"\
    my_string3\", \"my_string4\", \"my_string5\", \"my_string6\", \"my_string7\",\
    \ \"my_string8\", \"my_string9\", \"my_string10\", \"my_string11\", \"my_string12\"\
    , \"my_string13\", \"my_string14\", \"my_string15\", \"my_string16\", \"my_string17\"\
    , \"my_string18\", \"my_string19\", \"my_string20\", \"my_string21\", \"my_string22\"\
    , \"my_string23\", \"my_string24\", \"my_string25\", \"my_string26\", \"my_string27\"\
    , \"my_string28\", \"my_string29\", \"my_string30\", \"my_string31\", \"my_string32\"\
    , \"my_string33\", \"my_string34\", \"my_string35\", \"my_string36\", \"my_string37\"\
    , \"my_string38\", \"my_string39\", \"my_string40\", \"my_string41\", \"my_string42\"\
    , \"my_string43\", \"my_string44\", \"my_string45\", \"my_string46\", \"my_string47\"\
    , \"my_string48\", \"my_string49\", \"my_string50\", \"my_string51\", \"my_string52\"\
    , \"my_string53\", \"my_string54\", \"my_string55\", \"my_string56\", \"my_string57\"\
    , \"my_string58\", \"my_string59\", \"my_string60\", \"my_string61\", \"my_string62\"\
    , \"my_string63\", \"my_string64\", \"my_string65\", \"my_string66\", \"my_string67\"\
    , \"my_string68\", \"my_string69\", \"my_string70\", \"my_string71\", \"my_string72\"\
    , \"my_string73\", \"my_string74\", \"my_string75\", \"my_string76\", \"my_string77\"\
    , \"my_string78\", \"my_string79\", \"my_string80\", \"my_string81\", \"my_string82\"\
    , \"my_string83\", \"my_string84\", \"my_string\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtki6724.jl:42\nin expression starting at\
    \ /tmp/tmpxtki6724.jl:42\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.Be\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoyl47fj.jl:30\nin expression starting at\
    \ /tmp/tmpwoyl47fj.jl:30\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = Int64[]\n    for ext in extensions\n        strength[upper(ext)-lower(ext)]\
    \ = length(ext)\n    end\n    \n    idx = findfirst(x -> strength[x] == maximum(strength),\
    \ strength)\n    \n    if idx == nothing\n        return class_name\n    else\n\
    \        return class_name[idx+1]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and a list of strings as arguments and returns\
    \ the string with the longest common prefix. \nFor example, if the string is \"\
    abcde\" and a list of strings is [\"ab\", \"bc\", \"cd\", \"de\", \"ef\"], \n\
    the function should return \"ab\".\nIf the list of strings is empty, the function\
    \ should return an empty string.\nIf the list of strings is of length 1, the function\
    \ should return that string.\nIf the list of strings is of length 2, the function\
    \ should return an empty string.\nIf the list of strings is of length 3, the function\
    \ should return an empty string.\nIf the list of strings is of length 4, the function\
    \ should return an empty string.\nIf the list of strings is of length 5, the function\
    \ should return an empty string.\nIf the list of strings is of length 6, the function\
    \ should return an empty string.\nIf the list of strings is of length 7, the function\
    \ should return an empty string.\nIf the list of strings is of length 8, the function\
    \ should return an empty string.\nIf the list of strings is of length 9, the function\
    \ should return an empty string.\nIf the list of strings is of length 10, the\
    \ function should return an empty string.\nIf the list of strings is of length\
    \ 11, the function should return an empty string.\nIf the list of strings is of\
    \ length 12, the function should return an empty string.\nIf the list of strings\
    \ is of length 13, the function should return an empty string.\nIf the list of\
    \ strings is of length 14, the function should return an empty string.\nIf the\
    \ list of strings is of length 15, the function should return an empty string.\n\
    If the list of strings is of length 16, the function should return an empty string.\n\
    If the list of strings is of length 17, the function should return an empty string.\n\
    If the list of strings is of length 18, the function should return an empty string.\n\
    If the list of strings is of length 19, the function should return an empty string.\n\
    If the list of strings is of length 20, the function should return an empty string.\n\
    If the list of strings is of length 21, the function should return an empty string.\n\
    If the list of strings is of length 22, the function should return an empty string.\n\
    If the list of strings is of length 23, the function should return an empty string.\n\
    If the list of strings is of length 24, the function should return an empty string.\n\
    If the list of strings is of length 25, the function should return an empty string.\n\
    If the list of strings is of length 26, the function should return \nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpws489y4n.jl:35\nin expression starting at\
    \ /tmp/tmpws489y4n.jl:35\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = count_letters(extension) - count_letters(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpimwy2rya.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimwy2rya.jl:1\n\
    in expression starting at /tmp/tmpimwy2rya.jl:1\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == 0\n        return class_name\n    else\n        \n        \n   \
    \     for e in extensions_sorted\n            if e == extensions_sorted[1]\n \
    \               return class_name + \".\" + e\n            else\n            \
    \    return class_name + \".\" + e\n            end\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@time Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and a list of strings as arguments and returns the string with the\
    \ first letter of each word capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplpvoqaf2.jl:38\nin expression starting at\
    \ /tmp/tmplpvoqaf2.jl:38\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        strength = strength + length(extension) - length(extension.upper)\n \
    \       \n    end\n    \n    return class_name * \".\" .* extensions[findfirst(x\
    \ -> strength == -1, extensions)]\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.Be\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqiz7gn_.jl:32\nin expression starting at\
    \ /tmp/tmpuqiz7gn_.jl:32\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3don61jw.jl:30\nin expression starting at\
    \ /tmp/tmp3don61jw.jl:30\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        \n        strength = length(extensions_sorted)\n   \
    \     \n    end\n    \n    return class_name * \".\" .* extensions_sorted[strength]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a class\
    \ name and a list of the extensions. \nThe function should return a string in\
    \ this format: ClassName.StrongestExtensionName.\nFor example, if you are given\
    \ \"my_class\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'] then you should\nreturn 'my_class.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension \n(its strength is -1).\nHint: Use Strongest_Extension\
    \ defined above to solve this exercise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9gsj31i.jl:32\nin expression starting at\
    \ /tmp/tmpy9gsj31i.jl:32\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == \"\"\n            continue\n        \n        extension_upper\
    \ = uppercase(extension)\n        extension_lower = lowercase(extension)\n   \
    \     \n        if extension_upper == extension_lower\n            continue\n\
    \        \n        strength = strength + length(extension) - length(extension_upper)\
    \ - length(extension_lower)\n    end\n    \n    if strength == 0\n        return\
    \ class_name\n    end\n    \n    strength = strength / length(extensions_sorted)\n\
    \    \n    if strength > 0\n        return class_name + \".\" + extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted[findfirst(x -> x == extensions_sorted)][1], extensions_sorted)]\n\
    \    end\n    \n    return class_name\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.CC\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5mqtn3w.jl:50\nin expression starting at\
    \ /tmp/tmpo5mqtn3w.jl:50\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for ext in extensions\n        \n       \
    \ cap = length(ext)\n        sm = length(class_name)\n        \n        if cap\
    \ - sm > strength\n            strength = cap - sm\n        end\n    end\n   \
    \ \n    return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.CC\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzcjos4z.jl:36\nin expression starting at\
    \ /tmp/tmpmzcjos4z.jl:36\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default strength\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension)\
    \ - length(extension_upper) - length(extension_lower))\n    end\n    \n    if\
    \ strength == -1\n        error(\"No extensions found\")\n    end\n    \n    extensions_sorted\
    \ = extensions_sorted[strength]\n    \n    extensions_sorted = [class_name] +\
    \ extensions_sorted\n    \n    return join(extensions_sorted)\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.GG\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkojadzi.jl:42\nin expression starting at\
    \ /tmp/tmptkojadzi.jl:42\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(keys(extension_strength)),\
    \ by=x -> -extension_strength[x])\n    \n    return class_name * sorted_extensions[1]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.GG\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahihjujy.jl:30\nin expression starting at\
    \ /tmp/tmpahihjujy.jl:30\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(length(extensions))\n\
    \    for i=1:length(extensions)\n        extension_strength[i] = length(extensions[i])-length(replace(extensions[i],uppercase(extensions[i]),\"\
    \"))\n    end\n    \n    index_of_max_strength = argmax(extension_strength)\n\
    \    \n    return class_name+\".\"+extensions[index_of_max_strength]\nend\n</cell>\n\
    <code language=julia-1.0>\n@time Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]);\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and a list of strings as arguments and returns a string with the first letter\
    \ of each string in the list capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzj_mdhj.jl:29\nin expression starting at\
    \ /tmp/tmptzj_mdhj.jl:29\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions\n\
    \        \n        extension = extension.upper()\n        \n        CAP = length(extension)\
    \ - length(replace(extension, extension.upper(), ''))\n        SM = length(extension)\
    \ - length(replace(extension, extension.lower(), ''))\n        \n        strength\
    \ = max(strength, CAP - SM)\n    end\n    \n    return class_name * \".\" .* extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns a string with\
    \ the first letter of each string in the list concatenated with the rest of the\
    \ strings in the list.\nFor example, if the list is [\"a\", \"b\", \"c\"] and\
    \ the string is \"abc\" then you should return \"a.b.c\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1t9m_w7.jl:28\nin expression starting at\
    \ /tmp/tmps1t9m_w7.jl:28\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions\n\
    \        \n        cap = length(extension)\n        sm = length(extension) - cap\n\
    \        \n        if strength == -1 || strength > cap - sm\n            strength\
    \ = cap - sm\n        end\n    end\n    \n    return class_name * \".\" .* extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.GG\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hds4dlk.jl:36\nin expression starting at\
    \ /tmp/tmp8hds4dlk.jl:36\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ * \".\" . extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.CC\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.NN\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"\".\" .\"\
    \ at /tmp/tmpf4wu3whm.jl:27\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4wu3whm.jl:27\n\
    in expression starting at /tmp/tmpf4wu3whm.jl:27\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.CC\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.NN\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4xkj9ad.jl:30\nin expression starting at\
    \ /tmp/tmpd4xkj9ad.jl:30\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        index_of_first_extension = find(extensions_sorted\
    \ .== extensions_sorted[1], 1)\n        \n        if index_of_first_extension\
    \ == 1\n            return class_name .. \".\" .. extensions_sorted[1]\n     \
    \   else\n            return class_name .. \".\" .. extensions_sorted[1]\n   \
    \     end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.AA\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.AA\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbdd3dnu.jl:39\nin expression starting at\
    \ /tmp/tmplbdd3dnu.jl:39\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == \"\"\n            continue\n        \n        extension_upper\
    \ = uppercase(extension)\n        extension_lower = lowercase(extension)\n   \
    \     \n        if extension_upper == extension\n            strength += 1\n \
    \       elseif extension_lower == extension\n            strength += 0.5\n   \
    \     else\n            strength += (length(extension) - length(extension_lower)\
    \ - length(extension_upper))\n        end\n    end\n    \n    if strength == -1\n\
    \        return class_name\n    elseif strength == 0\n        return class_name\n\
    \    elseif strength == 1\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 2\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 3\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 4\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 5\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 6\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 7\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 8\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 9\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 10\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 11\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 12\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 13\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 14\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 15\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 16\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 17\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 18\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 19\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 20\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 21\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 22\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 23\n        return class_name * \".\" + extensions_sorted[1]\n\
    \    elseif strength == 24\n        return class_\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fs2jzt8.jl:1\nin expression starting at /tmp/tmp2fs2jzt8.jl:1\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper)\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower)\n            \n        else\n            \n      \
    \      error(\"The extension's name should only contain uppercase letters and\
    \ lowercase letters\")\n            \n        end\n        \n    end\n    \n \
    \   if strength == -1\n        \n        error(\"No extensions found\")\n    \
    \    \n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of uppercase letters in the string. \nExample: \n>>> count_upper(\"\
    my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\"\
    )\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>>\
    \ count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"\
    my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\"\
    )\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>>\
    \ count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"\
    my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\"\
    )\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>>\
    \ count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"\
    my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\"\
    )\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>>\
    \ count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"\
    my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\"\
    )\n2\n>>> count_upper(\"my_string\")\n2\n>>> count_upper(\"my_string\")\n2\n>>>\
    \ count_upper(\"my_string\")\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mnqa7f7.jl:50\nin expression starting at\
    \ /tmp/tmp4mnqa7f7.jl:50\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength), by=x->-x)\n\
    \    \n    Strongest_Extension = sorted_extensions[1]\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a list of strings as arguments and returns a string with the first letter\
    \ of each string in the list repeated n times. For example, if the list is [\"\
    a\", \"b\", \"c\"] and n is 2, then your function should return \"aaa\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkm9q0b0m.jl:31\nin expression starting at\
    \ /tmp/tmpkm9q0b0m.jl:31\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        \n        strength = length(extensions_sorted)\n   \
    \     \n    end\n    \n    return class_name * \".\" .* extensions_sorted[strength]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72nygu6l.jl:32\nin expression starting at\
    \ /tmp/tmp72nygu6l.jl:32\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper())\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower())\n            \n        else\n            \n    \
    \        error(\"The extension's name should only contain uppercase letters.\"\
    )\n            \n        end\n        \n    end\n    \n    if strength > 0\n \
    \       \n        return class_name * \".\" .* extensions_sorted[end]\n      \
    \  \n    else\n        \n        error(\"There are no extensions with the same\
    \ strength.\")\n        \n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmf8pdkai.jl:53\nin expression starting at\
    \ /tmp/tmpmf8pdkai.jl:53\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the longest common prefix.\
    \ \nFor example, if the string is: \"ABCDEFG\" and a list of strings is [\"ABC\"\
    , \"DEF\", \"GHI\"] then the function should return \"ABC\".\nIf the list of strings\
    \ is empty then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is an empty string then the function should return an\
    \ empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\nIf the list of strings is empty and the string is not an empty\
    \ string then the function should return an empty string.\nIf the list of strings\
    \ is empty and the string is not an empty string then the function should return\
    \ an empty string.\n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzofdtf_8.jl:30\nin expression starting at\
    \ /tmp/tmpzofdtf_8.jl:30\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = class_name \n    for extension in sorted_extensions\n\
    \        if extension_strength[Strongest_Extension] == 0\n            Strongest_Extension\
    \ = Strongest_Extension .. \".\" .. extension\n            break\n        end\n\
    \    end\n    return Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a list of strings as arguments\
    \ and returns a string that is the concatenation of all the strings in the list\
    \ separated by a space.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"..\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx1qf2x7d.jl:30\nin expression starting at /tmp/tmpx1qf2x7d.jl:30\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        else\n\
    \            strength = sm\n        end\n        \n    end\n    \n    return class_name\
    \ * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.II\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.MM\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.NN\"\n@test Str\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoqw1g__.jl:39\nin expression starting at\
    \ /tmp/tmpuoqw1g__.jl:39\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_map = Dict()\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_split = split(extension, \".\")\n        \n     \
    \   extension_class_name = extension_split[1]\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_split[1][end]\n        \n        extension_class_name\
    \ = join(extension_class_name_split)\n        \n        extension_class_name_split\
    \ = split(extension_class_name, \"\")\n        \n        extension_class_name_split[1]\
    \ = extension_class_name_\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpyg37sleu.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyg37sleu.jl:1\n\
    in expression starting at /tmp/tmpyg37sleu.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphve3u52h.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphve3u52h.jl:1\n\
    in expression starting at /tmp/tmphve3u52h.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == 0 \n        error(\"No extensions found\"\
    )\n    end\n    \n    \n    if strength_of_extension > 0\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq7f2ot7.jl:1\nin expression starting at /tmp/tmptq7f2ot7.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        strength = strength + (cap - sm)\n    end\n    \n    if strength\
    \ == -1\n        error(\"No extensions found\")\n    end\n    \n    return class_name\
    \ * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.II\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.MM\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.NN\"\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42y7mv4t.jl:38\nin expression starting at\
    \ /tmp/tmp42y7mv4t.jl:38\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        \n        strength = extensions_sorted[1] - extensions_sorted[0]\n\
    \        \n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.JJ\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.KK\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.LL\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.MM\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.NN\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglm33gqc.jl:32\nin expression starting at\
    \ /tmp/tmpglm33gqc.jl:32\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprmg6a1nb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprmg6a1nb.jl:1\n\
    in expression starting at /tmp/tmprmg6a1nb.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \nend\n\
    </cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and a list of strings as arguments. \nThe function\
    \ should return a list of strings that contain the letters \nof the string in\
    \ sorted order.\nFor example, if the string was \"my_string\" and you passed the\
    \ list [\"A\", \"B\", \"C\"]\nthen the function should return [\"A\", \"B\", \"\
    C\", \"my_string\"].\nThe function should work for any string and any list of\
    \ strings.\nExample: \n>>> sorted_letters(\"my_string\", [\"A\", \"B\", \"C\"\
    ])\n[\"A\", \"B\", \"C\", \"my_string\"]\n>>> sorted_letters(\"my_string\", [\"\
    A\", \"B\", \"C\", \"D\"])\n[\"A\", \"B\", \"C\", \"D\", \"my_string\"]\n>>> sorted_letters(\"\
    my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\"])\n[\"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"my_string\"]\n>>> sorted_letters(\"my_string\", [\"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"])\n[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"my_string\"\
    ]\n>>> sorted_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\"])\n[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"my_string\"]\n\
    >>> sorted_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"\
    G\", \"H\"])\n[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"my_string\"\
    ]\n>>> sorted_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\"])\n[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"\
    H\", \"I\", \"my_string\"]\n>>> sorted_letters(\"my_string\", [\"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"])\n[\"A\", \"B\", \"C\",\
    \ \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"my_string\"]\n>>> sorted_letters(\"\
    my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hk5u879.jl:30\nin expression starting at\
    \ /tmp/tmp8hk5u879.jl:30\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == \"\"\n            continue\n        \n        extension_upper\
    \ = uppercase(extension)\n        extension_lower = lowercase(extension)\n   \
    \     \n        strength = strength + (length(extension) - length(extension_upper)\
    \ - length(extension_lower))\n        \n    end\n    \n    if strength == 0\n\
    \        return class_name\n    end\n    \n    strength = strength / length(extensions_sorted)\n\
    \    \n    return class_name * StrongestExtensionName(strength)\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns a string\
    \ with the first string in the list repeated n times. \nFor example, if you have\
    \ \"ABC\" and [\"A\", \"B\", \"C\"] as arguments and you call your function with\
    \ n=2, your function should return \"ABAB\".\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9a2avlv.jl:44\nin expression starting at\
    \ /tmp/tmps9a2avlv.jl:44\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n        \n        if strength == -1\n            return\
    \ class_name\n        else\n            \n            extensions_sorted = sort(extensions_sorted)\n\
    \            \n            strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \            \n            if strength == -1\n                return class_name\n\
    \            else\n                \n                extensions_sorted = sort(extensions_sorted)\n\
    \                \n                strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                \n                if strength == -1\n                    return\
    \ class_name\n                else\n                    \n                   \
    \ extensions_sorted = sort(extensions_sorted)\n                    \n        \
    \            strength = extensions_sorted[1] - extensions_sorted[2]\n        \
    \            \n                    if strength == -1\n                       \
    \ return class_name\n                    else\n                        \n    \
    \                    extensions_sorted = sort(extensions_sorted)\n           \
    \             \n                        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                        \n                        if strength == -1\n       \
    \                     return class_name\n                        else\n      \
    \                      \n                            extensions_sorted = sort(extensions_sorted)\n\
    \                            \n                            strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength == -1\n                                return class_name\n\
    \                            else\n                                \n        \
    \                        extensions_sorted = sort(extensions_sorted)\n       \
    \                         \n                                strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                \n                 \
    \               if strength == -1\n                                    return\
    \ class_name\n                                else\n                         \
    \           \n                                    extensions_sorted = sort(extensions_sorted)\n\
    \                                    \n                                    strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \        \n                                    if strength == -1\n           \
    \                             return class_name\n                            \
    \        else\n                                        \n                    \
    \                    extensions_sorted = sort(extensions_sorted)\n           \
    \                             \n                                        strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \            \n                                        if strength == -1\n   \
    \                                         return class_name\n                \
    \                        else\n                                            \n\
    \                                            extensions_sorted = sort(extensions_sorted)\n\
    \                                            \n                              \
    \              strength = extensions_sorted[1] - extensions_sorted[2]\n      \
    \                                      \n                                    \
    \        if strength == -1\n                                                return\
    \ class_name\n                                            else\n             \
    \                                   \n                                       \
    \         extensions_sorted = sort(extensions_sorted)\n                      \
    \                          \n                                                strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \                    \n                                                if strength\
    \ == -1\n                                                    return class_name\n\
    \                                                else\n                      \
    \                              \n                                            \
    \        extensions_sorted = sort(extensions_sorted)\n                       \
    \                             \n                                             \
    \       strength = extensions_sorted[1] - extensions_sorted[2]\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpd9aaf1em.jl:112\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9aaf1em.jl:1\n\
    in expression starting at /tmp/tmpd9aaf1em.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8_0om8vp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_0om8vp.jl:1\n\
    in expression starting at /tmp/tmp8_0om8vp.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the longest common prefix.\
    \ \nThe function should return the longest common prefix of all the strings in\
    \ the list.\nFor example, if the list is [\"ABC\", \"DEF\", \"GHI\"] and the string\
    \ is \"ABCDEFGHI\" then \nthe function should return \"ABC\".\nIf the list is\
    \ [\"ABC\", \"DEF\", \"GHI\"] and the string is \"ABCDEFG\" then \nthe function\
    \ should return \"ABC\".\nIf the list is [\"ABC\", \"DEF\", \"GHI\"] and the string\
    \ is \"ABCDEF\" then \nthe function should return \"ABC\".\nIf the list is [\"\
    ABC\", \"DEF\", \"GHI\"] and the string is \"ABC\" then \nthe function should\
    \ return \"ABC\".\nIf the list is [\"ABC\", \"DEF\", \"GHI\"] and the string is\
    \ \"DEF\" then \nthe function should return \"DEF\".\nIf the list is [\"ABC\"\
    , \"DEF\", \"GHI\"] and the string is \"GHI\" then \nthe function should return\
    \ \"GHI\".\nIf the list is [\"ABC\", \"DEF\", \"GHI\"] and the string is \"ABCDEFGHI\"\
    \ then \nthe function should return \"ABC\".\nIf the list is [\"ABC\", \"DEF\"\
    , \"GHI\"] and the string is \"ABCDEFG\" then \nthe function should return \"\
    ABC\".\nIf the list is [\"ABC\", \"DEF\", \"GHI\"] and the string is \"ABCDEF\"\
    \ then \nthe function should return \"ABC\".\nIf the list is [\"ABC\", \"DEF\"\
    , \"GHI\"] and the string is \"ABC\" then \nthe function should return \"ABC\"\
    .\nIf the list is [\"ABC\", \"DEF\", \"GHI\"] and the string is \"DEF\" then \n\
    the function should return \"DEF\".\nIf the list is [\"ABC\", \"DEF\", \"GHI\"\
    ] and the string is \"GHI\" then \nthe function should return \"GHI\".\nIf the\
    \ list is [\"ABC\", \"DEF\", \"GHI\"] and the string is \"ABCDEFGHI\" then \n\
    the function should return \"ABC\".\nIf the list is [\"ABC\", \"DEF\", \"GHI\"\
    ] and the string is \"ABCDEFG\" then \nthe function should return \"ABC\".\nIf\
    \ the list is [\"ABC\", \"DEF\", \"GHI\"] and the \nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafu85c80.jl:30\nin expression starting at\
    \ /tmp/tmpafu85c80.jl:30\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions\n        \n  \
    \      extension = extension.upper\n        \n        if extension in class_name.upper\n\
    \            \n            index = class_name.upper.index(extension)\n       \
    \     \n            strength = strength + index - class_name.upper.index(extension.lower())\n\
    \            \n        end\n    end\n    \n    if strength == -1\n        \n \
    \       error(\"No extension found for class $class_name\")\n    end\n    \n \
    \   return class_name * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.CC\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcomb0zkc.jl:44\nin expression starting at\
    \ /tmp/tmpcomb0zkc.jl:44\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_map = Dict{String, Int}()\n    \n    for extension in extensions_sorted\n\
    \        strength_map[extension] = length(extension) - length(extension.lowercase)\n\
    \    end\n    \n    strength_sorted = sort(strength_map.values)\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpntbh_gci.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpntbh_gci.jl:1\n\
    in expression starting at /tmp/tmpntbh_gci.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted \n   \
    \     \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (extension_upper\
    \ - extension_lower)\n    end\n    \n    if strength == -1\n        error(\"No\
    \ extensions found\")\n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.JJ\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.KK\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.LL\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.MM\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.NN\"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z986s_i.jl:38\nin expression starting at\
    \ /tmp/tmp1z986s_i.jl:38\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = length(extensions_sorted)\n    \n    index_of_first_extension\
    \ = find(extensions_sorted .== class_name)\n    \n    if index_of_first_extension\
    \ == length(extensions_sorted)\n        return class_name\n    else\n        \n\
    \        index_of_second_extension = find(extensions_sorted .== class_name, index_of_first_extension+1)\n\
    \        \n        if index_of_second_extension == length(extensions_sorted)\n\
    \            return class_name\n        else\n            \n            index_of_third_extension\
    \ = find(extensions_sorted .== class_name, index_of_second_extension+1)\n    \
    \        \n            if index_of_third_extension == length(extensions_sorted)\n\
    \                return class_name\n            else\n                \n     \
    \           index_of_fourth_extension = find(extensions_sorted .== class_name,\
    \ index_of_third_extension+1)\n                \n                if index_of_fourth_extension\
    \ == length(extensions_sorted)\n                    return class_name\n      \
    \          else\n                    \n                    index_of_fifth_extension\
    \ = find(extensions_sorted .== class_name, index_of_fourth_extension+1)\n    \
    \                \n                    if index_of_fifth_extension == length(extensions_sorted)\n\
    \                        return class_name\n                    else\n       \
    \                 \n                        index_of_sixth_extension = find(extensions_sorted\
    \ .== class_name, index_of_fifth_extension+1)\n                        \n    \
    \                    if index_of_sixth_extension == length(extensions_sorted)\n\
    \                            return class_name\n                        else\n\
    \                            \n                            index_of_seventh_extension\
    \ = find(extensions_sorted .== class_name, index_of_sixth_extension+1)\n     \
    \                       \n                            if index_of_seventh_extension\
    \ == length(extensions_sorted)\n                                return class_name\n\
    \                            else\n                                \n        \
    \                        index_of_eighth_extension = find(extensions_sorted .==\
    \ class_name, index_of_seventh_extension+1)\n                                \n\
    \                                if index_of_eighth_extension == length(extensions_sorted)\n\
    \                                    return class_name\n                     \
    \           else\n                                    \n                     \
    \               index_of_ninth_extension = find(extensions_sorted .== class_name,\
    \ index_of_eighth_extension+1)\n                                    \n       \
    \                             if index_of_ninth_extension == length(extensions_sorted)\n\
    \                                        return class_name\n                 \
    \                   else\n                                        \n         \
    \                               index_of_tenth_extension = find(extensions_sorted\
    \ .== class_name, index_of_ninth_extension+1)\n                              \
    \          \n                                        if index_of_tenth_extension\
    \ == length(extensions_sorted)\n                                            return\
    \ class_name\n                                        else\n                 \
    \                           \n                                            index_of_eleventh_extension\
    \ = find(extensions_sorted .== class_name, index_of_tenth_extension+1)\n     \
    \                                       \n                                   \
    \         if index_of_eleventh_extension == length(extensions_\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l4bzyms.jl:87\nin expression starting at\
    \ /tmp/tmp6l4bzyms.jl:87\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        if extensions_sorted[1] == extensions_sorted[2]\n\
    \            return class_name + \".\" + extensions_sorted[1]\n        else\n\
    \            return class_name + \".\" + extensions_sorted[1]\n        end\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.AA\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.AA\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsjr5m2f.jl:37\nin expression starting at\
    \ /tmp/tmplsjr5m2f.jl:37\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if strmatch(extension, class_name)\n            \n            strength\
    \ += 1\n            \n            if strength > 0\n                break\n   \
    \         end\n        end\n    end\n    \n    if strength == 0\n        \n  \
    \      error(\"No extensions match the class name\")\n    end\n    \n    extensions_sorted\
    \ = extensions_sorted[strength]\n    \n    return class_name * \".\" .* join(extensions_sorted)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpd5jhqoru.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpd5jhqoru.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  UndefVarError: strmatch not defined\n  Stacktrace:\n  \
    \ [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n  \
    \   @ Main /tmp/tmpd5jhqoru.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd5jhqoru.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5jhqoru.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpd5jhqoru.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  UndefVarError: strmatch not defined\n  Stacktrace:\n\
    \   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpd5jhqoru.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd5jhqoru.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5jhqoru.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpd5jhqoru.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  UndefVarError: strmatch not\
    \ defined\n  Stacktrace:\n   [1] Strongest_Extension(class_name::String, extensions::Vector{String})\n\
    \     @ Main /tmp/tmpd5jhqoru.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd5jhqoru.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5jhqoru.jl:49\ntest set:\
    \ Er"
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = count_letters(extension) - count_letters(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpimwy2rya.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimwy2rya.jl:1\n\
    in expression starting at /tmp/tmpimwy2rya.jl:1\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxqitcs10.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxqitcs10.jl:1\n\
    in expression starting at /tmp/tmpxqitcs10.jl:1\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \        \n        if strength > 0\n            return class_name + \".\" + extensions_sorted[1]\n\
    \        else\n            return class_name + \".\" + extensions_sorted[2]\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.MM\"\n@assert Stron\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wu6cf5v.jl:39\nin expression starting at\
    \ /tmp/tmp4wu6cf5v.jl:39\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphve3u52h.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphve3u52h.jl:1\n\
    in expression starting at /tmp/tmphve3u52h.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdzy0ts7v.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdzy0ts7v.jl:1\n\
    in expression starting at /tmp/tmpdzy0ts7v.jl:1\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = Int64[]\n    \n    for extension in extensions\n       \
    \ \n        cap = length(extension)\n        sm = length(extension) - cap\n  \
    \      \n        push!(strength, cap - sm)\n        \n    end\n    \n    strength\
    \ = sort(strength)\n    \n    idx = findfirst(x -> x > 0, strength)\n    \n  \
    \  if idx == length(strength)\n        return class_name\n    end\n    \n    return\
    \ string(class_name, extensions[idx])\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of characters\
    \ in a string that are not letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnyey5ob.jl:43\nin expression starting at\
    \ /tmp/tmprnyey5ob.jl:43\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper())\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower())\n            \n        else\n            \n    \
    \        error(\"The extension's name should only contain uppercase and lowercase\
    \ letters.\")\n            \n        end\n        \n    end\n    \n    if strength\
    \ > 0\n        \n        return class_name * \".\" .* extensions_sorted[end]\n\
    \        \n    else\n        \n        error(\"There are no extensions with the\
    \ same strength.\")\n        \n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp357vx7p6.jl:53\nin expression starting at\
    \ /tmp/tmp357vx7p6.jl:53\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the first letter of each\
    \ string replaced by the first letter of the corresponding string in the list.\n\
    For example, if the string \"my_string\" and the list [\"my_string1\", \"my_string2\"\
    , \"my_string3\"] are passed as arguments to the function, then the function should\
    \ return \"mystring1\".\nThe function should return the string \"my_string\" if\
    \ the list contains no strings.\nThe function should return \"my_string\" if the\
    \ list contains only one string.\nThe function should return \"my_string\" if\
    \ the list contains two strings.\nThe function should return \"my_string\" if\
    \ the list contains three strings.\nThe function should return \"my_string\" if\
    \ the list contains four strings.\nThe function should return \"my_string\" if\
    \ the list contains five strings.\nThe function should return \"my_string\" if\
    \ the list contains six strings.\nThe function should return \"my_string\" if\
    \ the list contains seven strings.\nThe function should return \"my_string\" if\
    \ the list contains eight strings.\nThe function should return \"my_string\" if\
    \ the list contains nine strings.\nThe function should return \"my_string\" if\
    \ the list contains ten strings.\nThe function should return \"my_string\" if\
    \ the list contains eleven strings.\nThe function should return \"my_string\"\
    \ if the list contains twelve strings.\nThe function should return \"my_string\"\
    \ if the list contains thirteen strings.\nThe function should return \"my_string\"\
    \ if the list contains fourteen strings.\nThe function should return \"my_string\"\
    \ if the list contains fifteen strings.\nThe function should return \"my_string\"\
    \ if the list contains sixteen strings.\nThe function should return \"my_string\"\
    \ if the list contains seventeen strings.\nThe function should return \"my_string\"\
    \ if the list contains eighteen strings.\nThe function should return \"my_string\"\
    \ if the list contains nineteen strings.\nThe function should return \"my_string\"\
    \ if the list contains twenty strings.\nThe function should return \"my_string\"\
    \ if the list contains thirty strings.\nThe function should return \"my_string\"\
    \ if the list contains for\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11ds3kef.jl:30\nin expression starting at\
    \ /tmp/tmp11ds3kef.jl:30\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \        \n        if strength == -1\n            return class_name\n        else\n\
    \            \n            extensions_sorted = sort(extensions)\n            \n\
    \            strength = extensions_sorted[1] - extensions_sorted[2]\n        \
    \    \n            if strength == -1\n                return class_name\n    \
    \        else\n                \n                extensions_sorted = sort(extensions)\n\
    \                \n                strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                \n                if strength == -1\n                    return\
    \ class_name\n                else\n                    \n                   \
    \ extensions_sorted = sort(extensions)\n                    \n               \
    \     strength = extensions_sorted[1] - extensions_sorted[2]\n               \
    \     \n                    if strength == -1\n                        return\
    \ class_name\n                    else\n                        \n           \
    \             extensions_sorted = sort(extensions)\n                        \n\
    \                        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                        \n                        if strength == -1\n       \
    \                     return class_name\n                        else\n      \
    \                      \n                            extensions_sorted = sort(extensions)\n\
    \                            \n                            strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength == -1\n                                return class_name\n\
    \                            else\n                                \n        \
    \                        extensions_sorted = sort(extensions)\n              \
    \                  \n                                strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                \n                 \
    \               if strength == -1\n                                    return\
    \ class_name\n                                else\n                         \
    \           \n                                    extensions_sorted = sort(extensions)\n\
    \                                    \n                                    strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \        \n                                    if strength == -1\n           \
    \                             return class_name\n                            \
    \        else\n                                        \n                    \
    \                    extensions_sorted = sort(extensions)\n                  \
    \                      \n                                        strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength == -1\n                          \
    \                  return class_name\n                                       \
    \ else\n                                            \n                       \
    \                     extensions_sorted = sort(extensions)\n                 \
    \                           \n                                            strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \                \n                                            if strength ==\
    \ -1\n                                                return class_name\n    \
    \                                        else\n                              \
    \                  \n                                                extensions_sorted\
    \ = sort(extensions)\n                                                \n     \
    \                                           strength = extensions_sorted[1] -\
    \ extensions_sorted[2]\n                                                \n   \
    \                                             if strength == -1\n            \
    \                                        return class_name\n                 \
    \                               else\n                                       \
    \             \n                                                    extensions_sorted\
    \ = sort(extensions)\n                                                    \n \
    \                                                   strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                                   \
    \ \n                                                    if strength == -1\n  \
    \                                                      return class_name\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 extensions_sorted = sort(\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph63hrx1_.jl:127\nin expression starting at\
    \ /tmp/tmph63hrx1_.jl:127\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    return\
    \ class_name * Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings and returns a string that is the concatenation of all the strings\
    \ in the list separated by a space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjtakgfz.jl:31\nin expression starting at\
    \ /tmp/tmpjjtakgfz.jl:31\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = Dict{String, Int}()\n    for extension in\
    \ extensions_sorted\n        strength_of_extensions[extension] = length(extension)\
    \ - length(lowercase(extension))\n    end\n    \n    sorted_extensions = sort(strength_of_extensions,\
    \ by=x->-x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp__91c6bk.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp__91c6bk.jl:1\n\
    in expression starting at /tmp/tmp__91c6bk.jl:1\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions \n        extension_strength[extension] = length(extension)\
    \ - length(extension.lowercase)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n    \n    return\
    \ Strongest_Extension\nend\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpxon5xhgn.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpxon5xhgn.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"\
    Watashi.eIGHt8OKe\"\n  type String has no field lowercase\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpxon5xhgn.jl:22\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxon5xhgn.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxon5xhgn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxon5xhgn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpxon5xhgn.jl:22\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxon5xhgn.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxon5xhgn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxon5xhgn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})\n     @ Main /tmp/tmpxon5xhgn.jl:22\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxon5xhgn.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ "
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper)\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower)\n            \n        else\n            \n      \
    \      error(\"The extension is not an uppercase or lowercase letter\")\n    \
    \        \n        end\n        \n    end\n    \n    if strength > 0\n       \
    \ \n        return class_name * \".\" .* extensions_sorted[end]\n        \n  \
    \  else\n        \n        error(\"There are no extensions with the same strength\"\
    )\n        \n    end\n    \nend\n</cell>\n<code language=julia-1.3>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.GG\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgty__gfq.jl:53\nin expression starting at\
    \ /tmp/tmpgty__gfq.jl:53\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a string and returns the number of uppercase letters\
    \ in the string.\nExample: \n>>> count_upper(\"hello\")\n5\n>>> count_upper(\"\
    HELLO\")\n5\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\"\
    )\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n\
    >>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"HELLOWORLD\")\n6\n>>> count_upper(\"\
    HEL\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamtv96sf.jl:30\nin expression starting at\
    \ /tmp/tmpamtv96sf.jl:30\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \        \n        if strength == -1\n            return class_name\n        else\n\
    \            \n            extensions_sorted = sort(extensions)\n            \n\
    \            strength = extensions_sorted[1] - extensions_sorted[2]\n        \
    \    \n            if strength == -1\n                return class_name\n    \
    \        else\n                \n                extensions_sorted = sort(extensions)\n\
    \                \n                strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                \n                if strength == -1\n                    return\
    \ class_name\n                else\n                    \n                   \
    \ extensions_sorted = sort(extensions)\n                    \n               \
    \     strength = extensions_sorted[1] - extensions_sorted[2]\n               \
    \     \n                    if strength == -1\n                        return\
    \ class_name\n                    else\n                        \n           \
    \             extensions_sorted = sort(extensions)\n                        \n\
    \                        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                        \n                        if strength == -1\n       \
    \                     return class_name\n                        else\n      \
    \                      \n                            extensions_sorted = sort(extensions)\n\
    \                            \n                            strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength == -1\n                                return class_name\n\
    \                            else\n                                \n        \
    \                        extensions_sorted = sort(extensions)\n              \
    \                  \n                                strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                \n                 \
    \               if strength == -1\n                                    return\
    \ class_name\n                                else\n                         \
    \           \n                                    extensions_sorted = sort(extensions)\n\
    \                                    \n                                    strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \        \n                                    if strength == -1\n           \
    \                             return class_name\n                            \
    \        else\n                                        \n                    \
    \                    extensions_sorted = sort(extensions)\n                  \
    \                      \n                                        strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength == -1\n                          \
    \                  return class_name\n                                       \
    \ else\n                                            \n                       \
    \                     extensions_sorted = sort(extensions)\n                 \
    \                           \n                                            strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \                \n                                            if strength ==\
    \ -1\n                                                return class_name\n    \
    \                                        else\n                              \
    \                  \n                                                extensions_sorted\
    \ = sort(extensions)\n                                                \n     \
    \                                           strength = extensions_sorted[1] -\
    \ extensions_sorted[2]\n                                                \n   \
    \                                             if strength == -1\n            \
    \                                        return class_name\n                 \
    \                               else\n                                       \
    \             \n                                                    extensions_sorted\
    \ = sort(extensions)\n                                                    \n \
    \                                                   strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                                   \
    \ \n                                                    if strength == -1\n  \
    \                                                      return class_name\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 extensions_sorted = sort(\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph63hrx1_.jl:127\nin expression starting at\
    \ /tmp/tmph63hrx1_.jl:127\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension_strength[extension])\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values), by=x->x)\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0k9g5mdz.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0k9g5mdz.jl:1\n\
    in expression starting at /tmp/tmp0k9g5mdz.jl:1\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkzkzb1m.jl:30\nin expression starting at\
    \ /tmp/tmpnkzkzb1m.jl:30\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = Int64[]\n    for ext in extensions\n        strength = append(strength,\
    \ length(ext) - length(replace(ext, uppercase(ext), \"\")))\n    end\n    \n \
    \   idx = findfirst(x -> x > 0, strength)\n    \n    if idx == length(strength)\n\
    \        return class_name\n    elseif idx == 0\n        return Strongest_Extension(class_name,\
    \ extensions[1:end-1])\n    elseif idx > 0 && idx < length(strength)\n       \
    \ return Strongest_Extension(class_name, extensions[1:idx-1])\n    else\n    \
    \    return class_name\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.Be\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotktuu7c.jl:39\nin expression starting at\
    \ /tmp/tmpotktuu7c.jl:39\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = count_upper(extension) - count_lower(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values), by=x->x)\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjzy6szji.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjzy6szji.jl:1\n\
    in expression starting at /tmp/tmpjzy6szji.jl:1\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = Int64[]\n    for extension in extensions\n        strength\
    \ += count_caps(extension) - count_caps(extension.lower())\n    end\n    \n  \
    \  strength = maximum(strength)\n    \n    index = findfirst(x -> strength ==\
    \ x, extensions)\n    \n    if index != nothing\n        return class_name ..\
    \ \".\" .. extensions[index]\n    else\n        return class_name\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and a list of strings and returns a string with the \nlongest common\
    \ substring in each of the strings in the list. \nFor example, if the input string\
    \ is \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\"]\nthen the\
    \ function should return \"ABC\".\nIf the input string is \"ABCDEFG\" and a list\
    \ of strings is [\"ABC\", \"DEF\", \"GHI\", \"JKL\"]\nthen the function should\
    \ return \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings is\
    \ [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\"]\nthen the function should return\
    \ \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings is [\"ABC\"\
    , \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\"]\nthen the function should return\
    \ \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings is [\"ABC\"\
    , \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\"]\nthen the function should\
    \ return \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings is\
    \ [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\"]\nthen\
    \ the function should return \"ABC\".\nIf the input string is \"ABCDEFG\" and\
    \ a list of strings is [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\",\
    \ \"STU\", \"VWX\", \"YZ\"]\nthen the function should return \"ABC\".\nIf the\
    \ input string is \"ABCDEFG\" and a list of strings is [\"ABC\", \"DEF\", \"GHI\"\
    , \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\", \"123\"]\nthen the function\
    \ should return \"ABC\".\nIf the input string is \"ABCDEFG\" and a list of strings\
    \ is [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\",\
    \ \"YZ\", \"123\", \"456\"]\nthen the function should return \"ABC\".\nIf the\
    \ \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq925nma.jl:37\nin expression starting at\
    \ /tmp/tmpjq925nma.jl:37\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper)\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower)\n            \n        else\n            \n      \
    \      error(\"The extension is not a capital letter\")\n            \n      \
    \  end\n        \n    end\n    \n    \n    if strength == -1\n        \n     \
    \   error(\"There are no extensions with the same strength\")\n        \n    elseif\
    \ strength > 0\n        \n        extensions_sorted = sort(extensions)\n     \
    \   \n        extensions_sorted = extensions_sorted[extensions_sorted .!= extension]\n\
    \        \n        extensions_sorted = extensions_sorted[extensions_sorted .!=\
    \ extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted[extensions_sorted\
    \ .!= extension]\n        \n        extensions_sorted = extensions_sorted\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0xeagi9.jl:1\nin expression starting at /tmp/tmpb0xeagi9.jl:1\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values), by=x->x)\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsrmcmhmh.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrmcmhmh.jl:1\n\
    in expression starting at /tmp/tmpsrmcmhmh.jl:1\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == \"\"\n            continue\n        \n        extension_upper\
    \ = uppercase(extension)\n        extension_lower = lowercase(extension)\n   \
    \     \n        if strength == -1 || strength > extension_upper - extension_lower\n\
    \            strength = extension_upper - extension_lower\n        end\n    end\n\
    \    \n    return class_name * \".\" .* extensions_sorted[end]\nend\n</cell>\n\
    <code language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a list of strings as arguments. \nThe function should return a list of strings\
    \ that contains the same string repeated \nthe number of times specified by the\
    \ user. \nFor example, if the user enters \"3\" and the list contains the strings\
    \ \"a\", \"b\", and \"c\", \nthe function should return [\"a\", \"a\", \"a\",\
    \ \"b\", \"b\", \"b\", \"c\", \"c\"].\nThe function should return an empty list\
    \ if the user enters an invalid number of repetitions.\nFor example, if the user\
    \ enters \"a\" and the list contains \"a\", \"b\", and \"c\", the function should\
    \ return [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"].\nIf the user\
    \ enters an invalid number of repetitions, the function should return an empty\
    \ list.\nFor example, if the user enters \"a\" and the list contains \"a\", \"\
    b\", and \"c\", the function should return [\"a\", \"a\", \"a\", \"b\", \"b\"\
    , \"b\", \"c\", \"c\"].\nIf the user enters an invalid number of repetitions,\
    \ the function should return an empty list.\nFor example, if the user enters \"\
    a\" and the list contains \"a\", \"b\", and \"c\", the function should return\
    \ [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"].\nIf the user enters\
    \ an invalid number of repetitions, the function should return an empty list.\n\
    For example, if the user enters \"a\" and the list contains \"a\", \"b\", and\
    \ \"c\", the function should return [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"\
    , \"c\", \"c\"].\nIf the user enters an invalid number of repetitions, the function\
    \ should return an empty list.\nFor example, if the user enters \"a\" and the\
    \ list contains \"a\", \"b\", and \"c\", the function should return [\"a\", \"\
    a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"].\nIf the user enters an invalid\
    \ number of repetitions, the function should return an empty list.\nFor example,\
    \ if the user enters \"a\" and the list contains \"a\", \"b\", and \"c\", the\
    \ function should return [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"\
    c\"].\nIf the user enters an invalid number of repetitions, the function should\
    \ return an empty list.\nFor example, if the user enters \"a\" and the list contains\
    \ \"a\", \"b\", \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pasv_4o.jl:39\nin expression starting at\
    \ /tmp/tmp0pasv_4o.jl:39\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension)\
    \ - length(extension_upper) - length(extension_lower))\n        \n    end\n  \
    \  \n    if strength == -1\n        error(\"No extensions found\")\n    end\n\
    \    \n    return class_name * \".\" .* extensions_sorted[findfirst(x -> x ==\
    \ extensions_sorted[findfirst(x -> x == extensions_sorted)], extensions_sorted)]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized.\nExample: capitalize(\"hello\")\
    \ should return \"Hello\".\nHint: Use uppercase() from Strings.jl\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplitks1pk.jl:39\nin expression starting at\
    \ /tmp/tmplitks1pk.jl:39\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of characters in a string.\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mvvaqxd.jl:30\nin expression starting at\
    \ /tmp/tmp5mvvaqxd.jl:30\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(Int,\
    \ length(extensions))\n    for (i,extension) in enumerate(extensions)\n      \
    \  extension_strength[i] = length(extension) - length(translate(extension, uppercase,\
    \ lowercase))\n    end\n    \n    Strongest_Extension = extensions[argmax(extension_strength)]\n\
    \    return class_name * Strongest_Extension\nend\n</cell>\n<code language=julia-1.4>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) \u2248 \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the longest common prefix.\
    \ \nFor example, if the input string is \"abcde\" and a list of strings is [\"\
    abc\", \"def\", \"ghi\", \"jkl\"] then your function should return \"abc\".\n\
    If the input string is \"abcde\" and a list of strings is [\"abc\", \"def\", \"\
    ghi\", \"jkl\", \"mno\"] then your function should return \"abc\".\nIf the input\
    \ string is \"abcde\" and a list of strings is [\"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\"] then your function should return \"abc\".\nIf the input\
    \ string is \"abcde\" and a list of strings is [\"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\"] then your function should return \"abc\".\n\
    If the input string is \"abcde\" and a list of strings is [\"abc\", \"def\", \"\
    ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"] then your function should\
    \ return \"abc\".\nIf the input string is \"abcde\" and a list of strings is [\"\
    abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]\
    \ then your function should return \"abc\".\nIf the input string is \"abcde\"\
    \ and a list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"vwx\", \"yz\", \"abc\"] then your function should return \"abc\"\
    .\nIf the input string is \"abcde\" and a list of strings is [\"abc\", \"def\"\
    , \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\", \"abc\", \"def\"\
    ] then your function should return \"abc\".\nIf the input string is \"abcde\"\
    \ and a list of strings is [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"vwx\", \"yz\", \"abc\", \"def\", \"ghi\"] then your function should\
    \ return \"abc\".\nIf the input string is \"abcde\" and a list of strings is [\"\
    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbuvw4e9.jl:28\nin expression starting at\
    \ /tmp/tmpkbuvw4e9.jl:28\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default strength\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension_upper)\
    \ - length(extension_lower))\n        \n    end\n    \n    if strength == -1\n\
    \        error(\"No extension has the strongest strength\")\n    end\n    \n \
    \   return class_name * \".\" .* extensions_sorted[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of characters in the given\
    \ string. \nThe function should take one argument, a string (a string).\nThe function\
    \ should return the number of characters in the string.\nThe function should throw\
    \ an error if the given string is not of type String.\nExample: \n>>> count_chars(\"\
    my_string\")\n7\n>>> count_chars(\"my_string2\")\n7\n>>> count_chars(\"my_string3\"\
    )\n7\n>>> count_chars(\"my_string4\")\n7\n>>> count_chars(\"my_string5\")\n7\n\
    >>> count_chars(\"my_string6\")\n7\n>>> count_chars(\"my_string7\")\n7\n>>> count_chars(\"\
    my_string8\")\n7\n>>> count_chars(\"my_string9\")\n7\n>>> count_chars(\"my_string10\"\
    )\n7\n>>> count_chars(\"my_string11\")\n7\n>>> count_chars(\"my_string12\")\n\
    7\n>>> count_chars(\"my_string13\")\n7\n>>> count_chars(\"my_string14\")\n7\n\
    >>> count_chars(\"my_string15\")\n7\n>>> count_chars(\"my_string16\")\n7\n>>>\
    \ count_chars(\"my_string17\")\n7\n>>> count_chars(\"my_string18\")\n7\n>>> count_chars(\"\
    my_string19\")\n7\n>>> count_chars(\"my_string20\")\n7\n>>> count_chars(\"my_string21\"\
    )\n7\n>>> count_chars(\"my_string22\")\n7\n>>> count_chars(\"my_string23\")\n\
    7\n>>> count_chars(\"my_string24\")\n7\n>>> count_chars(\"my_string25\")\n7\n\
    >>> count_chars(\"my_string26\")\n7\n>>> count_chars(\"my_string27\")\n7\n>>>\
    \ count_chars(\"my_string28\")\n7\n>>> count_chars(\"my_string29\")\n7\n>>> \n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphja2__xb.jl:39\nin expression starting at\
    \ /tmp/tmphja2__xb.jl:39\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        extension = extension.upper() \n        \n        if length(extension)\
    \ == length(class_name)\n            \n            strength = strength + length(extension)\
    \ - length(class_name) \n            \n        else \n            \n         \
    \   strength = strength + length(extension) - length(class_name) \n          \
    \  \n        end\n        \n    end\n    \n    if strength == -1\n        \n \
    \       error(\"No extension found with strength -1\")\n        \n    end\n  \
    \  \n    return class_name * \".\" .* extensions[end]\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy6r2ykx.jl:49\nin expression starting at\
    \ /tmp/tmpqy6r2ykx.jl:49\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = count_upper(extension) - count_lower(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr8k36f05.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8k36f05.jl:1\n\
    in expression starting at /tmp/tmpr8k36f05.jl:1\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp15ef2vdj.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp15ef2vdj.jl:1\n\
    in expression starting at /tmp/tmp15ef2vdj.jl:1\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = count_letters(extension)\
    \ - count_letters(extension)\n    end\n    \n    sorted_extensions = sort(extension_strength,\
    \ by=x->-extension_strength[x])\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjftunbg9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjftunbg9.jl:1\n\
    in expression starting at /tmp/tmpjftunbg9.jl:1\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength), by=x->x[1],\
    \ reverse=true)\n    \n    Strongest_Extension = sorted_extensions[1][1]\n   \
    \ \n    return Strongest_Extension\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and a list of strings as arguments and returns\
    \ a string that is the concatenation of all the strings in the list separated\
    \ by spaces.\nExample:\n>>> Concat_List(\"hello\", [\"world\", \"!\"])\n\"hello\
    \ world !\"\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazau_x0b.jl:32\nin expression starting at\
    \ /tmp/tmpazau_x0b.jl:32\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(length(extensions))\n\
    \    for i=1:length(extensions)\n        extension_strength[i] = length(extensions[i])-length(replace(extensions[i],uppercase(extensions[i]),\"\
    \"))\n    end\n    \n    idx = findfirst(extension_strength==maximum(extension_strength))\n\
    \    if idx==-1\n        return class_name\n    end\n    \n    return class_name+\"\
    .\"+extensions[idx]\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.MM\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuebh4xel.jl:32\nin expression starting at\
    \ /tmp/tmpuebh4xel.jl:32\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == 0\n        return class_name\n    else\n        return class_name\
    \ .* \".\" .* extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv25_d5k.jl:30\nin expression starting at\
    \ /tmp/tmptv25_d5k.jl:30\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     extensions_sorted = extensions_sorted[1..end]\n        \n        extensions_sorted\
    \ = sort(extensions_sorted)\n        \n        extensions_sorted = extensions_sorted[1..end]\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5lzw6na3.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5lzw6na3.jl:1\n\
    in expression starting at /tmp/tmp5lzw6na3.jl:1\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions[1] - extensions[0]\n    \n    if strength ==\
    \ -1\n        return class_name\n    else\n        return class_name .. \".\"\
    \ .. extensions[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@assert\
    \ Strongest_Extension(\"my_\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb53xctr.jl:30\nin expression starting at\
    \ /tmp/tmpkb53xctr.jl:30\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk264t1v5.jl:30\nin expression starting at\
    \ /tmp/tmpk264t1v5.jl:30\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_sum = 0\n    for extension in extensions_sorted\n        strength_sum\
    \ += length(extension) - length(extension.lower())\n    end\n    \n    strength_sum\
    \ == 0 ? return class_name : \n        extensions_sorted[findfirst(x -> strength_sum\
    \ == length(extensions_sorted) - length(x.lower()), extensions_sorted)]\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\",\
    \ [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp4_33t9.jl:28\nin expression starting at\
    \ /tmp/tmppp4_33t9.jl:28\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions\n        \n  \
    \      cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkaa1pwjz.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkaa1pwjz.jl:1\n\
    in expression starting at /tmp/tmpkaa1pwjz.jl:1\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_map = Dict()\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength_map[extension_upper] = length(extension)\
    \ - length(extension_lower)\n        \n    end\n    \n    strength_sorted = sort(strength_map)\n\
    \    \n    strength_map[1] = 0\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnmx2zeb5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnmx2zeb5.jl:1\n\
    in expression starting at /tmp/tmpnmx2zeb5.jl:1\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.CC\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.EE\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.GG\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.NN\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4xkj9ad.jl:30\nin expression starting at\
    \ /tmp/tmpd4xkj9ad.jl:30\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \        \n        if strength > 0\n            return class_name + \".\" + extensions_sorted[1]\n\
    \        else\n            return class_name + \".\" + extensions_sorted[2]\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the letters\
    \ capitalized.\nExample: \n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>>\
    \ capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"\
    Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"\
    hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>>\
    \ capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"\
    Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"\
    hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>>\
    \ capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"\
    Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"\
    hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>>\
    \ capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"\
    Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"\
    hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>>\
    \ capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"\
    Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\n    >>> capitalize(\"hello\")\n    \"Hello\"\n    >>> capitalize(\"\
    hello\")\n    \"Hello\"\n    >>> capitalize(\"hello\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp72qe_p.jl:39\nin expression starting at\
    \ /tmp/tmppp72qe_p.jl:39\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        \n        extensions_sorted = sort(extensions_sorted)\n        \n   \
    \     strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n  \
    \      \n        if strength_of_extension == -1\n            return class_name\n\
    \        else\n            \n            extensions_sorted = sort(extensions_sorted)\n\
    \            \n            strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \            \n            if strength_of_extension == -1\n                return\
    \ class_name\n            else\n                \n                extensions_sorted\
    \ = sort(extensions_sorted)\n                \n                strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n                \n          \
    \      if strength_of_extension == -1\n                    return class_name\n\
    \                else\n                    \n                    extensions_sorted\
    \ = sort(extensions_sorted)\n                    \n                    strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n                    \n      \
    \              if strength_of_extension == -1\n                        return\
    \ class_name\n                    else\n                        \n           \
    \             extensions_sorted = sort(extensions_sorted)\n                  \
    \      \n                        strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[0]\n                        \n                        if\
    \ strength_of_extension == -1\n                            return class_name\n\
    \                        else\n                            \n                \
    \            extensions_sorted = sort(extensions_sorted)\n                   \
    \         \n                            strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[0]\n                            \n                     \
    \       if strength_of_extension == -1\n                                return\
    \ class_name\n                            else\n                             \
    \   \n                                extensions_sorted = sort(extensions_sorted)\n\
    \                                \n                                strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n                            \
    \    \n                                if strength_of_extension == -1\n      \
    \                              return class_name\n                           \
    \     else\n                                    \n                           \
    \         extensions_sorted = sort(extensions_sorted)\n                      \
    \              \n                                    strength_of_extension = extensions_sorted[1]\
    \ - extensions_sorted[0]\n                                    \n             \
    \                       if strength_of_extension == -1\n                     \
    \                   return class_name\n                                    else\n\
    \                                        \n                                  \
    \      extensions_sorted = sort(extensions_sorted)\n                         \
    \               \n                                        strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n                            \
    \            \n                                        if strength_of_extension\
    \ == -1\n                                            return class_name\n     \
    \                                   else\n                                   \
    \         \n                                            extensions_sorted = sort(extensions_sorted)\n\
    \                                            \n                              \
    \              strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \                                            \n                              \
    \              if strength_of_extension == -1\n                              \
    \                  return class_name\n                                       \
    \     else\n                                                \n\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphuaa_1ga.jl:104\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphuaa_1ga.jl:1\n\
    in expression starting at /tmp/tmphuaa_1ga.jl:1\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension)\
    \ - length(extension_upper) - length(extension_lower))\n        \n    end\n  \
    \  \n    return class_name * \".\" .* extensions_sorted[findfirst(x -> x == extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted)], extensions_sorted)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.Be\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc2lyy56.jl:35\nin expression starting at\
    \ /tmp/tmppc2lyy56.jl:35\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted \n   \
    \     if extension == \"\" \n            continue \n        else \n          \
    \  strength = extension.uppercase - extension.lowercase \n            break\n\
    \    end\n    \n    if strength == -1 \n        error(\"No extension has the strongest\
    \ strength\") \n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.GG\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.JJ\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.KK\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.LL\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.MM\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.NN\"\n@assert Strongest_Extension(\"my_class\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm8ccqk3.jl:38\nin expression starting at\
    \ /tmp/tmpcm8ccqk3.jl:38\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a class name\
    \ and a list of the extensions, and returns the name of the class with the strongest\
    \ extension.\nExample: \n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"])\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\"])\n\"my_class.DD\"\n>>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"])\n\"my_class.EE\"\n>>> Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"])\n\"my_class.FF\"\
    \n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"])\n\"my_class.GG\"\n>>> Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\n\"my_class.HH\"\
    \n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\"])\n\"my_class.II\"\n>>> Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"])\n\"my_class.JJ\"\n>>> Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    ])\n\"my_class.KK\"\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"])\n\
    \"my_class.LL\"\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    , \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"\
    ])\n\"my_class.MM\"\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\",\
    \ \"MM\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ak1djmp.jl:30\nin expression starting at\
    \ /tmp/tmp_ak1djmp.jl:30\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02kgbxdp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02kgbxdp.jl:1\n\
    in expression starting at /tmp/tmp02kgbxdp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns a string\
    \ that is the concatenation of the strings in the list separated by a single space.\
    \ \nThe function should return \"my_class AA be CC\" if the input list is [\"\
    AA\", \"Be\", \"CC\"] and \"my_class Be\" if the input list is [\"Be\"].\nExample:\
    \ \n>>> Concatenate_Strings(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class\
    \ AA be CC\"\n>>> Concatenate_Strings(\"my_class\", [\"Be\"])\n\"my_class Be\"\
    \n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax4qtd3v.jl:31\nin expression starting at\
    \ /tmp/tmpax4qtd3v.jl:31\n"
  stdout: ''
  timestamp: 1659822946
- exit_code: 1
  program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength), by=x->x[1])\n    \n    return class_name\
    \ * sorted_extensions[1][1]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.FF\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.GG\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.HH\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.II\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.MM\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd5ul6mi.jl:30\nin expression starting at\
    \ /tmp/tmpcd5ul6mi.jl:30\n"
  stdout: ''
  timestamp: 1659822946
