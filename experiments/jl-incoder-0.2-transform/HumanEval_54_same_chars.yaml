name: HumanEval_54_same_chars
language: jl
prompt: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
  dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
  \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
  abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
  )\n    false\n    \"\"\"\nfunction same_chars(s0::String, s1::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
  ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
  eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
  ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
  \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
completions: ["    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0\
    \ != len1\n        return false\n    \n    i = 0\n    while i < len0\n       \
    \ if s0[i] != s1[i]\n            return false\n        i += 1\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend", "    same_chars(s0,\
    \ s1, 0)\nend", "    if s0 == s1 then return true\n    else if s1 == \"\" then\
    \ return false\n    else if s0 == \"\" then return false\n    else if s0 == s1\
    \ then return true\n    else if s0 == \"\" && s1 == \"\" then return true\n  \
    \  else if s0 == \"\" && s1 == s1 then return true\n    else if s0 == s1 then\
    \ return true\n    else if s0 == \"\" && s1 == \"\" then return true\n    else\
    \ if s0 == \"\" && s1 == s1 then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" && s1 == \"\" then return true\n    else if s0\
    \ == \"\" && s1 == s1 then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" && s1 == \"\" then return true\n    else if s0 == \"\"\
    \ && s1 == s1 then return true\n    else if s0 == s1 then return true\n    else\
    \ if s0 == \"\" && s1 == \"\" then return true\n    else if s0 == \"\" && s1 ==\
    \ s1 then return true\n    else if s0 == s1 then return true\n    else if s0 ==\
    \ \"\" && s1 == \"\" then return true\n    else if s0 == \"\" && s1 == s1 then\
    \ return true\n    else if s0 == s1 then return true\n    else if s0 == \"\" &&\
    \ s1 == \"\" then return true\n    else if s0 == \"\" && s1 == s1 then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" && s1 ==\
    \ \"\" then return true\n    else if s0 == \"\" && s1 == s1 then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" && s1 == \"\" then\
    \ return true\n    else if s0 == \"\" && s1 == s1 then return true\n    else if\
    \ s0 == s1 then return true\n    else if s0 == \"\" && s1 == \"\" then return\
    \ true\n    else if s0 == \"\" && s1 == s1 then return true\n    else if s0 ==\
    \ s1 then return true\n    else if s0 == \"\" && s1 == \"\" then return true\n\
    \    else if s0 == \"\" && s1 == s1 then return true\n    else if s0 == s1 then\
    \ return true\n    else if s0 == \"\" && s1 == \"\" then return true\n    else\
    \ if s0 == \"\" && s1 == s1 then return true\n    else if ", "    len = length(s0)\n\
    \    len2 = length(s1)\n    if len == len2\n        for (i1,c1) in enumerate(cat(s0))\n\
    \            for (i2,c2) in enumerate(cat(s1))\n                if c1 == c2\n\
    \                    true\n                else\n                    false\n \
    \   else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>", "    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    if length(s0) != length(s1)\n        return false\n \
    \   \n    i = 0\n    while i < length(s0)\n        if s0[i] != s1[i]\n       \
    \     return false\n        i += 1\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars_chars_idx::Array{Int,1}\
    \ = Array{Int,1}(undef, 0)\n    same_chars_chars_idx[1] = 1\n    same_chars_chars_idx[2]\
    \ = 2\n    same_chars_chars_idx[3] = 3\n    same_chars_chars_idx[4] = 4\n    same_chars_chars_idx[5]\
    \ = 5\n    same_chars_chars_idx[6] = 6\n    same_chars_chars_idx[7] = 7\n    same_chars_chars_idx[8]\
    \ = 8\n    same_chars_chars_idx[9] = 9\n    same_chars_chars_idx[10] = 10\n  \
    \  same_chars_chars_idx[11] = 11\n    same_chars_chars_idx[12] = 12\n    same_chars_chars_idx[13]\
    \ = 13\n    same_chars_chars_idx[14] = 14\n    same_chars_chars_idx[15] = 15\n\
    \    same_chars_chars_idx[16] = 16\n    same_chars_chars_idx[17] = 17\n    same_chars_chars_idx[18]\
    \ = 18\n    same_chars_chars_idx[19] = 19\n    same_chars_chars_idx[20] = 20\n\
    \    same_chars_chars_idx[21] = 21\n    same_chars_chars_idx[22] = 22\n    same_chars_chars_idx[23]\
    \ = 23\n    same_chars_chars_idx[24] = 24\n    same_chars_chars_idx[25] = 25\n\
    \    same_chars_chars_idx[26] = 26\n    same_chars_chars_idx[27] = 27\n    same_chars_chars_idx[28]\
    \ = 28\n    same_chars_chars_idx[29] = 29\n    same_chars_chars_idx[30] = 30\n\
    \    same_chars_chars_idx[31] = 31\n    same_chars_chars_idx[32] = 32\n    same_chars_chars_idx[33]\
    \ = 33\n    same_chars_chars_idx[34] = 34\n    same_chars_chars_idx[35] = 35\n\
    \    same_chars_chars_idx[36] = 36\n    same_chars_chars_idx[37] = 37\n    same_chars_chars_idx[38]\
    \ = 38\n    same_chars_chars_idx[39] = 39\n    same_chars_chars_idx[40] = 40\n\
    \    same_chars_chars_idx[41] = 41\n    same_chars_chars_idx[42] = 42\n    same_chars_chars_idx[43]\
    \ = 43\n    same_chars_chars_idx[44] = 44\n    same_chars_chars_idx[45] = 45\n\
    \    same_chars_chars_idx[46] = 46\n    same_chars_chars_idx[47] = 47\n    same_chars_chars_idx[48]\
    \ = 48\n    same_chars_chars_idx[49] = 49\n    same_chars_chars_idx[50] = 50\n\
    \    same_chars_chars_idx[51] = ", "    same_chars(s0, s1) || same_chars(s1, s0)\n\
    end", "    same_chars_chars_idx::Array{Int,1} = zeros(Int, length(s0))\n    same_chars_chars_idx[1:end-1]\
    \ .= find_chars(s0, s1)\n    same_chars_chars_idx[end] .= length(s0)\n    same_chars_chars_idx[end+1]\
    \ .= length(s1)\n    same_chars_chars_idx[end+2] .= length(s0)\n    same_chars_chars_idx[end+3]\
    \ .= length(s1)\n    same_chars_chars_idx[end+4] .= length(s0)\n    same_chars_chars_idx[end+5]\
    \ .= length(s1)\n    same_chars_chars_idx[end+6] .= length(s0)\n    same_chars_chars_idx[end+7]\
    \ .= length(s1)\n    same_chars_chars_idx[end+8] .= length(s0)\n    same_chars_chars_idx[end+9]\
    \ .= length(s1)\n    same_chars_chars_idx[end+10] .= length(s0)\n    same_chars_chars_idx[end+11]\
    \ .= length(s1)\n    same_chars_chars_idx[end+12] .= length(s0)\n    same_chars_chars_idx[end+13]\
    \ .= length(s1)\n    same_chars_chars_idx[end+14] .= length(s0)\n    same_chars_chars_idx[end+15]\
    \ .= length(s1)\n    same_chars_chars_idx[end+16] .= length(s0)\n    same_chars_chars_idx[end+17]\
    \ .= length(s1)\n    same_chars_chars_idx[end+18] .= length(s0)\n    same_chars_chars_idx[end+19]\
    \ .= length(s1)\n    same_chars_chars_idx[end+20] .= length(s0)\n    same_chars_chars_idx[end+21]\
    \ .= length(s1)\n    same_chars_chars_idx[end+22] .= length(s0)\n    same_chars_chars_idx[end+23]\
    \ .= length(s1)\n    same_chars_chars_idx[end+24] .= length(s0)\n    same_chars_chars_idx[end+25]\
    \ .= length(s1)\n    same_chars_chars_idx[end+26] .= length(s0)\n    same_chars_chars_idx[end+27]\
    \ .= length(s1)\n    same_chars_chars_idx[end+28] .= length(s0)\n    same_chars_chars_idx[end+29]\
    \ .= length(s1)\n    ", "    same_chars = true\n    for c in s0:\n        if c\
    \ not in s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    len = length(s0)\n\
    \    if len != length(s1)\n        return false\n    for i = 1:len\n        if\
    \ s0[i] != s1[i]\n            return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars(s0,\
    \ s1) = length(s0) == length(s1) && all(char(s0) == char(s1) for char in s0)\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1, 0)\nend", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend", "    \n    same_chars = true\n    \n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    \n    same_chars = true\n    for c in s0:\n  \
    \      if c not in s1:\n            same_chars = false\n            break\n  \
    \  return same_chars\nend", "    same_chars_chars_ = same_chars_chars_(s0, s1)\n\
    \    same_chars_chars_ = same_chars_chars_ or (same_chars_chars_ == 0 and same_chars_chars_\
    \ == 1)\n    return same_chars_chars_\nend", "    same_chars(s0, s1, 0)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if two words are anagrams\
    \ of each other. An anagram is a word that is the same as the original word but\
    \ with all the letters rearranged so that all the letters are in the same order.",
  "    if s0 == s1 then true else false\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns true if the string contains any uppercase\
    \ letter and false otherwise.", "    if s0 == s1 then true else false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    \n    if length(s0)\
    \ == length(s1)\n        true\n    else\n        false\n    end\nend", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        return false\n    \n    i = 0\n    while i < len0\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    \n    return true\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of words\
    \ in a string.", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0)\
    \ == char(s1) for char in s0)\nend", "    \n    same_chars = true\n    \n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    \n    return same_chars\nend", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        return false\n    elseif len0 ==\
    \ 0\n        return true\n    else\n        chars = chars(s0)\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]", "    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend", "    if s0 == s1 then return true\n    else if s0\
    \ == \"\" then return false\n    else if s1 == \"\" then return false\n    else\
    \ if s0 == s1[1..] then return true\n    else if s1 == s1[1..] then return true\n\
    \    else return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   if length(s0) != length(s1) \n        then false \n        else if length(s0)\
    \ == 0 \n            then true \n            else if s0[0] != s1[0] \n       \
    \         then false \n                else same_chars(s0[1:], s1[1:])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1)\
    \ = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 1\n    same_", "    same_chars_chars_ = same_chars_chars_(s0, s1)\n  \
    \  same_chars_chars_ = same_chars_chars_ or same_chars_chars_(s1, s0)\n    return\
    \ same_chars_chars_\nend", "    \n    if s0 == s1 \n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return false\n \
    \   else if s1 == \"\"\n        then return false\n    else if s0 == s1\n    \
    \    then return true\n    else if s0 == \"\"\n        then return false\n   \
    \ else if s1 == \"\"\n        then return false\n    else if s0 == s1\n      \
    \  then return true\n    else if s0 == \"\"\n        then return false\n    else\
    \ if s1 == \"\"\n        then return false\n    else if s0 == s1\n        then\
    \ return true\n    else if s0 == \"\"\n        then return false\n    else if\
    \ s1 == \"\"\n        then return false\n    else if s0 == s1\n        then return\
    \ true\n    else if s0 == \"\"\n        then return false\n    else if s1 == \"\
    \"\n        then return false\n    else if s0 == s1\n        then return true\n\
    \    else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n \
    \       then return false\n    else if s0 == s1\n        then return true\n  \
    \  else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n   \
    \     then return false\n    else if s0 == s1\n        then return true\n    else\
    \ if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n        then\
    \ return false\n    else if s0 == s1\n        then return true\n    else if s0\
    \ == \"\"\n        then return false\n    else if s1 == \"\"\n        then return\
    \ false\n    else if s0 == s1\n        then return true\n    else if s0 == \"\"\
    \n        then return false\n    else if s1 == \"\"\n        then return false\n\
    \    else if s0 == s1\n        then return true\n    else if s0 == \"\"\n    \
    \    then return false\n    else if s1 == \"\"\n        then return false\n  \
    \  else if s0 == s1\n        then return true\n    else if s0 == \"\"\n      \
    \  then return false\n    else if s1 == \"\"\n        then return false\n    else\
    \ if s0 == s1\n        then return true\n    else if s0 == \"\"\n        then\
    \ return false\n    else if s1 == \"\"\n        then return false\n    else if\
    \ s0 == s1\n        then return true\n    else if s0 == \"\"\n", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    \n    if length(s0) != length(s1) \n        then\
    \ false\n    else if length(s0) == 0 \n        then true\n    else if length(s0)\
    \ == 1 \n        then s0 == s1\n    else if length(s0) == 2 \n        then s0\
    \ == s1\n    else if length(s0) == 3 \n        then s0 == s1\n    else if length(s0)\
    \ == 4 \n        then s0 == s1\n    else if length(s0) == 5 \n        then s0\
    \ == s1\n    else if length(s0) == 6 \n        then s0 == s1\n    else if length(s0)\
    \ == 7 \n        then s0 == s1\n    else if length(s0) == 8 \n        then s0\
    \ == s1\n    else if length(s0) == 9 \n        then s0 == s1\n    else if length(s0)\
    \ == 10 \n        then s0 == s1\n    else if length(s0) == 11 \n        then s0\
    \ == s1\n    else if length(s0) == 12 \n        then s0 == s1\n    else if length(s0)\
    \ == 13 \n        then s0 == s1\n    else if length(s0) == 14 \n        then s0\
    \ == s1\n    else if length(s0) == 15 \n        then s0 == s1\n    else if length(s0)\
    \ == 16 \n        then s0 == s1\n    else if length(s0) == 17 \n        then s0\
    \ == s1\n    else if length(s0) == 18 \n        then s0 == s1\n    else if length(s0)\
    \ == 19 \n        then s0 == s1\n    else if length(s0) == 20 \n        then s0\
    \ == s1\n    else if length(s0) == 21 \n        then s0 == s1\n    else if length(s0)\
    \ == 22 \n        then s0 == s1\n    else if length(s0) == 23 \n        then s0\
    \ == s1\n    else if length(s0) == 24 \n        then s0 == s1\n    else if length(s0)\
    \ == 25 \n        then s0 == s1\n    else if length(s0) == 26 \n        then s0\
    \ == s1\n    else if length(s0) == 27 \n        then s0 == s1\n    else if length(s0)\
    \ == 28 \n        then s0 == s1\n    else if length(s0) == 29 \n        then s0\
    \ == s1\n    else if length(s0) == 30 \n        then s0 == s1\n    else if length(s0)\
    \ == 31 \n        then s0 == s1\n    else if length(s0) == 32 \n        then s0\
    \ == s1\n    else if length", "    same_chars = true\n    for c in s0:\n     \
    \   if c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    same_chars = true\n    for c in s0:\n        if c not\
    \ in s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    \n    same_chars = true\n    \n    for (c0, c1)\
    \ in zip (s0, s1) do\n        if c0 != c1 then\n            same_chars = false\n\
    \            break\n    end\n    \n    return same_chars\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nFor example, if the string \"abcabcbb\" contains the substring\
    \ \"ab\" then the function should return 3.\nIf the string \"abcabcbb\" contains\
    \ the substring \"abc\" then the function should return 3.\nIf the string \"abcabcbb\"\
    \ contains the substring \"bbbb\" then the function should return 0.\nIf the string\
    \ \"abcabcbb\" does not contain the substring \"ab\" then the function should\
    \ return 0.\nIf the string \"abcabcbb\" does not contain the substring \"abc\"\
    \ then the function should return 0.\nIf the string \"abcabcbb\" does not contain\
    \ the substring \"bbbb\" then the function should return 0.\nIf the string \"\
    abcabcbb\" contains the substring \"bbbbb\" then the function should return 1.\n\
    If the string \"abcabcbb\" contains the substring \"bbbbbb\" then the function\
    \ should return 2.\nIf the string \"abcabcbb\" contains the substring \"bbbbbbbb\"\
    \ then the function should return 3.\nIf the string \"abcabcbb\" does not contain\
    \ the substring \"bbbbb\" then the function should return 0.\nIf the string \"\
    abcabcbb\" does not contain the substring \"bbbbbb\" then the function should\
    \ return 0.\nIf the string \"abcabcbb\" does not contain the substring \"bbbbbbbb\"\
    \ then the function should return 0.\nIf the string \"abcabcbb\" contains the\
    \ substring \"bbbbbbbbb\" then the function should return 4.\nIf the string \"\
    abcabcbb\" does not contain the substring \"bbbbbbbbb\" then the function should\
    \ return 0.\nIf the string \"abcabcbb\" does not contain the substring \"bbbbbbbbbb\"\
    \ then the function should return 0.\nIf the string \"abcabcbb\" does not contain\
    \ the substring \"bbbbbbbbbbb\" then the function should return 0.\nIf the string\
    \ \"abcabcbb\" does not contain the substring \"bbbbbbbbbbbb\" then the function\
    \ should return 0.\nIf the string \"abcabcbb\" does not contain the substring\
    \ \"bbbbbbbbbbbbb\" then the function should return 0.\nIf the string \"abcabcbb\"\
    \ does not contain the substring \"bbbbbbbbbbbbbb\" then the function should return\
    \ 0.\nIf the string \"abcabcbb\" does not contain the substring \"bbbbbbbbbbbbbbb\"\
    \ then the function should ", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(s0[c]) for c in s0)\nend", "    same_chars = true\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len1 = length(s1)\n    len2 = length(s2)\n   \
    \ if len1 != len2\n        return false\n    elseif len1 == 0\n        return\
    \ true\n    else\n        chars1 = split(s0, \"\")\n        chars2 = split(s1,\
    \ \"\")\n        for c1, c2 in zip(chars1, chars2)\n            if c1 != c2\n\
    \                return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that checks if two words are anagrams\
    \ of each other. An anagram is a word that has the same letters in alphabetical\
    \ order.", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    same_chars_chars_idx::Array{Int,1} = zeros(Int, length(s0))\n\
    \    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 1\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 2\n    same_chars_chars_idx[findall(s1\
    \ .== s0)] = 2\n    same_chars_chars_idx[findall(s0 .== s1)] = 1\n    same_chars_chars_idx[findall(s1\
    \ .== s", "    same_chars(s0, s1, 0)\nend", "    same_chars = true\n    for c\
    \ in s0:\n        if c not in s1:\n            same_chars = false\n          \
    \  break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0)\
    \ == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    if s0 == \"\" and s1 == \"\" \n    then return true\n\
    \    else if s0 == \"\" and s1 !=\"\" \n    then return false\n    else if s0\
    \ != \"\" and s1 == \"\" \n    then return false\n    else if s0 != \"\" and s1\
    \ !=\"\" \n    then return false\n    else if s0 == s1 \n    then return true\n\
    \    else if s0 == \"\" and s1 !=\"\" \n    then return false\n    else if s0\
    \ != \"\" and s1 == \"\" \n    then return false\n    else if s0 != \"\" and s1\
    \ !=\"\" \n    then return false\n    else if s0 == \"\" and s1 !=\"\" \n    then\
    \ return false\n    else if s0 != \"\" and s1 == \"\" \n    then return false\n\
    \    else if s0 != \"\" and s1 !=\"\" \n    then return false\n    else if s0\
    \ == \"\" and s1 !=\"\" \n    then return false\n    else if s0 != \"\" and s1\
    \ == \"\" \n    then return false\n    else if s0 != \"\" and s1 !=\"\" \n   \
    \ then return false\n    else if s0 == \"\" and s1 !=\"\" \n    then return false\n\
    \    else if s0 != \"\" and s1 == \"\" \n    then return false\n    else if s0\
    \ != \"\" and s1 !=\"\" \n    then return false\n    else if s0 == \"\" and s1\
    \ !=\"\" \n    then return false\n    else if s0 != \"\" and s1 == \"\" \n   \
    \ then return false\n    else if s0 != \"\" and s1 !=\"\" \n    then return false\n\
    \    else if s0 == \"\" and s1 !=\"\" \n    then return false\n    else if s0\
    \ != \"\" and s1 == \"\" \n    then return false\n    else if s0 != \"\" and s1\
    \ !=\"\" \n    then return false\n    else if s0 == \"\" and s1 !=\"\" \n    then\
    \ return false\n    else if s0 != \"\" and s1 == \"\" \n    then return false\n\
    \    else if s0 != \"\" and s1 !=\"\" \n    then return false\n    else if s0\
    \ == \"\" and s1 !=\"\" \n    then return false\n    else if s0 != \"\" and s1\
    \ == \"\" \n    then return false\n    else if s0 != \"\" and s1 !=\"\" \n   \
    \ then return false\n    else if s0 == \"\" and s1 !=\"\" \n    then return ",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c in range(length(s0)))\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    \n    if length(s0) != length(s1)\n        return false\n \
    \   \n    i = 0\n    \n    while i < length(s0)\n        if s0[i] != s1[i]\n \
    \           return false\n        i += 1\n    \n    return true\nend", "    if\
    \ s0 == s1 \n    then true \n    else false \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = 0 < same_chars(s0, s1) &&\
    \ same_chars(s1, s0)\nend", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(s0[i .. i+1]) || char(c) == char(s1[i .. i+1]) for (i,\
    \ c) in enumerate(s0))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c in s0)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_",
  "    same_chars_chars_idx::Array{Int,1} = Array{Int,1}(undef, 0)\n    same_chars_chars_idx[same_chars_chars_idx\
    \ == 0] = 1:length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+1]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+2]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+3]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+4]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+5]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+6]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+7]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+8]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+9]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+10]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+11]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+12]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+13]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+14]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+15]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+16]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+17]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+18]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+19]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+20]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+21]\
    \ = length(s0)\n    same_chars_chars_idx[same_chars_chars_idx == length(s0)+22]\
    \ = ", "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    len = length(s0)\n    len2 = length(s1)\n    if len != len2\n\
    \        return false\n    elseif len == 0\n        return true\n    elseif len\
    \ == 1\n        return s0 == s1\n    else\n        chars = \"\"\n        for i\
    \ in s0:\n            chars = chars + i\n        for i in s1:\n            if\
    \ chars == i\n                return true\n            else\n                chars\
    \ = chars + i\n        return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    same_chars(s0, s1, 0)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    if s0 == s1 \n        then true \n        else\
    \ false \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    if length(s0) != length(s1) \n        then false\n\
    \        else if length(s0) == 0 \n            then true\n            else if\
    \ length(s0) == 1 \n                then s0 == s1\n                else if length(s0)\
    \ == 2 \n                    then s0 == s1 || s1 == s0\n                    else\
    \ if length(s0) == 3 \n                        then s0 == s1 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0\
    \ || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1\
    \ == s0 || s1 == s0 || s1 == s0 || s1 == s0 || s1 == s0 || ", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1) =\
    \ length(s0) == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1) =\
    \ length(s0) == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars_chars_idx::Array{Int,1}\
    \ = zeros(Int, length(s0))\n    for (i,c) in enumerate(s0)\n        same_chars_chars_idx[i]\
    \ = same_chars_chars_idx[i] + (c == s1[i])\n    end\n    return same_chars_chars_idx\
    \ == length(s0)\nend", "    same_chars_chars_idx::Array{Int,1} = zeros(Int, length(s0))\n\
    \    for (i,c) in enumerate(s0)\n        same_chars_chars_idx[i] = same_chars_chars_idx[i]\
    \ + 1 if c == s1[i] else 0\n    return same_chars_chars_idx == length(s0)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend", "    len0 = length(s0)\n\
    \    len1 = length(s1)\n    if len0 != len1\n        return false\n    for (i0,\
    \ i1) in zip(xrange(len0), xrange(len1))\n        if s0[i0] != s1[i1]\n      \
    \      return false\n    return true\nend\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n\
    \    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0, s1)\n    same_chars(s0,\
    \ s1)\n    same_char", "    if s0 == s1 \n        then true\n        else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0, s1) =\
    \ length(s0) == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1, 0)\nend", "    same_chars(s0, s1, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    len = length(s0)\n\
    \    len2 = length(s1)\n    if len == len2\n        for (i1,c1) in enumerate(cat(s0))\n\
    \            for (i2,c2) in enumerate(cat(s1))\n                if c1 == c2\n\
    \                    true\n                else\n                    false\n \
    \   else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    same_chars(s0, s1) = length(s0) == length(s1)\n \
    \   for (a, b) in zip(s0, s1):\n        if a != b\n            return false\n\
    \    return true\nend", "    same_chars = true\n    for c in s0:\n        if c\
    \ not in s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend", "    len = length(s0)\n  \
    \  if len != length(s1)\n        return false\n    \n    i = 0\n    while i <\
    \ len\n        if s0[i] != s1[i]\n            return false\n        i += 1\n \
    \   return true\nend\n</cell>\n<text>\nExercise 2: Write a function that checks\
    \ if two words are anagrams of each other.\nHint: Use same_chars to check anagrams.",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.0>",
  "    same_chars(s0, s1, 0)\nend\n</cell>\n<code language=julia-1.3>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    if s0 == s1 \n        then return true\n        else return false\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a word is palindrome\
    \ or not.\nA palindrome is a word that is the same forwards and backwards.\nFor\
    \ example \"racecar\", \"racecars\", \"racecarc\", and \"racecarca\" are palindromes.\n\
    Write a function that checks if a word is palindrome or not.\nA palindrome is\
    \ a word that is the same forwards and backwards.\nFor example \"racecar\", \"\
    racecars\", \"racecarc\", and \"racecarca\" are palindromes.\nWrite a function\
    \ that checks if a word is palindrome or not.\nA palindrome is a word that is\
    \ the same forwards and backwards.\nFor example \"racecar\", \"racecars\", \"\
    racecarc\", and \"racecarca\" are palindromes.\nWrite a function that checks if\
    \ a word is palindrome or not.\nA palindrome is a word that is the same forwards\
    \ and backwards.\nFor example \"racecar\", \"racecars\", \"racecarc\", and \"\
    racecarca\" are palindromes.\nWrite a function that checks if a word is palindrome\
    \ or not.\nA palindrome is a word that is the same forwards and backwards.\nFor\
    \ example \"racecar\", \"racecars\", \"racecarc\", and \"racecarca\" are palindromes.\n\
    Write a function that checks if a word is palindrome or not.\nA palindrome is\
    \ a word that is the same forwards and backwards.\nFor example \"racecar\", \"\
    racecars\", \"racecarc\", and \"racecarca\" are palindromes.\nWrite a function\
    \ that checks if a word is palindrome or not.\nA palindrome is a word that is\
    \ the same forwards and backwards.\nFor example \"racecar\", \"racecars\", \"\
    racecarc\", and \"racecarca\" are palindromes.\nWrite a function that checks if\
    \ a word is palindrome or not.\nA palindrome is a word that is the same forwards\
    \ and backwards.\nFor example \"racecar\", \"racecars\", \"racecarc\", and \"\
    racecarca\" are palindromes.\nWrite a function that checks if a word is palindrome\
    \ or not.\nA palindrome is a word that is the same forwards and backwards.\nFor\
    \ example \"racecar\", \"racecars\", \"racecarc\", and \"racecarca\" are palindro",
  "    len1 = length(s1)\n    len2 = length(s2)\n    if len1 != len2\n        return\
    \ false\n    elseif len1 == 0\n        return true\n    else\n        return all(char1\
    \ == char2 for char1, char2 in zip(cat(s0), cat(s1)))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nIf the string has zero characters, return 0.\nIf the string\
    \ has one character, return 1.\nIf the string has two characters, return 2.\n\
    If the string has three characters, return 3.\nIf the string has four characters,\
    \ return 4.\nIf the string has five characters, return 5.\nIf the string has six\
    \ characters, return 6.\nIf the string has seven characters, return 7.\nIf the\
    \ string has eight characters, return 8.\nIf the string has nine characters, return\
    \ 9.\nIf the string has ten characters, return 10.\nIf the string has eleven characters,\
    \ return 11.\nIf the string has twelve characters, return 12.\nIf the string has\
    \ thirteen characters, return 13.\nIf the string has fourteen characters, return\
    \ 14.\nIf the string has fifteen characters, return 15.\nIf the string has sixteen\
    \ characters, return 16.\nIf the string has seventeen characters, return 17.\n\
    If the string has eighteen characters, return 18.\nIf the string has nineteen\
    \ characters, return 19.\nIf the string has twenty characters, return 20.\nIf\
    \ the string has twenty-one characters, return 21.\nIf the string has twenty-two\
    \ characters, return 22.\nIf the string has twenty-three characters, return 23.\n\
    If the string has twenty-four characters, return 24.\nIf the string has twenty-five\
    \ characters, return 25.\nIf the string has twenty-six characters, return 26.\n\
    If the string has twenty-seven characters, return 27.\nIf the string has twenty-eight\
    \ characters, return 28.\nIf the string has twenty-nine characters, return 29.\n\
    If the string has thirty-one characters, return 30.\nIf the string has thirty-two\
    \ characters, return 31.\nIf the string has thirty-three characters, return 32.\n\
    If the string has thirty-four characters, return 33.\nIf the string has thirty-five\
    \ characters, return 34.\nIf the string has thirty-six characters, return 35.\n\
    If the string has thirty-seven characters, return 36.\nIf the string has thirty-eight\
    \ characters, return 37.\nIf the string has thirty", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len = length(s0)\n    len1 = length(s1)\n    if\
    \ len == len1\n        for (i1,c1) in enumerate(cat(s0))\n            if c1 !=\
    \ cat(s1[i1])\n                return false\n        return true\n    else\n \
    \       return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times each character appears in the\
    \ string.\nFor example, if the string \"abracadabra\" was passed, the function\
    \ should return the following dictionary:", "    same_chars(s0, s1, 0)\nend",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars_chars_idx::Array{Int,1} = zeros(Int, length(s0))\n    for (i,c)\
    \ in enumerate(s0)\n        same_chars_chars_idx[i] = same_chars_chars_idx[i]\
    \ + 1 if c == s1[i] else 0\n    return same_chars_chars_idx == length(s0)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   \n    if length(s0) != length(s1)\n        return false\n    \n    i = 0\n\
    \    while i < length(s0)\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars_chars_idx::Array{Int,1} = zeros(Int, length(s0))\n\
    \    for idx in 1:length(s0)\n        same_chars_chars_idx[idx] = char_idx(s0[idx],\
    \ s1[idx])\n    end\n    same_chars_chars_idx == char_idx(s0, s1)\nend\n</cell>\n\
    <text>\nExercise: Write a function that checks if two words have the same number\
    \ of characters.\nHint: Use same_chars to solve this exercise.", "    same_chars(s0,\
    \ s1) || (s1 == s0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0)\
    \ == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    \n    len0 = length(s0)\n    len1 = length(s1)\n\
    \    \n    if len0 != len1\n        return false\n    \n    i = 0\n    while i\
    \ < len0\n        if s0[i] != s1[i]\n            return false\n        i += 1\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   if s0 == s1 \n        then true\n        else false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    if s0 == s1\
    \ \n        then true \n        else false \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars(s0,\
    \ s1, 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars_chars_(s0, s1)\nend", "    if s0 == s1 then true else false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend", "    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"\n    \n    if s0 == s1:\n        return True\n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1:\n        return False\n   \
    \ \n    i = 0\n    j = 0\n    \n    while i < len0 and j < len1:\n        if s0[i]\
    \ != s1[j]:\n            return False\n        i += 1\n        j += 1\n    \n\
    \    return True\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>", "    same_chars = true\n    for c in s0:\n       \
    \ if c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   if s0 == s1 then return true else return false end\n    \n    if s0 == \"\"\
    \ then return false end\n    if s1 == \"\" then return false end\n    \n    i\
    \ = 0\n    j = i\n    while i < length(s0) and j < length(s1) do\n        if s0[i]\
    \ == s1[j] then return true else return false end\n        i += 1\n        j +=\
    \ 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that checks if a word is palindrome or not.\nHint: You can use the same_chars\
    \ function.", "    len = length(s0)\n    if len != length(s1)\n        return\
    \ false\n    for (i1,c1) in enumerate(cat(s0))\n        for (i2,c2) in enumerate(cat(s1))\n\
    \            if c1 == c2\n                return true\n    return false\nend",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len = length(s0)\n    len1 = length(s1)\n    if\
    \ len == len1\n        for (i0, i1) in zip(xrange(len), xrange(len))\n       \
    \     if s0[i0] != s1[i1]\n                return false\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n   \
    \ if len0 != len1\n        return false\n    else\n        chars = chars(s0)\n\
    \        for c in chars\n            if c != chars(s1)\n                return\
    \ false\n        end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    if s0 == s1 then return true\n    else if s0 ==\
    \ \"\" then return true\n    else if s1 == \"\" then return true\n    else if\
    \ s0 == \"\" then return false\n    else if s1 == \"\" then return false\n   \
    \ else if s0 == s1 then return true\n    else if s0 == \"\" then return false\n\
    \    else if s1 == \"\" then return false\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return false\n    else if s1 == \"\" then return\
    \ false\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ false\n    else if s1 == \"\" then return false\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return false\n    else if s1 == \"\" then\
    \ return false\n    else if s0 == s1 then return true\n    else if s0 == \"\"\
    \ then return false\n    else if s1 == \"\" then return false\n    else if s0\
    \ == s1 then return true\n    else if s0 == \"\" then return false\n    else if\
    \ s1 == \"\" then return false\n    else if s0 == s1 then return true\n    else\
    \ if s0 == \"\" then return false\n    else if s1 == \"\" then return false\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return false\n\
    \    else if s1 == \"\" then return false\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return false\n    else if s1 == \"\" then return\
    \ false\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ false\n    else if s1 == \"\" then return false\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return false\n    else if s1 == \"\" then\
    \ return false\n    else if s0 == s1 then return true\n    else if s0 == \"\"\
    \ then return false\n    else if s1 == \"\" then return false\n    else if s0\
    \ == s1 then return true\n    else if s0 == \"\" then return false\n    else if\
    \ s1 == \"\" then return false\n    else if s0 == s1 then return true\n    else\
    \ if s0 == \"\" then return false\n    else if s1 == \"\" then return false\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return false\n\
    \    else if s1 == \"\" then return ", "    len0 = length(s0)\n    len1 = length(s1)\n\
    \    if len0 != len1\n        return false\n    else\n        for i in 0..len0\n\
    \            if s0[i] != s1[i]\n                return false\n    return true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a word is a\
    \ palindrome. Palindromes are words that read the same backward as forward.",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = 0\n    same_chars(s0, s1)\
    \ = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0,\
    \ s1) = 0\n    same_chars(s0, s1) = 1\n    same_chars(s0, s1) = 0\n    same_chars(s0,\
    \ s1) = 1\n    same_chars(s0, s1) = 0\n    same_", "    same_chars_chars_idx::Array{Int,1}\
    \ = Array{Int,1}(undef, length(s0))\n    for idx in 1:length(s0)\n        same_chars_chars_idx[idx]\
    \ = find(s0[idx] == s1[idx], 1)\n    end\n    same_chars_chars_idx == [length(s0)]\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n\
    \    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a character\
    \ appears in the string.\nFor example, if the string were \"abcabc\", the function\
    \ should return 3.\nIf the string were \"ab\", the function should return 1.\n\
    If the string were \"aaaaaa\", the function should return 0.", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.3>", "    same_chars_chars_(s0,\
    \ s1)\nend", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1, 0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    if s0 == s1 then return true else return false end\n    \n\
    \    if s0 == \"\" then return true else return false end\n    if s1 == \"\" then\
    \ return true else return false end\n    \n    if s0 == s1 then return true else\
    \ return false end\n    \n    if s0 == \"\" then return false else return true\
    \ end\n    if s1 == \"\" then return false else return true end\n    \n    if\
    \ s0 == s1 then return true else return false end\n    \n    if s0 == \"\" then\
    \ return false else return true end\n    if s1 == \"\" then return false else\
    \ return true end\n    \n    if s0 == s1 then return true else return false end\n\
    \    \n    if s0 == \"\" then return false else return true end\n    if s1 ==\
    \ \"\" then return false else return true end\n    \n    if s0 == s1 then return\
    \ true else return false end\n    \n    if s0 == \"\" then return false else return\
    \ true end\n    if s1 == \"\" then return false else return true end\n    \n \
    \   if s0 == s1 then return true else return false end\n    \n    if s0 == \"\"\
    \ then return false else return true end\n    if s1 == \"\" then return false\
    \ else return true end\n    \n    if s0 == s1 then return true else return false\
    \ end\n    \n    if s0 == \"\" then return false else return true end\n    if\
    \ s1 == \"\" then return false else return true end\n    \n    if s0 == s1 then\
    \ return true else return false end\n    \n    if s0 == \"\" then return false\
    \ else return true end\n    if s1 == \"\" then return false else return true end\n\
    \    \n    if s0 == s1 then return true else return false end\n    \n    if s0\
    \ == \"\" then return false else return true end\n    if s1 == \"\" then return\
    \ false else return true end\n    \n    if s0 == s1 then return true else return\
    \ false end\n    \n    if s0 == \"\" then return false else return true end\n\
    \    if s1 == \"\" then return false else return true end\n    \n    if s0 ==\
    \ s1 then return true else return false end\n    \n    if s0 == \"\" then return\
    \ false else return true end\n    if s1 == \"\" then return false else return\
    \ true end\n    \n    if s0 == s1 then return true else return false end\n   \
    \ \n    if s0 == \"\" then return false else return true end\n    if s1 == \"\"\
    \ then return false else return true end\n    \n    if s0 == s1 then return true\
    \ else return false end\n    \n    if s0 == \"\" then ", "    same_chars(s0, s1)\
    \ || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0,\
    \ s1, 0)\nend", "    same_chars_chars_ = same_chars_chars_(s0, s1)\n    if same_chars_chars_\
    \ == true\n        same_chars_chars_ = same_chars_chars_(s1, s0)\n    end\n  \
    \  return same_chars_chars_\nend\n</cell>\n<code language=julia-1.4>", "    same_chars(s0,\
    \ s1) = length(s0) == length(s1) && all(char(s0) == char(s1) for char in s0)\n\
    end", "    if length(s0) != length(s1) \n        then return false \n    else\
    \ if length(s0) == 0 \n        then return true \n    else if length(s0) == 1\
    \ \n        then return s0 == s1 \n    else \n        local i::Int = 0 \n    \
    \    local j::Int = 0 \n        local k::Int = 0 \n        local l::Int = 0 \n\
    \        local m::Int = 0 \n        local n::Int = 0 \n        local o::Int =\
    \ 0 \n        local p::Int = 0 \n        local q::Int = 0 \n        local r::Int\
    \ = 0 \n        local s::Int = 0 \n        local t::Int = 0 \n        local u::Int\
    \ = 0 \n        local v::Int = 0 \n        local w::Int = 0 \n        local x::Int\
    \ = 0 \n        local y::Int = 0 \n        local z::Int = 0 \n        local a::Int\
    \ = 0 \n        local b::Int = 0 \n        local c::Int = 0 \n        local d::Int\
    \ = 0 \n        local e::Int = 0 \n        local f::Int = 0 \n        local g::Int\
    \ = 0 \n        local h::Int = 0 \n        local i::Int = 0 \n        local j::Int\
    \ = 0 \n        local k::Int = 0 \n        local l::Int = 0 \n        local m::Int\
    \ = 0 \n        local n::Int = 0 \n        local o::Int = 0 \n        local p::Int\
    \ = 0 \n        local q::Int = 0 \n        local r::Int = 0 \n        local s::Int\
    \ = 0 \n        local t::Int = 0 \n        local u::Int = 0 \n        local v::Int\
    \ = 0 \n        local w::Int = 0 \n        local x::Int = 0 \n        local y::Int\
    \ = 0 \n        local z::Int = 0 \n        local a::Int = 0 \n        local b::Int\
    \ = 0 \n        local c::Int = 0 \n        local d::Int = 0 \n        local e::Int\
    \ = 0 \n        local f::Int = 0 \n        local g::Int = 0 \n        local h::Int\
    \ = 0 \n        local i::Int = 0 \n        local j::Int = 0 \n        local k::Int\
    \ = 0 \n        local l::Int = 0 \n        local m::Int = 0 \n        local n::Int\
    \ = 0 \n        local o::Int = 0 \n        local p::Int = 0 \n        local q::Int\
    \ = 0 \n        local r::Int = 0 \n        local s::Int = 0 \n        local t::Int\
    \ = 0 \n        local u::Int = 0 \n        local v::Int = 0 \n        local w::Int\
    \ = 0 \n", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) ==\
    \ char(s0[c]) for c in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 == len1\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length().", "    len0 = length(s0)\n    len1 = length(s1)\n\
    \    if len0 == len1\n        true\n    else\n        if len0 < len1\n       \
    \     true\n        else\n            if len0 == 0\n                false\n  \
    \          else\n                if s0[len0 - 1] == s1[0]\n                  \
    \  same_chars(s0, s1[len1 - 1])\n                else\n                    false\n\
    \                end\n            end\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nTest your function with some example strings. Use println()\
    \ to print out your results.", "    same_chars(s0, s1) || same_chars(s1, s0)\n\
    end", "    \n    if length(s0) != length(s1) \n        then return false\n   \
    \ else if length(s0) == 0 \n        then return true\n    else if length(s0) ==\
    \ 1 \n        then return s0 == s1\n    else \n        local i::Int = 0\n    \
    \    local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n  \
    \      local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n        local x::Int = 0\n        local y::Int = 0\n\
    \        local z::Int = 0\n        local a::Int = 0\n        local b::Int = 0\n\
    \        local c::Int = 0\n        local d::Int = 0\n        local e::Int = 0\n\
    \        local f::Int = 0\n        local g::Int = 0\n        local h::Int = 0\n\
    \        local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n\
    \        local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n\
    \        local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend", "    if s0 == s1 then\
    \ true else false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n\
    \    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n\
    \    \"\"\"", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.4>", "    len = length(s0)\n    if len == length(s1)\n\
    \        for (i, c) in zip(s0, s1)\n            if i != c\n                return\
    \ false\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    \n    if s0\
    \ == s1 \n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that checks if two words are anagrams\
    \ of each other.", "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n\
    \    if len0 != len1\n        return false\n    \n    i = 0\n    while i < len0\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend", "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n\
    \        return false\n    else\n        for i in 0..len0\n            if s0[i]\
    \ != s1[i]\n                return false\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n   \
    \ true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars(s0, s1) = 0 < same_chars(s0, s1)\nend", "    len0 = length(s0)\n\
    \    len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n\
    \        len0 = length(s0)\n        for i = 1:len0\n            if s0[i] != s1[i]\n\
    \                return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nThe function should ignore spaces and\
    \ punctuation.\nThe function should ignore capitalization.\nThe function should\
    \ ignore case.\nThe function should ignore non-ASCII characters.\nThe function\
    \ should ignore non-ASCII characters and spaces.\nThe function should ignore non-ASCII\
    \ characters and punctuation.\nThe function should ignore non-ASCII characters\
    \ and capitalization.\nThe function should ignore non-ASCII characters and case.\n\
    The function should ignore non-ASCII characters and spaces and punctuation.\n\
    The function should ignore non-ASCII characters and capitalization and spaces.\n\
    The function should ignore non-ASCII characters and capitalization and punctuation.\n\
    The function should ignore non-ASCII characters and capitalization and case.\n\
    The function should ignore non-ASCII characters and capitalization and spaces\
    \ and punctuation.\nThe function should ignore non-ASCII characters and capitalization\
    \ and spaces and case.\nThe function should ignore non-ASCII characters and capitalization\
    \ and spaces and punctuation.\nThe function should ignore non-ASCII characters\
    \ and capitalization and spaces and case.\nThe function should ignore non-ASCII\
    \ characters and capitalization and spaces and punctuation.\nThe function should\
    \ ignore non-ASCII characters and capitalization and spaces and case.\nThe function\
    \ should ignore non-ASCII characters and capitalization and spaces and punctuation.\n\
    The function should ignore non-ASCII characters and capitalization and spaces\
    \ and case.\nThe function should ignore non-ASCII characters and capitalization\
    \ and spaces and punctuation.\nThe function should ignore non-ASCII characters\
    \ and capitalization and spaces and case.\nThe function should ignore non-ASCII\
    \ characters and capitalization and spaces and punctuation.\nThe function should\
    \ ignore non-ASCII characters and capitalization and spaces and case.\nThe function\
    \ should ignore non-ASCII characters and capitalization and spaces and punctuation.\n\
    The function should ignore non-ASCII characters and capitalization and spaces\
    \ and case.\nThe function should ignore non-ASCII characters and capitalization\
    \ and spaces and punctuation.\nThe function should ignore non-ASCII characters\
    \ and capitalization and spaces and case.\nThe function should ignore non-ASCII\
    \ characters and capitalization and spaces and punctuation.\nThe function should\
    \ ignore non-ASCII characters and capitalization and spaces and case.\nThe function\
    \ should ignore non-ASCII characters and capitalization and spaces and punctuation.\n\
    The function should ignore non-ASCII characters and ", "    if s0 == s1 \n   \
    \     then true\n        else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>>\
    \ same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\"\
    , \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n\
    \    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", "    same_chars =\
    \ true\n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0) == char(s1) for\
    \ char in s0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1[1..] then return true\n    if\
    \ s1 == s1[1..] then return true\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0) == char(s1) for\
    \ char in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \"\"\"", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend", "    \n\
    \    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n    \
    \        same_chars = false\n            break\n    \n    return same_chars\n\
    end", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<text>\nExercise 10:\
    \ Write a function that checks if two words are anagrams of each other.\nHint:\
    \ Use same_chars to check if two words are anagrams of each other.", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"\
    dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n\
    \    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"\
    abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    )\n    false\n    \"\"\"", "    same_chars(s0, s1, 0)\nend", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(isequal(s0), s1)\n    same_chars_chars_idx == nothing ? false :\
    \ same_chars_chars_idx[1]\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that counts the number of times a substring appears in a string.\nFor example,\
    \ if the string were \"The quick brown fox jumps over the lazy dog\", the substring\
    \ \"fox\" appears twice in the string, so the function should return 2.", "  \
    \  same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>",
  "    same_chars_chars_idx::Array{Int,1} = Array{Int,1}(undef, length(s0))\n    for\
    \ idx in 1:length(s0)\n        if s0[idx] == s1[idx]\n            same_chars_chars_idx[idx]\
    \ = 1\n        else\n            same_chars_chars_idx[idx] = 0\n        end\n\
    \    end\n    return same_chars_chars_idx == [1 for i in 1:length(s0)]\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    same_chars_chars_idx::Array{Int,1}\
    \ = Array{Int,1}(undef, length(s0))\n    for idx in 1:length(s0)\n        if s0[idx]\
    \ == s1[idx]\n            same_chars_chars_idx[idx] = 1\n        else\n      \
    \      same_chars_chars_idx[idx] = 0\n        end\n    end\n    return same_chars_chars_idx\
    \ == [1 for i in 1:length(s0)]\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    same_chars_chars_idx::Array{Int,1} = Array{Int,1}(undef, length(s0))\n\
    \    for idx in 1:length(s0)\n        if s0[idx] == s1[idx]\n            same_chars_chars_idx[idx]\
    \ = 1\n        else\n            same_chars_chars_idx[idx] = 0\n        end\n\
    \    end\n    return same_chars_chars_idx == [1 for i in 1:length(s0)]\nend\n\"\
    \"\"\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    same_chars_chars_idx::Array{Int,1}\
    \ = Array{Int,1}(undef, length(s0))\n    for idx in 1:length(s0)\n        if s0[idx]\
    \ == s1[idx]\n            same_chars_chars_idx[idx] = 1\n        else\n      \
    \      same_chars_chars_idx[idx] = 0\n        end\n    end\n    return same_chars_chars_idx\
    \ == [1 for i in 1:length(s0)]\nend\n\"\"\"\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    same_chars_chars_idx::Array{Int,1} = Array{Int,1}(undef, length(s0))\n\
    \    for idx in 1:length(s0)\n        if s0[idx] == s1[idx]\n            same_chars_chars_idx[idx]\
    \ = 1\n        else\n            same_chars_chars_idx[idx] = 0\n        end\n\
    \    end\n    return same_chars_chars_idx == [1 for i in 1:length(s0)]\nend\n\"\
    \"\"\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    same_chars_chars_idx::Array{Int,1}\
    \ = Array{Int,1}(undef, length(s0))\n    for idx in 1:length(s0)\n        if s0[idx]\
    \ == s1[idx]\n            same_chars_chars_idx[idx] = 1\n        else\n      \
    \      same_chars_chars_idx[idx] = 0\n        end\n    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
