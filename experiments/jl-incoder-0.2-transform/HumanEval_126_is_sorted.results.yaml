language: jl
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            break\n        if x != lst[findfirst(x\
    \ .< lst)]\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<text>\nis_sorted_by() is a higher-order function that takes a function\
    \ and a list of numbers and returns true if the list of numbers is sorted according\
    \ to that function.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnzrhurb.jl:35\nin expression starting at\
    \ /tmp/tmpjnzrhurb.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n  \
    \  return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxyhrvll.jl:28\nin expression starting at\
    \ /tmp/tmphxyhrvll.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp842gzkoc.jl:33\nin expression starting at\
    \ /tmp/tmp842gzkoc.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n  \
    \  return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpst8hijnz.jl:28\nin expression starting at\
    \ /tmp/tmpst8hijnz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n    for\
    \ x in lst\n        if x < sorted\n            sorted = true\n        else\n \
    \           sorted = false\n        end\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbjsuug86.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpbjsuug86.jl:40\n  Expression: candidate([5])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbjsuug86.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuug86.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbjsuug86.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjsuug86.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuug86.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbjsuug86.jl:43\n  Expression: candidate([1, 2, 3, 4, 5, 6])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbjsuug86.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuug86.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbjsuug86.jl:44\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjsuug86.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjsuug86.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbjsuug86.jl:46\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/sh"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted = true\n \
    \   for x in lst\n        if x < lst[end(x)]\n            sorted = false\n   \
    \     end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp07s3pjgf.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp07s3pjgf.jl:39\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp07s3pjgf.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp07s3pjgf.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp07s3pjgf.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp07s3pjgf.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp07s3pjgf.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp07s3pjgf.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp07s3pjgf.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp07s3pjgf.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp07s3pjgf.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp07s3pjgf.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp07s3pjgf.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            sorted = x < lst[end(x)]\n\
    \        end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3qfl15ou.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp3qfl15ou.jl:40\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qfl15ou.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qfl15ou.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3qfl15ou.jl:43\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qfl15ou.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qfl15ou.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3qfl15ou.jl:46\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qfl15ou.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qfl15ou.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3qfl15ou.jl:47\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qfl15ou.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qfl15ou.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp3qfl15ou.jl:48\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        for (i, x) in enumerate(lst)\n\
    \            if x != sorted[i]\n                return false\n            end\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgwax3mc5.jl:29 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgwax3mc5.jl:34\n\
    in expression starting at /tmp/tmpgwax3mc5.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp842gzkoc.jl:33\nin expression starting at\
    \ /tmp/tmp842gzkoc.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n  \
    \  return all(sorted == lst)\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1, 6]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 7]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbk16e4q.jl:28\nin expression starting at\
    \ /tmp/tmppbk16e4q.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst) == true\n\
    \        return true\n    \n    last = lst[1]\n    for i in lst[2:end]\n     \
    \   if i == last\n            return false\n        last = i\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpbl88yzai.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbl88yzai.jl:1\n\
    in expression starting at /tmp/tmpbl88yzai.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n  \
    \  return sorted == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpupb8g4x_.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpupb8g4x_.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupb8g4x_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupb8g4x_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpupb8g4x_.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupb8g4x_.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupb8g4x_.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n    for\
    \ x in lst\n        if x < lst[end-1]\n            sorted = true\n           \
    \ break\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 2])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 3]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 4]) == false\n@assert is_sorted([5, 3, 2, 4, 5]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@assert is_sorted([5, 3, 2, 4, 7]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@assert is_sorted([5, 3, 2, 4, 9]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@assert is_sorted([5, 3, 2, 4, 11]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 12]) == false\n@assert is_sorted([5, 3, 2, 4, 13]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 14]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 15]) == true\n@assert is_sorted([5, 3, 2, 4, 16]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 17]) == true\n@assert is_sorted([5, 3, 2, 4, 18]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 19]) == true\n@assert is_sorted([5, 3, 2, 4, 20]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 21]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 22]) == false\n@assert is_sorted([5, 3, 2, 4, 23]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@assert is_sorted([5, 3, 2, 4, 25]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 26]) == false\n@assert is_sorted([5, 3, 2, 4, 27]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 28]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 29]) == true\n@assert is_sorted([5, 3, 2, 4, 30]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 31]) == true\n@assert is_sorted([5, 3, 2, 4, 32]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 33]) == true\n@assert is_sorted([5, 3, 2, 4, 34]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 35]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 36]) == false\n@assert is_sorted([5, 3, 2, 4, 37]) == true\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpba3rc4rs.jl:34\nin expression starting at\
    \ /tmp/tmpba3rc4rs.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    seen\
    \ = Set()\n    for x in lst\n        if x in seen\n            sorted = false\n\
    \            break\n        seen.add(x)\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf_4cn7o1.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf_4cn7o1.jl:1\n\
    in expression starting at /tmp/tmpf_4cn7o1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            sorted = x < lst[end]\n  \
    \      end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu56bpg3g.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpu56bpg3g.jl:40\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu56bpg3g.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu56bpg3g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu56bpg3g.jl:43\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu56bpg3g.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu56bpg3g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu56bpg3g.jl:46\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu56bpg3g.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu56bpg3g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu56bpg3g.jl:47\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu56bpg3g.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu56bpg3g.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu56bpg3g.jl:48\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n    for\
    \ x in lst\n        if x == sort(lst)[1]\n            sorted = true\n        \
    \    break\n        end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ is a function that takes a function and a list of numbers and returns whether\
    \ or not the list of numbers is sorted according to the function given.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsysgg0yh.jl:34\nin expression starting at\
    \ /tmp/tmpsysgg0yh.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            sorted = x < lst[end]\n  \
    \      else\n            sorted = sorted && x < lst[end]\n        end\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpru8uqdyt.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpru8uqdyt.jl:40\n  Expression: candidate([5])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpru8uqdyt.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru8uqdyt.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpru8uqdyt.jl:41\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru8uqdyt.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru8uqdyt.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpru8uqdyt.jl:43\n  Expression: candidate([1, 2, 3, 4, 5, 6])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpru8uqdyt.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru8uqdyt.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpru8uqdyt.jl:44\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpru8uqdyt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpru8uqdyt.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpru8uqdyt.jl:47\n  Expression: candidate([1]) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdl"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst) == true\n\
    \        return true\n    \n    sorted = sort(lst)\n    if sorted == lst\n   \
    \     return true\n    \n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3bsi4i3.jl:1\nin expression starting at /tmp/tmpz3bsi4i3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n  \
    \  sorted.length == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmpvmkds1my.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpvmkds1my.jl:33\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvmkds1my.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvmkds1my.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvmkds1my.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvmkds1my.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvmkds1my.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvmkds1my.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvmkds1my.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvmkds1my.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpvmkds1my.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvmkds1my.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvmkds1my.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvmkds1my.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5, 6]) == true\n  type Array has no"
- exit_code: 1
  program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>>\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3,\
    \ 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\
    \"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst) == true\n\
    \        return true\n    \n    sorted = sort(lst)\n    \n    if length(lst) ==\
    \ length(sorted)\n        return true\n    \n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2x0j2m5.jl:1\nin expression starting at /tmp/tmpx2x0j2m5.jl:1\n"
  stdout: ''
