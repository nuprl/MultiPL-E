name: HumanEval_73_smallest_change
language: jl
prompt: "\"\"\"\n    Given an array arr of integers, find the minimum number of elements\
  \ that\n    need to be changed to make the array palindromic. A palindromic array\
  \ is an array that\n    is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n\n    For example:\n    >>>\
  \ smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
  \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n \
  \   \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
  \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t\
  @test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1,\
  \ 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
  \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
completions: ["    \n    smallest_change = 0\n    \n    for x in arr\n        if x\
    \ == reverse(arr)\n            smallest_change = smallest_change + 1\n       \
    \ end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 4\nWrite a function that returns true\
    \ if the given string is a palindrome. For example, \u201CA man, a plan, a canal:\
    \ Panama\u201D is a palindrome.", "    \n    smallest_change = 0\n    \n    for\
    \ x in arr\n        smallest_change = smallest_change + 1 if x == reverse(arr[x])\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a string, find the length of\
    \ the longest substring without repeating characters.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        smallest_change = minimum(smallest_change,\
    \ length(arr) - i)\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        smallest_change = smallest_change + 1\n        if x != reverse(arr)\n\
    \            smallest_change = smallest_change - 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1])\n\
    </cell>\n<text>\nProblem 7: Reverse a string\nGiven a string, find the length\
    \ of the longest substring without reversing the entire string. For example, if\
    \ the given string is \"abracadabra\", the longest substring without reversing\
    \ it is \"abracadabra\".", "    len = length(arr)\n    if len == 0 \n        return\
    \ 0 \n    end\n    \n    min = Inf \n    \n    for i = len-1 downto 1 \n     \
    \   if arr[i] > arr[i-1] \n            min = min + 1 \n        else \n       \
    \     min = min \n        end \n    end \n    return min \nend \n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change + 1 if arr[i] != arr[i+1] \n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = 0\n    for a in arr\n        if a < arr[smallest_change]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len < 2\n\
    \        return 0\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:", "    smallest_change = 0\n    for\
    \ x in arr\n        if x == reverse(arr)\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.0>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.0>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.0>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same\
    \ backwards and forward. For example, 321, 132, 213, 321, 132, 213.", "    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    minimum = 0\n    maximum\
    \ = length(arr)-1\n    \n    while minimum < maximum\n        mid = minimum +\
    \ maximum//2\n        if arr[mid] == arr[minimum]\n            minimum = mid\n\
    \        elseif arr[mid] == arr[maximum]\n            maximum = mid\n        else\n\
    \            if arr[mid] < arr[minimum]\n                minimum = mid\n     \
    \       elseif arr[mid] > arr[maximum]\n                maximum = mid\n      \
    \      else\n                minimum = mid\n                maximum = mid\n  \
    \          end\n        end\n    end\n    \n    return minimum\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest \n        return largest\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    if largest\
    \ == smallest \n        return largest\n    \n    largest = largest + largest\n\
    \    smallest = smallest + smallest\n    \n    if largest == smallest \n     \
    \   return largest\n    \n    largest = largest + largest\n    smallest = smallest\
    \ + smallest\n    \n    if largest == smallest \n        return largest\n    \n\
    \    largest = largest + largest\n    smallest = smallest + smallest\n    \n \
    \   if largest == smallest \n        return largest\n    \n    largest = largest\
    \ + largest\n    smallest = smallest + smallest\n    \n    if largest == smallest\
    \ \n        return largest\n    \n    largest = largest + largest\n    smallest\
    \ = smallest + smallest\n    \n    if largest == smallest \n        return largest\n\
    \    \n    largest = largest + largest\n    smallest = smallest + smallest\n \
    \   \n    if largest == smallest \n        return largest\n    \n    largest =\
    \ largest + largest\n    smallest = smallest + smallest\n    \n    if largest\
    \ == smallest \n        return largest\n    \n    largest = largest + largest\n\
    \    smallest = smallest + smallest\n    \n    if largest == smallest \n     \
    \   return largest\n    \n    largest = largest + largest\n    smallest = smallest\
    \ + smallest\n    \n    if largest == smallest \n        return largest\n    \n\
    \    largest = largest + largest\n    smallest = smallest + smallest\n    \n \
    \   if largest == smallest \n        return largest\n    \n    largest = largest\
    \ + largest\n    smallest = smallest + smallest\n    \n    if largest == smallest\
    \ \n        return largest\n    \n    largest = largest + largest\n    smallest\
    \ = smallest + smallest\n    \n    if largest == smallest \n        return largest\n\
    \    \n    largest = largest + largest\n    smallest = smallest + smallest\n \
    \   \n    if largest == smallest \n        return largest\n    \n    largest =\
    \ largest + largest\n    smallest = smallest + smallest\n    \n    if largest\
    \ == smallest \n        return largest\n    \n    largest = largest + largest\n\
    \    smallest = ", "    len = length(arr)\n    if len == 0 \n        return 0\
    \ \n    end\n    \n    min = Inf \n    \n    for i = len to 1 \n        if arr[i]\
    \ > arr[len-i] \n            min = i - 1 \n            break \n        end\n \
    \   end\n    \n    if min == Inf \n        return 0 \n    end\n    \n    min =\
    \ len - min \n    \n    if arr[min] == arr[len-1] \n        return min \n    end\n\
    \    \n    return min + 1\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   smallest_change = Inf \n    for x in arr \n        if x == reverse(arr[x])\
    \ \n            smallest_change = min(smallest_change, x - 1) \n        else \n\
    \            smallest_change = min(smallest_change, x - 1) \n    end \n    return\
    \ smallest_change \nend \n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 4\nA palindromic number reads the same\
    \ both ways. The largest palindrome made from the product of two 2-digit numbers\
    \ is 9009 = 91 x 99.", "    \n    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr)[1]\n            smallest_change += 1\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    len = length(arr)\n    if len < 2\n   \
    \     return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    end\n    \n    if arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n    end\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+",
  "    len = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if\
    \ len == 1 \n        return 1 \n    \n    mid = len/2\n    \n    if arr[mid] ==\
    \ arr[mid-1] \n        return smallest_change(arr[mid-1:mid+1])\n    \n    if\
    \ arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid])\n  \
    \  \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    return smallest_change(arr[mid-1:mid+1]) + smallest_change(arr[mid+1:mid])\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len ==\
    \ 0 \n        return 0 \n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1] \n        return 1 + smallest_change(arr[mid+1:end]) \n    else\
    \ \n        return smallest_change(arr[mid+1:end]) + 1 \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    len = length(arr)\n    \n    if len ==\
    \ 0 \n        return 0 \n    \n    if len == 1 \n        return 1 \n    \n   \
    \ if arr[len-1] == arr[len-2] \n        return 0 \n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + ", "    len = length(arr)\n    \n    if len == 0 \n        return 0 \n   \
    \ \n    if len == 1 \n        return 1 \n    \n    if arr[len-1] == arr[len-2]\
    \ \n        return 0 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\
    \ \n        return smallest_change(arr[mid-1:-1:1]) + 1 \n    \n    return smallest_change(arr[mid-1:mid:-1])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change =\
    \ 0\n    \n    for a in arr\n        if a < arr[end-1]\n            smallest_change\
    \ = smallest_change + 1\n        else\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i =\
    \ length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 || j >= 0 || k >= 0; i--,\
    \ j--, k++\n        if arr[i] != arr[j]\n            if arr[i] > arr[j]\n    \
    \            smallest_change = k\n            else\n                smallest_change\
    \ = k + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        smallest_change = smallest_change + 1\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change - 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  len = length(arr)\n    if len == 0 \n        return 0 \n    end\n    \n   \
    \ smallest = arr[1]\n    \n    for i = 2 to len \n        if arr[i] < smallest\
    \ \n            smallest = arr[i] \n        end \n    end \n    \n    if smallest\
    \ == arr[1] \n        return 1 \n    end \n    \n    smallest_change(arr[len+1:end-1])\
    \ \n    smallest_change(arr[1:len]) \nend \nsmallest_change(arr::Vector{Int64})\
    \ = smallest_change(arr)\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes an array of integers and\
    \ returns the number of elements in the array that are less than or equal to 100.",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to -1 \n     \
    \   if arr[i] > arr[i+1] \n            smallest_change = smallest_change + 1\n\
    \            arr[i+1] = arr[i]\n            arr[i] = arr[i+1]\n        end\n \
    \   end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] > arr[i\
    \ + 1] \n            smallest_change = i\n            break\n        end\n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change(arr, 0, length(arr)-1)\nend", "    \n    smallest_change =\
    \ Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)[1]\n        \
    \    smallest_change = smallest_change + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend", "    smallest_change = Int64(0)\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    for i = 1:length(arr)\n\
    \        if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len <\
    \ 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    else\n        return smallest_change(arr[mid-1:mid+1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n \
    \   if len == 0 \n        return 0 \n    else \n        min = Inf \n        for\
    \ i = len to 1 \n            if arr[i] < arr[len-i] \n                min = i\
    \ - 1 \n            end \n        end \n        return min \n    end \nend \n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.", "    \n    smallest_change = 0\n    \n    for\
    \ i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] != arr[i+1]\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    len = length(arr)\n    \n    if len <= 1\n        return 0\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[",
  "    len = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not alphanumeric.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest\n        return\
    \ 0\n    \n    largest = largest * 10 + largest\n    smallest = smallest * 10\
    \ + smallest\n    \n    if largest == smallest\n        return largest\n    \n\
    \    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = lar", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is palindrome or not. For example,\
    \ 121 is palindrome and 12321 is not.", "    len = length(arr)\n    min = len\n\
    \    max = len\n    for i = len to 1 by -1\n        if arr[i] > arr[max]\n   \
    \         max = i\n        end\n        if arr[i] < arr[min]\n            min\
    \ = i\n        end\n    end\n    if arr[min] == arr[max]\n        return 0\n \
    \   elseif arr[min] > arr[max]\n        return min + 1\n    else\n        return\
    \ min - 1\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    minimum\
    \ = minimum(arr)\n    \n    changes = 0\n    \n    for x in arr\n        if minimum\
    \ == minimum(arr[minimum:end])\n            changes += 1\n        end\n    end\n\
    \    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements in the array that are greater\
    \ than the average of the array. For example, if the array is [5, 3, 7, 2, 9,\
    \ 1, 4, 6, 8], the function should return 4 because there are 4 elements that\
    \ are greater than the average of the array.", "    \n    minimum = 0\n    maximum\
    \ = length(arr)\n    \n    for  i \u2208 reverse(arr) \n        minimum = minimum\
    \ + 1 if i > minimum \n        maximum = maximum - 1 if i < maximum \n    end\n\
    \    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a given value appears in an array. For example, given [1, 1,\
    \ 2, 3, 4, 4], return 3.", "    \n    len = length(arr)\n    \n    if len < 2\n\
    \        return len\n    end\n    \n    mid = len/2\n    \n    if arr[mid] ==\
    \ arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    end\n    \n\
    \    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+2:mid+3])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-2:mid-3])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+3:mid+4])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-3:mid-4])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+4:mid+5])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-4:mid-5])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+5:mid+6])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-5:mid-6])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+6:mid+7])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-6:mid-7])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+7:mid+8])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-7:mid-8])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+8:mid+9])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-8:mid-9])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+9:mid+10])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smalle", "    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for el in arr\n        if\
    \ el == largest\n            largest = el\n        elseif el == smallest\n   \
    \         smallest = el\n        else\n            changes += 1\n        end\n\
    \    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change + 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            break\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nProblem 3\nGiven an array arr of integers, find the minimum number of\
    \ elements that\nneed to be changed to make the array palindromic. A palindromic\
    \ array is an array that\nis read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    \n    if\
    \ len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    else\n  \
    \      return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 1, j = length(arr) - 1 \n        while i >= 0 and j >= 0 \n            if\
    \ arr[i] > arr[j] \n                arr[i] -= 1\n                smallest_change\
    \ += 1\n            elseif arr[i] < arr[j] \n                arr[j] -= 1\n   \
    \             smallest_change += 1\n            else \n                j -= 1\n\
    \            end\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that checks if a number is palindrome\
    \ or not.", "    \n    smallest_change = 0\n    \n    for x in arr\n        if\
    \ x == reverse(arr)\n            smallest_change += 1\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same\
    \ backwards and forward. For example, 321, 321, 321, 321, 321, 321, 321, 321.",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    change = 0\n    \n    for i = largest\
    \ + 1; smallest >= i\n        change += 1\n        smallest = smallest - i\n \
    \   end\n    \n    return change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    len = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n\
    \    if len == 1 \n        return 1 \n    \n    if arr[len] == arr[len-1] \n \
    \       return 0 \n    \n    if arr[len] == arr[len-1] \n        return 1 \n \
    \   \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid",
  "    \n    len = length(arr)\n    if len == 0 \n        return 0 \n    end\n   \
    \ \n    min = Inf \n    \n    for i = len-1 downto 1 \n        if arr[i] < arr[len-i]\
    \ \n            min = i - 1 \n            break\n        end\n    end\n    \n\
    \    if min == Inf \n        return 0 \n    end\n    \n    count = 0\n    \n \
    \   for i = len-1 downto 1 \n        if arr[i] > arr[len-i] \n            count\
    \ += 1\n            break\n        end\n    end\n    \n    return count\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for x in arr\n        if x == reverse(arr)\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is palindrome or not. For example, 121 is\
    \ palindrome while 121 is not. Write a test case to check your function.", " \
    \   smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindrome\
    \ or not. \nA palindrome is a number that is the same when read from left to right\
    \ and from right to left.", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return 0\n    \n    mid = (largest\
    \ + smallest) / 2\n    \n    if arr[mid] == largest\n        return smallest_change(arr[mid+1:end-1])\
    \ + largest\n    \n    if arr[mid] == smallest\n        return smallest_change(arr[mid+1:end-1])\
    \ + largest\n    \n    return smallest_change(arr[mid+1:end-1]) + largest\nend",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x != reverse(arr[x])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    len = length(arr)\n    \n    if len < 2\n        return 0\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[",
  "    \n    smallest_change = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 8\nA palindromic number reads the same\
    \ backwards and forward. For example, 321 is a palindromic number while 321421\
    \ is a palindromic number.", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that checks if a number is palindrome. For example, 121\
    \ is palindrome, but 12321 is not.", "    \n    smallest_change = 0\n    \n  \
    \  for x in arr\n        if x == reverse(arr)\n            smallest_change +=\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is palindrome or not. For\
    \ example, 121 is palindrome while 12321 is not.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest\n        return\
    \ 0\n    \n    mid = (largest + smallest) / 2\n    \n    if arr[mid] == largest\n\
    \        return smallest_change(arr[mid+1:end]) + largest\n    \n    if arr[mid]\
    \ == smallest\n        return smallest_change(arr[mid+1:end]) + largest\n    \n\
    \    if arr[mid] == largest\n        return smallest_change(arr[mid+1:end]) +\
    \ largest\n    \n    if arr[mid] == smallest\n        return smallest_change(arr[mid+1:end])\
    \ + largest\n    \n    return smallest_change(arr[mid+1:end]) + largest\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5", "    smallest_change = 0\n    smallest_change_len\
    \ = length(arr)\n    for i = 1:length(arr)\n        if arr[i] > arr[length(arr)\
    \ - i]\n            smallest_change = smallest_change + 1\n        elseif arr[i]\
    \ < arr[length(arr) - i]\n            smallest_change = smallest_change - 1\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(arr)\n    if len == 0 \n        return 0 \n    \n    minimum =\
    \ minimum(arr)\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 1 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return 0 \n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum", "    \n    smallest_change = 0\n    \n\
    \    for x in arr\n        smallest_change = smallest_change + 1\n        if x\
    \ != reverse(arr)\n            smallest_change = smallest_change - 1\n       \
    \ end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven an array arr of integers, find\
    \ the minimum number of elements that\nneed to be changed to make the array palindromic.\
    \ A palindromic array is an array that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    \n  \
    \  smallest_change = 0\n    \n    for a in arr\n        smallest_change = smallest_change\
    \ + 1\n        if a != reverse(arr)\n            smallest_change = smallest_change\
    \ - 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nProblem 3\nGiven a string, find the length of the longest substring without\
    \ repeating characters.", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return 0\n    \n    changes = 0\n \
    \   \n    for el in arr\n        if el == largest\n            changes += 1\n\
    \            largest = el\n        elseif el == smallest\n            changes\
    \ += 1\n            smallest = el\n        else\n            changes += 2\n  \
    \      end\n    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    changes = 0\n    \n    for a in arr\n\
    \        if a < smallest \n            changes += 1\n        elseif largest <\
    \ a\n            changes += 1\n        else\n            changes += 2\n      \
    \  end\n    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a\
    \ number is palindrome or not. For example, 121 is a palindrome while 12321 is\
    \ not.", "    \n    smallest_change = 0\n    \n    for x in arr\n        if x\
    \ == reverse(arr[x])\n            smallest_change = smallest_change + 1\n    \
    \    end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a string, find the length of\
    \ the longest substring without repeating characters.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 0])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, ", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    diff = largest - smallest\n    count = 0\n \
    \   for x in arr\n        if x == largest\n            count += 1\n        elseif\
    \ x == smallest\n            count -= 1\n        else\n            count += 1\n\
    \        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 1, j = length(arr)\
    \ - 1, k = 0; i >= 0 || j >= 0 || k >= 0\n        \n        if arr[i] == arr[j]\n\
    \            smallest_change = smallest_change + 1\n            \n           \
    \ if i == 0 && j == 0\n                smallest_change = smallest_change + 1\n\
    \            \n            if i == 0 && j > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if j == 0 && k > 0\n      \
    \          smallest_change = smallest_change + 1\n            \n            if\
    \ i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change +\
    \ 1\n            \n            if i > 0 && j > 0 && k == 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k == 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0\n                smallest_change = smallest_change\
    \ + 1\n            \n            if i > 0 && j > 0 && k > 0\n                smallest_change\
    \ = smallest_change + 1\n            \n            if i > 0 && j > 0 && k > 0\n\
    \                smallest_change = smallest_change + 1\n            \n       \
    \     if i > 0 && j > 0 && k > 0", "    \n    len = length(arr)\n    \n    if\
    \ len == 0 \n        return 0 \n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1] \n        return smallest_change(arr[mid+1:end]) + 1 \n    else\
    \ \n        return smallest_change(arr[mid+1:end]) + 0 \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        smallest_change = smallest_change + 1 if x == reverse(arr[x])\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of times a given number appears in a given array.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest_change = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr)\
    \ - 1 \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] > arr[j] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j] \n            arr[j] = arr[i] \n        end\
    \ \n        \n        if arr[i] < arr[j] \n            smallest_change = smallest_change\
    \ + 1", "    \n    smallest_change = 0\n    \n    for x in arr\n        if x ==\
    \ reverse(arr)\n            smallest_change = smallest_change + 1\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7: Find the\
    \ largest palindrome made from the product of two 3-digit numbers.\nA palindromic\
    \ number reads the same both ways. The largest palindrome made from the product\
    \ of two 2-digit numbers is 9009 = 91 \xD7 99.", "    \n    smallest_change =\
    \ 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    \n    if largest == smallest\n        return 0\n    else\n\
    \        change = largest - smallest\n        if change == 0\n            return\
    \ 1\n        else\n            return change\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a string, find the length of\
    \ the longest substring without repeating characters.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != arr[end-1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for x in arr\n        if x == reverse(arr)\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindromic.\
    \ For example, 121 is a palindromic number.", "    \n    smallest_change = 0\n\
    \    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = Inf \n    for x in\
    \ arr \n        if x == reverse(arr[x]) \n            smallest_change = min(smallest_change,\
    \ length(arr) - x) \n        else \n            smallest_change = min(smallest_change,\
    \ length(arr) - 1) \n    end \n    return smallest_change \nend ", "    \n   \
    \ smallest_change = Inf \n    \n    for x in arr \n        smallest_change = min(smallest_change,\
    \ x - reverse(arr)) \n    end \n    \n    return smallest_change\nend ", "   \
    \ \n    smallest_change = minimum(arr)\n    \n    for a in arr\n        if a <\
    \ smallest_change\n            smallest_change = a\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[i+1]\n            arr[i+1] = arr[i]\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, ",
  "    len = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid-1]) + smallest_change(arr[mid+1:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    diff = largest - smallest\n    count = 0\n \
    \   for x in arr\n        if x == largest || x == smallest\n            count\
    \ += 1\n        else\n            count += diff / x\n        end\n    end\n  \
    \  return count\nend\n</cell>\n<code language=julia-1.4>", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest\n        return\
    \ 0\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n  \
    \  largest = largest * 10\n    smallest = smallest * 10\n    \n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smalle", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    len = length(arr)\n    if len == 0 \n        return 0 \n    end\n\
    \    \n    smallest_change = Int64(0) \n    \n    for i = len-1 downto 1 \n  \
    \      if arr[i] > arr[i-1] \n            smallest_change = smallest_change +\
    \ 1 \n        else \n            smallest_change = smallest_change + 0 \n    \
    \    end \n    end \n    return smallest_change \nend \n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = Int64(0)\n    \n    for i = length(arr) - 2 to -1 \n\
    \        if arr[i] != arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    smallest_change(arr, 0, length(arr)-1)\nend",
  "    \n    len = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n\
    \    if len == 1 \n        return 1 \n    \n    if arr[0] != arr[len-1] \n   \
    \     return 0 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n\
    \        return smallest_change(arr[mid+1:end]) + 1 \n    \n    return smallest_change(arr[mid+1:end])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change =\
    \ Int64(0)\n    \n    for x in arr\n        smallest_change = min(smallest_change,\
    \ count_changes(arr,x))\n    end\n    \n    return smallest_change\nend", "  \
    \  \n    smallest_change = 0\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change + 1 if x == reverse(arr[x])\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of unique\
    \ elements in an array. For example, given [1, 1, 2, 3] it should return 3.",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        elseif arr[i] < arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for a in\
    \ arr\n        if a < arr[smallest_change]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    len = length(arr)\n    \n    if len <= 1\n  \
    \      return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    end\n    \n    if arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n    end\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+2:mid+3])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-2:mid-3])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+3:mid+4])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-3:mid-4])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+4:mid+5])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-4:mid-5])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+5:mid+6])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-5:mid-6])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+6:mid+7])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-6:mid-7])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+7:mid+8])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-7:mid-8])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+8:mid+9])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-8:mid-9])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+9:mid+10])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(",
  "    smallest_change = 0\n    for x in arr\n        if x == reverse(arr)\n     \
    \       smallest_change = smallest_change + 1\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 4\nWrite a function that returns\
    \ the number of palindromic permutations of an input string.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    len = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n\
    \    \n    min = Int.(minimum(arr))\n    \n    if min == 0 \n        return 0\
    \ \n    end\n    \n    if min == 1 \n        return 1 \n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    len = length(arr)\n    if len\
    \ == 0 \n        return 0 \n    \n    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest \n        return 0 \n    \n    mid = len/2\n\
    \    \n    left_half = arr[mid:end]\n    right_half = arr[1:mid]\n    \n    left_half_change\
    \ = smallest_change(left_half)\n    right_half_change = smallest_change(right_half)\n\
    \    \n    if left_half_change == right_half_change \n        return left_half_change\
    \ \n    \n    if left_half_change > right_half_change \n        return left_half_change\
    \ + 1 \n    \n    return right_half_change + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is palindrome or not. \nA palindrome is a number that\
    \ is the same when read from left to right and from right to left.", "    \n \
    \   smallest_change = 0\n    \n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr))\n    for i = 1:smallest_change\n   \
    \     if arr[i] != reverse(arr[i])\n            smallest_change = i\n        \
    \    break\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr)-1 downto 1 do\n  \
    \      if arr[i] > arr[i-1] then\n            smallest_change = i\n          \
    \  break\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x != reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nA palindromic number reads the same backwards and forwards, like 12321. A\
    \ palindromic number reads the same backwards and forwards, like 12321. A palindromic\
    \ number reads the same backwards and forwards, like 12321. A palindromic number\
    \ reads the same backwards and forwards, like 12321. A palindromic number reads\
    \ the same backwards and forwards, like 12321. A palindromic number reads the\
    \ same backwards and forwards, like 12321. A palindromic number reads the same\
    \ backwards and forwards, like 12321. A palindromic number reads the same backwards\
    \ and forwards, like 12321. A palindromic number reads the same backwards and\
    \ forwards, like 12321. A palindromic number reads the same backwards and forwards,\
    \ like 12321. A palindromic number reads the same backwards and forwards, like\
    \ 12321. A palindromic number reads the same backwards and forwards, like 12321.\
    \ A palindromic number reads the same backwards and forwards, like 12321. A palindromic\
    \ number reads the same backwards and forwards, like 12321. A palindromic number\
    \ reads the same backwards and forwards, like 12321. A palindromic number reads\
    \ the same backwards and forwards, like 12321. A palindromic number reads the\
    \ same backwards and forwards, like 12321. A palindromic number reads the same\
    \ backwards and forwards, like 12321. A palindromic number reads the same backwards\
    \ and forwards, like 12321. A palindromic number reads the same backwards and\
    \ forwards, like 12321. A palindromic number reads the same backwards and forwards,\
    \ like 12321. A palindromic number reads the same backwards and forwards, like\
    \ 12321. A palindromic number reads the same backwards and forwards, like 12321.\
    \ A palindromic number reads the same backwards and forwards, ", "    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    \n    min = Int.(ceil(Int.(len/2))) \n\
    \    \n    for i = min to len-1 \n        if arr[i] != reverse(arr[i]) \n    \
    \        min = i \n            break\n    end\n    return min \nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary search tree and a key, find the node in the tree with the\
    \ smallest key greater than or equal to the given key. If such a node does not\
    \ exist, output \"Not found\".", "    len = length(arr)\n    \n    if len < 2\n\
    \        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    end\n    \n    if arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n    end\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    len = length(arr)\n    \n    if\
    \ len == 0 \n        return 0 \n    \n    if len == 1 \n        return 1 \n  \
    \  \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+2:end])\
    \ + ", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >=\
    \ 0 ; i-- \n        \n        if arr[i] != reverse(arr[i]) \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 4\nWrite a function that returns the number of\
    \ palindromic permutations of an array. For example, if the input array is [1,2,3,4,5,6,7],\
    \ then the output should be 7.", "    \n    smallest_change = 0\n    \n    for\
    \ i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.3>", " \
    \   smallest_change = minimum(arr)\n    smallest_change = minimum(smallest_change,\
    \ length(arr))\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements in the vector that are less than\
    \ the mean of the vector.", "    smallest_change = 0\n    smallest_change = minimum(smallest_change,\
    \ length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr) - i)\n   \
    \     end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  len = length(arr)\n    if len == 0 \n        return 0 \n    end\n    \n   \
    \ min = Inf \n    \n    for i = len to 1 \n        if arr[i] < arr[len-i] \n \
    \           min = i - 1 \n            break\n        end\n    end\n    \n    if\
    \ min == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for\
    \ i = len to 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n \
    \           break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] < arr[len-i] \n            min = i - 1 \n            break\n        end\n\
    \    end\n    \n    if min == 0 \n        return 0 \n    end\n    \n    min =\
    \ min + 1\n    \n    for i = len to 1 \n        if arr[i] > arr[len-i] \n    \
    \        min = i - 1 \n            break\n        end\n    end\n    \n    if min\
    \ == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for i\
    \ = len to 1 \n        if arr[i] < arr[len-i] \n            min = i - 1 \n   \
    \         break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] > arr[len-i] \n            min = i - 1 \n            break\n        end\n\
    \    end\n    \n    if min == 0 \n        return 0 \n    end\n    \n    min =\
    \ min + 1\n    \n    for i = len to 1 \n        if arr[i] < arr[len-i] \n    \
    \        min = i - 1 \n            break\n        end\n    end\n    \n    if min\
    \ == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for i\
    \ = len to 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n   \
    \         break\n        end\n    end\n    \n    if min == 0 \n        return\
    \ 0 \n    end\n    \n    min = min + 1\n    \n    for i = len to 1 \n        if\
    \ arr[i] < arr[len-i] \n            min = i - 1 \n            break\n        end\n\
    \    end\n    \n    if min == 0 \n        return 0 \n    end\n    \n    min =\
    \ min + 1\n    \n    for i = len to 1 \n        if arr[i] > arr[len-i] \n    \
    \        min = i - 1 \n            break\n        end\n    end\n    \n    if min\
    \ == 0 \n        return 0 \n    end\n    \n    min = min + 1\n    \n    for i\
    \ = len to 1 \n        if arr[i] < arr[len-i] \n            min = i - ", "   \
    \ \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, ",
  "    len = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n\
    \    \n    left = 0\n    right = len - 1\n    \n    while left < right\n     \
    \   if arr[left] > arr[right]\n            swap!(arr, left, right)\n         \
    \   left += 1\n            right -= 1\n        else\n            left += 1\n \
    \           right -= 1\n        end\n    end\n    \n    left = 0\n    right =\
    \ len - 1\n    \n    while left < right\n        if arr[left] != arr[right]\n\
    \            swap!(arr, left, right)\n            left += 1\n            right\
    \ -= 1\n        else\n            left += 1\n            right -= 1\n        end\n\
    \    end\n    \n    return len - length(arr)\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(arr)\n    if len == 0 \n        return 0 \n    end\n    \n   \
    \ min = Inf \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i]\
    \ \n            min = i - 1 \n            break \n        end \n    end \n   \
    \ \n    if min == Inf \n        return 0 \n    end \n    \n    \n    for i = len-1\
    \ downto 1 \n        if arr[i] > arr[len-i] \n            min = i - 1 \n     \
    \       break \n        end \n    end \n    \n    if min == Inf \n        return\
    \ 0 \n    end \n    \n", "    \n    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary search tree and a node in that tree, find the in-order successor\
    \ of that node. For example, given the following tree:", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   smallest_change = 0\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = length(arr)-2:-1:1\n        if arr[i] > arr[i+1]\n            smallest_change\
    \ = minimum(smallest_change, length(arr)-i)\n        else\n            smallest_change\
    \ = minimum(smallest_change, length(arr)-i+1)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != reverse(arr[i]) \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for x in arr\n        smallest_change = smallest_change if x == reverse(arr[x])\
    \ else smallest_change + 1\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that checks if a number is prime or not. You may want to\
    \ use the sieve of Eratosthenes to speed up the process.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    largest = largest-smallest\n    largest = largest+1\n\
    \    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n \
    \   largest = largest+1\n    largest = largest-1\n    largest = largest+1\n  \
    \  largest = largest-1\n    largest = largest+1\n    largest = largest-1\n   \
    \ largest = largest+1\n    largest = largest-1\n    largest = largest+1\n    largest\
    \ = largest-1\n    largest = largest+1\n    largest = largest-1\n    largest =\
    \ largest+1\n    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n\
    \    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n \
    \   largest = largest-1\n    largest = largest+1\n    largest = largest-1\n  \
    \  largest = largest+1\n    largest = largest-1\n    largest = largest+1\n   \
    \ largest = largest-1\n    largest = largest+1\n    largest = largest-1\n    largest\
    \ = largest+1\n    largest = largest-1\n    largest = largest+1\n    largest =\
    \ largest-1\n    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n\
    \    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n \
    \   largest = largest+1\n    largest = largest-1\n    largest = largest+1\n  \
    \  largest = largest-1\n    largest = largest+1\n    largest = largest-1\n   \
    \ largest = largest+1\n    largest = largest-1\n    largest = largest+1\n    largest\
    \ = largest-1\n    largest = largest+1\n    largest = largest-1\n    largest =\
    \ largest+1\n    largest = largest-1\n    largest = largest+1\n    largest = largest-1\n\
    \    largest = largest+1\n    largest = largest-1\n    largest = largest+1\n",
  "    len = length(arr)\n    if len == 0 \n        return 0\n    \n    minimum =\
    \ minimum(arr)\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == 0 \n        return len\n    \n    minimum\
    \ = minimum - 1\n    \n    if minimum == ", "    \n    len = length(arr)\n   \
    \ if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid] ==\
    \ arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n    \n    if\
    \ arr[mid] == arr[mid-1] and arr[mid+1] == arr[mid]\n        return smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return\
    \ smallest_change(arr[mid+2:end])\n    \n    if arr[mid] == arr[mid-1] and arr[mid+1]\
    \ == arr[mid]\n        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid]\
    \ == arr[mid+1] and arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return\
    \ smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1] and arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid-1:end])\n    \n    if\
    \ arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return\
    \ smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid-1] and arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return\
    \ smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1] and arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]\n        return\
    \ smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1] and arr[mid]\
    \ == arr[mid+1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]", "    smallest_change = Int64(0)\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr)-i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements that need to be changed to make\
    \ the array palindromic. For example, if the input array is [1,2,3,4,5,6,7], then\
    \ your function should return 3.", "    largest = maximum(arr)\n    smallest =\
    \ minimum(arr)\n    \n    if largest == smallest\n        return 0\n    \n   \
    \ largest = largest * 10\n    smallest = smallest * 10\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest / 10\n    smallest = smallest /\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest / 10\n    smallest = smallest / 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest / 10\n\
    \    smallest = smallest / 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest / 10\n    smallest = smallest /\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest / 10\n    smallest = smallest / 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest / 10\n\
    \    smallest = smallest / 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest / 10\n    smallest = smallest /\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest / 10\n    smallest = smallest / 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest / 10\n\
    \    smallest = smallest / 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest / 10\n    smallest = smallest /\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest / 10\n    smallest = smallest / 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest / 10\n\
    \    smallest = smallest / 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    ", "    smallest_change = 0\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-1)\n    for i = smallest_change, length(arr)-1 do\n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of elements in the array that are odd.",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 8\nA palindromic number reads the same\
    \ both ways. The largest palindrome made from the product of two 2-digit numbers\
    \ is 9009 = 91 x 99.", "    \n    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven an input string, find the length of the longest substring without repeating\
    \ characters.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a string, find the length of\
    \ the longest substring without repeating characters.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest \n        return\
    \ 0 \n    \n    mid = ceil(Int64, length(arr)/2)\n    \n    if arr[mid] == arr[mid-1]\
    \ \n        return smallest_change(arr[mid+1:end]) + 1 \n    \n    return smallest_change(arr[mid+1:end])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change =\
    \ 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr) - 1\n  \
    \      \n        if arr[i] > arr[j]\n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[j]\n            arr[j] = arr[k]\n            arr[k]\
    \ = arr[i]\n        end\n        \n        if arr[i] > arr[k]\n            smallest_change\
    \ = smallest_change + 1\n            arr[i] = arr[k]\n            arr[k] = arr[j]\n\
    \            arr[j] = arr[i]\n        end\n        \n        if arr[j] > arr[k]\n\
    \            smallest_change = smallest_change + 1\n            arr[j] = arr[k]\n\
    \            arr[k] = arr[i]\n            arr[i] = arr[j]\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change + 1 if arr[i] != arr[i+1] \n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7: Find the largest palindromic subarray\n\
    Given an array arr of integers, find the largest palindromic subarray. Palindromic\
    \ subarray is a subarray that is a palindromic array (that is, has the same elements\
    \ in the same order as they appear in the array). For example, given the array\
    \ arr = [1, 2, 3, 5, 4, 7, 9, 6], the largest palindromic subarray is [5, 4, 7,\
    \ 9, 6].", "    \n    smallest_change = 0\n    \n    for x in arr\n        if\
    \ x == reverse(arr)\n            smallest_change = smallest_change + 1\n     \
    \   end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = Int64(0)\n    for i = length(arr) - 1, j = length(arr) -\
    \ 2\n        if arr[i] > arr[j]\n            smallest_change = smallest_change\
    \ + 1\n            arr[i] -= 1\n            arr[j] -= 1\n        elseif arr[i]\
    \ < arr[j]\n            smallest_change = smallest_change + 1\n            arr[j]\
    \ -= 1\n            arr[i] -= 1\n        else\n            smallest_change = smallest_change\
    \ + 1\n            arr[i] -= 1\n            arr[j] -= 1\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.0>", "    len\
    \ = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of palindromic permutations of a given string.", "    \n    smallest_change\
    \ = minimum(length(arr)-length(arr))\n    \n    for i = 1:length(arr)\n      \
    \  if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr)-i)\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements in the vector that are less than\
    \ the mean of the vector.", "    \n    len = length(arr)\n    if len == 0 \n \
    \       return 0\n    \n    min = Int.(arr[1])\n    \n    for i = 2 to len\n \
    \       if arr[i] < min \n            min = arr[i]\n        end\n    end\n   \
    \ \n    return min\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a string, find the\
    \ length of the longest substring without repeating characters.", "    \n    smallest_change\
    \ = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)\n         \
    \   smallest_change = smallest_change + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1])\n</cell>\n", "    \n    smallest_change = Int64(0)\n\
    \    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 4\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ x 99.", "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n   \
    \ largest = largest * largest\n    smallest = smallest * smallest\n    \n    largest\
    \ = largest * largest\n    smallest = smallest * smallest\n    \n    largest =\
    \ largest * largest\n    smallest = smallest * smallest\n    \n    largest = largest\
    \ * largest\n    smallest = smallest * smallest\n    \n    largest = largest *\
    \ largest\n    smallest = smallest * smallest\n    \n    largest = largest * largest\n\
    \    smallest = smallest * smallest\n    \n    largest = largest * largest\n \
    \   smallest = smallest * smallest\n    \n    largest = largest * largest\n  \
    \  smallest = smallest * smallest\n    \n    largest = largest * largest\n   \
    \ smallest = smallest * smallest\n    \n    largest = largest * largest\n    smallest\
    \ = smallest * smallest\n    \n    largest = largest * largest\n    smallest =\
    \ smallest * smallest\n    \n    largest = largest * largest\n    smallest = smallest\
    \ * smallest\n    \n    largest = largest * largest\n    smallest = smallest *\
    \ smallest\n    \n    largest = largest * largest\n    smallest = smallest * smallest\n\
    \    \n    largest = largest * largest\n    smallest = smallest * smallest\n \
    \   \n    largest = largest * largest\n    smallest = smallest * smallest\n  \
    \  \n    largest = largest * largest\n    smallest = smallest * smallest\n   \
    \ \n    largest = largest * largest\n    smallest = smallest * smallest\n    \n\
    \    largest = largest * largest\n    smallest = smallest * smallest\n    \n \
    \   largest = largest * largest\n    smallest = smallest * smallest\n    \n  \
    \  largest = largest * largest\n    smallest = smallest * smallest\n    \n   \
    \ largest = largest * largest\n    smallest = smallest * smallest\n    \n    largest\
    \ = largest * largest\n    smallest = smallest * smallest\n    \n    largest =\
    \ largest * largest\n    smallest = ", "    \n    len = length(arr)\n    \n  \
    \  if len < 2\n        return len\n    end\n    \n    mid = len/2\n    \n    if\
    \ arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n   \
    \ end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(",
  "    \n    len = length(arr)\n    \n    if len <= 1\n        return 0\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change + 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            break\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Problem 4\nA palindromic number reads the same backwards and forward. For example,\
    \ 321 is a palindromic number while 321421 is a palindromic number but 12321 is\
    \ not. Find the smallest number of digits that need to be changed to make the\
    \ given number palindromic.", "    \n    smallest_change = Int64(0)\n    \n  \
    \  for i = length(arr) - 1, j = length(arr) - 1, k = length(arr) - 1\n       \
    \ while i >= 0 && j >= 0 && k >= 0\n            if arr[i] > arr[j]\n         \
    \       arr[i] -= 1\n                smallest_change += 1\n            elseif\
    \ arr[j] > arr[k]\n                arr[j] -= 1\n                smallest_change\
    \ += 1\n            elseif arr[k] > arr[i]\n                arr[k] -= 1\n    \
    \            smallest_change += 1\n            else\n                i -= 1\n\
    \                j -= 1\n                k -= 1\n            end\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for a in arr\n        smallest_change\
    \ = smallest_change + 1\n        if a != reverse(arr)\n            smallest_change\
    \ = smallest_change - 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 8\nWrite a function that returns the number of\
    \ elements in the array that do not equal zero.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest \n        return\
    \ 0 \n    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n   \
    \ largest = largest - 1\n    smallest = smallest + 1\n    \n    largest = largest\
    \ + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1\n    smallest\
    \ = smallest + 1\n    \n    largest = largest + 1\n    smallest = smallest - 1\n\
    \    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n    largest\
    \ = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1\n\
    \    smallest = smallest + 1\n    \n    largest = largest + 1\n    smallest =\
    \ smallest - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n    largest\
    \ = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1\n\
    \    smallest = smallest + 1\n    \n    largest = largest + 1\n    smallest =\
    \ smallest - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n    largest\
    \ = largest - 1\n    smallest = smallest + 1\n    \n    largest = largest + 1\n\
    \    smallest = smallest - 1\n    \n    largest = largest - 1\n    smallest =\
    \ smallest + 1\n    \n    largest = largest + 1\n    smallest = smallest - 1\n\
    \    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n    largest\
    \ = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1\n\
    \    smallest = smallest + 1\n    \n    largest = largest + 1\n    smallest =\
    \ smallest - 1\n    \n    largest = largest - 1\n    smallest = smallest + 1\n\
    \    \n    largest = largest + 1\n    smallest = smallest - 1\n    \n    largest\
    \ = largest - 1\n    smallest = smallest + 1\n    \n    largest = largest + 1\n\
    \    smallest = smallest - 1\n    \n    largest = largest - 1\n    smallest =\
    \ smallest + 1\n    \n    largest = largest + 1\n    smallest = smallest - 1\n\
    \    \n    largest = largest - 1\n    smallest = smallest + 1\n    \n    largest\
    \ = largest + 1\n    smallest = smallest - 1\n    \n    largest = largest - 1",
  "    \n    len = length(arr)\n    \n    if len < 2\n        return len\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(",
  "    len = length(arr)\n    if len < 2\n        return 0\n    end\n    mid = len/2\n\
    \    left = arr[mid]\n    right = arr[mid+1]\n    if left == right\n        return\
    \ mid\n    end\n    if left > right\n        left, right = right, left\n    end\n\
    \    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n    if left ==\
    \ right\n        return mid\n    end\n    if left > right\n        left, right\
    \ = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n\
    \    if left == right\n        return mid\n    end\n    if left > right\n    \
    \    left, right = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return mid\n    end\n \
    \   if left > right\n        left, right = right, left\n    end\n    mid = len/2\n\
    \    left = arr[mid]\n    right = arr[mid+1]\n    if left == right\n        return\
    \ mid\n    end\n    if left > right\n        left, right = right, left\n    end\n\
    \    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n    if left ==\
    \ right\n        return mid\n    end\n    if left > right\n        left, right\
    \ = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n\
    \    if left == right\n        return mid\n    end\n    if left > right\n    \
    \    left, right = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return mid\n    end\n \
    \   if left > right\n        left, right = right, left\n    end\n    mid = len/2\n\
    \    left = arr[mid]\n    right = arr[mid+1]\n    if left == right\n        return\
    \ mid\n    end\n    if left > right\n        left, right = right, left\n    end\n\
    \    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n    if left ==\
    \ right\n        return mid\n    end\n    if left > right\n        left, right\
    \ = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n    right = arr[mid+1]\n\
    \    if left == right\n        return mid\n    end\n    if left > right\n    \
    \    left, right = right, left\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return mid\n    end\n \
    \   if left > right\n        left, right = right, left\n    end\n    mid = len/2\n",
  "    len = length(arr)\n    if len == 0 \n        return 0 \n    \n    min = Inf\
    \ \n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[len-i-1] \n   \
    \         min = i - 1 \n            break \n        end \n    end \n    \n   \
    \ if min == Inf \n        return 0 \n    end \n    \n    count = 0 \n    \n  \
    \  for i = len-1 downto 1 \n        if arr[i] != arr[len-i-1] \n            count\
    \ += 1\n            break \n        end \n    end \n    \n    return count \n\
    end \n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n  \
    \  \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 7: Find the longest palindromic substring in arr\nGiven\
    \ an array arr of strings, find the longest palindromic substring in arr. Return\
    \ null if no such substring exists.", "    len = length(arr)\n    \n    if len\
    \ < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    end\n   \
    \ \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid-1])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid-1:mid+1])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+1:mid+3])\n\
    \    end\n    \n    if arr[mid] == arr[mid+3]\n        return smallest_change(arr[mid+2:mid+4])\n\
    \    end\n    \n    if arr[mid] == arr[mid+4]\n        return smallest_change(arr[mid+3:mid+5])\n\
    \    end\n    \n    if arr[mid] == arr[mid+5]\n        return smallest_change(arr[mid+4:mid+6])\n\
    \    end\n    \n    if arr[mid] == arr[mid+6]\n        return smallest_change(arr[mid+5:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+7]\n        return smallest_change(arr[mid+6:mid+8])\n\
    \    end\n    \n    if arr[mid] == arr[mid+8]\n        return smallest_change(arr[mid+7:mid+9])\n\
    \    end\n    \n    if arr[mid] == arr[mid+9]\n        return smallest_change(arr[mid+8:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+10]\n        return smallest_change(arr[mid+9:mid+11])\n\
    \    end\n    \n    if arr[mid] == arr[mid+11]\n        return smallest_change(arr[mid+10:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+12]\n        return smallest_change(arr[mid+11:mid+13])\n\
    \    end\n    \n    if arr[mid] == arr[mid+13]\n        return smallest_change(arr[mid+12:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+14]\n        return smallest_change(arr[mid+13:mid+15])\n\
    \    end\n    \n    if arr[mid] == arr[mid+15]\n        return smallest_change(arr[mid+14:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+16]\n        return smallest_change(arr[mid+15:mid+",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    ", "    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change += 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 7\nA palindromic number reads the same backwards and\
    \ forward. For example, 321, 132, 213, 321, 132, 213.", "    smallest_change(arr,\
    \ 0, length(arr)-1) \nend", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return 0\n    \n    changes = 0\n \
    \   \n    for x in arr\n        if x == largest or x == smallest\n           \
    \ changes += 1\n        else\n            changes += smallest_change(arr[changes:end])\n\
    \    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nThe function above\
    \ is recursive. Let's see how it works:", "    \n    len = length(arr)\n    \n\
    \    if len < 2\n        return len\n    end\n    \n    mid = len/2\n    \n  \
    \  if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(",
  "    len = length(arr)\n    if len == 0 \n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same\
    \ both ways. The largest palindrome made from the product of two 2-digit numbers\
    \ is 9009 = 91 x 99.", "    len = length(arr)\n    if len < 2\n        return\
    \ 0\n    end\n    mid = len/2\n    left = arr[mid-1:end]\n    right = arr[mid+1:end]\n\
    \    if left == reverse(right)\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end]) + smallest_change(arr[mid-1:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert smallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n@assert smallest_change([1, 2, 3, 4, 3, 2, 2]) ==\
    \ 1\n@assert smallest_change([1, 2, 3, 2, 1]) == 0\n</cell>\n<text>\nBacktracking\n\
    The above algorithm is recursive, and can be solved using backtracking. Here is\
    \ a recursive implementation that solves the problem in $O(n^2)$ time.", "   \
    \ \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in an\
    \ array. For example, given [1, 1, 2, 3], return 3.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven an array arr of integers, find the minimum number\
    \ of elements that\nneed to be changed to make the array palindromic. A palindromic\
    \ array is an array that\nis read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i - 1)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != arr[i+1] else smallest_change\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    len = length(arr)\n    if\
    \ len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    end\n   \
    \ \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a\
    \ number is palindrome or not. For example, 121 is palindrome and 12321 is not.",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of times a given value appears in an array.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend", "    \n\
    \    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,2,1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr)-1 downto 1 \n        smallest_change = minimum(smallest_change,\
    \ length(arr)-i)\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the number\
    \ of elements in the array that are greater than or equal to 50. Your function\
    \ should only use loops and conditionals.", "    \n    smallest_change = 0\n \
    \   \n    for a in arr\n        smallest_change = smallest_change + 1\n      \
    \  if a != reverse(arr[a])\n            break\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    smallest_change = 0\n    \n\
    \    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest -\
    \ smallest\n    count = 0\n    for i in arr\n        if i == largest || i == smallest\n\
    \            count += 1\n        elseif i == diff \n            count -= 1\n \
    \       end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2,\
    \ 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 1, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1,\
    \ 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 1, 1,\
    \ 2, 2, 1])\n</cell", "    smallest_change = 0\n    \n    for x in arr\n     \
    \   if x == reverse(arr)\n            smallest_change += 1\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    len = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n\
    \    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:mid+2])\n",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) downto 1 do\n    \
    \    if arr[i] > arr[length(arr)-i] then\n            smallest_change = i\n  \
    \      else\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len <\
    \ 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end", "    \n    smallest_change = Inf\
    \ \n    for i = length(arr) downto 1 \n        if arr[i] > arr[i-1] \n       \
    \     smallest_change = i \n            break \n        end \n    end \n    return\
    \ smallest_change \nend \n</cell>\n<code language=julia-1.5>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i]\
    \ != arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    if largest == 0\n        return largest\n\
    \    \n    if smallest == 0\n        return smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    \n    if smallest == 0\n        return largest\n    \n    if largest\
    \ == smallest\n        return largest\n    \n    if largest == 0\n        return\
    \ smallest\n    ", "    \n    smallest_change = 0\n    \n    for a in arr\n  \
    \      if a < arr[end-1]\n            smallest_change = smallest_change + 1\n\
    \        elseif a > arr[end-1]\n            smallest_change = smallest_change\
    \ - 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that checks if a number is palindrome or not."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
