language: jl
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <text>\nProblem 7\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1q_95rn.jl:50\nin expression starting at\
    \ /tmp/tmpp1q_95rn.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value\n    else\n        smallest_value\n    end\nend\n\
    </cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2uxmnj_.jl:45\nin expression starting at\
    \ /tmp/tmpg2uxmnj_.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if smallest_index\
    \ == -1\n        return [] \n    end\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    if smallest_value % 2 == 0\n        return smallest_value, smallest_index\n\
    \    else\n        smallest_index -= 1\n        smallest_value = arr[smallest_index]\n\
    \        \n        if smallest_value % 2 == 0\n            return smallest_value,\
    \ smallest_index\n        else\n            smallest_index -= 1\n            smallest_value\
    \ = arr[smallest_index]\n            \n            if smallest_value % 2 == 0\n\
    \                return smallest_value, smallest_index\n            else\n   \
    \             smallest_index -= 1\n                smallest_value = arr[smallest_index]\n\
    \                \n                if smallest_value % 2 == 0\n              \
    \      return smallest_value, smallest_index\n                else\n         \
    \           smallest_index -= 1\n                    smallest_value = arr[smallest_index]\n\
    \                    \n                    if smallest_value % 2 == 0\n      \
    \                  return smallest_value, smallest_index\n                   \
    \ else\n                        smallest_index -= 1\n                        smallest_value\
    \ = arr[smallest_index]\n                        \n                        if\
    \ smallest_value % 2 == 0\n                            return smallest_value,\
    \ smallest_index\n                        else\n                            smallest_index\
    \ -= 1\n                            smallest_value = arr[smallest_index]\n   \
    \                         \n                            if smallest_value % 2\
    \ == 0\n                                return smallest_value, smallest_index\n\
    \                            else\n                                smallest_index\
    \ -= 1\n                                smallest_value = arr[smallest_index]\n\
    \                                \n                                if smallest_value\
    \ % 2 == 0\n                                    return smallest_value, smallest_index\n\
    \                                else\n                                    smallest_index\
    \ -= 1\n                                    smallest_value = arr[smallest_index]\n\
    \                                    \n                                    if\
    \ smallest_value % 2 == 0\n                                        return smallest_value,\
    \ smallest_index\n                                    else\n                 \
    \                       smallest_index -= 1\n                                \
    \        smallest_value = arr[smallest_index]\n                              \
    \          \n                                        if smallest_value % 2 ==\
    \ 0\n                                            return smallest_value, smallest_index\n\
    \                                        else\n                              \
    \              smallest_index -= 1\n                                         \
    \   smallest_value = arr[smallest_index]\n                                   \
    \         \n                                            if smallest_value % 2\
    \ == 0\n                                                return smallest_value,\
    \ smallest_index\n                                            else\n         \
    \                                       smallest_index -= 1\n                \
    \                                smallest_value = arr[smallest_index]\n      \
    \                                          \n                                \
    \                if smallest_value % 2 == 0\n                                \
    \                    return smallest_value, smallest_index\n                 \
    \                               else\n                                       \
    \             smallest_index -= 1\n                                          \
    \          smallest_value = arr[smallest_index]\n                            \
    \                        \n                                                  \
    \  if smallest_value % 2 == 0\n                                              \
    \          return \nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2c0awba.jl:1\nin expression starting at /tmp/tmpr2c0awba.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    if\
    \ smallest_index == nothing\n        return Vector{Int64}()\n    else\n      \
    \  return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 7\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dwgdg2t.jl:44\nin expression starting at\
    \ /tmp/tmp6dwgdg2t.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = 0\n    smallest_index = 0\n    \n    for node in\
    \ arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    \n    if smalest_value == 0\n\
    \        return []\n    end\n    \n    return [smalest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven an array representing a binary tree, return\
    \ the levels of the tree in order from top to bottom.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zy36j_9.jl:54\nin expression starting at\
    \ /tmp/tmp7zy36j_9.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    \n    if\
    \ smallest_index == -1 || length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 4\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi4963mr.jl:45\nin expression starting at\
    \ /tmp/tmpdi4963mr.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyxgz3mk3.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpyxgz3mk3.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyxgz3mk3.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxgz3mk3.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxgz3mk3.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpyxgz3mk3.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyxgz3mk3.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxgz3mk3.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxgz3mk3.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpyxgz3mk3.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    \n    \n    return Vector{Int64}([smallest_value, smallest_index])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpduziau25.jl:50

    '
  stdout: "test set: Test Failed at /tmp/tmpduziau25.jl:53\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduziau25.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduziau25.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpduziau25.jl:57\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 2] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduziau25.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduziau25.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = find(even_values == smallest_even_value)[1]\n\
    \    \n    if smallest_even_index == 0 \n        smallest_even_index == length(arr)\n\
    \    end\n    \n    smallest_value = arr[smallest_even_index]\n    \n    return\
    \ [smallest_value, smallest_even_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    Practice 3\nPractice 3 is more challenging than practice 2, but still interesting.\n\
    The goal is to find the smallest even value in a given array.\nThe array is represented\
    \ as a vector with non-negative integer values.\nThe function should return a\
    \ list of two elements: the smallest even value and the index of the smallest\
    \ even value.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjr30y69j.jl:47\nin expression starting at\
    \ /tmp/tmpjr30y69j.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    \n    smallest_even_value = min(even_values)\n\
    \    smallest_even_index = findfirst(x -> x == smallest_even_value, even_values)\n\
    \    \n    if smallest_even_index == -1\n        return Vector{Int64}()\n    \n\
    \    smallest_value = arr[smallest_even_index]\n    \n    smallest_value_and_index\
    \ = Vector{Int64}([smallest_value, smallest_even_index])\n    \n    return smallest_value_and_index\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ugak2fd.jl:1\nin expression starting at /tmp/tmp8ugak2fd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return [] \n    end\n    smallest_value = minimum(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    return smallest_value, smallest_index\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp0q8h8flt.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmp0q8h8flt.jl:48\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot `convert`\
    \ an object of type Tuple{Int64, Int64} to an object of type Vector{Int64}\n \
    \ Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp0q8h8flt.jl:41\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0q8h8flt.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0q8h8flt.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp0q8h8flt.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: Cannot `convert` an object of\
    \ type Tuple{Int64, Int64} to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmp0q8h8flt.jl:41\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0q8h8flt.j"
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n  \
    \  \n    for node in arr[2 : end]\n        if node % 2 == 0\n            if node\
    \ < smalest_value\n                smalest_value = node\n                smalest_index\
    \ = smalest_index + 1\n            else\n                if smalest_index > 1\n\
    \                    return [smalest_value, smalest_index]\n                end\n\
    \            end\n        end\n    end\n    \n    return []\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmplp8j21dc.jl:56

    '
  stdout: "test set: Test Failed at /tmp/tmplp8j21dc.jl:59\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp8j21dc.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp8j21dc.jl:58\ntest set: Test\
    \ Failed at /tmp/tmplp8j21dc.jl:60\n  Expression: candidate([1, 2, 3]) == [2,\
    \ 1]\n   Evaluated: Int64[] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplp8j21dc.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp8j21dc.jl:58\ntest set: Error\
    \ During Test at /tmp/tmplp8j21dc.jl:61\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmplp8j21dc.jl:36\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplp8j21dc.jl:61 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplp8j21dc.jl:58\ntest set:\
    \ Test Failed at /tmp/tmplp8j21dc.jl:62\n  Expression: candidate([5, 0, 3, 0,\
    \ 4, 2]) == [0, 1]\n   Evaluated: [0, 2] == [0, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp8j21dc.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-leve"
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\
    \ || length(even_values) == 0\n        return []\n    else\n        smallest_value\
    \ = min(even_values)\n        smallest_index = find(even_values == smallest_value)[1]\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Practice 3\nWrite a function that returns the number of nodes in a binary search\
    \ tree\nGiven a binary search tree with non-negative integer nodes,\nyour task\
    \ is to return the number of nodes in the tree.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4gb4rft.jl:44\nin expression starting at\
    \ /tmp/tmpk4gb4rft.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x->mod(x,2)==0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    else\n        smallest_even_value = min(even_values)\n\
    \        smallest_index = find(even_values==smallest_even_value,1)[1]\n      \
    \  return [smallest_even_value,smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of nodes in a binary search\
    \ tree with root node root.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinj5u_87.jl:44\nin expression starting at\
    \ /tmp/tmpinj5u_87.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\n\
    Given an array representing a branch of a tree that has non-negative integer nodes\n\
    your task is to pluck one of the nodes and return it.\nThe plucked node should\
    \ be the node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8kn4w5z.jl:51\nin expression starting at\
    \ /tmp/tmph8kn4w5z.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, find the node in the tree that\
    \ has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5an5e6b.jl:44\nin expression starting at\
    \ /tmp/tmpr5an5e6b.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of nodes in a binary search\
    \ tree with root node root.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvpmt6ne.jl:50\nin expression starting at\
    \ /tmp/tmpdvpmt6ne.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = index(even_values, smallest_value)\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree,\
    \ return the level order traversal of its nodes' values. (ie, from left to right,\
    \ level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcuuc9i1.jl:44\nin expression starting at\
    \ /tmp/tmpqcuuc9i1.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [ smallest_value, smallest_index ]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8spgm7u.jl:44\nin expression starting at\
    \ /tmp/tmpa8spgm7u.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    if smallest_index\
    \ == nothing\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 8\nGiven a binary tree\
    \ and a number x, return the number of nodes in the subtree rooted at that node.\
    \ If there is no such subtree, then return 0.\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhagu0qy.jl:44\nin expression starting at\
    \ /tmp/tmpnhagu0qy.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = findall(x -> x % 2 == 0, arr)\n    \n    if isempty(even_values)\n\
    \        return [];\n    else\n        smallest_value = min(even_values)\n   \
    \     smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 7\n\
    Given a binary tree, return the level order traversal of its nodes' values.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib6gi1ca.jl:46\nin expression starting at\
    \ /tmp/tmpib6gi1ca.jl:46\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu_qtyzid.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu_qtyzid.jl:1\n\
    in expression starting at /tmp/tmpu_qtyzid.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x->mod(x,2)==0, arr)\n    even_values = sort(even_values)\n\
    \    smalest_value = even_values[1]\n    smalest_index = find(even_values==smalest_value)[1]\n\
    \    return smalest_value, smalest_index\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ an array representing a branch of a tree that has non-negative integer nodes\n\
    your task is to pluck one of the nodes and return it.\nThe plucked node should\
    \ be the node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rdj1c28.jl:41\nin expression starting at\
    \ /tmp/tmp3rdj1c28.jl:41\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtxllo19.jl:40\nin expression starting at\
    \ /tmp/tmphtxllo19.jl:40\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    \n    if\
    \ smallest_index == -1 || length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 7\nGiven a binary tree and a number x, find and return the node\
    \ in the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xqrnmcx.jl:45\nin expression starting at\
    \ /tmp/tmp4xqrnmcx.jl:45\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return [] \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ai9mt4i.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ai9mt4i.jl:1\n\
    in expression starting at /tmp/tmp8ai9mt4i.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5juzc6c.jl:40\nin expression starting at\
    \ /tmp/tmpx5juzc6c.jl:40\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x->x==smallest_value, even_values)\n     \
    \   return smallest_value, smallest_index\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @test pluck([4, 2, 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([])\
    \ == []\n@test pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nProblem 4\n\
    Given a binary tree and a node value, swap the node value with the node in the\
    \ tree with the same value.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fzrqpby.jl:46\nin expression starting at\
    \ /tmp/tmp3fzrqpby.jl:46\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    plucked_value\
    \ = arr[smallest_index]\n    return [ smallest_value, smallest_index ]\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert pluck([4, 2, 3]) == [2, 1]\n@assert\
    \ pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n@assert pluck([5, 0, 3,\
    \ 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjo5vl_w.jl:45\nin expression starting at\
    \ /tmp/tmpwjo5vl_w.jl:45\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpma0rnexh.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma0rnexh.jl:1\n\
    in expression starting at /tmp/tmpma0rnexh.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = 0\n    smallest_index = 0\n    \n    for node in\
    \ arr\n        if node % 2 == 0\n            if node < smalest_value\n       \
    \         smalest_value = node\n                smallest_index = smallest_index\n\
    \            else\n                if node < smallest_index\n                \
    \    smallest_index = node\n                end\n            end\n        end\n\
    \    end\n    \n    if smallest_index == 0\n        return []\n    end\n    \n\
    \    return [smalest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 4\n\
    Given a binary tree, return the level order traversal of its nodes' values.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_28ncksy.jl:58\nin expression starting at\
    \ /tmp/tmp_28ncksy.jl:58\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_even_value\
    \ = min(even_values)\n    smallest_index = find(x -> x == smallest_even_value,\
    \ even_values)\n    \n    return Vector{Int64}([smallest_even_value, smallest_index])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Practice 3\nLet's practice some more with some more examples. Let's try some more\
    \ examples with different input arrays.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0gbz981.jl:46\nin expression starting at\
    \ /tmp/tmpt0gbz981.jl:46\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 4\nGiven a binary tree and a number x, find x with path compression.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qohc96y.jl:45\nin expression starting at\
    \ /tmp/tmp1qohc96y.jl:45\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<code language=julia-1.5>\n@assert pluck([4, 2,\
    \ 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n\
    @assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Plucking all\
    \ nodes with the smallest even value\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zm30mbj.jl:40\nin expression starting at\
    \ /tmp/tmp_zm30mbj.jl:40\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return []\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 4\nGiven\
    \ a binary tree, return the level order traversal of its nodes' values. (ie, from\
    \ left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81fhlgn9.jl:47\nin expression starting at\
    \ /tmp/tmp81fhlgn9.jl:47\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu_qtyzid.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu_qtyzid.jl:1\n\
    in expression starting at /tmp/tmpu_qtyzid.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return []\n    end\n    \n    smallest_even_value = min(even_values)\n\
    \    smallest_even_index = findfirst(x -> x == smallest_even_value, even_values)\n\
    \    \n    if smallest_even_index == nothing\n        return []\n    end\n   \
    \ \n    return [smallest_even_value, smallest_even_index]\nend\n</cell>\n<text>\n\
    Problem 3\nGiven an array of integers representing a binary tree, return the sum\
    \ of all nodes values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi76jib4h.jl:51\nin expression starting at\
    \ /tmp/tmpi76jib4h.jl:51\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_index = find(x -> x == smallest_even_value,\
    \ even_values)\n        return [smallest_even_value, smallest_index]\n    end\n\
    end\n</cell>\n<text>\nSolution\nLet's see how we solve this problem by implementing\
    \ our own version of pluck.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zo1ufzi.jl:44\nin expression starting at\
    \ /tmp/tmp0zo1ufzi.jl:44\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_even_value\
    \ = minimum(even_values)\n    smallest_even_index = findfirst(x -> x == smallest_even_value,\
    \ even_values)\n    \n    smallest_value = arr[smallest_even_index]\n    \n  \
    \  return smallest_value, smallest_even_index\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    4.3 Plucking all even values\nGiven an array representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck all of the nodes and return\
    \ them in a list.\nThe plucked nodes should be the nodes with the smallest even\
    \ value.\nIf multiple nodes with the same smallest even value are found return\
    \ the node that has smallest index.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmi3v0875.jl:48\nin expression starting at\
    \ /tmp/tmpmi3v0875.jl:48\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\
    \ || length(even_values) == 0\n        return Vector{Int64}()\n    else\n    \
    \    smallest_value = min(even_values)\n        smallest_index = find(even_values\
    \ == smallest_value)[1]\n        return [smallest_value, smallest_index]\n   \
    \ end\nend\n</cell>\n<text>\nProblem 3\nGiven an array representing a branch of\
    \ a tree that has non-negative integer nodes\nyour task is to pluck one of the\
    \ nodes and return it.\nThe plucked node should be the node with the smallest\
    \ odd value.\nIf multiple nodes with the same smallest odd value are found return\
    \ the node that has smallest index.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vgjq7gv.jl:44\nin expression starting at\
    \ /tmp/tmp8vgjq7gv.jl:44\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [ smallest_value, smallest_index ]\n    end\nend\n</cell>\n<text>\nProblem 8\n\
    Given an array representing a binary tree, return the sum of the values of the\
    \ nodes in that tree.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysrur_td.jl:44\nin expression starting at\
    \ /tmp/tmpysrur_td.jl:44\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value = arr[smallest_index]\n        smallest_index\
    \ = 1\n    end\n    \n    return smallest_value, smallest_index\nend\n</cell>\n\
    <text>\nProblem 3\nGiven an array representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqu6nc4yg.jl:46\nin expression starting at\
    \ /tmp/tmpqu6nc4yg.jl:46\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    largest = minimum(arr)\n    smallest = maximum(arr)\n    even = filter(x\
    \ -> x % 2 == 0, arr)\n    \n    if length(even) == 0 || length(even) == length(arr)\n\
    \        return largest, smallest\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwmhhswgf.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwmhhswgf.jl:1\n\
    in expression starting at /tmp/tmpwmhhswgf.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ smallest_value, smallest_index\n    end\nend\n</cell>\n<text>\nProblem 7\nGiven\
    \ a binary tree and a number x, return the path from the root to the node with\
    \ value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjc809mez.jl:46\nin expression starting at\
    \ /tmp/tmpjc809mez.jl:46\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    largest = arr[1]\n    smallest = arr[1]\n    smallest_index = 2\n    largest_index\
    \ = 1\n    \n    for index in 2:length(arr)\n        if arr[index] >= largest\n\
    \            largest = arr[index]\n            largest_index = index\n       \
    \ elseif arr[index] < smallest\n            smallest = arr[index]\n          \
    \  smallest_index = index\n        end\n    end\n    \n    if smallest == largest\n\
    \        return smallest_index\n    else\n        return [smallest, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values. (ie, from left to right, level by level).\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvt28sga.jl:56\nin expression starting at\
    \ /tmp/tmpqvt28sga.jl:56\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_index = 1\n    end\n    \n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a\
    \ node value, swap the node value with the node that results from traveling down\
    \ the tree starting from the given node. Return the new tree.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98fgt5ny.jl:45\nin expression starting at\
    \ /tmp/tmp98fgt5ny.jl:45\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_index = find(even_values == smallest_even_value)\
    \ + 1\n        return [smallest_even_value, smallest_index]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822884
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == length(arr)\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_even_value\
    \ = min(even_values)\n    smallest_even_index = findfirst(x->x==smallest_even_value,\
    \ even_values)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0li69_eb.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0li69_eb.jl:1\n\
    in expression starting at /tmp/tmp0li69_eb.jl:1\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if isempty(even_values)\n\
    \        return []\n    else\n        smallest_value = min(even_values)\n    \
    \    smallest_index = find(even_values == smallest_value)[1]\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree,\
    \ return the level order traversal of its nodes' values. (ie, from left to right,\
    \ level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ydl_d3o.jl:46\nin expression starting at\
    \ /tmp/tmp4ydl_d3o.jl:46\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_index = find(even_values == smallest_even_value)\
    \ + 1\n        return [ smallest_even_value, smallest_index ]\n    end\nend\n\
    </cell>\n<text>\nProblem 3\nGiven a binary tree and a node value, swap the node\
    \ value with the node that results from traversing the tree to that node. Return\
    \ the new tree.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwawoyj1v.jl:44\nin expression starting at\
    \ /tmp/tmpwawoyj1v.jl:44\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return [] \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ai9mt4i.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ai9mt4i.jl:1\n\
    in expression starting at /tmp/tmp8ai9mt4i.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822884
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    4.3 Plucking from a dictionary\nGiven a dictionary representing a tree, your task\
    \ is to pluck one of the nodes and return it.\nThe plucked node should be the\
    \ node with the smallest even value.\nIf multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpherdydq7.jl:45\nin expression starting at\
    \ /tmp/tmpherdydq7.jl:45\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length==0\n        return Vector{Int64}()\n    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    \n    if even_values.length==0\n       \
    \ return Vector{Int64}()\n    \n    smallest_even_value = min(even_values)\n \
    \   smallest_even_index = find(x -> x == smallest_even_value, even_values)\n \
    \   \n    if smallest_even_index==0\n        return Vector{Int64}()\n    \n  \
    \  smallest_value = arr[smallest_even_index]\n    \n    smallest_value_index =\
    \ find(x -> x == smallest_value, arr)\n    \n    if smallest_value_index==0\n\
    \        return Vector{Int64}()\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smallest_value_index - 1\n    \n    smallest_value_index\
    \ = smallest_value_index - 1\n    \n    smallest_value_index = smallest_value_index\
    \ - 1\n    \n    smallest_value_index = smalle\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_ydyenw.jl:1\nin expression starting at /tmp/tmpk_ydyenw.jl:1\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value = minimum(arr)\n    smallest_index = find(arr ==\
    \ smallest_value)\n    \n    if smallest_index == -1 || smallest_value == 0\n\
    \        return [] \n    end\n    \n    smallest_value % 2 == 0 ? smallest_index\
    \ : smallest_index - 1\nend\n</cell>\n<text>\nProblem 7\nGiven an array representing\
    \ a binary tree, return the number of nodes in the tree.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazk0dar0.jl:45\nin expression starting at\
    \ /tmp/tmpazk0dar0.jl:45\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4nrudd_.jl:44\nin expression starting at\
    \ /tmp/tmpg4nrudd_.jl:44\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_even_value\
    \ = minimum(even_values)\n    smallest_index = findfirst(x -> x == smallest_even_value,\
    \ even_values)\n    \n    if smallest_index == nothing\n        return Vector{Int64}()\n\
    \    end\n    \n    return [smallest_even_value, smallest_index]\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1,\
    \ 2, 3]) == [2, 1]\n@assert pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n</cell>\n<text>\nProblem 7: Plucking from the Array\nWrite a function\
    \ pluck_array that takes in an array of non-negative integers and returns the\
    \ smallest even number and the index of the smallest even number.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhdbpmfu.jl:50\nin expression starting at\
    \ /tmp/tmpqhdbpmfu.jl:50\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    else \n        return [smallest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ijxl94g.jl:44\nin expression starting at\
    \ /tmp/tmp5ijxl94g.jl:44\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven an array representing a binary tree, return the height of the\
    \ tree.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphkogohm4.jl:44\nin expression starting at\
    \ /tmp/tmphkogohm4.jl:44\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 7\n\
    Given an array representing a binary tree, return the levels of the tree in sorted\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rkdv12c.jl:46\nin expression starting at\
    \ /tmp/tmp3rkdv12c.jl:46\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 \n        return [] \n    \n    even_values = filter(x\
    \ -> x % 2 == 0, arr) \n    \n    if even_values.length == 0 \n        return\
    \ [] \n    \n    smallest_value = min(even_values) \n    smallest_index = even_values.index(smallest_value)\
    \ \n    \n    return [smallest_value, smallest_index] \nend\n</cell>\n<text>\n\
    Problem 4\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (i.e., the in-order traversal of its nodes' values.)\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34p8sbai.jl:48\nin expression starting at\
    \ /tmp/tmp34p8sbai.jl:48\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nSolution\n\
    Let's see how we could solve this problem by implementing our own version of pluck.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxd_xxxcw.jl:46\nin expression starting at\
    \ /tmp/tmpxd_xxxcw.jl:46\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  smallest_value = node.value\n            smallest_index = node.index\n    \
    \    end\n    end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <text>\nSolution\nLet's see how we could solve this problem by hand.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oiago3a.jl:48\nin expression starting at\
    \ /tmp/tmp4oiago3a.jl:48\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [ smallest_value, smallest_index ]\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ that has value x. \nIf the node doesn't exist, return nil.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2qgnngm.jl:46\nin expression starting at\
    \ /tmp/tmpy2qgnngm.jl:46\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    evens = sort(evens)\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0wpx45o.jl:1\nin expression starting at /tmp/tmpq0wpx45o.jl:1\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_even_index = find(even_values == smallest_even_value)\n\
    \        return [smallest_even_value,smallest_even_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 7\nGiven an array of integers, find the node with the smallest\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeb5guryd.jl:44\nin expression starting at\
    \ /tmp/tmpeb5guryd.jl:44\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = arr.filter(x -> x % 2 == 0)\n    if length(evens) == 0\n     \
    \   return [] \n    smallest_even = minimum(evens)\n    smallest_index = index(evens,\
    \ smallest_even)\n    smallest_value = arr[smallest_index]\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpda6yottf.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpda6yottf.jl:1\n\
    in expression starting at /tmp/tmpda6yottf.jl:1\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    \n    if\
    \ smallest_index == -1 || length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 4\nGiven a binary tree and a number x, your task is to find the\
    \ node in the tree that has value x. \nIf the node does not exist, return nil.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwfur3jb.jl:45\nin expression starting at\
    \ /tmp/tmpfwfur3jb.jl:45\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    \n    smallest_value = min(even_values)\n    smallest_index\
    \ = index(even_values, smallest_value)\n    \n    return smallest_value, smallest_index\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjz05jb3.jl:44\nin expression starting at\
    \ /tmp/tmpxjz05jb3.jl:44\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x->mod(x,2) == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    if smallest_index\
    \ == nothing\n        return [] \n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree and a number k,\
    \ find the kth smallest element in the tree.\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnu5g9g5q.jl:44\nin expression starting at\
    \ /tmp/tmpnu5g9g5q.jl:44\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    smallest_even_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_even_value, even_values)\n    if\
    \ smallest_index == nothing\n        return [] \n    end\n    return [ smallest_even_value,\
    \ smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n@assert pluck([4,\
    \ 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n\
    @assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.4 Plucking all\
    \ nodes with the smallest even value\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppstbd7wq.jl:46\nin expression starting at\
    \ /tmp/tmppstbd7wq.jl:46\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return [] \n    end\n    smallest_value = min(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    return [smallest_value,\
    \ smallest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fuj824w.jl:44\nin expression starting at\
    \ /tmp/tmp4fuj824w.jl:44\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbmjnsg9o.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbmjnsg9o.jl:1\n\
    in expression starting at /tmp/tmpbmjnsg9o.jl:1\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_even_value\
    \ = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_even_value,\
    \ even_values)\n    \n    if smallest_index == nothing\n        return Vector{Int64}()\n\
    \    end\n    \n    return [smallest_even_value, smallest_index]\nend\n</cell>\n\
    <text>\nProblem 3\nGiven an array representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjp6scti6.jl:51\nin expression starting at\
    \ /tmp/tmpjp6scti6.jl:51\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return []\n    else\n        smallest_value = min(even_values)\n    \
    \    smallest_index = find(even_values == smallest_value)[1]\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree\
    \ and a number x, find the node in the tree with the value closest to x.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5rjrf67.jl:45\nin expression starting at\
    \ /tmp/tmpn5rjrf67.jl:45\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fuj824w.jl:44\nin expression starting at\
    \ /tmp/tmp4fuj824w.jl:44\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = Inf \n    smallest_index::Int64 = Inf \n\
    \    \n    for i in arr \n        if smallest_value < i \n            smallest_value\
    \ = i \n            smallest_index = i \n        else \n            if smallest_value\
    \ == i \n                smallest_index += 1\n            end \n        end \n\
    \    end \n    \n    if smallest_value == Inf \n        return [] \n    end \n\
    \    \n    return [smallest_value, smallest_index] \nend \n</cell>\n<code language=julia-1.5>\n\
    # Test your function above\narr = [4, 2, 3]\n@assert pluck(arr) == [2, 1]\narr\
    \ = [1, 2, 3]\n@assert pluck(arr) == [2, 1]\narr = []\n@assert pluck(arr) == []\n\
    arr = [5, 0, 3, 0, 4, 2]\n@assert pluck(arr) == [0, 1]\n</cell>\n<text>\n4.4 Plucking\
    \ Elements from an Array\nGiven an array arr of positive integers, return the\
    \ elements of the array in sorted order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31ahx_5n.jl:56\nin expression starting at\
    \ /tmp/tmp31ahx_5n.jl:56\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fzwkzxl.jl:42\nin expression starting at\
    \ /tmp/tmp3fzwkzxl.jl:42\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven an array representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ke8gpj3.jl:44\nin expression starting at\
    \ /tmp/tmp5ke8gpj3.jl:44\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return [] \n    end\n    smallest_even_value = min(even_values)\n   \
    \ smallest_index = find(x -> x == smallest_even_value, even_values)\n    return\
    \ [smallest_even_value, smallest_index]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    evens = sort(evens)\n    evens\
    \ = evens[2:end]\n    evens = evens[findall(x -> x == 0, evens)]\n    if isempty(evens)\n\
    \        return []\n    else\n        return evens\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree with value closest to x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuly3glwu.jl:45\nin expression starting at\
    \ /tmp/tmpuly3glwu.jl:45\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven an array representing a binary tree, return the levels of the\
    \ tree in order from top to bottom.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptuyomp5.jl:45\nin expression starting at\
    \ /tmp/tmpptuyomp5.jl:45\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    evens = sort(evens)\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0wpx45o.jl:1\nin expression starting at /tmp/tmpq0wpx45o.jl:1\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if smallest_index\
    \ == -1 || length(arr) == 0\n        return Vector{Int64}()\n    end\n    \n \
    \   return smallest_value, smallest_index\nend\n</cell>\n<text>\nSolution\nLet's\
    \ see how we solve this problem. First we define our helper functions:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4syhqb17.jl:45\nin expression starting at\
    \ /tmp/tmp4syhqb17.jl:45\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value\
    \ = min(even_values)\n    smallest_even_index = find(even_values == smallest_even_value)[1]\n\
    \    \n    if smallest_even_index == 0 \n        return [] \n    else\n      \
    \  return smallest_even_value,smallest_even_index\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, find the path from the root to\
    \ the node with value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0yhjroq.jl:46\nin expression starting at\
    \ /tmp/tmpr0yhjroq.jl:46\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    smallest_value\
    \ = arr[smallest_index]\n    return smallest_value, smallest_index\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822889
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x->mod(x,2)==0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_even_index = findfirst(x->x==smallest_even_value,\
    \ even_values)\n        return [smallest_even_value, smallest_even_index]\n  \
    \  end\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values. (ie, from left to right, level by level).\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpip9_ztb4.jl:44\nin expression starting at\
    \ /tmp/tmpip9_ztb4.jl:44\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxshenw3.jl:44\nin expression starting at\
    \ /tmp/tmpvxshenw3.jl:44\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree and a number k, you need to find the kth smallest element\
    \ in the tree.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcbvq15n.jl:44\nin expression starting at\
    \ /tmp/tmpfcbvq15n.jl:44\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 7\nGiven a binary tree and a node value, swap the node value with the\
    \ node in the tree that has the\nsmallest value in its left subtree and return\
    \ that node. Do this without changing the tree structure\nor changing the values\
    \ of any nodes in any way!\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivtze1qp.jl:44\nin expression starting at\
    \ /tmp/tmpivtze1qp.jl:44\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    smallest_value = smallest_value % 2\n    smallest_index = smallest_index\
    \ + 1\n    \n    return Vector{Int64}([smallest_value, smallest_index])\nend\n\
    </cell>\n<text>\nProblem 7\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprje2wcb0.jl:48\nin expression starting at\
    \ /tmp/tmprje2wcb0.jl:48\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value =\
    \ min(even_values)\n    smallest_index = findfirst(x->x==smallest_value, even_values)\n\
    \    \n    if smallest_index == nothing\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2,\
    \ 3]) == [2, 1]\n@assert pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) ==\
    \ [0, 1]\n</cell>\n<text>\nPractice 3\nGiven a binary tree and a node value, return\
    \ the path to the node value.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw71ypfyw.jl:46\nin expression starting at\
    \ /tmp/tmpw71ypfyw.jl:46\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    evens = sort(evens)\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0wpx45o.jl:1\nin expression starting at /tmp/tmpq0wpx45o.jl:1\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    \n    smallest_value = min(even_values)\n    smallest_index\
    \ = index(even_values, smallest_value)\n    \n    return [smallest_value, smallest_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmce9f7wk.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmce9f7wk.jl:1\n\
    in expression starting at /tmp/tmpmce9f7wk.jl:1\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 4\nGiven a binary tree and a node value, swap the node value with\
    \ the node in the tree that has the\nsmallest key greater than the given node\
    \ value. If there are multiple nodes with the\nsame smallest key value, pick the\
    \ smallest key index. Return the swapped node value in a list.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwizm1ga5.jl:44\nin expression starting at\
    \ /tmp/tmpwizm1ga5.jl:44\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    Pluck all nodes with the smallest even value\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7htfwud.jl:44\nin expression starting at\
    \ /tmp/tmph7htfwud.jl:44\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree and a node value, swap the node value with the node that results\
    \ from traveling up the tree to the node's position in the tree.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pxkkaqa.jl:47\nin expression starting at\
    \ /tmp/tmp6pxkkaqa.jl:47\n"
  stdout: ''
  timestamp: 1659822887
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven an array representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mjzlli8.jl:40\nin expression starting at\
    \ /tmp/tmp7mjzlli8.jl:40\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  smallest_value = node.value\n            smallest_index = node.index\n    \
    \    end\n    end\n    \n    return smallest_value, smallest_index\nend\n</cell>\n\
    <text>\nProblem 3\nGiven an array representing a binary tree, return the levels\
    \ of the tree in order from top to bottom.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumzuvfwh.jl:48\nin expression starting at\
    \ /tmp/tmpumzuvfwh.jl:48\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    return\
    \ [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven an\
    \ array representing a binary tree where each node has at most two children,\n\
    pluck one of the nodes and return its value.\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp699lcy2l.jl:43\nin expression starting at\
    \ /tmp/tmp699lcy2l.jl:43\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return []\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nSolution\nLet's see how we would\
    \ solve this problem manually.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkz100qj.jl:45\nin expression starting at\
    \ /tmp/tmptkz100qj.jl:45\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test pluck([4, 2, 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([])\
    \ == []\n@test pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nProblem 3\n\
    Given an array representing a binary tree, return the levels of the tree in order\
    \ of\nlevels, where each level is an array of integers representing the number\
    \ of nodes at that level\nin the tree. \nThe array returned should be of the form\
    \ [level1, level2, ..., leveln]\nwhere level1 is the total number of nodes at\
    \ level 1, level2 is the total number of nodes at level 2, etc.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3dpserlc.jl:51\nin expression starting at\
    \ /tmp/tmp3dpserlc.jl:51\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    smalest_value = min(even_values)\n    smallest_index\
    \ = index(even_values, smalest_value)\n    return [smalest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a number x, your task\
    \ is to find the node in the tree that has value x.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx7hazch.jl:42\nin expression starting at\
    \ /tmp/tmpmx7hazch.jl:42\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    if smallest_index\
    \ == nothing\n        return []\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpstcpy485.jl:49\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)
    at ~/.conda/envs/polyglot/share/julia/base/missing.jl:134\n    min(::Any, !Matched::Any)
    at ~/.conda/envs/polyglot/share/julia/base/operators.jl:506\n    min(::Any, !Matched::Any,
    !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpstcpy485.jl:36\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpstcpy485.jl:49 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpstcpy485.jl:48\n'''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value = arr[smallest_index]\n        smallest_index\
    \ = smallest_index\n    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4x6figkr.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4x6figkr.jl:1\n\
    in expression starting at /tmp/tmp4x6figkr.jl:1\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf5gy8dz.jl:44\nin expression starting at\
    \ /tmp/tmplf5gy8dz.jl:44\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nSolution\nLet's see how we could solve this problem\
    \ by hand. Let's start with a simple case:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7qdea12.jl:45\nin expression starting at\
    \ /tmp/tmpu7qdea12.jl:45\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value =\
    \ min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if length(even_values) == 0 || smallest_value == 0\n        return\
    \ []\n    else\n        return [smallest_value, smallest_index]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822892
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    end\n \
    \   smalest_value = arr[end]\n    smallest_index = 0\n    smallest_even_value\
    \ = smalest_value % 2 == 0\n    smallest_even_index = findfirst(smallest_even_value)\n\
    \    if smallest_even_index == -1\n        return arr\n    end\n    \n    for\
    \ index in 1:length(arr)\n        if arr[index] == smalest_value\n           \
    \ if smallest_even_index == -1\n                smallest_even_index = index\n\
    \            else\n                if smallest_even_index == index\n         \
    \           smallest_even_index = index\n                else\n              \
    \      if smallest_even_index < index\n                        smallest_even_index\
    \ = index\n                    end\n                end\n            end\n   \
    \     end\n    end\n    \n    arr[smallest_even_index] = arr[end]\n    arr[end]\
    \ = smalest_value\n    return arr\nend\n</cell>\n<text>\nProblem 4\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values. (ie, from left\
    \ to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1be1v_yy.jl:66\nin expression starting at\
    \ /tmp/tmp1be1v_yy.jl:66\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    evens = sort(evens)\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0wpx45o.jl:1\nin expression starting at /tmp/tmpq0wpx45o.jl:1\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value = arr[smallest_index]\n        smallest_index\
    \ = 1\n    end\n    \n    return smallest_value, smallest_index\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1,\
    \ 2, 3]) == [2, 1]\n@assert pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a node value,\
    \ swap the node with that value.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95dr3435.jl:46\nin expression starting at\
    \ /tmp/tmp95dr3435.jl:46\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    smalest_value = minimum(even_values)\n    smalest_index\
    \ = findfirst(x -> x == smalest_value, even_values)\n    return [smalest_value,\
    \ smalest_index]\nend\n</cell>\n<code language=julia-1.5>\n@assert pluck([4, 2,\
    \ 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n\
    @assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Plucking from\
    \ a dictionary\nGiven a dictionary representing a tree with non-negative integer\
    \ nodes,\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest even value.\nIf multiple nodes with the\
    \ same smallest even value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g_gx02m.jl:42\nin expression starting at\
    \ /tmp/tmp6g_gx02m.jl:42\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a number x, find if there\
    \ exists a path from x to any node in the tree that sums to x.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_cojzmko.jl:42\nin expression starting at\
    \ /tmp/tmp_cojzmko.jl:42\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree and a node value, swap the node value with the node in\
    \ the tree that has the\nsmallest key greater than or equal to the node value.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzch7uid.jl:44\nin expression starting at\
    \ /tmp/tmpmzch7uid.jl:44\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    return [smallest_value,\
    \ smallest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822892
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n      \
    \      if smallest_value < arr[index]\n                smallest_value = arr[index]\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    \n    return [smallest_value, smallest_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpqyqra2jf.jl:55\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [4, 1] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpqyqra2jf.jl:55 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpqyqra2jf.jl:54\ntest set: Test Failed at /tmp/tmpqyqra2jf.jl:56\n  Expression:
    candidate([1, 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyqra2jf.jl:56 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyqra2jf.jl:54\n'''
  timestamp: 1659822892
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_value\
    \ == 0\n        return Vector{Int64}[]\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 4\nGiven a binary tree,\
    \ return the level order traversal of its nodes' values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd005tj7.jl:45\nin expression starting at\
    \ /tmp/tmptd005tj7.jl:45\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 8\n\
    Given a binary tree and a node value, swap the node value with the node that results\
    \ from traveling up the tree starting from the given node. Return the new tree.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlxad8ld.jl:45\nin expression starting at\
    \ /tmp/tmpzlxad8ld.jl:45\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_index = find(even_values == smallest_even_value)\
    \ + 1\n    \n    if smallest_index == length(arr)\n        smallest_index = []\n\
    \    end\n    \n    return smallest_even_value,smallest_index\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpseqt_4u5.jl:45\nin expression starting at\
    \ /tmp/tmpseqt_4u5.jl:45\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node % 2 == 0\n            if smallest_value\
    \ % 2 == 0\n                smallest_value = node\n                smallest_index\
    \ = smallest_index + 1\n            else\n                if smallest_index >\
    \ 1\n                    smallest_value = node\n                    smallest_index\
    \ = smallest_index + 1\n                else\n                    smallest_value\
    \ = node\n                    smallest_index = smallest_index + 1\n          \
    \      end\n            end\n        else\n            if smallest_value % 2 ==\
    \ 0\n                smallest_value = node\n                smallest_index = smallest_index\
    \ + 1\n            else\n                if smallest_index > 1\n             \
    \       smallest_value = node\n                    smallest_index = smallest_index\
    \ + 1\n                else\n                    smallest_value = node\n     \
    \               smallest_index = smallest_index + 1\n                end\n   \
    \         end\n        end\n    end\n    \n    if smallest_index > 1\n       \
    \ return [smallest_value, smallest_index]\n    else\n        return []\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprv05q1u1.jl:75\nin expression starting at\
    \ /tmp/tmprv05q1u1.jl:75\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, find all nodes in the tree that are less than\
    \ or equal to x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2yj7cb_.jl:44\nin expression starting at\
    \ /tmp/tmpi2yj7cb_.jl:44\n"
  stdout: ''
  timestamp: 1659822891
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    smalest_value = min(even_values)\n\
    \    smalest_index = find(even_values == smalest_value)[1]\n    return [smalest_value,\
    \ smalest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkjpzrjbi.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkjpzrjbi.jl:1\n\
    in expression starting at /tmp/tmpkjpzrjbi.jl:1\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Solution\nLet's see how we would solve this problem manually.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqqxpyy3.jl:45\nin expression starting at\
    \ /tmp/tmpvqqxpyy3.jl:45\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = Inf \n    smallest_index::Int64 = Inf \n\
    \    \n    for node in arr \n        if node.even? \n            if node.value\
    \ < smalest_value \n                smalest_value = node.value \n            \
    \    smallest_index = node \n            end \n        end \n    end \n    \n\
    \    if smalest_value == Inf \n        return [] \n    end \n    \n    return\
    \ [smalest_value, smallest_index] \nend \n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    4.3 Pluck all nodes with even values\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoevr0_3h.jl:40\nin expression starting at\
    \ /tmp/tmpoevr0_3h.jl:40\n"
  stdout: ''
  timestamp: 1659822890
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, find all nodes in the tree that\
    \ are less than or equal to x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7eevwc5.jl:44\nin expression starting at\
    \ /tmp/tmpz7eevwc5.jl:44\n"
  stdout: ''
  timestamp: 1659822891
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    return smallest_value::Vector{Int64}, [smallest_index,\
    \ smallest_value] \nend\n</cell>\n<text>\nProblem 4\nGiven an array representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3l60thuj.jl:50\nin expression starting at\
    \ /tmp/tmp3l60thuj.jl:50\n"
  stdout: ''
  timestamp: 1659822891
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvy6pfcp.jl:46\nin expression starting at\
    \ /tmp/tmppvy6pfcp.jl:46\n"
  stdout: ''
  timestamp: 1659822891
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            end\n        end\n    end\n    \n    if\
    \ smalest_value == 0\n        return []\n    end\n    \n    return [smalest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzur5zk8.jl:54\nin expression starting at\
    \ /tmp/tmpqzur5zk8.jl:54\n"
  stdout: ''
  timestamp: 1659822891
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    evens = sort(evens)\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n    evens\
    \ = evens[2:end]\n    evens = evens[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0wpx45o.jl:1\nin expression starting at /tmp/tmpq0wpx45o.jl:1\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 8\n\
    Given a binary tree and a number x, find all nodes in the tree that are less than\
    \ or equal to x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_alkjv5m.jl:44\nin expression starting at\
    \ /tmp/tmp_alkjv5m.jl:44\n"
  stdout: ''
  timestamp: 1659822892
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpty3r80.jl:44\nin expression starting at\
    \ /tmp/tmpgpty3r80.jl:44\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return [] \n    end\n    \n    return\
    \ [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values. (ie, from left\
    \ to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1qmf786.jl:50\nin expression starting at\
    \ /tmp/tmpg1qmf786.jl:50\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return smallest_value, smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    4.3 Plucking all nodes with even values\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr08pv6e8.jl:46\nin expression starting at\
    \ /tmp/tmpr08pv6e8.jl:46\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpma0rnexh.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma0rnexh.jl:1\n\
    in expression starting at /tmp/tmpma0rnexh.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    else\n        smallest_even_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_even_value) \n        return\
    \ [smallest_even_value,smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 4\nGiven a binary tree and a number x, find all nodes in the tree that are less\
    \ than or equal to x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv8lr4au.jl:44\nin expression starting at\
    \ /tmp/tmphv8lr4au.jl:44\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpma0rnexh.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma0rnexh.jl:1\n\
    in expression starting at /tmp/tmpma0rnexh.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        end\n    end\n    \n    return [smallest_value, smallest_index]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmps1z7_5ed.jl:53\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmps1z7_5ed.jl:53 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmps1z7_5ed.jl:52\ntest set: Test Failed at /tmp/tmps1z7_5ed.jl:54\n  Expression:
    candidate([1, 2, 3]) == [2, 1]\n   Evaluated: [1, 1] == [2, 1]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmps1z7_5ed.jl:54 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmps1z7_5ed.jl:52\n'''
  timestamp: 1659822895
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            else\n     \
    \           if smallest_value == node.value\n                    smallest_index\
    \ = smallest_index + 1\n                end\n            end\n        end\n  \
    \  end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\n\
    Problem 4\nGiven an array representing a binary tree, return the levels of the\
    \ tree in order from top to bottom. \nThe level of a node is the number of nodes\
    \ at that level. \nFor example, given the following tree:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41vwf125.jl:54\nin expression starting at\
    \ /tmp/tmp41vwf125.jl:54\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value = arr[1]\n    smallest_index = 1\n    \n    for node\
    \ in arr[2:end]\n        if node < smallest_value\n            smallest_value\
    \ = node\n            smallest_index = index\n        end\n    end\n    \n   \
    \ return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree and a node value, swap the node with that value.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6p9bvjo.jl:48\nin expression starting at\
    \ /tmp/tmpu6p9bvjo.jl:48\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (i.e., the in-order traversal of its nodes' values.)\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnuijfze.jl:46\nin expression starting at\
    \ /tmp/tmpgnuijfze.jl:46\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return [];\n    else\n        smallest_value = min(even_values)\n   \
    \     smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nPractice 3\n\
    Let's practice your pluck function on some more test cases. Write some test cases\
    \ for pluck function and make sure your function passes them.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15z3hub0.jl:44\nin expression starting at\
    \ /tmp/tmp15z3hub0.jl:44\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(x -> x == smallest_value, even_values)\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdlnn6tsz.jl:42\nin expression starting at\
    \ /tmp/tmpdlnn6tsz.jl:42\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return []\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree\
    \ and a number x, find all nodes in the tree that are less than or equal to x.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3r8r68vw.jl:45\nin expression starting at\
    \ /tmp/tmp3r8r68vw.jl:45\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    return\
    \ smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem 3\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values. (ie, from left\
    \ to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jpeamee.jl:40\nin expression starting at\
    \ /tmp/tmp6jpeamee.jl:40\n"
  stdout: ''
  timestamp: 1659822894
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpma0rnexh.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma0rnexh.jl:1\n\
    in expression starting at /tmp/tmpma0rnexh.jl:1\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = index(even_values, smallest_value)\n        return [\
    \ smallest_value, smallest_index ]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    4.3 Plucking from a dictionary\nGiven a dictionary representing a tree with non-negative\
    \ integer nodes,\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest even value.\nIf multiple nodes with\
    \ the same smallest even value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprw2t4wc4.jl:44\nin expression starting at\
    \ /tmp/tmprw2t4wc4.jl:44\n"
  stdout: ''
  timestamp: 1659822894
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven an array representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mjzlli8.jl:40\nin expression starting at\
    \ /tmp/tmp7mjzlli8.jl:40\n"
  stdout: ''
  timestamp: 1659822888
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw43p3qer.jl:44\nin expression starting at\
    \ /tmp/tmpw43p3qer.jl:44\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9qixurg.jl:47\nin expression starting at\
    \ /tmp/tmpg9qixurg.jl:47\n"
  stdout: ''
  timestamp: 1659822893
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtxllo19.jl:40\nin expression starting at\
    \ /tmp/tmphtxllo19.jl:40\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x->x==smallest_value, even_values)\n     \
    \   return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    Practice 3\nGiven an array representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzfdw4vk.jl:46\nin expression starting at\
    \ /tmp/tmpuzfdw4vk.jl:46\n"
  stdout: ''
  timestamp: 1659822894
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf1_7faj.jl:45\nin expression starting at\
    \ /tmp/tmpzf1_7faj.jl:45\n"
  stdout: ''
  timestamp: 1659822894
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        index = find(even_values == smallest_value)[1]\n        return [smallest_value,\
    \ index]\n    end\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of nodes in a binary search tree with root node root.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvuxmx06.jl:45\nin expression starting at\
    \ /tmp/tmppvuxmx06.jl:45\n"
  stdout: ''
  timestamp: 1659822894
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x->x==smallest_value, even_values)\n     \
    \   return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplh2c3ri.jl:47\nin expression starting at\
    \ /tmp/tmpplh2c3ri.jl:47\n"
  stdout: ''
  timestamp: 1659822895
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_index = find(even_values == smallest_even_value)\
    \ + 1\n        return [smallest_even_value,smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg69h62a_.jl:44\nin expression starting at\
    \ /tmp/tmpg69h62a_.jl:44\n"
  stdout: ''
  timestamp: 1659822895
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [smallest_value, smallest_index]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.\nin expression starting at /tmp/tmpzzo48abo.jl:49\n'''
  stdout: 'b''test set: Test Failed at /tmp/tmpzzo48abo.jl:52\n  Expression: candidate([4,
    2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpzzo48abo.jl:52 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpzzo48abo.jl:51\ntest set: Test Failed at /tmp/tmpzzo48abo.jl:56\n  Expression:
    candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n   Evaluated: [0, 2] == [0, 3]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzo48abo.jl:56 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpzzo48abo.jl:51\nTest Summary: |
    Pass  Fail  Total\ntest set      |    6     2      8\n'''
  timestamp: 1659822897
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 \n        return [] \n    \n    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    \n    if even_values.length == 0 \n        return []\
    \ \n    \n    smallest_value = min(even_values)\n    smallest_index = find(x ->\
    \ x == smallest_value, even_values)\n    \n    return [smallest_value, smallest_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8gp3lze.jl:1\nin expression starting at /tmp/tmph8gp3lze.jl:1\n"
  stdout: ''
  timestamp: 1659822895
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.0>\n@assert pluck([4,\
    \ 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n\
    @assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Plucking all\
    \ nodes with even values\nGiven an array representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck all of the nodes and return\
    \ them.\nThe plucked nodes should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given array is empty, return [].\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jsx9a0_.jl:40\nin expression starting at\
    \ /tmp/tmp3jsx9a0_.jl:40\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = even_values.index(smallest_even_value)\n\
    \    smallest_value = arr[smallest_even_index]\n    \n    if smallest_even_index\
    \ == 0 \n        smallest_value = arr[smallest_even_index + 1]\n    end\n    \n\
    \    return smallest_value, smallest_even_index\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwlvg4ud.jl:46\nin expression starting at\
    \ /tmp/tmpbwlvg4ud.jl:46\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    largest = arr[1]\n    largest_index = 1\n    smallest = arr[1]\n    smallest_index\
    \ = 1\n    for node in arr[2:end]\n        if node < smallest \n            smallest\
    \ = node\n            smallest_index = largest_index\n        elseif node > largest\n\
    \            largest = node\n            largest_index = smallest_index\n    \
    \    elseif smallest_index == largest_index\n            smallest_index += 1\n\
    \        elseif smallest_index > largest_index\n            largest_index = smallest_index\n\
    \            smallest_index = largest_index\n        end\n    end\n    return\
    \ [smallest, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([])\
    \ == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the number of nodes in the given tree.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7sx6vad.jl:55\nin expression starting at\
    \ /tmp/tmpw7sx6vad.jl:55\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = Inf \n    smallest_index::Int64 = Inf \n\
    \    \n    for node in arr \n        if node.value % 2 == 0 \n            if node.value\
    \ < smallest_value \n                smallest_value = node.value \n          \
    \      smallest_index = node \n            end \n        end \n    end \n    \n\
    \    if smallest_value == Inf \n        return [] \n    end \n    \n    return\
    \ [smallest_value, smallest_index] \nend \n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    Problem 7: Plucking from a BST\nGiven a binary search tree and a value x, your\
    \ task is to pluck one of the nodes and return it.\nThe plucked node should be\
    \ the node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1zs2nh0.jl:54\nin expression starting at\
    \ /tmp/tmpa1zs2nh0.jl:54\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    return\
    \ [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values. (ie, from left\
    \ to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ma_luw9.jl:43\nin expression starting at\
    \ /tmp/tmp1ma_luw9.jl:43\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_even_value = min(even_values)\n\
    \        smallest_even_index = index(even_values, smallest_even_value)\n     \
    \   return smallest_even_value::Vector{Int64}([smallest_even_index])\n    end\n\
    end\n</cell>\n<text>\nProblem 7\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4a_dz9d.jl:46\nin expression starting at\
    \ /tmp/tmpt4a_dz9d.jl:46\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qrucd61.jl:44\nin expression starting at\
    \ /tmp/tmp2qrucd61.jl:44\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1] \n    smalest_index = 1\n    \n    for node in arr[2:end] \n      \
    \  if node % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n        end \n    end \n    \n    return [smalest_value,\
    \ smalest_index] \nend \n</cell>\n<code language=julia-1.5>\n@assert pluck([4,\
    \ 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n\
    @assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Pluck all nodes\
    \ with the smallest even value\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02wm8xnf.jl:54\nin expression starting at\
    \ /tmp/tmp02wm8xnf.jl:54\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <text>\nProblem 4\nGiven a binary tree and a node value, swap the node value with\
    \ the node in the tree that has smallest key greater than the given node value.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjw9g86z.jl:50\nin expression starting at\
    \ /tmp/tmpgjw9g86z.jl:50\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: -1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpdkkk3pnn.jl:49\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)
    at ~/.conda/envs/polyglot/share/julia/base/missing.jl:134\n    min(::Any, !Matched::Any)
    at ~/.conda/envs/polyglot/share/julia/base/operators.jl:506\n    min(::Any, !Matched::Any,
    !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpdkkk3pnn.jl:36\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpdkkk3pnn.jl:49 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpdkkk3pnn.jl:48\n'''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Solution\nLet's see how we could solve this problem using Julia's built-in high-level\
    \ functionality.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ezdvnvn.jl:45\nin expression starting at\
    \ /tmp/tmp6ezdvnvn.jl:45\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (i.e., the in-order traversal).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8xd9v8r.jl:46\nin expression starting at\
    \ /tmp/tmpp8xd9v8r.jl:46\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            else\n     \
    \           smallest_value = node.value\n                smallest_index = smallest_index\n\
    \            end\n        end\n    end\n    \n    if smallest_value == 0\n   \
    \     return Vector{Int64}[]\n    end\n    \n    return Vector{Int64}[smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfd1nmay2.jl:57\nin expression starting at\
    \ /tmp/tmpfd1nmay2.jl:57\n"
  stdout: ''
  timestamp: 1659822896
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Practice 3\nLet's practice our new skills by solving some more interesting problems.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocuzylvg.jl:45\nin expression starting at\
    \ /tmp/tmpocuzylvg.jl:45\n"
  stdout: ''
  timestamp: 1659822897
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    return [smallest_value, smallest_index]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpstp8zcgv.jl:53

    '
  stdout: "test set: Test Failed at /tmp/tmpstp8zcgv.jl:56\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpstp8zcgv.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpstp8zcgv.jl:55\ntest set: Test Failed at /tmp/tmpstp8zcgv.jl:60\n\
    \  Expression: candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n   Evaluated: [0, 2] ==\
    \ [0, 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstp8zcgv.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstp8zcgv.jl:55\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nSolution\n\
    Let's see how we would solve this problem. First let's see how we would solve\
    \ it using recursion.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5p0oykyh.jl:45\nin expression starting at\
    \ /tmp/tmp5p0oykyh.jl:45\n"
  stdout: ''
  timestamp: 1659822897
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrsqer05.jl:40\nin expression starting at\
    \ /tmp/tmpqrsqer05.jl:40\n"
  stdout: ''
  timestamp: 1659822897
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    \n    smallest_even_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_even_value) \n    \n    return\
    \ [smallest_even_value,smallest_index]\nend\n</cell>\n<text>\nSolution\nLet's\
    \ see how we would solve this problem with Julia.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3hi6w8y.jl:44\nin expression starting at\
    \ /tmp/tmpp3hi6w8y.jl:44\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = findall(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return [];\n    else\n        smallest_value = min(even_values)\n   \
    \     smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a node value, swap the node value with the node in the\
    \ tree that has the\nsmallest key greater than the given node value.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaznf_d4r.jl:45\nin expression starting at\
    \ /tmp/tmpaznf_d4r.jl:45\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\n\
    Problem 7\nGiven a binary tree and a number x, find the node in the tree with\
    \ the value closest to x. If there are multiple nodes with the value closest to\
    \ x, return the node that has the smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepz_9du1.jl:50\nin expression starting at\
    \ /tmp/tmpepz_9du1.jl:50\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_even_value = min(even_values)\n\
    \    \n    smallest_even_index = findfirst(x->x==smallest_even_value, even_values)\n\
    \    \n    return [smallest_even_value, smallest_even_index]\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a node value, swap the node value with the\
    \ node in the tree that has the\nsmallest key greater than or equal to the node\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajouf6rc.jl:48\nin expression starting at\
    \ /tmp/tmpajouf6rc.jl:48\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_even_index = findfirst(x->x==smallest_even_value,\
    \ even_values)\n        return [smallest_even_value, smallest_even_index]\n  \
    \  end\nend\n</cell>\n<text>\nPractice 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the even values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6pfro81.jl:45\nin expression starting at\
    \ /tmp/tmpp6pfro81.jl:45\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5aa2h4v.jl:45\nin expression starting at\
    \ /tmp/tmpc5aa2h4v.jl:45\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = find(x -> x == smallest_even_value,\
    \ even_values)\n    if smallest_even_index == length(even_values)\n        return\
    \ Vector{Int64}[]\n    else\n        return [smallest_even_value, smallest_even_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp498mxo9k.jl:44\nin expression starting at\
    \ /tmp/tmp498mxo9k.jl:44\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree, return the level order traversal of its nodes' values. (ie, from\
    \ left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum_tlfnk.jl:46\nin expression starting at\
    \ /tmp/tmpum_tlfnk.jl:46\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return []\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = index(even_values, smallest_value)\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpd8l28u4a.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpd8l28u4a.jl:51\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:134\n    min(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:506\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpd8l28u4a.jl:41\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd8l28u4a.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd8l28u4a.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpd8l28u4a.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpd8l28u4a.jl:41\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd8l28u4a.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd8l28u4a.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpd8l28u4a.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  MethodError: no method matching min(::Vector{Int64})\n"
  timestamp: 1659822900
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    evens = filter(x -> x % 2 == 0, arr)\n    if length(evens) == 0\n    \
    \    return [] \n    end\n    evens = sort(evens)\n    smalest_value = evens[1]\n\
    \    smalest_index = find(x -> x == smalest_value, evens)[1]\n    return [ smalest_value,\
    \ smalest_index ]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5olbqdp.jl:44\nin expression starting at\
    \ /tmp/tmpz5olbqdp.jl:44\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = findall(x -> x % 2 == 0, arr)\n    \n    if isempty(even_values)\n\
    \        return []\n    else\n        smallest_value = min(even_values)\n    \
    \    smallest_index = find(even_values == smallest_value)[1]\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 8\nWrite a function\
    \ that returns the number of nodes in a binary search tree with root node root.\n\
    The tree is represented as an array of nodes where each node stores an integer\
    \ value and a pointer to the left and right child nodes. \nThe function should\
    \ return the number of nodes in the tree.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmjzxlsz.jl:46\nin expression starting at\
    \ /tmp/tmpkmjzxlsz.jl:46\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return [] \n    end\n    smallest_even_value = min(even_values)\n   \
    \ smallest_even_index = findfirst(x -> x == smallest_even_value, even_values)\n\
    \    smallest_even_value \n    smallest_even_index\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven an array representing a branch of a tree that has non-negative integer\
    \ nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest odd value.\nIf multiple nodes with the\
    \ same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj0cng5j.jl:44\nin expression starting at\
    \ /tmp/tmphj0cng5j.jl:44\n"
  stdout: ''
  timestamp: 1659822898
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    return [smallest_value, smallest_index]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv1n2esd2.jl:52

    '
  stdout: "test set: Test Failed at /tmp/tmpv1n2esd2.jl:55\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv1n2esd2.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpv1n2esd2.jl:54\ntest set: Test Failed at /tmp/tmpv1n2esd2.jl:59\n\
    \  Expression: candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n   Evaluated: [0, 2] ==\
    \ [0, 3]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv1n2esd2.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv1n2esd2.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659822899
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree and a number x, find and return the node in the tree with the\
    \ value closest to x. If there are two nodes with this value, return the node\
    \ that comes before the other. If there are multiple nodes with this value, return\
    \ the node that comes before the other. If there is no node in the tree with value\
    \ closest to x, return nil.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ckfbyr6.jl:46\nin expression starting at\
    \ /tmp/tmp4ckfbyr6.jl:46\n"
  stdout: ''
  timestamp: 1659822899
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr) \n    \n    if length(even_values) == 0 \n  \
    \      return [] \n    \n    smallest_even_value = min(even_values) \n    \n \
    \   smallest_even_index = index(even_values, smallest_even_value) \n    \n   \
    \ return [smallest_even_value, smallest_even_index] \nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppweyom_j.jl:50\nin expression starting at\
    \ /tmp/tmppweyom_j.jl:50\n"
  stdout: ''
  timestamp: 1659822899
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpyxgz3mk3.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpyxgz3mk3.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyxgz3mk3.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxgz3mk3.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxgz3mk3.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpyxgz3mk3.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpyxgz3mk3.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyxgz3mk3.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyxgz3mk3.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpyxgz3mk3.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return []\n    smallest_even_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_even_value) + 1\n    smallest_value = arr[smallest_index]\n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2, 3]) == [2, 1]\n@assert\
    \ pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a node value, swap the node value with the\
    \ node in the tree that has the\nsmallest key greater than or equal to the node\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82rl314f.jl:43\nin expression starting at\
    \ /tmp/tmp82rl314f.jl:43\n"
  stdout: ''
  timestamp: 1659822899
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nPractice 3\n\
    Let's practice our new function pluck_even_values! Let's see how it works.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps78u278l.jl:44\nin expression starting at\
    \ /tmp/tmps78u278l.jl:44\n"
  stdout: ''
  timestamp: 1659822899
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    if\
    \ smallest_index == nothing\n        smallest_index = []\n    end\n    return\
    \ [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven an\
    \ array representing a binary tree, return the level order traversal of its nodes'\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60fxqfod.jl:43\nin expression starting at\
    \ /tmp/tmp60fxqfod.jl:43\n"
  stdout: ''
  timestamp: 1659822899
- exit_code: 1
  program: "\"\"\"\n    \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a list, [ smalest_value, its index ],\n    If there are no even values or the\
    \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2, 3])\n\
    \    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n    Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3,\
    \ 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but  there\
    \ are two zeros,\n                 so we will choose the first zero, which has\
    \ the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n\
    \        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nSolution\n\
    Let's see how this solution works:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgeiif7be.jl:45\nin expression starting at\
    \ /tmp/tmpgeiif7be.jl:45\n"
  stdout: ''
  timestamp: 1659822899
