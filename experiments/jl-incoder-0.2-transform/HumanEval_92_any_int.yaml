name: HumanEval_92_any_int
language: jl
prompt: "\"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if\
  \ one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2,\
  \ 7)\n    true\n    \n    >>> any_int(3, 2, 2)\n    false\n\n    >>> any_int(3,\
  \ -2, 1)\n    true\n    \n    >>> any_int(3.6, -2.2, 2)\n    false\n  \n\n    \n\
  \    \"\"\"\nfunction any_int(x::Float64, y::Float64, z::Float64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = any_int;\n\t@test(candidate(2,\
  \ 3, 1) == true)\n\t@test(candidate(2.5, 2, 3) == false)\n\t@test(candidate(1.5,\
  \ 5, 3.5) == false)\n\t@test(candidate(2, 6, 2) == false)\n\t@test(candidate(4,\
  \ 2, 2) == true)\n\t@test(candidate(2.2, 2.2, 2.2) == false)\n\t@test(candidate(-4,\
  \ 6, 2) == true)\n\t@test(candidate(2, 1, 1) == true)\n\t@test(candidate(3, 4, 7)\
  \ == true)\n\t@test(candidate(3.0, 4, 7) == false)\nend\n"
completions: ["    if x == y || x == z || y == z\n        true\n    else\n       \
    \ false\n    end\nend", "    if x == y || x == z\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes 3 numbers and returns true if all numbers are even, and false if\
    \ any number is odd.", "    if x == y+z\n        return true\n    else\n     \
    \   return false\n    end\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes an array of numbers and returns the sum of the numbers in the array.\n\
    If the array is empty, return 0.\nIf the array has only one number, return that\
    \ number.\nIf the array has two numbers, return the sum of the two numbers.\n\
    If the array has more than two numbers, return the sum of the first two numbers,\
    \ then add the last two numbers and return the sum.", "    if x == y || x == z\n\
    \        true\n    else\n        false\nend\n</cell>\n<text>\nProblem 8\nWrite\
    \ a function that takes 3 numbers and returns true if all numbers are even, and\
    \ false otherwise.\nReturn false in any other cases.\n    \nExamples\n>>> all_even(6,\
    \ 4, 2)\ntrue\n>>> all_even(6, 4, -2)\nfalse\n>>> all_even(6, 4, 0)\nfalse\n>>>\
    \ all_even(6, 4, -4)\nfalse\n>>> all_even(6, 4, 5)\nfalse\n>>> all_even(6, 4,\
    \ -5)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n\
    >>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6,\
    \ 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n\
    >>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6,\
    \ 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n\
    >>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6,\
    \ 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n\
    >>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6,\
    \ 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n\
    >>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6,\
    \ 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n\
    >>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6,\
    \ 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n\
    >>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6,\
    \ 4, 3.5)\nfalse\n>>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n\
    >>> all_even(6, 4, -3)\nfalse\n>>> all_even(6, 4, 3.5)\nfalse\n>>> all_even(6,\
    \ 4, -3)\nfalse\n>>> all_", "    if x == y || x == z || y == z\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5,\
    \ 2, 7)\n    true\n    \n    >>> any_int(3, 2, 2)\n    false", "    if x == y\
    \ || x == z || y == z\n        return true\n    else\n        return false\n \
    \   end\nend\n</cell>\n<text>\nProblem 4\nWrite a function that takes 3 numbers\
    \ and returns true if they are all positive.\nReturns false in any other case.\n\
    \    \n    Examples\n    >>> all_positive(5, 2, 7)\n    true\n    \n    >>> all_positive(3,\
    \ -2, 1)\n    false\n    \n    >>> all_positive(3.6, -2.2, 2)\n    false\n   \
    \ \n    \"\"\"", "    if x == y || x == z || y == z\n        return true\n   \
    \ else\n        return false\n    end\nend", "    if x == y || x == z || y ==\
    \ z\n        return true\n    else\n        return false\n    end\nend", "   \
    \ if x == y + z\n    else if x == y - z\n    else if x == z\n    else false\n\
    \    end\nend", "    if x == y || x == z\n        return true\n    else\n    \
    \    return false\n    end\nend", "    if x == y || x == z\n        true\n   \
    \ else\n        false\n    end\nend", "    if x == y+z\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nany_int(5, 2,\
    \ 7)\n</cell>\n<code language=julia-1.5>\nany_int(3, 2, 2)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3, -2, 1)\n</cell>\n<code language=julia-1.5>\nany_int(3.6, -2.2, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes 3 numbers and returns\
    \ true if any of them is equal to the sum of the other two, and all numbers are\
    \ integers.\nReturn false in any other cases.\nExamples\nany_int_sum(5, 2, 7)\n\
    true\nany_int_sum(3, 2, 2)\nfalse\nany_int_sum(3, -2, 1)\ntrue\nany_int_sum(3.6,\
    \ -2.2, 2)\nfalse", "    if x == y+z\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nProblem 7: Create a function that takes 3 numbers\
    \ and returns true if any of them is equal to the sum of the other two, and all\
    \ numbers are integers.\nReturns false in any other cases.\n    \nExamples\n \
    \   >>> any_int_or_false(5, 2, 7)\n    true\n    \n    >>> any_int_or_false(3,\
    \ -2, 1)\n    true\n    \n    >>> any_int_or_false(3.6, -2.2, 2)\n    false\n\
    \  ", "    if x == y+z\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes 3 numbers\
    \ and returns true if all numbers are positive.\nReturns false in any other case.\n\
    Examples\n>>> all_positive(5, 2, 7)\ntrue\n>>> all_positive(3, -2, 1)\nfalse\n\
    >>> all_positive(3.6, -2.2, 2)\nfalse", "    if x == y+z\n        return true\n\
    \    else\n        return false\n    end\nend", "    if x == y || x == z || y\
    \ == z\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes 3 numbers and returns true if the\
    \ sum of the numbers is equal to the product of the numbers.\nReturns false in\
    \ any other case.\n    \nExamples\n    >>> any_int(5, 2, 7)\n    true\n    \n\
    \    >>> any_int(3, 2, 2)\n    false", "    if x == y || x == z || y == z\n  \
    \      true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if x == y || x == z || y == z\n        return true\n    else\n        return\
    \ false\n    end\nend", "    if x == y || x == z\n        true\n    else\n   \
    \     false\n    end\nend\n</cell>\n<code language=julia-1.5>\nany_int(5, 2, 7)\n\
    </cell>\n<code language=julia-1.5>\nany_int(3, 2, 2)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3, -2, 1)\n</cell>\n<code language=julia-1.5>\nany_int(3.6, -2.2, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes 3 numbers and returns\
    \ true if any of them is equal to the sum of the other two, and all numbers are\
    \ integers.\nReturn false in any other cases.\nTest your function with some examples:",
  "    if x == y || x == z || y == z\n        true\n    else\n        false\n    end\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
