language: jl
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy05s_jy3.jl:1\nin expression starting at /tmp/tmpy05s_jy3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string\n    music_string = music_string[1:end]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \".|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps05cywer.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps05cywer.jl:1\n\
    in expression starting at /tmp/tmps05cywer.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3ppzlqs.jl:30\nin expression starting at\
    \ /tmp/tmpw3ppzlqs.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbs27ofu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbs27ofu.jl:1\n\
    in expression starting at /tmp/tmpmbs27ofu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphxzcxoyo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphxzcxoyo.jl:1\n\
    in expression starting at /tmp/tmphxzcxoyo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string.split(\" \") # split\
    \ on space\n    music_string = [music_string[i] for i in range(len(music_string))]\
    \ # remove empty strings\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\".\"] # remove dot\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"|\"] # remove pipe\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    o\"] # remove o\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"O\"] # remove O\n    music_string = [music_string[i] for\
    \ i in range(len(music_string)) if music_string[i]!=\":\"] # remove colon\n  \
    \  music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    ;\"] # remove semicolon\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"-\"] # remove dash\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"+\"] # remove plus\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    *\"] # remove asterisk\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"?\"] # remove question\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"!\"] # remove exclamation\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    ^\"] # remove caret\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"%\"] # remove percent\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"&\"] # remove ampersand\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    =\"] # remove equal\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"<\"] # remove less\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\">\"] # remove greater\n\
    \    musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hltkr2x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hltkr2x.jl:1\n\
    in expression starting at /tmp/tmp0hltkr2x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbs27ofu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbs27ofu.jl:1\n\
    in expression starting at /tmp/tmpmbs27ofu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpanxcjkf5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanxcjkf5.jl:1\n\
    in expression starting at /tmp/tmpanxcjkf5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5kfsl0x.jl:15\n\
    in expression starting at /tmp/tmpl5kfsl0x.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"-\"\
    ) + 1 .. end]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n\
    \    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuvrzo_t.jl:1\nin expression starting at /tmp/tmpvuvrzo_t.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxlh8gjx.jl:1\nin expression starting at /tmp/tmpzxlh8gjx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpfbs71_pj.jl:49\nin expression starting at /tmp/tmpfbs71_pj.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_g_m79ar.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_g_m79ar.jl:1\n\
    in expression starting at /tmp/tmp_g_m79ar.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n  \
    \  music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jrns9ho.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6jrns9ho.jl:1\n\
    in expression starting at /tmp/tmp6jrns9ho.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f3fpmqu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2f3fpmqu.jl:1\n\
    in expression starting at /tmp/tmp2f3fpmqu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\"|\")\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    musi\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7_olype8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_olype8.jl:1\n\
    in expression starting at /tmp/tmp7_olype8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
