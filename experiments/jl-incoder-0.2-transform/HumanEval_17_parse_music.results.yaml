language: jl
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy05s_jy3.jl:1\nin expression starting at /tmp/tmpy05s_jy3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string\n    music_string = music_string[1:end]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \".|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps05cywer.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps05cywer.jl:1\n\
    in expression starting at /tmp/tmps05cywer.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3ppzlqs.jl:30\nin expression starting at\
    \ /tmp/tmpw3ppzlqs.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbs27ofu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbs27ofu.jl:1\n\
    in expression starting at /tmp/tmpmbs27ofu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphxzcxoyo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphxzcxoyo.jl:1\n\
    in expression starting at /tmp/tmphxzcxoyo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string.split(\" \") # split\
    \ on space\n    music_string = [music_string[i] for i in range(len(music_string))]\
    \ # remove empty strings\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\".\"] # remove dot\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"|\"] # remove pipe\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    o\"] # remove o\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"O\"] # remove O\n    music_string = [music_string[i] for\
    \ i in range(len(music_string)) if music_string[i]!=\":\"] # remove colon\n  \
    \  music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    ;\"] # remove semicolon\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"-\"] # remove dash\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"+\"] # remove plus\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    *\"] # remove asterisk\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"?\"] # remove question\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"!\"] # remove exclamation\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    ^\"] # remove caret\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"%\"] # remove percent\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\"&\"] # remove ampersand\n\
    \    music_string = [music_string[i] for i in range(len(music_string)) if music_string[i]!=\"\
    =\"] # remove equal\n    music_string = [music_string[i] for i in range(len(music_string))\
    \ if music_string[i]!=\"<\"] # remove less\n    music_string = [music_string[i]\
    \ for i in range(len(music_string)) if music_string[i]!=\">\"] # remove greater\n\
    \    musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hltkr2x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hltkr2x.jl:1\n\
    in expression starting at /tmp/tmp0hltkr2x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbs27ofu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbs27ofu.jl:1\n\
    in expression starting at /tmp/tmpmbs27ofu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpanxcjkf5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanxcjkf5.jl:1\n\
    in expression starting at /tmp/tmpanxcjkf5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5kfsl0x.jl:15\n\
    in expression starting at /tmp/tmpl5kfsl0x.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"-\"\
    ) + 1 .. end]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n\
    \    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuvrzo_t.jl:1\nin expression starting at /tmp/tmpvuvrzo_t.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxlh8gjx.jl:1\nin expression starting at /tmp/tmpzxlh8gjx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpfbs71_pj.jl:49\nin expression starting at /tmp/tmpfbs71_pj.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_g_m79ar.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_g_m79ar.jl:1\n\
    in expression starting at /tmp/tmp_g_m79ar.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n  \
    \  music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jrns9ho.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6jrns9ho.jl:1\n\
    in expression starting at /tmp/tmp6jrns9ho.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f3fpmqu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2f3fpmqu.jl:1\n\
    in expression starting at /tmp/tmp2f3fpmqu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\"|\")\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list\
    \ = music_list[1:end]\n    music_list = music_list[1:end]\n    music_list = music_list[1:end]\n\
    \    music_list = music_list[1:end]\n    musi\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7_olype8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_olype8.jl:1\n\
    in expression starting at /tmp/tmp7_olype8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1w31d1f.jl:1\nin expression starting at /tmp/tmpe1w31d1f.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzhlz3fpm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzhlz3fpm.jl:1\n\
    in expression starting at /tmp/tmpzhlz3fpm.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppljmffc2.jl:30\nin expression starting at\
    \ /tmp/tmppljmffc2.jl:30\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt64))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqjpdafio.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqjpdafio.jl:1\n\
    in expression starting at /tmp/tmpqjpdafio.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzhlz3fpm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzhlz3fpm.jl:1\n\
    in expression starting at /tmp/tmpzhlz3fpm.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpwrw2iw9q.jl:49\nin expression starting at /tmp/tmpwrw2iw9q.jl:49\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47qesuf_.jl:36\nin expression starting at\
    \ /tmp/tmp47qesuf_.jl:36\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppljmffc2.jl:30\nin expression starting at\
    \ /tmp/tmppljmffc2.jl:30\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimvt7e42.jl:15\n\
    in expression starting at /tmp/tmpimvt7e42.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n  \
    \  music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jrns9ho.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6jrns9ho.jl:1\n\
    in expression starting at /tmp/tmp6jrns9ho.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \", music_string.size - 1)]\n    music_string\
    \ = music_string[1 : music_string.size - 1]\n    music_string = music_string.replace(\"\
    |\", \"\")\n    music_string = music_string.replace(\"o\", \"0\")\n    music_string\
    \ = music_string.replace(\"|\", \"0\")\n    music_string = music_string.replace(\"\
    o|\", \"0\")\n    music_string = music_string.replace(\".|\", \"0\")\n    music_string\
    \ = music_string.replace(\"o|\", \"0\")\n    music_string = music_string.replace(\"\
    .|\", \"0\")\n    music_string = music_string.replace(\"o|\", \"0\")\n    music_string\
    \ = music_string.replace(\".|\", \"0\")\n    music_string = music_string.replace(\"\
    o|\", \"0\")\n    music_string = music_string.replace(\".|\", \"0\")\n    music_string\
    \ = music_string.replace(\"o|\", \"0\")\n    music_string = music_string.replace(\"\
    .|\", \"0\")\n    music_string = music_string.replace(\"o|\", \"0\")\n    music_string\
    \ = music_string.replace(\".|\", \"0\")\n    music_string = music_string.replace(\"\
    o|\", \"0\")\n    music_string = music_string.replace(\".|\", \"0\")\n    music_string\
    \ = music_string.replace(\"o|\", \"0\")\n    music_string = music_string.replace(\"\
    .|\", \"0\")\n    music_string = music_string.replace(\"o|\", \"0\")\n    music_string\
    \ = music_string.replace(\".|\", \"0\")\n    music_string = music_string.replace(\"\
    o|\", \"0\")\n    music_string = music_string.replace(\".|\", \"0\")\n    music_string\
    \ = music_string.replace(\"o|\", \"0\")\n    music_string = music_string.replace(\"\
    .|\", \"0\")\n    music_string = music_string.replace(\"o|\", \"0\")\n    music_string\
    \ = music_string.replace(\".|\", \"0\")\n    music_string = music_string.replace(\"\
    o|\", \"0\")\n    music_string = music_string.replace(\".|\", \"0\")\n    music_string\
    \ = music_string.replace(\"o|\", \"0\")\n    music_string = music_string.replace(\"\
    .|\", \"0\")\n    music_string = music_string.replace(\"o|\", \"0\")\n    music_string\
    \ = music_string.replace(\".|\", \"0\")\n    music_string = music_string.replace(\"\
    o|\", \"0\")\n    music_string = music_string.replace(\".|\", \"0\")\n    music_string\
    \ = music_string.replace(\"o|\", \"0\")\n    music_string = music_string.replace(\"\
    .|\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mula4_7.jl:59\nin expression starting at\
    \ /tmp/tmp7mula4_7.jl:59\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f8gt37h.jl:52\nin expression starting at\
    \ /tmp/tmp3f8gt37h.jl:52\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\".\")]\n    music_string = music_string[music_string.findfirst(\"\
    .\") + 1 .. end]\n    music_string = music_string[1 .. music_string.findfirst(\"\
    o\")]\n    music_string = music_string[music_string.findfirst(\"o\") + 1 .. music_string.findfirst(\"\
    |\")]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 .. end]\n\
    \    music_string = music_string[1 .. music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findfirst(\"|\") + 1 .. end]\n    music_string =\
    \ music_string[1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\".\")]\n    music_string = music_string[music_string.findfirst(\"\
    .\") + 1 .. end]\n    music_string = music_string[1 .. music_string.findfirst(\"\
    o\")]\n    music_string = music_string[music_string.findfirst(\"o\") + 1 .. music_string.findfirst(\"\
    |\")]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 .. end]\n\
    \    music_string = music_string[1 .. music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findfirst(\"|\") + 1 .. end]\n    music_string =\
    \ music_string[1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\".\")]\n    music_string = music_string[music_string.findfirst(\"\
    .\") + 1 .. end]\n    music_string = music_string[1 .. music_string.findfirst(\"\
    o\")]\n    music_string = music_string[music_string.findfirst(\"o\") + 1 .. music_string.findfirst(\"\
    |\")]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 .. end]\n\
    \    music_string = music_string[1 .. music_\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplyaiue02.jl:1\nin expression starting at /tmp/tmplyaiue02.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f8gt37h.jl:52\nin expression starting at\
    \ /tmp/tmp3f8gt37h.jl:52\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list = music_list[music_list.length ..\
    \ end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[musi\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypz0eeuy.jl:1\nin expression starting at /tmp/tmpypz0eeuy.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"o|\"]\n    music_string =\
    \ [x for x in music_string if x != \".|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"o|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"o|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"o|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"o|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"o|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"o|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"o|\"\
    ]\n    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmphwhxs731.jl:47\nin expression starting at /tmp/tmphwhxs731.jl:47\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjaoh_xuz.jl:16\n\
    in expression starting at /tmp/tmpjaoh_xuz.jl:16\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"o\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsl7e9rtc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsl7e9rtc.jl:1\n\
    in expression starting at /tmp/tmpsl7e9rtc.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjaoh_xuz.jl:16\n\
    in expression starting at /tmp/tmpjaoh_xuz.jl:16\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    \ \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \"]\"]\n    music_string = music_string[music_string != \"]\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc3lbllqh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc3lbllqh.jl:1\n\
    in expression starting at /tmp/tmpc3lbllqh.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind(\"\
    |\") + 1 : music_string.rfind(\"|\", music_string.rfind(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"\
    o\") + 1)]\n    music_string = music_string[music_string.rfind(\".\") + 1 : music_string.rfind(\"\
    o\", music_string.rfind(\"o\") + 1)]\n    music_string = music_string[music_string.rfind(\"\
    o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"\
    o\") + 1)]\n    music_string = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"\
    o\", music_string.rfind(\"o\") + 1)]\n    music_string = music_string[music_string.rfind(\"\
    o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"\
    o\") + 1)]\n    music_string = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"\
    o\", music_string.rfind(\"o\") + 1)]\n    music_string = music_string[music_string.rfind(\"\
    o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"\
    o\") + 1)]\n    music_string = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"\
    o\", music_string.rfind(\"o\") + 1)]\n    music_string = music_string[music_string.rfind(\"\
    o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"o\", music_string.rfind(\"\
    o\") + 1)]\n    music_string = music_string[music_string.rfind(\"o\") + 1 : music_string.rfind(\"\
    o\", music_string.r\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt3ji3p1.jl:30\nin expression starting at\
    \ /tmp/tmppt3ji3p1.jl:30\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2mn506sh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2mn506sh.jl:1\n\
    in expression starting at /tmp/tmp2mn506sh.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f3fpmqu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2f3fpmqu.jl:1\n\
    in expression starting at /tmp/tmp2f3fpmqu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\"|\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    |\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\"o\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"|\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    o\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\"|\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcv156jr.jl:52\nin expression starting at\
    \ /tmp/tmpzcv156jr.jl:52\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[musi\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0u1_k24x.jl:15\n\
    in expression starting at /tmp/tmp0u1_k24x.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.strip)\n    music_notes = music_notes.map(x => x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt64))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.max))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.min))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.product))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.product))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.product))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.product))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.product))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7413p42_.jl:41\nin expression starting at\
    \ /tmp/tmp7413p42_.jl:41\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") + music_string.index(\"o\")]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. music_string.index(\"o\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_string.index(\".\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_string.index(\".\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_string.index(\".\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_string.index(\".\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_string.index(\".\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_string.index(\".\") +\
    \ music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") + music_string.index(\".\")]\n    music_string\
    \ = music_string[music_string.index(\".\") + 1 .. music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwv9n3nzu.jl:1\nin expression starting at /tmp/tmpwv9n3nzu.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbs27ofu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbs27ofu.jl:1\n\
    in expression starting at /tmp/tmpmbs27ofu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpwrw2iw9q.jl:49\nin expression starting at /tmp/tmpwrw2iw9q.jl:49\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbs27ofu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbs27ofu.jl:1\n\
    in expression starting at /tmp/tmpmbs27ofu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigjkuin8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigjkuin8.jl:1\n\
    in expression starting at /tmp/tmpigjkuin8.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[music_list.length()-1:]\n    music_list = music_list[music_list.length()-1:]\n\
    \    music_list = music_list[musi\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.length()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ui_glb7.jl:15\n\
    in expression starting at /tmp/tmp6ui_glb7.jl:15\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp702rd5bs.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp702rd5bs.jl:1\n\
    in expression starting at /tmp/tmp702rd5bs.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.split(\"o\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpryavhmix.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpryavhmix.jl:1\n\
    in expression starting at /tmp/tmpryavhmix.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkq9tnid6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkq9tnid6.jl:1\n\
    in expression starting at /tmp/tmpkq9tnid6.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1w31d1f.jl:1\nin expression starting at /tmp/tmpe1w31d1f.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpwrw2iw9q.jl:49\nin expression starting at /tmp/tmpwrw2iw9q.jl:49\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"o\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsl7e9rtc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsl7e9rtc.jl:1\n\
    in expression starting at /tmp/tmpsl7e9rtc.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.start-1:end]\n    music_string =\
    \ music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflf9isib.jl:1\nin expression starting at /tmp/tmpflf9isib.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\") + musi\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvjhukeje.jl:15\n\
    in expression starting at /tmp/tmpvjhukeje.jl:15\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f3fpmqu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2f3fpmqu.jl:1\n\
    in expression starting at /tmp/tmp2f3fpmqu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatnh9x5o.jl:1\nin expression starting at /tmp/tmpatnh9x5o.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list2\
    \ = music_list\n    music_list3 = music_list\n    music_list4 = music_list\n \
    \   music_list5 = music_list\n    music_list6 = music_list\n    music_list7 =\
    \ music_list\n    music_list8 = music_list\n    music_list9 = music_list\n   \
    \ music_list10 = music_list\n    music_list11 = music_list\n    music_list12 =\
    \ music_list\n    music_list13 = music_list\n    music_list14 = music_list\n \
    \   music_list15 = music_list\n    music_list16 = music_list\n    music_list17\
    \ = music_list\n    music_list18 = music_list\n    music_list19 = music_list\n\
    \    music_list20 = music_list\n    music_list21 = music_list\n    music_list22\
    \ = music_list\n    music_list23 = music_list\n    music_list24 = music_list\n\
    \    music_list25 = music_list\n    music_list26 = music_list\n    music_list27\
    \ = music_list\n    music_list28 = music_list\n    music_list29 = music_list\n\
    \    music_list30 = music_list\n    music_list31 = music_list\n    music_list32\
    \ = music_list\n    music_list33 = music_list\n    music_list34 = music_list\n\
    \    music_list35 = music_list\n    music_list36 = music_list\n    music_list37\
    \ = music_list\n    music_list38 = music_list\n    music_list39 = music_list\n\
    \    music_list40 = music_list\n    music_list41 = music_list\n    music_list42\
    \ = music_list\n    music_list43 = music_list\n    music_list44 = music_list\n\
    \    music_list45 = music_list\n    music_list46 = music_list\n    music_list47\
    \ = music_list\n    music_list48 = music_list\n    music_list49 = music_list\n\
    \    music_list50 = music_list\n    music_list51 = music_list\n    music_list5\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4b9pl68f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4b9pl68f.jl:1\n\
    in expression starting at /tmp/tmp4b9pl68f.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimvt7e42.jl:15\n\
    in expression starting at /tmp/tmpimvt7e42.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2mn506sh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2mn506sh.jl:1\n\
    in expression starting at /tmp/tmp2mn506sh.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = filter(x -> x != \"\", music_list)\n    music_list = map(x -> parse(x), music_list)\n\
    \    music_list = filter(x -> x != \"\", music_list)\n    music_list = map(x ->\
    \ x * 4, music_list)\n    music_list = filter(x -> x != \"\", music_list)\n  \
    \  music_list = map(x -> x * 2, music_list)\n    music_list = filter(x -> x !=\
    \ \"\", music_list)\n    music_list = map(x -> x, music_list)\n    music_list\
    \ = filter(x -> x != \"\", music_list)\n    music_list = map(x -> x, music_list)\n\
    \    music_list = filter(x -> x != \"\", music_list)\n    music_list = map(x ->\
    \ x, music_list)\n    music_list = filter(x -> x != \"\", music_list)\n    music_list\
    \ = map(x -> x, music_list)\n    music_list = filter(x -> x != \"\", music_list)\n\
    \    music_list = map(x -> x, music_list)\n    music_list = filter(x -> x != \"\
    \", music_list)\n    music_list = map(x -> x, music_list)\n    music_list = filter(x\
    \ -> x != \"\", music_list)\n    music_list = map(x -> x, music_list)\n    music_list\
    \ = filter(x -> x != \"\", music_list)\n    music_list = map(x -> x, music_list)\n\
    \    music_list = filter(x -> x != \"\", music_list)\n    music_list = map(x ->\
    \ x, music_list)\n    music_list = filter(x -> x != \"\", music_list)\n    music_list\
    \ = map(x -> x, music_list)\n    music_list = filter(x -> x != \"\", music_list)\n\
    \    music_list = map(x -> x, music_list)\n    music_list = filter(x -> x != \"\
    \", music_list)\n    music_list = map(x -> x, music_list)\n    music_list = filter(x\
    \ -> x != \"\", music_list)\n    music_list = map(x -> x, music_list)\n    music_list\
    \ = filter(x -> x != \"\", music_list)\n    music_list = map(x -> x, music_list)\n\
    \    music_list = filter(x -> x != \"\", music_list)\n    music_list = map(x ->\
    \ x, music_list)\n    music_list = filter(x -> x != \"\", music_list)\n    music_list\
    \ = map(x -> x, musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlgvtksy.jl:54\nin expression starting at\
    \ /tmp/tmpqlgvtksy.jl:54\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"-\"\
    ) + 1 .. end]\n    music_string = music_string[1 .. music_string.find(\"-\")]\n\
    \    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    o\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    o\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    o\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    o\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    o\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    o\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"o\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35omukux.jl:1\nin expression starting at /tmp/tmp35omukux.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzhlz3fpm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzhlz3fpm.jl:1\n\
    in expression starting at /tmp/tmpzhlz3fpm.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    return music_notes\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function\n@test parse_music(\"o o| .| o| o| .| .| .| .| o o\") ==\
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n</cell>\n<text>\nTask 3\nWrite a function\
    \ that will take a string representing musical notes and return a list of integers\
    \ representing how long each note lasts.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xa74t9o.jl:23\nin expression starting at\
    \ /tmp/tmp6xa74t9o.jl:23\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd1nl3_ex.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd1nl3_ex.jl:1\n\
    in expression starting at /tmp/tmpd1nl3_ex.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_i66dki.jl:1\nin expression starting at /tmp/tmpq_i66dki.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplaavonaj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplaavonaj.jl:1\n\
    in expression starting at /tmp/tmplaavonaj.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\n    music_string = music_string[music_string.findfirst(\"\
    o\") + 1 .. music_string.findfirst(\"o\") + music_string.findfirst(\"|\")]\n \
    \   music_string = music_string[music_string.findfirst(\".\") + 1 .. music_string.findfirst(\"\
    .\") + music_string.findfirst(\"|\")]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsizppik0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsizppik0.jl:1\n\
    in expression starting at /tmp/tmpsizppik0.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwaqunn_o.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwaqunn_o.jl:1\n\
    in expression starting at /tmp/tmpwaqunn_o.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuho8o9zq.jl:1\nin expression starting at /tmp/tmpuho8o9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n   \
    \ music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n   \
    \ music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n   \
    \ music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n   \
    \ music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8p6ebvc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8p6ebvc.jl:1\n\
    in expression starting at /tmp/tmpq8p6ebvc.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd1nl3_ex.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd1nl3_ex.jl:1\n\
    in expression starting at /tmp/tmpd1nl3_ex.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjgfiukb.jl:1\nin expression starting at /tmp/tmptjgfiukb.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphxzcxoyo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphxzcxoyo.jl:1\n\
    in expression starting at /tmp/tmphxzcxoyo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzhlz3fpm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzhlz3fpm.jl:1\n\
    in expression starting at /tmp/tmpzhlz3fpm.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimvt7e42.jl:15\n\
    in expression starting at /tmp/tmpimvt7e42.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21umnama.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21umnama.jl:1\n\
    in expression starting at /tmp/tmp21umnama.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f8gt37h.jl:52\nin expression starting at\
    \ /tmp/tmp3f8gt37h.jl:52\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"o|\"]\n    music_string =\
    \ [x for x in music_string if x != \".|\"]\n    music_string = [x for x in music_string\
    \ if x != \".\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"o|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"o|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp05ulw5lm.jl:48\nin expression starting at /tmp/tmp05ulw5lm.jl:48\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5kfsl0x.jl:15\n\
    in expression starting at /tmp/tmpl5kfsl0x.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd1nl3_ex.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd1nl3_ex.jl:1\n\
    in expression starting at /tmp/tmpd1nl3_ex.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngkw9vot.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngkw9vot.jl:1\n\
    in expression starting at /tmp/tmpngkw9vot.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6mafmu4.jl:41\nin expression starting at\
    \ /tmp/tmpu6mafmu4.jl:41\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpanxcjkf5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanxcjkf5.jl:1\n\
    in expression starting at /tmp/tmpanxcjkf5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+1]\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimvt7e42.jl:15\n\
    in expression starting at /tmp/tmpimvt7e42.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3ppzlqs.jl:30\nin expression starting at\
    \ /tmp/tmpw3ppzlqs.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list2\
    \ = []\n    for music in music_list\n        if music != \".\"\n            music_list2\
    \ += music_list\n            music_list2 = music_list2[2:end]\n        end\n \
    \   end\n    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_list2 = music_list2[2:end]\n\
    \    music_list2 = music_list2[2:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl3_7ws46.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3_7ws46.jl:1\n\
    in expression starting at /tmp/tmpl3_7ws46.jl:1\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper0u_vy5.jl:30\nin expression starting at\
    \ /tmp/tmper0u_vy5.jl:30\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\".\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0nci8bq.jl:1\nin expression starting at /tmp/tmps0nci8bq.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpltlp4jy5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpltlp4jy5.jl:1\n\
    in expression starting at /tmp/tmpltlp4jy5.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpwrw2iw9q.jl:49\nin expression starting at /tmp/tmpwrw2iw9q.jl:49\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[2:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpputf6xuq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpputf6xuq.jl:1\n\
    in expression starting at /tmp/tmpputf6xuq.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n  \
    \  music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"|\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 :]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jrns9ho.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6jrns9ho.jl:1\n\
    in expression starting at /tmp/tmp6jrns9ho.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfjwzik6.jl:1\nin expression starting at /tmp/tmpzfjwzik6.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpfbs71_pj.jl:49\nin expression starting at /tmp/tmpfbs71_pj.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yt7ky6w.jl:35\nin expression starting at\
    \ /tmp/tmp2yt7ky6w.jl:35\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppljmffc2.jl:30\nin expression starting at\
    \ /tmp/tmppljmffc2.jl:30\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpos5duwo6.jl:1\nin expression starting at /tmp/tmpos5duwo6.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = replace(music_string, \"o|\", \"\
    o\")\n    music_string = replace(music_string, \".|\", \".\")\n    music_string\
    \ = replace(music_string, \"o\", \"o|\")\n    music_string = replace(music_string,\
    \ \".\", \".|\")\n    music_string = replace(music_string, \"|\", \"o|\")\n  \
    \  music_string = replace(music_string, \"|\", \".|\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \".\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\", \"o\")\n    music_string = replace(music_string,\
    \ \"|\", \"o\")\n    music_string = replace(music_string, \"|\", \"o\")\n    music_string\
    \ = replace(music_string, \"|\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwkl5rcs.jl:56\nin expression starting at\
    \ /tmp/tmpuwkl5rcs.jl:56\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpwrw2iw9q.jl:49\nin expression starting at /tmp/tmpwrw2iw9q.jl:49\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\")]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt6gjiaap.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt6gjiaap.jl:1\n\
    in expression starting at /tmp/tmpt6gjiaap.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"/\"\
    ) + 1 : end]\n    music_string = music_string[1 : music_string.find(\"/\")]\n\
    \    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = music_string[1 : music_string.find(\"/\")]\n    music_string = music_string[1\
    \ : music_string.find(\"/\")]\n    music_string = music_string[1 : music_string.find(\"\
    /\")]\n    music_string = music_string[1 : music_string.find(\"/\")]\n    music_string\
    \ = musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnqjhom79.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnqjhom79.jl:1\n\
    in expression starting at /tmp/tmpnqjhom79.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"-\"\
    ) + 1 .. end]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n\
    \    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[1 .. music_string.find(\"\
    |\")]\n    music_string = music_string[1 .. music_string.find(\"|\")]\n    music_string\
    \ = music_string[1 .. music_string.find(\"|\")]\n    music_string = music_string[1\
    \ .. music_string.find(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuvrzo_t.jl:1\nin expression starting at /tmp/tmpvuvrzo_t.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.last))\n    music_notes = music_notes.map(x -> x.map(x -> x.last))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.last))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.last))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.last))\n    music_notes = music_notes.map(x -> x.map(x -> x.last))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.last))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.last))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.last))\n    music_notes = music_notes.map(x -> x.map(x -> x.last))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.last))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.last))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.last))\n    music_notes = music_notes.map(x -> x.map(x -> x.last))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.last))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.last))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.last))\n    music_notes = music_notes.map(x -> x.map(x -> x.last))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.last))\n    music_notes =\
    \ music_notes.map(x -> x.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cq9lvf5.jl:42\nin expression starting at\
    \ /tmp/tmp3cq9lvf5.jl:42\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_g_m79ar.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_g_m79ar.jl:1\n\
    in expression starting at /tmp/tmp_g_m79ar.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpfbs71_pj.jl:49\nin expression starting at /tmp/tmpfbs71_pj.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjaoh_xuz.jl:16\n\
    in expression starting at /tmp/tmpjaoh_xuz.jl:16\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7awyxgeh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7awyxgeh.jl:1\n\
    in expression starting at /tmp/tmp7awyxgeh.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngkw9vot.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngkw9vot.jl:1\n\
    in expression starting at /tmp/tmpngkw9vot.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp92vwx1aq.jl:15\n\
    in expression starting at /tmp/tmp92vwx1aq.jl:15\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x => x.strip)\n    music_notes\
    \ = music_notes.map(x => x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.toInt))\n    music_notes = music_notes.map(x => x.map(x => x.sum))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.max))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.min))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.product))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n   \
    \ music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.product))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n   \
    \ music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.product))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n   \
    \ music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.product))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.product))\n   \
    \ music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.product))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.sum))\n    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps2y0itba.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps2y0itba.jl:1\n\
    in expression starting at /tmp/tmps2y0itba.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufcw7qag.jl:1\nin expression starting at /tmp/tmpufcw7qag.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    o\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \".|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string[music_string == \"o|\"]\n    music_string\
    \ = music_string[music_string == \"o|\"]\n    music_string = music_string[music_string\
    \ == \"o|\"]\n    music_string = music_string\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfd4h_i7a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfd4h_i7a.jl:1\n\
    in expression starting at /tmp/tmpfd4h_i7a.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38mx0ai6.jl:1\nin expression starting at /tmp/tmp38mx0ai6.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3ppzlqs.jl:30\nin expression starting at\
    \ /tmp/tmpw3ppzlqs.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpfbs71_pj.jl:49\nin expression starting at /tmp/tmpfbs71_pj.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5kfsl0x.jl:15\n\
    in expression starting at /tmp/tmpl5kfsl0x.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3ppzlqs.jl:30\nin expression starting at\
    \ /tmp/tmpw3ppzlqs.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpos5duwo6.jl:1\nin expression starting at /tmp/tmpos5duwo6.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vxfkq28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vxfkq28.jl:1\n\
    in expression starting at /tmp/tmp0vxfkq28.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string\n    music_string = music_string.strip\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7vpolv7g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7vpolv7g.jl:1\n\
    in expression starting at /tmp/tmp7vpolv7g.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbnpoviym.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbnpoviym.jl:1\n\
    in expression starting at /tmp/tmpbnpoviym.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpanxcjkf5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpanxcjkf5.jl:1\n\
    in expression starting at /tmp/tmpanxcjkf5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn17g4ei.jl:1\nin expression starting at /tmp/tmpzn17g4ei.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngkw9vot.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngkw9vot.jl:1\n\
    in expression starting at /tmp/tmpngkw9vot.jl:1\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"o\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"o\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"o\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"o\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. end]\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw36njxov.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw36njxov.jl:1\n\
    in expression starting at /tmp/tmpw36njxov.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpis5heiwo.jl:15\n\
    in expression starting at /tmp/tmpis5heiwo.jl:15\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38mx0ai6.jl:1\nin expression starting at /tmp/tmp38mx0ai6.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    \ \"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps_uxlvm7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps_uxlvm7.jl:1\n\
    in expression starting at /tmp/tmps_uxlvm7.jl:1\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[musi\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1m8y0_f.jl:1\nin expression starting at /tmp/tmpo1m8y0_f.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list2 = music_list\n    music_list3 =\
    \ music_list\n    music_list4 = music_list\n    music_list5 = music_list\n   \
    \ music_list6 = music_list\n    music_list7 = music_list\n    music_list8 = music_list\n\
    \    music_list9 = music_list\n    music_list10 = music_list\n    music_list11\
    \ = music_list\n    music_list12 = music_list\n    music_list13 = music_list\n\
    \    music_list14 = music_list\n    music_list15 = music_list\n    music_list16\
    \ = music_list\n    music_list17 = music_list\n    music_list18 = music_list\n\
    \    music_list19 = music_list\n    music_list20 = music_list\n    music_list21\
    \ = music_list\n    music_list22 = music_list\n    music_list23 = music_list\n\
    \    music_list24 = music_list\n    music_list25 = music_list\n    music_list26\
    \ = music_list\n    music_list27 = music_list\n    music_list28 = music_list\n\
    \    music_list29 = music_list\n    music_list30 = music_list\n    music_list31\
    \ = music_list\n    music_list32 = music_list\n    music_list33 = music_list\n\
    \    music_list34 = music_list\n    music_list35 = music_list\n    music_list36\
    \ = music_list\n    music_list37 = music_list\n    music_list38 = music_list\n\
    \    music_list39 = music_list\n    music_list40 = music_list\n    music_list41\
    \ = music_list\n    music_list42 = music_list\n    music_list43 = music_list\n\
    \    music_list44 = music_list\n    music_list45 = music_list\n    music_list46\
    \ = music_list\n    music_list47 = music_list\n    music_list48 = music_list\n\
    \    music_list49 = music_list\n    music_list50 = music_list\n    music_list51\
    \ = music_list\n    music_list52 = music_list\n    music_list\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxg3x6ca.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxg3x6ca.jl:1\n\
    in expression starting at /tmp/tmprxg3x6ca.jl:1\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm4zyzsm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4zyzsm_.jl:1\n\
    in expression starting at /tmp/tmpm4zyzsm_.jl:1\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_list\
    \ = music_string.split(\" \")\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_list.length()-1:music_list.length()]\n    music_list = music_list[music_list.length()-1:music_list.length()]\n\
    \    music_list = music_list[music_list.length()-1:music_list.length()]\n    music_list\
    \ = music_list[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxlh8gjx.jl:1\nin expression starting at /tmp/tmpzxlh8gjx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjaoh_xuz.jl:16\n\
    in expression starting at /tmp/tmpjaoh_xuz.jl:16\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigu7ms26.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigu7ms26.jl:1\n\
    in expression starting at /tmp/tmpigu7ms26.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3ppzlqs.jl:30\nin expression starting at\
    \ /tmp/tmpw3ppzlqs.jl:30\n"
  stdout: ''
