name: HumanEval_18_how_many_times
language: jl
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
  \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
  , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for c in string\n        if c == substring\n       \
    \     count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[:-1], substring[:-1])\n\
    \    \n    return how_many_times(string[1:], substring) + how_many_times(string[:-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring as arguments\
    \ and returns the number of times the substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    return how_many_times(string[1:], substring) + how_many_times(string[-1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that counts the number of times a given substring\
    \ appears in a given string. Count overlaping cases.\n>>> count_substring(\"abcabc\"\
    , \"b\")\n2\n>>> count_substring(\"abcabc\", \"bc\")\n1\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += 1\n            \n            if count == substring.length\n             \
    \   return count\n            \n            if count > substring.length\n    \
    \            return substring.length\n            \n            if substring.length\
    \ == 1\n                return count\n            \n            if substring.length\
    \ == 2\n                return count + 1\n            \n            if substring.length\
    \ == 3\n                return count + 2\n            \n            if substring.length\
    \ == 4\n                return count + 3\n            \n            if substring.length\
    \ == 5\n                return count + 4\n            \n            if substring.length\
    \ == 6\n                return count + 5\n            \n            if substring.length\
    \ == 7\n                return count + 6\n            \n            if substring.length\
    \ == 8\n                return count + 7\n            \n            if substring.length\
    \ == 9\n                return count + 8\n            \n            if substring.length\
    \ == 10\n                return count + 9\n            \n            if substring.length\
    \ == 11\n                return count + 10\n            \n            if substring.length\
    \ == 12\n                return count + 11\n            \n            if substring.length\
    \ == 13\n                return count + 12\n            \n            if substring.length\
    \ == 14\n                return count + 13\n            \n            if substring.length\
    \ == 15\n                return count + 14\n            \n            if substring.length\
    \ == 16\n                return count + 15\n            \n            if substring.length\
    \ == 17\n                return count + 16\n            \n            if substring.length\
    \ == 18\n                return count + 17\n            \n            if substring.length\
    \ == 19\n                return count + 18\n            \n            if substring.length\
    \ == 20\n                return count + 19\n            \n            if substring.length\
    \ == 21\n                return count + 20\n            \n            if substring.length\
    \ == 22\n                return count + 21\n            \n            if substring.length\
    \ == 23\n                return count + 22\n            \n            if substring.length\
    \ == 24\n                return count + 23\n            \n            if substring.length\
    \ == 25\n                return count + 24\n            \n            if substring.length\
    \ == 26\n                return count + 25\n            \n            if substring.length\
    \ == 27\n                return count + 26\n            \n            if substring.length\
    \ == 28\n                return count + 27\n            \n            if substring.length\
    \ == 29\n                return count + 28\n            \n            if substring.length\
    \ == 30\n                return count + 29\n            \n            if substring.length\
    \ == 31\n                return count + 30\n            \n            if substring.length\
    \ == 32\n                return count + 31\n            \n            if substring.length\
    \ == 33\n                return count + 32\n            \n            if substring.length\
    \ == 34\n                return count + 33\n            \n            if substring.length\
    \ == 35\n                return count + 34\n            \n            if substring.length\
    \ == 36\n                return count + 35\n            \n            if substring.length\
    \ == 37\n                return count + ", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[-1:], substring[-1:])\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[-1:], substring[-1:])\n    \n    return\
    \ how_many_times(string[1:], substring) + how_many_times(string[-1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[0]\n            count = count + 1\n            \n\
    \            if char == substring[1]\n                count = count + 1\n    \
    \            \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaa\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"aaaa\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"aaaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaaaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaa\" appears in the string. \nWrite a\
    \ function that takes a string and returns the number of times the string \"aaaaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaaaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    aaaaaaaaaaaaaaa\" appears in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"aaaaaaaaaaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaaaaaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaaaaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ with all the characters in lowercase and with all the characters in uppercase\
    \ removed. \nFor example \"hello\" -> \"hEllo\"\nFor example \"hello\" -> \"HeLLo\"\
    \nFor example \"hello\" -> \"HellO\"\nFor example \"hello\" -> \"Hello\"\nFor\
    \ example \"hello\" -> \"hello\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"\
    HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\
    \nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor\
    \ example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"\
    HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\
    \nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor\
    \ example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example ", "    if string\
    \ == \"\" || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the substring appears within the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n            \n            if char == substring[1]\n   \
    \             count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0 \n    else if substring == string\n \
    \       return 1 \n    else if string[1..] == substring\n        return 1 + how_many_times(string[1..],\
    \ substring)\n    else\n        return how_many_times(string[1..], substring)\
    \ + how_many_times(string, substring[1..])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring.length\
    \ == string.length\n        return string.count(substring)\n    else\n       \
    \ return how_many_times(string.substring(0,substring.length), substring) + how_many_times(string.substring(substring.length),\
    \ substring)\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count::Int64\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            if count == substring.length\n                return\
    \ count\n            \n            if substring.length == 1 && substring[0] !=\
    \ char\n                count = 0\n            \n            if substring.length\
    \ == 2 && substring[0] != char\n                count = 0\n            \n    \
    \        if substring.length == 3 && substring[0] != char\n                count\
    \ = 0\n            \n            if substring.length == 4 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 5\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 6 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 7 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 8\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 9 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 10 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 11\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 12 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 13 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 14\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 15 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 16 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 17\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 18 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 19 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 20\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 21 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 22 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 23\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 24 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 25 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 26\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 27 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 28 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 29\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 30 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 31 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 32\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    \n    i = 0\n    \n    while i < length(string)\n        if substring(i,\
    \ 1) == string[i]\n            i += 1\n        else\n            i += 1\n    \
    \        \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring[0]\n            count =\
    \ count + 1\n            \n            if char == substring[1]\n             \
    \   count = count + 1\n                \n                if char == substring[2]\n\
    \                    count = count + 1\n                \n                   \
    \ if char == substring[3]\n                        count = count + 1\n       \
    \     \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count += how_many_times(string[1..end], substring)\n        else\n       \
    \     count += how_many_times(string[1..end], substring[1:])\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a substring appears in a string. Count overlaping cases.\n \
    \   >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaa\")\n    3\n    >>>\
    \ how_many_times(\"aaaa\", \"aaaaa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aaaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaa\")\n    3\n \
    \   >>> how_many_times(\"aaaa\", \"aaaaaaab\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbb\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbb\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n    3\n    >>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n    3\n  \
    \  >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbbbaaaaaaaab\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbb",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n            \n            if char == substring[1]\n   \
    \             count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
