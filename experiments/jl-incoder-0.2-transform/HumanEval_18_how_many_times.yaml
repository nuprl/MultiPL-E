name: HumanEval_18_how_many_times
language: jl
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
  \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
  , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for c in string\n        if c == substring\n       \
    \     count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[:-1], substring[:-1])\n\
    \    \n    return how_many_times(string[1:], substring) + how_many_times(string[:-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring as arguments\
    \ and returns the number of times the substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    return how_many_times(string[1:], substring) + how_many_times(string[-1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that counts the number of times a given substring\
    \ appears in a given string. Count overlaping cases.\n>>> count_substring(\"abcabc\"\
    , \"b\")\n2\n>>> count_substring(\"abcabc\", \"bc\")\n1\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += 1\n            \n            if count == substring.length\n             \
    \   return count\n            \n            if count > substring.length\n    \
    \            return substring.length\n            \n            if substring.length\
    \ == 1\n                return count\n            \n            if substring.length\
    \ == 2\n                return count + 1\n            \n            if substring.length\
    \ == 3\n                return count + 2\n            \n            if substring.length\
    \ == 4\n                return count + 3\n            \n            if substring.length\
    \ == 5\n                return count + 4\n            \n            if substring.length\
    \ == 6\n                return count + 5\n            \n            if substring.length\
    \ == 7\n                return count + 6\n            \n            if substring.length\
    \ == 8\n                return count + 7\n            \n            if substring.length\
    \ == 9\n                return count + 8\n            \n            if substring.length\
    \ == 10\n                return count + 9\n            \n            if substring.length\
    \ == 11\n                return count + 10\n            \n            if substring.length\
    \ == 12\n                return count + 11\n            \n            if substring.length\
    \ == 13\n                return count + 12\n            \n            if substring.length\
    \ == 14\n                return count + 13\n            \n            if substring.length\
    \ == 15\n                return count + 14\n            \n            if substring.length\
    \ == 16\n                return count + 15\n            \n            if substring.length\
    \ == 17\n                return count + 16\n            \n            if substring.length\
    \ == 18\n                return count + 17\n            \n            if substring.length\
    \ == 19\n                return count + 18\n            \n            if substring.length\
    \ == 20\n                return count + 19\n            \n            if substring.length\
    \ == 21\n                return count + 20\n            \n            if substring.length\
    \ == 22\n                return count + 21\n            \n            if substring.length\
    \ == 23\n                return count + 22\n            \n            if substring.length\
    \ == 24\n                return count + 23\n            \n            if substring.length\
    \ == 25\n                return count + 24\n            \n            if substring.length\
    \ == 26\n                return count + 25\n            \n            if substring.length\
    \ == 27\n                return count + 26\n            \n            if substring.length\
    \ == 28\n                return count + 27\n            \n            if substring.length\
    \ == 29\n                return count + 28\n            \n            if substring.length\
    \ == 30\n                return count + 29\n            \n            if substring.length\
    \ == 31\n                return count + 30\n            \n            if substring.length\
    \ == 32\n                return count + 31\n            \n            if substring.length\
    \ == 33\n                return count + 32\n            \n            if substring.length\
    \ == 34\n                return count + 33\n            \n            if substring.length\
    \ == 35\n                return count + 34\n            \n            if substring.length\
    \ == 36\n                return count + 35\n            \n            if substring.length\
    \ == 37\n                return count + ", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[-1:], substring[-1:])\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[-1:], substring[-1:])\n    \n    return\
    \ how_many_times(string[1:], substring) + how_many_times(string[-1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[0]\n            count = count + 1\n            \n\
    \            if char == substring[1]\n                count = count + 1\n    \
    \            \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaa\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"aaaa\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"aaaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaaaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaa\" appears in the string. \nWrite a\
    \ function that takes a string and returns the number of times the string \"aaaaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaaaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    aaaaaaaaaaaaaaa\" appears in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"aaaaaaaaaaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaaaaaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaaaaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ with all the characters in lowercase and with all the characters in uppercase\
    \ removed. \nFor example \"hello\" -> \"hEllo\"\nFor example \"hello\" -> \"HeLLo\"\
    \nFor example \"hello\" -> \"HellO\"\nFor example \"hello\" -> \"Hello\"\nFor\
    \ example \"hello\" -> \"hello\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"\
    HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\
    \nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor\
    \ example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"\
    HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\
    \nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor\
    \ example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example ", "    if string\
    \ == \"\" || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the substring appears within the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n            \n            if char == substring[1]\n   \
    \             count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0 \n    else if substring == string\n \
    \       return 1 \n    else if string[1..] == substring\n        return 1 + how_many_times(string[1..],\
    \ substring)\n    else\n        return how_many_times(string[1..], substring)\
    \ + how_many_times(string, substring[1..])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring.length\
    \ == string.length\n        return string.count(substring)\n    else\n       \
    \ return how_many_times(string.substring(0,substring.length), substring) + how_many_times(string.substring(substring.length),\
    \ substring)\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count::Int64\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            if count == substring.length\n                return\
    \ count\n            \n            if substring.length == 1 && substring[0] !=\
    \ char\n                count = 0\n            \n            if substring.length\
    \ == 2 && substring[0] != char\n                count = 0\n            \n    \
    \        if substring.length == 3 && substring[0] != char\n                count\
    \ = 0\n            \n            if substring.length == 4 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 5\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 6 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 7 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 8\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 9 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 10 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 11\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 12 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 13 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 14\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 15 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 16 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 17\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 18 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 19 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 20\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 21 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 22 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 23\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 24 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 25 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 26\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 27 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 28 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 29\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 30 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 31 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 32\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    \n    i = 0\n    \n    while i < length(string)\n        if substring(i,\
    \ 1) == string[i]\n            i += 1\n        else\n            i += 1\n    \
    \        \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring[0]\n            count =\
    \ count + 1\n            \n            if char == substring[1]\n             \
    \   count = count + 1\n                \n                if char == substring[2]\n\
    \                    count = count + 1\n                \n                   \
    \ if char == substring[3]\n                        count = count + 1\n       \
    \     \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count += how_many_times(string[1..end], substring)\n        else\n       \
    \     count += how_many_times(string[1..end], substring[1:])\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a substring appears in a string. Count overlaping cases.\n \
    \   >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaa\")\n    3\n    >>>\
    \ how_many_times(\"aaaa\", \"aaaaa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aaaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaa\")\n    3\n \
    \   >>> how_many_times(\"aaaa\", \"aaaaaaab\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbb\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbb\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n    3\n    >>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n    3\n  \
    \  >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbbbaaaaaaaab\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbb",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n            \n            if char == substring[1]\n   \
    \             count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c\
    \ in string\n        if c == substring\n            count += 1\n        else\n\
    \            count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\")\n3\n>>> how_many_times(\"\
    aaaaa\", \"aa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaa\")\n4\n>>> how_many_times(\"\
    aaaaaa\", \"aa\")\n5\n>>> how_many_times(\"aaaaaa\", \"aaa\")\n5\n>>> how_many_times(\"\
    aaaaaaa\", \"aa\")\n6\n>>> how_many_times(\"aaaaaaa\", \"aaa\")\n6\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaa\")\n7\n>>>\
    \ how_many_times(\"aaaaaaa\", \"aaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaa\")\n\
    7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaaa\"\
    )\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of times a substring appears in a given string. Count\
    \ overlaping cases.\nHint: Use a recursive function.", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for char\
    \ in string\n        if char == substring[0]\n            count += how_many_times(string[1..end],\
    \ substring)\n        elseif char == substring[1]\n            count += how_many_times(string[1..end-1],\
    \ substring)\n        else\n            count += 1\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Case insensitive.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times a substring appears in that string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    string::String = string.lower()\n    substring::String = substring.lower()\n\
    \    \n    i = 0\n    \n    while i < length(substring)\n        if string[i]\
    \ == substring[i]\n            i += 1\n        else\n            i = 0\n     \
    \   end\n    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for i in string.chars()\n        if i == substring[0]\n       \
    \     count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    \n    i = 0\n    \n    while i < length(substring)\n\
    \        if substring(i, 1) == string\n            i += 1\n        else\n    \
    \        i += 1\n        end\n    end\n    \n    return i\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    if len_string == len_substring\n        return count_substring(string, substring)\n\
    \    \n    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 0, len_substring), substring)\n    \n    return how_many_times(substring(string,\
    \ 0, len_string), substring)\nend", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return 1 + how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that counts the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\n>>> how_many_times_2(\"\
    \", \"a\")\n0\n>>> how_many_times_2(\"aaa\", \"a\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaab\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaba\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaabaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaabaaab\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaaba\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaabaaabaa\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaabaaabaaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaab\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaabaaabaaaba\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaabaaabaaabaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaaa\")\n\
    3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaaab\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaabaaabaaabaaaba\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaaabaa\"\
    )\n3\n>>> how_", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    if len_string == len_substring\n        return count_overlaping_cases(string,\
    \ substring)\n    \n    substring = substring(substring)\n    \n    count = 0\n\
    \    \n    for c in string\n        if c == substring\n            count += 1\n\
    \        else\n            count = 0\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    if len_string == len_substring\n        return count_substring(string, substring)\n\
    \    \n    if len_substring > len_string\n        return how_many_times(substring(string,\
    \ 0, len_substring), substring)\n    \n    return how_many_times(substring(string,\
    \ 0, len_string), substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    count::Int64\
    \ = 0\n    \n    i = 0\n    \n    while i < length(substring)\n        if substring(i,\
    \ 1) == string[i]\n            count += 1\n            i += 1\n        else\n\
    \            i = 0\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.1>", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the substring appears consecutively.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 0, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n<code language=", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_overlaping_cases(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 0, len_string), substring)\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    \n  \
    \  count = 0\n    \n    for char in string\n        if char == substring[0]\n\
    \            count = count + 1\n            \n            if char == substring[1]\n\
    \                count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c\
    \ in string\n        if c == substring\n            count += 1\n        else\n\
    \            count = 0\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.\n\
    >>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n\
    3\n>>> how_many_times(\"aaaa\", \"aaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaab\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaaba\")\n3\n>>> how_many_times(\"aaaa\"\
    , \"aaabaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaaba\")\n3\n>>>\
    \ how_many_times(\"aaaa\", \"aaabaaabaa\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaabaaabaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaab\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaaba\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaabaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaaab\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    \n    count::Int64 = 0\n    \n\
    \    for c in string\n        if c == substring\n            count += 1\n    \
    \    end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that counts the number of times\
    \ a substring appears in a string. Count overlaping cases.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    a\", \"a\")\n0\n>>> how_many_times(\"aaaa\", \"b\")\n0\n>>> how_many_times(\"\
    a\", \"b\")\n0\n>>> how_many_times(\"ab\", \"a\")\n1\n>>> how_many_times(\"ab\"\
    , \"b\")\n1\n>>> how_many_times(\"ab\", \"c\")\n0\n>>> how_many_times(\"ab\",\
    \ \"d\")\n0\n>>> how_many_times(\"ab\", \"e\")\n0\n>>> how_many_times(\"ab\",\
    \ \"f\")\n0\n>>> how_many_times(\"ab\", \"g\")\n0\n>>> how_many_times(\"ab\",\
    \ \"h\")\n0\n>>> how_many_times(\"ab\", \"i\")\n0\n>>> how_many_times(\"ab\",\
    \ \"j\")\n0\n>>> how_many_times(\"ab\", \"k\")\n0\n>>> how_many_times(\"ab\",\
    \ \"l\")\n0\n>>> how_many_times(\"ab\", \"m\")\n0\n>>> how_many_times(\"ab\",\
    \ \"n\")\n0\n>>> how_many_times(\"ab\", \"o\")\n0\n>>> how_many_times(\"ab\",\
    \ \"p\")\n0\n>>> how_many_times(\"ab\", \"q\")\n0\n>>> how_many_times(\"ab\",\
    \ \"r\")\n0\n>>> how_many_times(\"ab\", \"s\")\n0\n>>> how_many_times(\"ab\",\
    \ \"t\")\n0\n>>> how_many_times(\"ab\", \"u\")\n0\n>>> how_many_times(\"ab\",\
    \ \"v\")\n0\n>>> how_many_times(\"ab\", \"w\")\n0\n>>> how_many_times(\"ab\",\
    \ \"x\")\n0\n>>> how_many_times(\"ab\", \"y\")\n0\n>>> how_many_times(\"ab\",\
    \ \"z\")\n0\n>>> how_man", "    if string == \"\" || substring == \"\"\n     \
    \   return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ the string.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    \n    count = 0\n    \n    for c in string\n        if c == substring\n \
    \           count += 1\n        else\n            count = 0\n    end\n    \n \
    \   return count\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string and returns a string where all occurrences of \"a\" have\
    \ been replaced with \"b\".", "    if string == \"\" || substring == \"\"\n  \
    \      return 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0\n        return len_substring\n    \n    if len_substring\
    \ == 0\n        return len_string\n    \n    if substring(0,1) == substring(1,1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,len_substring-1) == substring(len_substring-1,len_substring)\n\
    \        return how_many_times(substring(1,len_string), substring(len_substring+1,len_string))\n\
    \    \n    if substring(0,len_substring-1) == substring(len_substring-1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(len_substring+1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring as arguments and returns the number of times the substring appears\
    \ in the string. Case insensitive.", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    else if string[0] == substring[0]\n        return 1\
    \ + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, if the input string is\
    \ \"abcabc\", the output should be [('a', 3), ('b', 2), ('c', 3)]", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_overlaps(string, substring)\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    string::String = string.lower()\n\
    \    substring::String = substring.lower()\n    \n    i = 0\n    j = 0\n    \n\
    \    while i < len(string) && j < len(substring)\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ < substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    return j - i\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a new string where all characters have been converted to lowercase and all spaces\
    \ have been removed.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    if len_string == len_substring\n        return count_overlaping_cases(string,\
    \ substring)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    else if substring == string\n        return 1\n\
    \    else if string[1..] == substring\n        return 1 + how_many_times(string[..-1],\
    \ substring)\n    else\n        return how_many_times(string[1..], substring)\
    \ + how_many_times(string, substring[1..])\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a string and returns the number of times a substring\
    \ appears within that string.", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring\
    \ == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    i = 0\n    \n    while\
    \ i < length(string)\n        if substring(i, length(string)) in string\n    \
    \        i += 1\n        else\n            i = 0\n        end\n    end\n    \n\
    \    return i\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c\
    \ in string\n        if c == substring\n            count += 1\n        else\n\
    \            count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. Count overlaping\
    \ cases.\nHint: Use a for loop to iterate over the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[0]\
    \ == substring[1]\n        return 1 + how_many_times(string[1:], substring[2:])\n\
    \    \n    if string[1] == substring[0]\n        return 1 + how_many_times(string[2:],\
    \ substring[1:])\n    \n    if string[1] == substring[1]\n        return 1 + how_many_times(string[2:],\
    \ substring[2:])\n    \n    return how_many_times(string[1:], substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times a substring appears consecutively\
    \ in the string.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0 \n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else if string[1] == substring[0]\n        return 1 + how_many_times(string[2:],\
    \ substring[1:])\n    else if string[1] == substring[1]\n        return 1 + how_many_times(string[2:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nHint: Use how_many_times(string, substring)", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times the substring appears anywhere in the string. Case insensitive.\n>>>\
    \ how_many_times(\"The quick brown fox jumps over the lazy dog\", \"jumps\")\n\
    2\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"Dog\"\
    )\n0\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dog\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"DoG\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n0\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"DoGs\"\
    )\n0\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps ", "    count = 0\n    for\
    \ c in string:\n        if c == substring:\n            count += 1\n    return\
    \ count\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell |>\n<code>\nimport\
    \ Data.List\nimport Data.Maybe", "    if string == \"\" || substring == \"\"\n\
    \        return 0 \n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else if string[0] == substring[1]\n\
    \        return 1 + how_many_times(string[1:], substring[2:])\n    else if string[0]\
    \ == substring[2]\n        return 1 + how_many_times(string[1:], substring[3:])\n\
    \    else if string[0] == substring[3]\n        return 1 + how_many_times(string[1:],\
    \ substring[4:])\n    else if string[0] == substring[4]\n        return 1 + how_many_times(string[1:],\
    \ substring[5:])\n    else if string[0] == substring[5]\n        return 1 + how_many_times(string[1:],\
    \ substring[6:])\n    else if string[0] == substring[6]\n        return 1 + how_many_times(string[1:],\
    \ substring[7:])\n    else if string[0] == substring[7]\n        return 1 + how_many_times(string[1:],\
    \ substring[8:])\n    else if string[0] == substring[8]\n        return 1 + how_many_times(string[1:],\
    \ substring[9:])\n    else if string[0] == substring[9]\n        return 1 + how_many_times(string[1:],\
    \ substring[10:])\n    else if string[0] == substring[10]\n        return 1 +\
    \ how_many_times(string[1:], substring[11:])\n    else if string[0] == substring[11]\n\
    \        return 1 + how_many_times(string[1:], substring[12:])\n    else if string[0]\
    \ == substring[12]\n        return 1 + how_many_times(string[1:], substring[13:])\n\
    \    else if string[0] == substring[13]\n        return 1 + how_many_times(string[1:],\
    \ substring[14:])\n    else if string[0] == substring[14]\n        return 1 +\
    \ how_many_times(string[1:], substring[15:])\n    else if string[0] == substring[15]\n\
    \        return 1 + how_many_times(string[1:], substring[16:])\n    else if string[0]\
    \ == substring[16]\n        return 1 + how_many_times(string[1:], substring[17:])\n\
    \    else if string[0] == substring[17]\n        return 1 + how_many_times(string[1:],\
    \ substring[18:])\n    else if string[0] == substring[18]\n        return 1 +\
    \ how_many_times(string[1:], substring[19:])\n    else if string[0] == substring[19]\n\
    \        return 1 + how_many_times(string[1:], substring[20:])\n    else if string[0]\
    \ == substring[20", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    i = 0\n    j = string.length()\n    while i < j\n        if string[i]\
    \ == substring[0]\n            i += 1\n        elseif string[j] == substring[0]\n\
    \            j += 1\n        else\n            if string[i] == substring[1]\n\
    \                i += 1\n            elseif string[j] == substring[1]\n      \
    \          j += 1\n            else\n                if string[i] == substring[2]\n\
    \                    i += 1\n                elseif string[j] == substring[2]\n\
    \                    j += 1\n                else\n                    if string[i]\
    \ == substring[3]\n                        i += 1\n                    elseif\
    \ string[j] == substring[3]\n                        j += 1\n                \
    \    else\n                        if string[i] == substring[4]\n            \
    \                i += 1\n                        elseif string[j] == substring[4]\n\
    \                            j += 1\n                        else\n          \
    \                  if string[i] == substring[5]\n                            \
    \    i += 1\n                            elseif string[j] == substring[5]\n  \
    \                              j += 1\n                            else\n    \
    \                            if string[i] == substring[6]\n                  \
    \                  i += 1\n                                elseif string[j] ==\
    \ substring[6]\n                                    j += 1\n                 \
    \               else\n                                    if string[i] == substring[7]\n\
    \                                        i += 1\n                            \
    \        elseif string[j] == substring[7]\n                                  \
    \      j += 1\n                                    else\n                    \
    \                    if string[i] == substring[8]\n                          \
    \                  i += 1\n                                        elseif string[j]\
    \ == substring[8]\n                                            j += 1\n      \
    \                                  else\n                                    \
    \        if string[i] == substring[9]\n                                      \
    \          i += 1\n                                            elseif string[j]\
    \ == substring[9]\n                                                j += 1\n  \
    \                                          else\n                            \
    \                    if string[i] == substring[10]\n                         \
    \                           i += 1\n                                         \
    \       elseif string[j] == substring[10]\n                                  \
    \                  j += 1\n                                                else\n\
    \                                                    if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                        elseif string[j] == substring[11]\n \
    \                                                       j += 1\n             \
    \                                       else\n                               \
    \                         if string[i] == substring[12]\n                    \
    \                                        i += 1\n                            \
    \                            elseif string[j] == substring[12]\n             \
    \                                               j += 1\n                     \
    \                                   else\n                                   \
    \                         if string[i] == substring[13]\n                    \
    \                                            i += 1\n                        \
    \                                    elseif string[j] == substring[13]\n     \
    \                                                           j += 1\n         \
    \                                                   else\n                   \
    \                                             if string[i] == substring[14]\n\
    \                                                                    i += 1\n\
    \                                                                elseif string[j]\
    \ == substring[14]\n                                                         \
    \           j += 1\n                                                         \
    \       else\n                                                               \
    \     if string[i] == substring[15]\n                                        \
    \                                i += 1\n                                    \
    \                                elseif string[j] == substring[15]\n         \
    \                                                               j += 1\n     \
    \                                                               else\n       \
    \                                                                 if string[i]\
    \ == substring[16]\n                                                         \
    \                   i += 1\n                                                 \
    \                       elseif string[j] == substring[16]\n                  \
    \                                                          j += 1\n          \
    \                                                              else\n        \
    \                                                                    if string[i]\
    \ == substring[17]", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears within it. \nFor example, how_many_times(\"\
    aaaa\", \"aa\") should return 3.", "    if string == \"\" || substring == \"\"\
    \n        return 0 \n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring as arguments and returns the number of times the substring appears\
    \ in the string. Case insensitive.", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    if len_string == 0 || len_substring == 0\n  \
    \      return 0\n    \n    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 1, len_substring), substring)\n    \n    if len_string < len_substring\n   \
    \     return how_many_times(string, substring(string, 0, len_substring))\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if string == \"\" || substring == \"\"\n        return 0\n    else\
    \ if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for char in string\n      \
    \  if char == substring[0]\n            count += 1\n            \n           \
    \ if char == substring[1]\n                count += 1\n                \n    \
    \            if char == substring[2]\n                    count += 1\n       \
    \             \n                    if char == substring[3]\n                \
    \        count += 1\n                        \n                        if char\
    \ == substring[4]\n                            count += 1\n                  \
    \          \n                            if char == substring[5]\n           \
    \                     count += 1\n                                \n         \
    \                       if char == substring[6]\n                            \
    \        count += 1\n                                    \n                  \
    \                  if char == substring[7]\n                                 \
    \       count += 1\n                                        \n               \
    \                         if char == substring[8]\n                          \
    \                  count += 1\n                                            \n\
    \                                            if char == substring[9]\n       \
    \                                         count += 1\n                       \
    \                         \n                                                if\
    \ char == substring[10]\n                                                    count\
    \ += 1\n                                                    \n               \
    \                                     if char == substring[11]\n             \
    \                                           count += 1\n                     \
    \                                   \n                                       \
    \                 if char == substring[12]\n                                 \
    \                           count += 1\n                                     \
    \                       \n                                                   \
    \         if char == substring[13]\n                                         \
    \                       count += 1\n                                         \
    \                       \n                                                   \
    \             if char == substring[14]\n                                     \
    \                               count += 1\n                                 \
    \                                   \n                                       \
    \                             if char == substring[15]\n                     \
    \                                                   count += 1\n             \
    \                                                           \n               \
    \                                         if char == substring[16]\n         \
    \                                                   count += 1\n             \
    \                                               \n                           \
    \                                 if char == substring[17]\n                 \
    \                                               count += 1\n                 \
    \                                               \n                           \
    \                                     if char == substring[18]\n             \
    \                                                       count += 1\n         \
    \                                                           \n               \
    \                                                     if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring\n            count +=\
    \ 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaa\", \"aa\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n<code\
    \ language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaaaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaa", "    if string == \"\" || substring == \"\"\n        return 0\n   \
    \ else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of times each letter appears in the\
    \ string. Include a test case that checks that all letters are in the string.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   \n    while i < len_substring\n        if string[i] == substring[i]\n    \
    \        i += 1\n        else\n            i = 0\n        end\n    end\n    \n\
    \    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Case insensitive.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i += 1\n    end\n    \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a substring appears in a string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example: \nhow_many_times(\"\
    aaa\", \"a\") should return 3.\nhow_many_times(\"aaaa\", \"aa\") should return\
    \ 3.\nhow_many_times(\"aaaa\", \"a\") should return 0.\nhow_many_times(\"aaaa\"\
    , \"b\") should return 0.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    count = 0\n    \n    for char in string\n        if char\
    \ == substring\n            count += 1\n        else\n            count = 0\n\
    \    end\n    return count\nend", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    count = 0\n    \n    for c in string\n        if\
    \ c == substring\n            count += 1\n        else\n            count = 0\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times_2(\"\
    \", \"a\")\n    0\n    >>> how_many_times_2(\"aaa\", \"a\")\n    3\n    >>> how_many_times_2(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    \n    if string[0] == substring[0]\n        return 1\
    \ + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    \n  \
    \  if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa", "    if string == \"\" || substring == \"\"\n        return 0\n \
    \   else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Ignore case. \nFor example, how_many_times(\"aaaa\",\
    \ \"aa\") returns 3.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    i = 0\n    j = 0\n    \n    while i < len_string && j < len_substring\n\
    \        if string[i] == substring[j]\n            i += 1\n            j += 1\n\
    \        else\n            if string[i] > substring[j]\n                i += 1\n\
    \            else\n                j += 1\n        end\n    end\n    \n    if\
    \ i == len_string\n        return j\n    else\n        return j - i\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[0]\n            count = count + 1\n        else\n\
    \            count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that counts the number of times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    Hint: Use a for loop to iterate over the characters in the string.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    \n    \n    if substring[0] == string[0]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring[1:])\n \
    \   \n    if substring[0] == string[len_string-1]\n        return 1 + how_many_times(string[1:len_string],\
    \ substring[1:])\n    \n    if substring[0] == string[len_string-1]\n        return\
    \ 1 + how_many_times(string[1:len_string], substring[1:])\n    \n    if substring[0]\
    \ == string[0]\n        return 1 + how_many_times(string[1:len_substring], substring[1:])\n\
    \    \n    return how_many_times(string[1:len_string], substring[1:])\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Case insensitive.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\
    \"", "    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. Count overlaping cases.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times a substring appears within that string.\
    \ Count overlaping cases.\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaa\")\n3\n>>> how_many_times(\"aaaa\", \"a\")\n0\n>>> how_many_times(\"\
    aaaa\", \"b\")\n0\n>>> how_many_times(\"aaaa\", \"ab\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aba\")\n0\n>>> how_many_times(\"aaaa\", \"abaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaab\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"abaaaaaaaba\")\n0\n>>> how_many_times(\"aaaa\", \"\
    abaaaaaaabaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaabaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaabaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaab\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaaba\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaabaaaaaaabaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaabaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaabaaaa", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ \nFor example,", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[len_string:end], substring[len_substring:end])\n\
    \    \n    \n    if string[len_string-1] == substring[0]\n        return 1 + how_many_times(string[len_string:end],\
    \ substring[1:])\n    \n    \n    if string[0] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[len_substring:])\n  \
    \  \n    \n    if string[len_string-1] == substring[0]\n        return 1 + how_many_times(string[len_string:end],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[len_string:end], substring[len_substring:])\n\
    \    \n    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[0]\n  \
    \      return 1 + how_many_times(string[len_string:end], substring[1:])\n    \n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ 1 + how_many_times(string[len_string:end], substring[len_substring:])\n    \n\
    \    \n    if string[0] == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[len_substring:])\n    \n    \n    if string[len_string-1] == substring[0]\n\
    \        return 1 + how_many_times(string[len_string:end], substring[1:])\n  \
    \  \n    \n    if string[len_string-1] == substring[len_substring-1]\n       \
    \ return 1 + how_many_times(string[len_string:end], substring[len_substring:])\n\
    \    \n    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[0]\n  \
    \      return 1 + how_many_times(string[len_string:end], substring[1:])\n    \n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ 1 + how_", "    if string == \"\" || substring == \"\"\n        return 0\n \
    \   \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1..-1])\n    \n    if\
    \ string[-1] == substring[0]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1:])\n    \n    return how_many_times(string[1:], substring[1..-1])\
    \ + how_many_times(string[1..-1], substring[1:])\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaa\", \"aa\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaaba\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaaab\")\n</", "    if string == \"\" || substring == \"\"\n      \
    \  return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.\n\
    Hint: Use how_many_times() and the string slicing operator [].", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \nFor example, for the string\
    \ \"abcabc\" the function should return [('a', 3), ('b', 2), ('c', 3)]", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string. \nFor example, how_many_times(\"aaaa\", \"aa\") returns\
    \ 3.", "    if string == \"\" || substring == \"\"\n        return 0\n    \n \
    \   len_string = length(string)\n    len_substring = length(substring)\n    \n\
    \    if len_string == 0 || len_substring == 0\n        return 0\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for c in string\n        if c == substring\n            count += 1\n    \
    \    end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears within it.", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c\
    \ in string\n        if c == substring[0]\n            count = count + 1\n   \
    \         if substring[1] == c\n                count = count + 1\n          \
    \      if substring[2] == c\n                    count = count + 1\n         \
    \           if substring[3] == c\n                        count = count + 1\n\
    \                        if substring[4] == c\n                            count\
    \ = count + 1\n                            if substring[5] == c\n            \
    \                    count = count + 1\n                                if substring[6]\
    \ == c\n                                    count = count + 1\n              \
    \                      if substring[7] == c\n                                \
    \        count = count + 1\n                                        if substring[8]\
    \ == c\n                                            count = count + 1\n      \
    \                                      if substring[9] == c\n                \
    \                                count = count + 1\n                         \
    \                       if substring[10] == c\n                              \
    \                      count = count + 1\n                                   \
    \                 if substring[11] == c\n                                    \
    \                    count = count + 1\n                                     \
    \                   if substring[12] == c\n                                  \
    \                          count = count + 1\n                               \
    \                             if substring[13] == c\n                        \
    \                                        count = count + 1\n                 \
    \                                               if substring[14] == c\n      \
    \                                                              count = count +\
    \ 1\n                                                                    if substring[15]\
    \ == c\n                                                                     \
    \   count = count + 1\n                                                      \
    \  if substring[16] == c\n                                                   \
    \         count = count + 1\n                                                \
    \            if substring[17] == c\n                                         \
    \                       count = count + 1\n                                  \
    \                              if substring[18] == c\n                       \
    \                                             count = count + 1\n            \
    \                                                        if substring[19] == c\n\
    \                                                                        count\
    \ = count + 1\n                                                        if substring[20]\
    \ == c\n                                                            count = count\
    \ + 1\n                                                            if substring[21]\
    \ == c\n                                                                count\
    \ = count + 1\n                                                              \
    \  if substring[22] == c\n                                                   \
    \                 count = count + 1\n                                        \
    \                            if substring[23] == c\n                         \
    \                                               count = count + 1\n          \
    \                                              if substring[24] == c\n       \
    \                                                     count = count + 1\n    \
    \                                                        if substring[25] == c\n\
    \                                                                count = count\
    \ + 1\n                                                                if substring[26]\
    \ == c\n                                                                    count\
    \ = count + 1\n                                                              \
    \      if substring[27] == c\n                                               \
    \                         count = count + 1\n                                \
    \                        if substring[28] == c\n                             \
    \                               count = count + 1\n                          \
    \                                  if substring[29] == c\n                   \
    \                                             count = count + 1\n            \
    \                                                    if substring[30] == c\n \
    \                                                                   count = count\
    \ + 1\n                                                                    if\
    \ substring[31] == c\n                                                       \
    \                 count = count + 1\n                                        \
    \                if substring[32] == c\n                                     \
    \                       count = count + 1\n                                  \
    \                          if substring[33] == c\n                           \
    \                                     count = count + 1\n                    \
    \                                            if substring[34] == c\n         \
    \                                                           count = count + 1\n\
    \                                                                    if substring[35]\
    \ == c\n                                                                     \
    \   count = count + 1\n                                                      \
    \  if substring[36] == c\n                                                   \
    \         count = count + 1\n                                                \
    \            if substring[37] == c\n                                         \
    \                       count = count ", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a list of all possible substrings\
    \ of the given string. \nFor example, given the string \"abracadabra\", your function\
    \ should return [\"abracadabra\", \"abra\", \"brc\", \"rab\"]. \nThe order of\
    \ the substrings does not matter.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for c in string\n        if\
    \ c == substring\n            count += 1\n        else\n            count = 0\n\
    \    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string. Count overlaping cases.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0 \n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for char in string\n      \
    \  if char == substring\n            count += 1\n        else\n            count\
    \ = 0\n    end\n    \n    return count\nend", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    \n  \
    \  if string[0] == substring[-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1..-1])\n    \n    if string[-1] == substring[0]\n        return 1\
    \ + how_many_times(string[1..-1], substring[1:])\n    \n    return how_many_times(string[1:],\
    \ substring[1..-1]) + how_many_times(string[1..-1], substring[1:])\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaabb\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaabbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbbbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbbbbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbbbbbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbbbbbbb\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaabbbbb", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    \n    count = 0\n    \n    for c in string\n        if c == substring\n \
    \           count += 1\n        else\n            count = 0\n    end\n    \n \
    \   return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the string. Count overlaping cases.", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.\n\
    >>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\"\
    )\n2\n>>> how_many_times(\"aaaa\", \"aaaa\")\n1\n>>> how_many_times(\"aaaa\",\
    \ \"aaaaa\")\n0\n>>> how_many_times(\"aaaaa\", \"aaaa\")\n1\n>>> how_many_times(\"\
    aaaaa\", \"aaaaa\")\n1\n>>> how_many_times(\"aaaaa\", \"aaaaaa\")\n2\n>>> how_many_times(\"\
    aaaaaa\", \"aaaa\")\n2\n>>> how_many_times(\"aaaaaa\", \"aaaaa\")\n2\n>>> how_many_times(\"\
    aaaaaa\", \"aaaaaa\")\n3\n>>> how_many_times(\"aaaaaaa\", \"aaaa\")\n3\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaa\")\n3\n>>> how_many_times(\"aaaaaaa\", \"aaaaaa\")\n3\n>>>\
    \ how_many_times(\"aaaaaaa\", \"aaaaaaa\")\n3\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaa\")\n3\n>>> how_many_times(\"\
    aaaaaaab\", \"aaaaa\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaaaa\")\n3\n>>>\
    \ how_many_times(\"aaaaaaab\", \"aaaaaaa\")\n3\n>>> how_many_times(\"aaaaaaab\"\
    , \"aaaaaaab\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaaaaac\")\n3\n>>> how_many_times(\"\
    aaaaaaab\", \"aaaaaaac\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaaaaac\")\n\
    3\n>>> how_many_time", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    count = 0\n    \n    for c in string\n        if c == substring\n\
    \            count += 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"\
    aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaac\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbcccc\"\
    )\n</", "    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for char in string\n        if char == substring[0]\n\
    \            count += 1\n            \n            if char == substring[1]\n \
    \               count += 1\n                \n                if char == substring[2]\n\
    \                    count += 1\n                    \n                    if\
    \ char == substring[3]\n                        count += 1\n                 \
    \       \n                        if char == substring[4]\n                  \
    \          count += 1\n                            \n                        \
    \    if char == substring[5]\n                                count += 1\n   \
    \                             \n                                if char == substring[6]\n\
    \                                    count += 1\n                            \
    \        \n                                    if char == substring[7]\n     \
    \                                   count += 1\n                             \
    \           \n                                        if char == substring[8]\n\
    \                                            count += 1\n                    \
    \                        \n                                            if char\
    \ == substring[9]\n                                                count += 1\n\
    \                                                \n                          \
    \                      if char == substring[10]\n                            \
    \                        count += 1\n                                        \
    \            \n                                                    if char ==\
    \ substring[11]\n                                                        count\
    \ += 1\n                                                        \n           \
    \                                             if char == substring[12]\n     \
    \                                                       count += 1\n         \
    \                                                   \n                       \
    \                                     if char == substring[13]\n             \
    \                                                   count += 1\n             \
    \                                                   \n                       \
    \                                         if char == substring[14]\n         \
    \                                                           count += 1\n     \
    \                                                               \n           \
    \                                                         if char == substring[15]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[16]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[17]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[18]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    else if substring\
    \ == string\n        return 1\n    else if string[0..(substring.length-1)] ==\
    \ substring\n        return 1 + how_many_times(string[1..], substring)\n    else\n\
    \        return how_many_times(string[1..], substring)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and a substring as arguments\
    \ and returns the number of times the substring appears in the string. Case sensitivity\
    \ is not considered.\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    i = 0\n    j = 0\n    \n    while i < len_string && j < len_substring\n\
    \        if string[i] == substring[j]\n            i += 1\n            j += 1\n\
    \        else\n            if string[i] > substring[j]\n                i += 1\n\
    \            else\n                j += 1\n        end\n    end\n    \n    if\
    \ i == len_string\n        return j\n    elseif j == len_substring\n        return\
    \ i\n    else\n        return j + how_many_times(string[i..], substring[j..])\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is ignored.", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and a substring as arguments and returns\
    \ the number of times the substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for i in 0..(length(substring) - length(string))\n        if substring(i,\
    \ length(substring)) != string(i:i+length(substring))\n            count += 1\n\
    \    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string. \nFor example, how_many_times(\"aaabbb\", \"ab\") should return\
    \ 3.", "    if string == \"\" || substring == \"\"\n        return 0\n    \n \
    \   i = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ in string\n            i += 1\n        else\n            i += 1\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that counts how many times a given substring\
    \ can be found in the original string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within that string. \nFor\
    \ example, how_many_times(\"aaaa\", \"aa\") should return 3.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    \n    if len_string == len_substring\n   \
    \     return count_substring(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 0, len_string), substring)\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    \n  \
    \  count = 0\n    \n    for c in string\n        if c == substring\n         \
    \   count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the string \"aaa\" appears\
    \ in the string.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    if len_string == len_substring\n        return count_substring(string, substring)\n\
    \    \n    substring_index = 0\n    \n    while substring_index < len_substring\n\
    \        if substring(substring_index) == substring(substring_index + 1)\n   \
    \         substring_index += 1\n        else\n            substring_index += 1\n\
    \            \n        if substring_index == len_substring\n            return\
    \ count_substring(string, substring)\n        end\n    end\n    \n    return 0\n\
    end\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[:-1], substring[:-1])\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    if string[0] != substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] != substring[-1]\n        return how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    return how_many_times(string[1:], substring[1:])\
    \ + how_many_times(string[:-1], substring[:-1])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a substring appears in a string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Case insensitive.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    if len_string == 0 || len_substring == 0\n  \
    \      return 0\n    \n    if len_string == len_substring\n        return 1\n\
    \    \n    i = 0\n    j = 0\n    \n    while i < len_string && j < len_substring\n\
    \        if string[i] == substring[j]\n            i += 1\n            j += 1\n\
    \        else\n            if string[i] < substring[j]\n                i += 1\n\
    \            else\n                j += 1\n        end\n    end\n    \n    if\
    \ i == len_string\n        return j\n    else\n        return j - i + 1\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a substring appears in a string.", "    if\
    \ string == \"\" || substring == \"\"\n        return 0 \n    else if substring\
    \ == string\n        return 1 \n    else if string[1..] == substring\n       \
    \ return 1 + how_many_times(string[2..], substring)\n    else if string[1..] ==\
    \ substring[1..]\n        return 1 + how_many_times(string[2..], substring[2..])\n\
    \    else\n        return how_many_times(string[1..], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbc\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcd\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcdde\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddef\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddefg\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddefgh\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddefghij\", \"aaa\")\n\
    </cell>", "    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for c in string\n        if c == substring\n       \
    \     count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of times a substring appears\
    \ in a string. Count overlaping cases.\nHint: Use a for loop and a counter variable.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring\n            count +=\
    \ 1\n        else\n            count = 0\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. \nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also the number of times\
    \ the substring appears in the string with overlapping cases.\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also the number of times the substring appears in\
    \ the string with overlapping cases.\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string\
    \ and also the number of times the substring appears in the string with overlapping\
    \ cases.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also the number of times\
    \ the substring appears in the string with overlapping cases.\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also the number of times the substring appears in\
    \ the string with overlapping cases.\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string\
    \ and also the number of times the substring appears in the string with overlapping\
    \ cases.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also the number of times\
    \ the substring appears in the string with overlapping cases.\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also the number of times the substring appears in\
    \ the string with overlapping cases.\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string\
    \ and also the number of times the substring appears in the string with overlapping\
    \ cases.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also the number of times\
    \ the substring appears in the string with overlapping cases.\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also the number of times the substring appears in\
    \ the string with overlapping cases.\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appear", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_overlaps(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 1, len_string), substring)\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    else\
    \ if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    count = 0\n    for c in string:\n        if c == substring:\n            count\
    \ += 1\n    return count\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if the substring appears more than once in the string. For example, if `string\
    \ = \"aaa\"` and `substring = \"a\"`, then `how_many_times(string, \"a\")` returns\
    \ `2`, not `3`.\n<|/ c |>\n<| c |>\nI believe that is a valid case. `how_many_times(\"\
    aaaa\", \"a\")` returns `3`, not `2`.\n<|/ c |>\n<| c |>\nYes, but `how_many_times(\"\
    aaaa\", \"aa\")` returns `3`, not `2`.\n<|/ c |>\n<| c |>\nYes, I see that now.\
    \ Thanks for pointing that out. I've updated my answer.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\nHere's a solution using Data.List.countBy.\n<code>\nimport Data.List", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a given string.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n                if char ==\
    \ substring[2]\n                    count = count + 1\n                    \n\
    \                    if char == substring[3]\n                        count =\
    \ count + 1\n                        \n                        if char == substring[4]\n\
    \                            count = count + 1\n                            \n\
    \                            if char == substring[5]\n                       \
    \         count = count + 1\n                                \n              \
    \                  if char == substring[6]\n                                 \
    \   count = count + 1\n                                    \n                \
    \                    if char == substring[7]\n                               \
    \         count = count + 1\n                                        \n      \
    \                                  if char == substring[8]\n                 \
    \                           count = count + 1\n                              \
    \              \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[15]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[16]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[17]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[18]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[19]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char\
    \ == substring[20]\n                                                         \
    \   count = count + 1\n                                                      \
    \      \n                                                            if char ==\
    \ substring[21]\n                                                            \
    \    count = count + 1\n                                                     \
    \           \n                                                if char == substring[22]\n\
    \                                                    count = count + 1\n     \
    \                                               \n                           \
    \                         if char == substring[23]\n                         \
    \                               count = count + 1\n                          \
    \                              \n                                            \
    \            if char == substring[24]\n                                      \
    \                      count = count + 1\n                                   \
    \                         \n                                                 \
    \           if char == substring[25]\n                                       \
    \                         count = count + 1\n                                \
    \                                \n                                          \
    \      if char == substring[26]\n                                            \
    \        count = count + 1\n                                                 \
    \   \n                                                    if char == substring[27]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[28]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[29]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[30]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[31]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") returns 3.", "    if string == \"\" || substring == \"\"\n     \
    \   return 0\n    \n    count = 0\n    \n    for c in string\n        if c ==\
    \ substring\n            count += 1\n        else\n            count = 0\n   \
    \ end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    len_string::Int64\
    \ = length(string)\n    len_substring::Int64 = length(substring)\n    \n    if\
    \ len_string == 0 || len_substring == 0\n        return 0\n    \n    \n    if\
    \ len_string == len_substring\n        return count_substring(string, substring)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    count = 0\n    \n    for char in string\n       \
    \ if char == substring[0]\n            count = count + 1\n        else\n     \
    \       count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string and also returns the number of\
    \ times the substring appears in the string but ignoring case. \nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also returns the number of times the substring appears\
    \ in the string but ignoring case.\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string\
    \ and also returns the number of times the substring appears in the string but\
    \ ignoring case.\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string and also returns the\
    \ number of times the substring appears in the string but ignoring case.\nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string and also returns the number of times the\
    \ substring appears in the string but ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string and also returns the number of times the substring appears in\
    \ the string but ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string and also\
    \ returns the number of times the substring appears in the string but ignoring\
    \ case.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also returns the number\
    \ of times the substring appears in the string but ignoring case.\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also returns the number of times the substring appears\
    \ in the string but ignoring case.\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string\
    \ and also returns the number of times the substring appears in the string but\
    \ ignoring case.\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string and also returns the\
    \ number of times the substring appears in the string but ignoring ", "    count\
    \ = 0\n    for c in string:\n        if c == substring:\n            count +=\
    \ 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\nI came up with a solution that is more efficient than using count. \n<code>",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the string. Case insensitive.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string.", "    count\
    \ = 0\n    for c in string:\n        if c == substring[0]:\n            count\
    \ += 1\n            if count > substring.length():\n                return 0\n\
    \        else:\n            count = 0\n    return count\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\ndef how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring[0]:\n     \
    \       count += 1\n            if count > substring.length():\n             \
    \   return 0\n        else:\n            count = 0\n    return count\n</code>\n\
    <|/ a tags=string,haskell |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work correctly for overlapping substrings.\n<|/ c |>\n<|\
    \ a |>\n<code>\nimport Data.List", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    \n  \
    \  if string[0] == substring[-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1..-1])\n    \n    if string[-1] == substring[0]\n        return 1\
    \ + how_many_times(string[1..-1], substring[1:])\n    \n    return how_many_times(string[1:],\
    \ substring[1..-1]) + how_many_times(string[1..-1], substring[1:])\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    count = 0\n    for c in string:\n        if c == substring:\n            count\
    \ += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    def how_many_times(string::String, substring::String)::Int64\n    count = 0\n\
    \    for c in string:\n        if c == substring:\n            count += 1\n  \
    \  return count\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ tags=julia,string |>\n<code>", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaa\")\n4\n>>> how_many_times(\"aaaa\"\
    , \"aaaaa\")\n5\n>>> how_many_times(\"aaaa\", \"aaaaaa\")\n5\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaa\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaab\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbb\")\n6\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbb\")\n6\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbbba\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n6\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n6\n>>> how_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaaa\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaa\"\
    )\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\")\n6\n>>> ", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count = 0\n    \n  \
    \  for char in string\n        if char == substring[count]\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for i in string.chars\n\
    \        if substring == i\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    else if substring == string\n        return 1\n    else\n \
    \       return 1 + how_many_times(string[1..end-1], substring) + how_many_times(string[end..end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ the substring appears anywhere in the string. Count overlaping cases.\n    >>>\
    \ how_many_times(\"aaaa\", \"aa\")\n    3\n    >>> how_many_times(\"aaaa\", \"\
    a\")\n    0\n    >>> how_many_times(\"aaaa\", \"aaa\")\n    3\n    \"\"\"", " \
    \   if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0 \n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    i = 0\n    \n    while i < len_substring\n  \
    \      if substring(i, len_substring) == string\n            i += 1\n        else\n\
    \            i -= 1\n            \n    return i\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = 0\n    \n    while i < len_string && j < len_substring\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j += 1\n        else\n    \
    \        if string[i] > substring[j]\n                i += 1\n            else\n\
    \                j += 1\n        end\n    end\n    \n    return j - i\nend\n</cell>\n\
    <code language=julia-1.5>", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    i = 0\n    \n    while i < length(string)\n        if\
    \ substring(i, length(string)) in string\n            i += 1\n        else\n \
    \           i = 0\n        end\n    end\n    \n    return i\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string. \nFor example, the string\
    \ \"abcabc\" should return [('a', 3), ('b', 2), ('c', 3)]", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    i = 0\n    \n    while i < len_substring\n\
    \        if string[i] == substring[i]\n            i += 1\n        else\n    \
    \        if string[i] > substring[i]\n                i += 1\n            else\n\
    \                i -= 1\n        end\n    end\n    \n    return i\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaaaaab", "    if string == \"\" || substring == \"\"\n  \
    \      return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else if string[0]\
    \ == substring[1]\n        return 1 + how_many_times(string[1:], substring[2:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the number of times a substring\
    \ appears in a string. \nWrite a function that returns the number of times a substring\
    \ appears in a string and also returns the position of that substring.\nWrite\
    \ a function that returns the number of times a substring appears in a string\
    \ and also returns the position of that substring and also returns the number\
    \ of times the substring appears consecutively.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0 \n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring as arguments and returns the number of times\
    \ the substring appears in the string. Case insensitive.", "    if string == \"\
    \" || substring == \"\"\n        return 0 \n    else if substring.length() ==\
    \ string.length()\n        return 1 \n    else if substring.length() > string.length()\n\
    \        return how_many_times(string, substring[1..string.length()])\n    else\
    \ \n        return how_many_times(string[1..string.length()], substring)\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_time", "    if string == \"\" ||\
    \ substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    i = 0\n    j = 0\n    \n    while i < len_string\
    \ && j < len_substring\n        if string[i] == substring[j]\n            i +=\
    \ 1\n            j += 1\n        else\n            if string[i] > substring[j]\n\
    \                i += 1\n            else\n                j += 1\n        end\n\
    \    end\n    \n    if i == len_string\n        return j\n    elseif j == len_substring\n\
    \        return i\n    else\n        return j + how_many_times(string[i..], substring[j..])\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    len_string = length(string)\n    len_substring =\
    \ length(substring)\n    \n    if len_string == 0\n        return len_substring\n\
    \    \n    if len_substring == 0\n        return len_string\n    \n    if string[0]\
    \ == substring[0]\n        return how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ how_many_times(string[1:], substring[1:len_substring])\n    \n    if string[0]\
    \ == substring[len_substring-1]\n        return how_many_times(string[1:], substring[1:len_string])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return how_many_times(string[1:], substring[1:len_substring])\n    \n\
    \    if string[0] == substring[0]\n        return how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return how_many_times(string[1:], substring[1:len_substring])\n    \n\
    \    if string[0] == substring[len_substring-1]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[0]\n\
    \        return how_many_times(string[1:], substring[1:len_string])\n    \n  \
    \  if string[len_string-1] == substring[len_substring-1]\n        return how_many_times(string[1:],\
    \ substring[1:len_substring])\n    \n    if string[0] == substring[0]\n      \
    \  return how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[0]\n        return how_many_times(string[1:], substring[1:len_string])\n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ how_many_times(string[1:], substring[1:len_substring])\n    \n    if string[0]\
    \ == substring[len_substring-1]\n        return how_many_times(string[1:], substring[1:len_string])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return how_", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    count = 0\n    \n    for c in string\n        if c == substring\n\
    \            count += 1\n        else\n            count = 0\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the substring \"a\" appears in the string. Count overlaping cases.", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n\
    \    \n    for i in string.chars\n        if substring == i\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaaaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aaaaaaabbbbbaaa\")\n</cell", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    if len_string == 0\n        return len_substring\n\
    \    \n    if len_substring == 0\n        return len_string\n    \n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that returns the number of\
    \ times a substring appears in a string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string. Include capital letters.", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a substring\
    \ appears in a string. Count overlaping cases.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    if len_string == 0 || len_substring == 0\n  \
    \      return 0\n    \n    if len_string == len_substring\n        return count_substring(string,\
    \ substring)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring)\n    end\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n        else\n            count = 0\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that counts the number of times a substring\
    \ appears in a string. Count overlaping cases.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a new string where all occurrences of \"a\" have been replaced with\
    \ \"b\".", "    if string == \"\" || substring == \"\"\n        return 0\n   \
    \ else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears within it. The substring may appear\
    \ multiple times in the string. For example, how_many_times(\"aaa\", \"a\") returns\
    \ 3.", "    if string == \"\" || substring == \"\"\n        return 0\n    \n \
    \   count = 0\n    \n    for char in string\n        if char == substring[0]\n\
    \            count = count + 1\n            \n            if char == substring[1]\n\
    \                count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaab", "    if string == \"\" || substring == \"\"\n        return\
    \ 0 \n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and a substring as arguments and returns the number of times\
    \ the substring appears in the string.", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise\nWrite a function that returns the number of\
    \ times a substring appears in a string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0 \n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\",\
    \ \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring\
    \ == string\n        return 1\n    else if string[1..] == substring\n        return\
    \ 1 + how_many_times(string[2..], substring)\n    else\n        return how_many_times(string[2..],\
    \ substring) + how_many_times(string[1..], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times it appears in the original string and in the\
    \ reverse of the original string.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times each character appears in the string. \nFor example,\
    \ the string \"abcabc\" would return [('a', 3), ('b', 2), ('c', 3)]", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   \n    while i < len_string\n        if string[i] == substring[0]\n       \
    \     i += 1\n            \n            if i == len_string\n                return\
    \ 1\n            \n            j = i\n            \n            while j < len_substring\n\
    \                if string[j] != substring[j]\n                    j += 1\n  \
    \              else\n                    i += 1\n                end\n       \
    \     end\n        end\n    end\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    count::Int64\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += 1\n            \n            if count == substring.length\n             \
    \   return count\n            \n            count = 0\n        else\n        \
    \    count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    if len_string == len_substring\n        return count_substring(string, substring)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. \nFor example, how_many_times(\"abcabc\") should return [('a', 3),\
    \ ('b', 2), ('c', 3)]", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. Count overlaping cases.\n>>>\
    \ how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n\
    >>> how_many_times(\"aaaa\", \"aaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaa\"\
    )\n4\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n5\n>>> how_many_times(\"aaaa\"\
    , \"aaaaaa\")\n5\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n7\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n7\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n8\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n8\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n9\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n9\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n10\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n10\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n11\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n11\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n12\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\"\
    )\n12\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaabb\")\n13\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaabbb\")\n13\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaabbbb\"\
    )\n14\n>>> how_many_times(\"aaaa\", \"aaaaaaab", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the substring appears in the string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring[0]\n            count =\
    \ count + 1\n            \n            if char == substring[1]\n             \
    \   count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    string_length = len(string)\n\
    \    substring_length = len(substring)\n    \n    if substring_length > string_length\n\
    \        return 0\n    \n    i = 0\n    \n    while i < string_length\n      \
    \  if string[i] == substring[0]\n            i += 1\n            \n          \
    \  if i == string_length\n                return 1\n            \n           \
    \ if string[i] == substring[1]\n                i += 1\n                \n   \
    \             if i == string_length\n                    return 2\n          \
    \      \n                if string[i] == substring[2]\n                    i +=\
    \ 1\n                    \n                    if i == string_length\n       \
    \                 return 3\n                    \n                    if string[i]\
    \ == substring[3]\n                        i += 1\n                        \n\
    \                        if i == string_length\n                            return\
    \ 4\n                        \n                        if string[i] == substring[4]\n\
    \                            i += 1\n                            \n          \
    \                  if i == string_length\n                                return\
    \ 5\n                            \n                            if string[i] ==\
    \ substring[5]\n                                i += 1\n                     \
    \           \n                                if i == string_length\n        \
    \                            return 6\n                                \n    \
    \                            if string[i] == substring[6]\n                  \
    \                  i += 1\n                                    \n            \
    \                        if i == string_length\n                             \
    \           return 7\n                                    \n                 \
    \                   if string[i] == substring[7]\n                           \
    \             i += 1\n                                        \n             \
    \                           if i == string_length\n                          \
    \                  return 8\n                                        \n      \
    \                                  if string[i] == substring[8]\n            \
    \                                i += 1\n                                    \
    \        \n                                            if i == string_length\n\
    \                                                return 9\n                  \
    \                          \n                                            if string[i]\
    \ == substring[9]\n                                                i += 1\n  \
    \                                              \n                            \
    \                    if i == string_length\n                                 \
    \                   return 10\n                                              \
    \  \n                                                if string[i] == substring[10]\n\
    \                                                    i += 1\n                \
    \                                    \n                                      \
    \              if i == string_length\n                                       \
    \                 return 11\n                                                \
    \    \n                                                    if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                            \n                              \
    \                          if i == string_length\n                           \
    \                                 return 12\n                                \
    \                        \n                                                  \
    \      if string[i] == substring[12]\n                                       \
    \                     i += 1\n                                               \
    \             \n                                                            if\
    \ i == string_length\n                                                       \
    \         return 13\n                                                        \
    \    \n                                                            if string[i]\
    \ == substring[13]\n                                                         \
    \       i += 1\n                                                             \
    \   \n                                                                if i ==\
    \ string_length\n                                                            \
    \        return 14\n                                                         \
    \       \n                                                                if string[i]\
    \ == substring[14]\n                                                         \
    \           i += 1\n                                                         \
    \           \n                                                               \
    \     if i == string_length\n                                                \
    \                        return 15\n                                         \
    \                           \n                                               \
    \                     if string[i] == substring[15]\n                        \
    \                                                i += 1\n                    \
    \                                                    \n                      \
    \                                                      if i == string_length\n\
    \                                                                            \
    \    return 16\n                                                             \
    \               \n                                                           \
    \                 if string[i] == substring[16]\n                            \
    \                                                    i += 1\n                \
    \                                                                \n          \
    \                                                                      if i ==\
    \ string_length\n                                                            \
    \                        return 17\n                                         \
    \                                       \n                                   \
    \                                             if string[i] == substring[17]\n\
    \                                                                            \
    \        i += 1\n                                                            \
    \                        \n                                                  \
    \                                  if i == string_length\n                   \
    \                                                                     return 18\n\
    \                                                                            \
    \        \n                                                                  \
    \                  if string[i] == substring[18]\n                           \
    \                                                             i += 1\n       \
    \                                                                            \
    \     ", "    if string == \"\" || substring == \"\"\n        return 0\n    else\
    \ if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of\
    \ times a substring appears in a string. \nFor example, how_many_times(\"aaa\"\
    , \"a\") should return 3.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    i = 0\n    \n    while i < length(string)\n        if\
    \ substring(i, 1) == string(i, 1)\n            i += 1\n        else\n        \
    \    i += 1\n    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of\
    \ times a given substring appears in a given string.", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. \nFor example, how_many_times(\"aaaa\", \"aa\") should return 3."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
