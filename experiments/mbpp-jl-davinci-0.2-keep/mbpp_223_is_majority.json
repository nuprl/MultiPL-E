{
  "name": "mbpp_223_is_majority",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_majority;\n\t@test(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == true)\n\t@test(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == false)\n\t@test(candidate([1, 1, 1, 2, 2], 5, 1) == true)\n\t@test(candidate([1, 1, 2, 2], 5, 1) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tReturns whether x is the majority element in the given sorted array.\n\t\"\"\"\n\t# Find the index of the first occurrence of x\n\ti = first_occurrence(arr, n, x)\n\t\n\t# If x is the majority element, then it must be present more than n/2 times\n\tif i == -1 then\n\t\treturn false\n\telse\n\t\tif i + n/2 <= n then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend",
    "\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid:end], n-mid, x)\n\tend\nend",
    "\t# first find the element\n\ti = find_element(arr, n, x)\n\tif i == -1\n\t\treturn false\n\tend\n\t# if the element is found, check if it is the majority element\n\tif (i + n/2) <= n\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n == 0 \n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tmid = div(n,2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\t\n\t# Find the index of the first occurrence of x\n\tfirst_occurrence = first(arr, x)\n\t\n\t# If the index of the first occurrence is -1, then the element is not present in the array\n\tif first_occurrence == -1\n\t\treturn false\n\tend\n\t\n\t# Find the index of the last occurrence of x\n\tlast_occurrence = last(arr, x)\n\t\n\t# If the index of the last occurrence is -1, then the element is not present in the array\n\tif last_occurrence == -1\n\t\treturn false\n\tend\n\t\n\t# If the number of occurrences of x is greater than n/2, then x is the majority element\n\tif (last_occurrence - first_occurrence + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tArgs:\n\t\tarr: a sorted array\n\t\tn: length of the array\n\t\tx: the element to be checked\n\tReturns:\n\t\ttrue if x is the majority element in the array\n\t\"\"\"\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] < x\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, x)\n\tright = find_last(arr, x)\n\tif (right - left + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\n\t# Find the index of the first occurence of x\n\tfirst_occurence = binary_search(arr, 0, n-1, x)\n\t\n\t# If element is not present in the array, return false\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t\n\t# If there is a majority, then the element occurs more than n/2 times\n\tif (first_occurence + n/2) <= (n-1) && arr[first_occurence + n/2] == x\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif (mid == 1 || x > arr[mid-1]) && (mid == n || x < arr[mid+1])\n\t\t\treturn true\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tmid = div(n, 2)\n\tif (arr[mid] == x) && (arr[mid + 1] == x)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, n, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = find_last(arr, n, x)\n\tif right == -1\n\t\treturn false\n\tend\n\tif (right - left + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tfirst_index = find_first(arr, 0, n-1, x)\n\tif first_index == -1\n\t\treturn false\n\tend\n\tif first_index + n/2 <= n-1\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\n\t# find the first occurence of x\n\tfirst = find_first(arr, 0, n-1, x)\n\t\n\t# if x is not present, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t\n\t# find the last occurence of x\n\tlast = find_last(arr, 0, n-1, x)\n\t\n\t# if x is present more than n/2 times, return true\n\tif last - first + 1 > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend"
  ]
}