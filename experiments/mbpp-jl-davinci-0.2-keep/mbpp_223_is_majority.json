{
  "name": "mbpp_223_is_majority",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\nfunction is_majority(arr::Vector{Int64}, n::Int64, x::Int64)::Bool \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_majority;\n\t@test(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == true)\n\t@test(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == false)\n\t@test(candidate([1, 1, 1, 2, 2], 5, 1) == true)\n\t@test(candidate([1, 1, 2, 2], 5, 1) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tReturns whether x is the majority element in the given sorted array.\n\t\"\"\"\n\t# Find the index of the first occurrence of x\n\ti = first_occurrence(arr, n, x)\n\t\n\t# If x is the majority element, then it must be present more than n/2 times\n\tif i == -1 then\n\t\treturn false\n\telse\n\t\tif i + n/2 <= n then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend",
    "\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid:end], n-mid, x)\n\tend\nend",
    "\t# first find the element\n\ti = find_element(arr, n, x)\n\tif i == -1\n\t\treturn false\n\tend\n\t# if the element is found, check if it is the majority element\n\tif (i + n/2) <= n\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n == 0 \n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tmid = div(n,2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\t\n\t# Find the index of the first occurrence of x\n\tfirst_occurrence = first(arr, x)\n\t\n\t# If the index of the first occurrence is -1, then the element is not present in the array\n\tif first_occurrence == -1\n\t\treturn false\n\tend\n\t\n\t# Find the index of the last occurrence of x\n\tlast_occurrence = last(arr, x)\n\t\n\t# If the index of the last occurrence is -1, then the element is not present in the array\n\tif last_occurrence == -1\n\t\treturn false\n\tend\n\t\n\t# If the number of occurrences of x is greater than n/2, then x is the majority element\n\tif (last_occurrence - first_occurrence + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tArgs:\n\t\tarr: a sorted array\n\t\tn: length of the array\n\t\tx: the element to be checked\n\tReturns:\n\t\ttrue if x is the majority element in the array\n\t\"\"\"\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] < x\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, x)\n\tright = find_last(arr, x)\n\tif (right - left + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\n\t# Find the index of the first occurence of x\n\tfirst_occurence = binary_search(arr, 0, n-1, x)\n\t\n\t# If element is not present in the array, return false\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t\n\t# If there is a majority, then the element occurs more than n/2 times\n\tif (first_occurence + n/2) <= (n-1) && arr[first_occurence + n/2] == x\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif (mid == 1 || x > arr[mid-1]) && (mid == n || x < arr[mid+1])\n\t\t\treturn true\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tmid = div(n, 2)\n\tif (arr[mid] == x) && (arr[mid + 1] == x)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, n, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = find_last(arr, n, x)\n\tif right == -1\n\t\treturn false\n\tend\n\tif (right - left + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tfirst_index = find_first(arr, 0, n-1, x)\n\tif first_index == -1\n\t\treturn false\n\tend\n\tif first_index + n/2 <= n-1\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\n\t# find the first occurence of x\n\tfirst = find_first(arr, 0, n-1, x)\n\t\n\t# if x is not present, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t\n\t# find the last occurence of x\n\tlast = find_last(arr, 0, n-1, x)\n\t\n\t# if x is present more than n/2 times, return true\n\tif last - first + 1 > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tInput:\n\t\tarr: a sorted array\n\t\tn: length of the array\n\t\tx: the element to be checked\n\tOutput:\n\t\ttrue if x is the majority element in arr\n\t\"\"\"\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\t\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = Int64(n/2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\n\t# find the first occurence of x\n\tfirst = find_first(arr, 0, n-1, x)\n\t\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t\n\t# if there is a majority, then x must occur at index n/2 or 2n/2\n\tif arr[first + n/2] == x\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\tmid = div(n, 2)\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tif i > mid\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t# find the first occurence of x\n\tfirst = find_first(arr, 0, n-1, x)\n\t# if x is not present in the array\n\tif first == -1\n\t\treturn false\n\tend\n\t# if x is present in the array\n\t# find the last occurence of x\n\tlast = find_last(arr, 0, n-1, x)\n\t# if x is the majority element\n\tif last - first + 1 > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# Write your code here\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = 0\n\tright = n-1\n\twhile left <= right\n\t\tmid = (left + right) \u00f7 2\n\t\tif arr[mid] == x\n\t\t\tif mid + n \u00f7 2 < n && arr[mid + n \u00f7 2] == x\n\t\t\t\treturn true\n\t\t\telseif mid - n \u00f7 2 >= 0 && arr[mid - n \u00f7 2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] < x\n\t\t\tleft = mid + 1\n\t\telse\n\t\t\tright = mid - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x > arr[mid]\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\t# Find the index of first occurrence of x\n\ti = first_occurrence(arr, 0, n-1, x)\n\t\n\t# If element is not present at all, return false\n\tif i == -1\n\t\treturn false\n\tend\n\t\n\t# Check if the element is present more than n/2 times\n\tif (i + n/2 <= n-1) && (arr[i + n/2] == x)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\t\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == nothing\n\t\treturn false\n\telse\n\t\treturn (i + n/2 - 1 <= length(arr))\n\tend\nend",
    "\treturn (arr[n/2] == x)\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid > n\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[mid+1:n], n - mid - 1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n - mid - 1, x)\n\tend\nend",
    "\tleft = first_occurrence(arr, 0, n-1, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tif left + n/2 <= n-1 && arr[left + n/2] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x > arr[mid]\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = convert(Int64, n/2)\n\tif arr[mid] == x\n\t\tif mid == 0 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "    c = 0\n    for i in 1:n\n        if arr[i] == x\n            c += 1\n        end\n    end\n    if c > n/2\n        return true\n    else\n        return false\n    end\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\tcount = 0\n\tfor i in arr\n\t\tif i == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == nothing\n\t\treturn false\n\tend\n\tif i + n/2 - 1 <= length(arr)\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = n/2\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t# Write your code here\n\treturn false\nend",
    "\ti = searchsortedfirst(arr, x)\n\tif i == 0\n\t\treturn false\n\tend\n\treturn arr[i + n//2 - 1] == x\nend",
    "\t\"\"\"\n\t>>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n\ttrue\n\t>>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n\tfalse\n\t>>> is_majority([1, 1, 1, 2, 2], 5, 1)\n\ttrue\n\t>>> is_majority([1, 1, 1, 2, 2], 5, 2)\n\tfalse\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == 0\n\t\treturn false\n\tend\n\treturn (i + n/2 - 1) <= length(arr)\nend",
    "\tif n == 0 \n\t\treturn false\n\tend\n\tmid = floor(Int64, n/2)\n\tif arr[mid] == x \n\t\tif (mid == n-1) || (arr[mid+1] != x)\n\t\t\treturn true\n\t\tend\n\telseif arr[mid] > x \n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == 0\n\t\treturn false\n\telse\n\t\treturn (i + n/2 - 1) <= length(arr)\n\tend\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tfirst_index = find_first(arr, x)\n\tif first_index == -1\n\t\treturn false\n\tend\n\tif first_index + n/2 <= length(arr)\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || mid == n\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid], mid, x) && is_majority(arr[mid+1:n], n-mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\tmid = div(n, 2)\n\tif n == 1\n\t\treturn arr[1] == x\n\telseif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t# Write your code here\n\tcount = 0\n\tfor i in arr\n\t\tif i == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# find the first occurence of x\n\tfirst = find_first(arr, n, x)\n\tif first == -1\n\t\treturn false\n\tend\n\tif (first + n/2) <= n\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in arr.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn arr[mid + mid] == x\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid + 1:end], n - mid - 1, x)\n\tend\nend",
    "\tleft = 0\n\tright = n-1\n\twhile left <= right\n\t\tmid = (left+right)/2\n\t\tif arr[mid] == x\n\t\t\tif (mid+n/2) <= n-1 && arr[mid+n/2] == x\n\t\t\t\treturn true\n\t\t\telseif (mid-n/2) >= 0 && arr[mid-n/2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] < x\n\t\t\tleft = mid+1\n\t\telse\n\t\t\tright = mid-1\n\t\tend\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\t\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\tmid = convert(Int64, n/2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\t\t>>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n\t\ttrue\n\t\t>>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n\t\tfalse\n\t\t>>> is_majority([1, 1, 1, 2, 2], 5, 1)\n\t\ttrue\n\t\t>>> is_majority([1, 1, 1, 2, 2], 5, 2)\n\t\tfalse\n\t\t>>> is_majority([1, 1, 2, 2], 4, 1)\n\t\tfalse\n\t\t>>> is_majority([1, 1, 2, 2], 4, 2)\n\t\tfalse\n\t\t>>> is_majority([1, 2, 3, 3], 4, 1)\n\t\tfalse\n\t\t>>> is_majority([1, 2, 3, 3], 4, 2)\n\t\tfalse\n\t\t>>> is_majority([1, 2, 3, 3], 4, 3)\n\t\ttrue\n\t\"\"\"\n\tcount = 0\n\tfor i in arr\n\t\tif i == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 0 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid], mid, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# find the first occurence of x\n\tfirst = find_first(arr, 0, n-1, x)\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t# if x is present, check if it is the majority element\n\tif first + n/2 <= n-1 && arr[first + n/2] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, n, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = find_last(arr, n, x)\n\tif right - left + 1 > n/2\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tleft = 0\n\tright = n - 1\n\twhile left <= right\n\t\tmid = (left + right) \u00f7 2\n\t\tif arr[mid] == x\n\t\t\tif mid + n \u00f7 2 < n && arr[mid + n \u00f7 2] == x\n\t\t\t\treturn true\n\t\t\telseif mid - n \u00f7 2 >= 0 && arr[mid - n \u00f7 2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] < x\n\t\t\tleft = mid + 1\n\t\telse\n\t\t\tright = mid - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif (arr[mid] == x)\n\t\treturn true\n\telseif (arr[mid] > x)\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tThe function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tif n == 1\n\t\treturn arr[1] == x\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tmid = div(n, 2)\n\tif (arr[mid] == x)\n\t\treturn true\n\telseif (arr[mid] > x)\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\treturn (arr[n/2] == x)\nend",
    "\t\"\"\"\n\tInput:\n\t\tarr: sorted array of integers\n\t\tn: length of the array\n\t\tx: element to check if it is the majority element\n\tOutput:\n\t\tTrue if x is the majority element in arr\n\t\tFalse otherwise\n\t\"\"\"\n\tmid = Int64(floor(n/2))\n\tif arr[mid] == x\n\t\tif mid == 1\n\t\t\treturn true\n\t\telseif arr[mid-1] == x\n\t\t\treturn is_majority(arr[1:mid], mid, x)\n\t\telse\n\t\t\treturn true\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\ti = searchsortedfirst(arr, x)\n\tif i == 0 || i == n\n\t\treturn false\n\tend\n\tif arr[i] == x\n\t\tif i + n/2 - 1 < n && arr[i + n/2 - 1] == x\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# find the first occurence of x\n\tfirst = find_first(arr, n, x)\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t# if x is present, check if it is the majority element\n\tif (first + n/2) <= n\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array, false otherwise.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\t# Find the first occurrence of x\n\ti = first_occurrence(arr, n, x)\n\t\n\t# If element is not present at all, return false\n\tif i == -1\n\t\treturn false\n\tend\n\t\n\t# If there is a majority, then the element must be present more than n/2 times\n\tif i + n/2 <= n-1\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\t# Find the index of the first occurrence of x\n\ti = first_occurrence(arr, n, x)\n\t\n\t# If element is not present, return false\n\tif i == -1\n\t\treturn false\n\tend\n\t\n\t# If there is a majority, then the element must be present more than n/2 times\n\tif i + n/2 <= n-1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n == 0 \n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x \n\t\tif mid + mid <= n \n\t\t\treturn true\n\t\telse \n\t\t\treturn arr[mid + mid] == x\n\t\tend\n\telseif arr[mid] > x \n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse \n\t\treturn is_majority(arr[mid+1:end], n - mid - 1, x)\n\tend\nend",
    "\tleft = find_first(arr, n, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = find_last(arr, n, x)\n\tif right - left + 1 > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == 0 return false end\n\treturn arr[i+n/2-1] == x\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\tleft = search(arr, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = search(arr, x + 1) - 1\n\tif right == -1\n\t\tright = n - 1\n\tend\n\treturn right - left + 1 > n / 2\nend",
    "\tleft = find_first(arr, x)\n\tright = find_last(arr, x)\n\treturn (right - left + 1) > n/2\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\n\t# find the first occurence of the element\n\tfirst_occurence = first_occurence(arr, n, x)\n\t\n\t# if the element is not present in the array, return false\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t\n\t# if the element is present in the array, check if it occurs more than n/2 times\n\tif (first_occurence + n/2) <= n\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tFunction that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\t# get the index of the first occurence of x\n\tfirst_occurence = first_occurence_index(arr, n, x)\n\t\n\t# if the first occurence is not -1\n\tif first_occurence != -1\n\t\t# get the index of the last occurence of x\n\t\tlast_occurence = last_occurence_index(arr, n, x)\n\t\t\n\t\t# if the last occurence is not -1\n\t\tif last_occurence != -1\n\t\t\t# if the difference between the last and first occurence is greater than n/2\n\t\t\tif last_occurence - first_occurence > n/2\n\t\t\t\t# return true\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# return false\n\treturn false\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = Int64(ceil(n/2))\n\tif arr[mid] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = search_left(arr, 0, n-1, x)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = search_right(arr, 0, n-1, x)\n\tif right - left + 1 > n/2\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tInput:\n\t\tarr: a sorted array of integers\n\t\tn: the length of the array\n\t\tx: the element to check for\n\tOutput:\n\t\tTrue if x is the majority element in arr, False otherwise\n\t\"\"\"\n\t# Find the first occurrence of x\n\tfirst_occurrence = first_occurrence(arr, n, x)\n\t# If x is not present, return False\n\tif first_occurrence == -1\n\t\treturn false\n\tend\n\t# If x is present, check if it is the majority element\n\tif first_occurrence + n/2 <= n\n\t\treturn arr[first_occurrence + n/2] == x\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, x)\n\tright = find_last(arr, x)\n\treturn (right - left + 1) > n/2\nend",
    "\t# find the first occurance of x\n\tfirst = first_occurance(arr, n, x)\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t# if x is present, check if it occurs more than n/2 times\n\tif first + n/2 < n && arr[first + n/2] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = n/2\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t# Write your code here\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\ti = find_first(arr, x)\n\tif i == -1\n\t\treturn false\n\telse\n\t\treturn arr[i + n/2 - 1] == x\n\tend\nend",
    "\tleft = 0\n\tright = n-1\n\twhile left <= right\n\t\tmid = (left + right) >> 1\n\t\tif arr[mid] == x\n\t\t\tif mid + n/2 <= n-1 && arr[mid + n/2] == x\n\t\t\t\treturn true\n\t\t\telseif mid - n/2 >= 0 && arr[mid - n/2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] < x\n\t\t\tleft = mid + 1\n\t\telse\n\t\t\tright = mid - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in arr\n\t\tif i == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = convert(Int64, n/2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tleft = 0\n\tright = n - 1\n\twhile left <= right\n\t\tmid = (left + right) \u00f7 2\n\t\tif arr[mid] == x\n\t\t\tif mid + n \u00f7 2 < n && arr[mid + n \u00f7 2] == x\n\t\t\t\treturn true\n\t\t\telseif mid - n \u00f7 2 >= 0 && arr[mid - n \u00f7 2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] < x\n\t\t\tleft = mid + 1\n\t\telse\n\t\t\tright = mid - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tcount = 0\n\tfor i in arr\n\t\tif i == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# First find the element in the array\n\tidx = find_element(arr, 0, n-1, x)\n\tif idx == -1\n\t\treturn false\n\tend\n\t# If the element is found, check if it is the majority element\n\tif (idx + n/2) <= n-1 && arr[idx + n/2] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\t\t>>> is_majority([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturn true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x > arr[mid]\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\tm = n/2\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = 0\n\tright = n-1\n\twhile left <= right\n\t\tmid = left + (right - left) / 2\n\t\tif arr[mid] == x\n\t\t\tif mid + n/2 <= n-1 && arr[mid + n/2] == x\n\t\t\t\treturn true\n\t\t\telseif mid - n/2 >= 0 && arr[mid - n/2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] > x\n\t\t\tright = mid - 1\n\t\telse\n\t\t\tleft = mid + 1\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif n == 1\n\t\treturn x == arr[1]\n\telseif x == arr[mid]\n\t\treturn true\n\telseif x > arr[mid]\n\t\treturn is_majority(arr[mid+1:end], n-mid, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\tmid = n/2\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t# find the first occurence of x\n\tfirst = find_first(arr, n, x)\n\t# if x is present, then find the last occurence of x\n\tif first != -1\n\t\tlast = find_last(arr, n, x)\n\t\t# if x is present more than n/2 times, return true\n\t\tif (last - first + 1) > n/2\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == 1 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\t\tend\n\telseif arr[mid] < x\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\treturn arr[Int64(n/2)] == x\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = convert(Int64, n/2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tThe function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\t\n\t# Find the index of the first occurence of the element\n\tfirst_occurence = first(arr, x)\n\t\n\t# If the element is not present in the array, return false\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t\n\t# Find the index of the last occurence of the element\n\tlast_occurence = last(arr, x)\n\t\n\t# If the number of occurences of the element is greater than n/2, return true\n\tif last_occurence - first_occurence + 1 > n/2\n\t\treturn true\n\tend\n\t\n\t# Else return false\n\treturn false\nend",
    "\t\"\"\"\n\tFunction that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tmid = div(n, 2)\n\tif n == 1\n\t\tif arr[1] == x\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid, x)\n\tend\nend",
    "\t\"\"\"\n\tFunction that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\t\n\t# Find the index of the first occurrence of the element\n\tfirst_index = find_first_occurrence(arr, n, x)\n\t\n\t# If the element is not present in the array, return false\n\tif first_index == -1\n\t\treturn false\n\tend\n\t\n\t# If the element is present in the array, find the index of the last occurrence of the element\n\tlast_index = find_last_occurrence(arr, n, x)\n\t\n\t# If the number of occurrences of the element is greater than n/2, return true\n\tif last_index - first_index + 1 > n/2\n\t\treturn true\n\tend\n\t\n\t# If the number of occurrences of the element is not greater than n/2, return false\n\treturn false\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\tif mid == n/2 + 1\n\t\t\treturn true\n\t\tend\n\t\treturn is_majority(arr[mid:n], n/2 + 1, x)\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n/2, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise.\n\t\"\"\"\n\t\n\t# find the first occurence of x\n\tfirst = first_occurence(arr, n, x)\n\t\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t\n\t# if x is present, check if it is the majority element\n\tif (first + n/2) <= n\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = convert(Int64, floor(n/2))\n\tif x == arr[mid]\n\t\treturn true\n\telseif x > arr[mid]\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tarr: a sorted array\n\tn: length of the array\n\tx: the element to check\n\t\"\"\"\n\t\n\t# find the first occurence of x\n\tfirst_occurence = first_occurence(arr, n, x)\n\t\n\t# if x is not present in the array\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t\n\t# if there is more than n/2 occurences of x\n\tif (first_occurence + n/2) <= n\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
    "\t# Find the first occurence of x\n\ti = first_occurence(arr, 0, n-1, x)\n\t# If element is not present at all\n\tif i == -1\n\t\treturn false\n\tend\n\t# If there is a majority element\n\tif i + n/2 <= n-1\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t# find the first occurence of x\n\tfirst = first_occurence(arr, n, x)\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t# if x is present, check if it is the majority element\n\tif first + n/2 <= n-1 && arr[first + n/2] == x\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tleft = search_left(arr, n, x)\n\tright = search_right(arr, n, x)\n\tif right - left + 1 > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = n/2\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t# find the first occurence of x\n\tfirst = find_first(arr, 0, n-1, x)\n\t# if x is not present at all, return false\n\tif first == -1\n\t\treturn false\n\tend\n\t# if there is more than n/2 occurences of x, return true\n\tif first + n/2 <= n-1 && arr[first + n/2] == x\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tleft = 0\n\tright = n-1\n\twhile left <= right\n\t\tmid = (left + right) >> 1\n\t\tif arr[mid] == x\n\t\t\tif mid + n/2 <= n-1 && arr[mid + n/2] == x\n\t\t\t\treturn true\n\t\t\telseif mid - n/2 >= 0 && arr[mid - n/2] == x\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif arr[mid] < x\n\t\t\tleft = mid + 1\n\t\telse\n\t\t\tright = mid - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array, false otherwise.\n\t\"\"\"\n\tmid = Int64(ceil(n/2))\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr, false otherwise\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\t>>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n\ttrue\n\t>>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n\tfalse\n\t>>> is_majority([1, 1, 1, 2, 2], 5, 1)\n\ttrue\n\t\"\"\"\n\tmid = div(n, 2)\n\tif n == 0:\n\t\treturn false\n\tif arr[mid] == x:\n\t\tif mid + mid <= n:\n\t\t\treturn true\n\t\telse:\n\t\t\treturn false\n\telseif arr[mid] < x:\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\telse\n\t\treturn is_majority(arr[1:mid], mid, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\ti = searchsortedfirst(arr, x)\n\tif i == 0\n\t\treturn false\n\tend\n\tif arr[i] != x\n\t\treturn false\n\tend\n\tif i + n/2 - 1 <= length(arr)\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\t\tReturns true if x is the majority element in the array arr.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif (arr[mid] == x) && (arr[mid + 1] == x)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\t# find the first occurence of x\n\tfirst_occurence = first_occurence_of(arr, n, x)\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t# if x occurs more than n/2 times, then the last occurence of x must be greater than n/2\n\tif arr[first_occurence + n/2] == x\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tleft = search(arr, x)\n\tright = search(arr, x+1)\n\tif left == -1\n\t\treturn false\n\telse\n\t\treturn (right - left) > n/2\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == 0\n\t\treturn false\n\tend\n\tif i + n/2 <= length(arr)\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# Your code here\n\treturn false\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == nothing\n\t\treturn false\n\tend\n\tif i + n/2 > length(arr)\n\t\treturn false\n\tend\n\tif arr[i + n/2] == x\n\t\treturn true\n\tend\n\treturn false\nend",
    "\treturn count(arr, x) > n/2\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\tleft = find_first(arr, n, x)\n\t\tif left == -1\n\t\t\treturn false\n\t\tend\n\t\tright = find_last(arr, n, x)\n\t\tif right - left + 1 > n/2\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend",
    "\t# find the first occurence of x\n\tfirst = first_occurence(arr, n, x)\n\t# if x is not present\n\tif first == -1\n\t\treturn false\n\tend\n\t# if x is present, check if the next occurence is at index n/2\n\tif first + n/2 < n\n\t\treturn arr[first + n/2] == x\n\tend\n\treturn false\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\tif x == arr[n/2]\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tmid = div(n, 2)\n\tif (arr[mid] == x) && (arr[mid + 1] != x)\n\t\treturn true\n\telseif (arr[mid] > x)\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n - mid - 1, x)\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\t# get the index of the first occurence of x\n\tfirst_index = first_occurence(arr, n, x)\n\t# if x is not present in the array, return false\n\tif first_index == -1\n\t\treturn false\n\tend\n\t# if x is present in the array, check if it is the majority element\n\tif first_index + n/2 <= n\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tReturns whether the element is the majority element in the given sorted array.\n\t\"\"\"\n\tfirst = first_occurrence(arr, n, x)\n\tlast = last_occurrence(arr, n, x)\n\tif (last - first + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in arr.\n\t\"\"\"\n\tif n == 1\n\t\treturn true\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == nothing\n\t\treturn false\n\tend\n\tif i + n/2 - 1 <= length(arr)\n\t\treturn true\n\tend\n\treturn false\nend",
    "\t# Write your code here\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tInput:\n\t\tarr: a sorted array\n\t\tn: the length of the array\n\t\tx: the element to check\n\tOutput:\n\t\tTrue if x is the majority element in the array, False otherwise\n\t\"\"\"\n\t# Find the first occurence of x\n\tfirst_occurence = first_occurence(arr, 0, n-1, x)\n\t# If x is not present at all, return False\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t# If x is present, check if x is the majority element\n\tif first_occurence + n/2 <= n-1\n\t\tif arr[first_occurence + n/2] == x\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# find the first occurence of x\n\tfirst = first_occurence(arr, n, x)\n\t# if the first occurence is not -1 and the element at index first + n/2 is x, then x is the majority element\n\tif first != -1 && arr[first + n/2] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 1\n\t\treturn true\n\tend\n\tif x == arr[1]\n\t\treturn is_majority(arr[2:end], n-1, x)\n\telse\n\t\treturn false\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in arr.\n\t\"\"\"\n\tmid = floor(Int64, n/2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\tif mid + mid <= n\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid-1], mid-1, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tif n == 1\n\t\treturn arr[1] == x\n\tend\n\tmid = div(n, 2)\n\tif arr[mid] == x\n\t\treturn true\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\t\tReturns whether x is the majority element in the given sorted array.\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = convert(Int64, floor(n/2))\n\tif arr[mid] == x\n\t\tif mid + mid > n\n\t\t\treturn true\n\t\telse\n\t\t\treturn arr[mid + mid] == x\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid + 1:n], n - mid - 1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns true if x is the majority element in the given sorted array.\n\t\"\"\"\n\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n - mid - 1, x)\n\tend\nend",
    "\tmid = n/2\n\tif arr[mid] == x \n\t\treturn true\n\telseif arr[mid] > x \n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse \n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tarr: sorted array\n\tn: length of array\n\tx: element to check\n\t\"\"\"\n\t# find the first occurence of x\n\tfirst = first_occurence(arr, 0, n-1, x)\n\t# if x is present, then check if it is the majority element\n\tif first != -1\n\t\tif first + n/2 < n && arr[first + n/2] == x\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tFunction to check if a given element is the majority element in a sorted array.\n\t\"\"\"\n\tfirst_occurrence = find_first_occurrence(arr, n, x)\n\tlast_occurrence = find_last_occurrence(arr, n, x)\n\tif (last_occurrence - first_occurrence + 1) > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = convert(Int64, floor(n/2))\n\tif arr[mid] == x\n\t\tif mid == 0 || arr[mid-1] != x\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_majority(arr[1:mid], mid, x)\n\t\tend\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\ti = findfirst(arr, x)\n\tif i == nothing\n\t\treturn false\n\tend\n\tif i + n/2 - 1 <= length(arr)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tleft = find_first(arr, x, 0, n-1)\n\tif left == -1\n\t\treturn false\n\tend\n\tright = find_last(arr, x, 0, n-1)\n\tif right - left + 1 > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n\tif n == 0\n\t\treturn false\n\tend\n\tmid = convert(Int64, n/2)\n\tif arr[mid] == x\n\t\tif (mid == n-1) || (arr[mid+1] != x)\n\t\t\treturn true\n\t\tend\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\telseif arr[mid] > x\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:n], n-mid-1, x)\n\tend\nend",
    "\t\"\"\"\n\tReturns whether x is the majority element in arr.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:n\n\t\tif arr[i] == x\n\t\t\tcount += 1\n\t\tend\n\tend\n\tif count > n/2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# get the index of the first occurence of x\n\tfirst_occurence = first_occurence(arr, 0, n-1, x)\n\t# if x is not present in the array, return false\n\tif first_occurence == -1\n\t\treturn false\n\tend\n\t# if x is present in the array, check if it is the majority element\n\tif first_occurence + n/2 <= n-1\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tmid = div(n, 2)\n\tif x == arr[mid]\n\t\treturn true\n\telseif x < arr[mid]\n\t\treturn is_majority(arr[1:mid], mid, x)\n\telse\n\t\treturn is_majority(arr[mid+1:end], n-mid-1, x)\n\tend\nend",
    "\t# find the first occurence of x\n\tfirst_occurence = find_first_occurence(arr, n, x)\n\t# if x is the majority element, then the element at index (first_occurence + n/2) must be x\n\tif first_occurence != -1 && first_occurence + n/2 < n && arr[first_occurence + n/2] == x\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend"
  ]
}