{
  "name": "mbpp_102_snake_to_camel",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\nfunction snake_to_camel(word::String)::String \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"python_program\") == \"PythonProgram\")\n\t@test(candidate(\"python_language\") == \"PythonLanguage\")\n\t@test(candidate(\"programming_language\") == \"ProgrammingLanguage\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t\n\t# Split the string into words\n\twords = split(word, \"_\")\n\t\n\t# Capitalize the first letter of each word\n\t# except the first one\n\t# with a comprehension!\n\twords = [words[1][1:end] = uppercase(words[1][1:end]) for word in words[2:end]]\n\t\n\t# Join the words together\n\tcamel_case_word = join(words)\n\t\n\treturn camel_case_word\nend",
    "\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case *= letter\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join([word[1:end]; word[1]], \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend"
  ]
}