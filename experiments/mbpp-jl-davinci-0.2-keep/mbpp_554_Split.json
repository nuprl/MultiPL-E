{
  "name": "mbpp_554_Split",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend",
    "\t\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds,i)\n\t\tend\n\tend\n\treturn odds\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend",
    "\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend"
  ]
}