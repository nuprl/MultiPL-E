{
  "name": "mbpp_130_max_occurrences",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\nfunction max_occurrences(nums::Vector{Int64})::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_occurrences;\n\t@test(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\n\t@test(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\n\t@test(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tfreq = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(freq, i)\n\t\t\tfreq[i] += 1\n\t\telse\n\t\t\tfreq[i] = 1\n\t\tend\n\tend\n\tmax_freq = 0\n\tmax_item = 0\n\tfor (item, freq) in freq\n\t\tif freq > max_freq\n\t\t\tmax_freq = freq\n\t\t\tmax_item = item\n\t\tend\n\tend\n\treturn max_item\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tcounts[num] = get(counts, num, 0) + 1\n\tend\n\tmax_count = 0\n\tmax_num = 0\n\tfor (num, count) in counts\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend",
    "\t# count the number of occurrences of each element\n\tcounts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(counts, num)\n\t\t\tcounts[num] += 1\n\t\telse\n\t\t\tcounts[num] = 1\n\t\tend\n\tend\n\t\n\t# find the element with the maximum number of occurrences\n\tmax_count = 0\n\tmax_num = 0\n\tfor (num, count) in counts\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\t\n\treturn max_num\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(counts, num)\n\t\t\tcounts[num] += 1\n\t\telse\n\t\t\tcounts[num] = 1\n\t\tend\n\tend\n\tmax_count = 0\n\tmax_num = 0\n\tfor (num, count) in counts\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend",
    "\tmax_occurrences = 0\n\tfor i in nums\n\t\tif count(x -> x == i, nums) > max_occurrences\n\t\t\tmax_occurrences = count(x -> x == i, nums)\n\t\tend\n\tend\n\treturn max_occurrences\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given list.\n\t\"\"\"\n\t# create a dictionary to store the frequency of each item\n\tfreq = Dict()\n\tfor i in nums\n\t\tif haskey(freq, i)\n\t\t\tfreq[i] += 1\n\t\telse\n\t\t\tfreq[i] = 1\n\t\tend\n\tend\n\t# find the item with maximum frequency\n\tmax_freq = 0\n\tmax_item = 0\n\tfor (k, v) in freq\n\t\tif v > max_freq\n\t\t\tmax_freq = v\n\t\t\tmax_item = k\n\t\tend\n\tend\n\treturn max_item\nend",
    "\toccurrences = Dict{Int64, Int64}()\n\tfor num in nums\n\t\toccurrences[num] = get(occurrences, num, 0) + 1\n\tend\n\tmax_occurrence = 0\n\tfor (num, occurrence) in occurrences\n\t\tif occurrence > max_occurrence\n\t\t\tmax_occurrence = occurrence\n\t\tend\n\tend\n\treturn max_occurrence\nend",
    "\t# Create a dictionary to store the frequency of each number\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(freq_dict, i)\n\t\t\tfreq_dict[i] += 1\n\t\telse\n\t\t\tfreq_dict[i] = 1\n\t\tend\n\tend\n\t# Find the maximum frequency\n\tmax_freq = 0\n\tfor (key, value) in freq_dict\n\t\tif value > max_freq\n\t\t\tmax_freq = value\n\t\tend\n\tend\n\t# Find the number with the maximum frequency\n\tfor (key, value) in freq_dict\n\t\tif value == max_freq\n\t\t\treturn key\n\t\tend\n\tend\nend",
    "\tmax_occurrences = 0\n\tfor i in 1:length(nums)\n\t\tif count(x -> x == nums[i], nums) > max_occurrences\n\t\t\tmax_occurrences = count(x -> x == nums[i], nums)\n\t\tend\n\tend\n\treturn max_occurrences\nend",
    "\t# get the unique elements in the list\n\tunique_nums = unique(nums)\n\t# initialize a dictionary to store the frequency of each element\n\tfreq_dict = Dict{Int64, Int64}()\n\t# loop over the unique elements and get the frequency of each element\n\tfor num in unique_nums\n\t\tfreq_dict[num] = count(x -> x == num, nums)\n\tend\n\t# get the maximum frequency\n\tmax_freq = maximum(values(freq_dict))\n\t# get the element with maximum frequency\n\tmax_occurrences = [key for (key, value) in freq_dict if value == max_freq]\n\treturn max_occurrences\nend",
    "\tmax_occurrences = 0\n\tfor i in 1:length(nums)\n\t\tif count(x -> x == nums[i], nums) > max_occurrences\n\t\t\tmax_occurrences = count(x -> x == nums[i], nums)\n\t\tend\n\tend\n\treturn max_occurrences\nend",
    "\t# initialize dictionary\n\tdict = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(dict, num)\n\t\t\tdict[num] += 1\n\t\telse\n\t\t\tdict[num] = 1\n\t\tend\n\tend\n\t# find max\n\tmax_key = 0\n\tmax_val = 0\n\tfor (key, val) in dict\n\t\tif val > max_val\n\t\t\tmax_key = key\n\t\t\tmax_val = val\n\t\tend\n\tend\n\treturn max_key\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(counts, num)\n\t\t\tcounts[num] += 1\n\t\telse\n\t\t\tcounts[num] = 1\n\t\tend\n\tend\n\tmax_count = 0\n\tmax_num = 0\n\tfor (num, count) in counts\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend",
    "\t# create a dictionary to store the frequency of each item in the list\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(freq_dict, num)\n\t\t\tfreq_dict[num] += 1\n\t\telse\n\t\t\tfreq_dict[num] = 1\n\t\tend\n\tend\n\t# find the key with maximum value\n\tmax_key = 0\n\tmax_value = 0\n\tfor (key, value) in freq_dict\n\t\tif value > max_value\n\t\t\tmax_key = key\n\t\t\tmax_value = value\n\t\tend\n\tend\n\treturn max_key\nend",
    "\t# initialize a dictionary\n\td = Dict{Int64, Int64}()\n\t# iterate over the list\n\tfor num in nums\n\t\t# if the key is not in the dictionary, add it with value 1\n\t\tif !haskey(d, num)\n\t\t\td[num] = 1\n\t\t# if the key is in the dictionary, increment the value by 1\n\t\telse\n\t\t\td[num] += 1\n\t\tend\n\tend\n\t# initialize a variable to store the maximum frequency\n\tmax_freq = 0\n\t# initialize a variable to store the item with maximum frequency\n\tmax_item = 0\n\t# iterate over the dictionary\n\tfor (key, value) in d\n\t\t# if the value is greater than the current maximum frequency,\n\t\t# update the maximum frequency and the item with maximum frequency\n\t\tif value > max_freq\n\t\t\tmax_freq = value\n\t\t\tmax_item = key\n\t\tend\n\tend\n\t# return the item with maximum frequency\n\treturn max_item\nend",
    "\t# create a dictionary to store the frequency of each element\n\tfreq = Dict()\n\t# iterate through the list and add the frequency of each element to the dictionary\n\tfor num in nums\n\t\tif haskey(freq, num)\n\t\t\tfreq[num] += 1\n\t\telse\n\t\t\tfreq[num] = 1\n\t\tend\n\tend\n\t# find the maximum frequency\n\tmax_freq = maximum(values(freq))\n\t# find the element with the maximum frequency\n\tfor (key, value) in freq\n\t\tif value == max_freq\n\t\t\treturn key\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given list.\n\t\"\"\"\n\t# Initialize a dictionary to store the frequency of each item\n\tfreq = Dict()\n\t# Initialize the maximum frequency\n\tmax_freq = 0\n\t# Initialize the item with maximum frequency\n\tmax_item = 0\n\t# Iterate through the list\n\tfor i in nums\n\t\t# If the item is not in the dictionary, add it\n\t\tif !haskey(freq, i)\n\t\t\tfreq[i] = 1\n\t\t# If the item is in the dictionary, increment the frequency\n\t\telse\n\t\t\tfreq[i] += 1\n\t\tend\n\t\t# If the frequency of the item is greater than the maximum frequency, update the maximum frequency and the item with maximum frequency\n\t\tif freq[i] > max_freq\n\t\t\tmax_freq = freq[i]\n\t\t\tmax_item = i\n\t\tend\n\tend\n\t# Return the item with maximum frequency\n\treturn max_item\nend",
    "\tmax_count = 0\n\tmax_num = 0\n\tfor num in nums\n\t\tcount = count_occurrences(nums, num)\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend",
    "\tmax_occurrences = 0\n\tmax_occurrences_item = 0\n\tfor i in 1:length(nums)\n\t\toccurrences = 0\n\t\tfor j in 1:length(nums)\n\t\t\tif nums[i] == nums[j]\n\t\t\t\toccurrences += 1\n\t\t\tend\n\t\tend\n\t\tif occurrences > max_occurrences\n\t\t\tmax_occurrences = occurrences\n\t\t\tmax_occurrences_item = nums[i]\n\t\tend\n\tend\n\treturn max_occurrences_item\nend",
    "\tmax_occurrences = 0\n\tfor i in 1:length(nums)\n\t\tif nums[i] > max_occurrences\n\t\t\tmax_occurrences = nums[i]\n\t\tend\n\tend\n\treturn max_occurrences\nend"
  ]
}