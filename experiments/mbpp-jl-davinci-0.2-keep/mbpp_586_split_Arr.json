{
  "name": "mbpp_586_split_Arr",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\"\"\"\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = split_Arr;\n\t@test(candidate([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10])\n\t@test(candidate([1, 2, 3, 4], 1) == [2, 3, 4, 1])\n\t@test(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n == 0\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\treturn [l2; l1]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n < length(l)\n\t\treturn [l[n+1:end]; l[1:n]]\n\telse\n\t\treturn l\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\tend\n\tif n == 0\n\t\tprintln(\"n is zero\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of the list\")\n\telse\n\t\tl = [l[n+1:end]; l[1:n]]\n\tend\n\treturn l\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\t\tif n > length(l)\n\t\t\treturn l\n\t\telse\n\t\t\treturn [l[n+1:end]; l[1:n]]\n\t\tend\n\tend",
    "\treturn [l[(n+1):end]; l[1:n]]\nend",
    "\t# l is the list, n is the element to split at\n\t# return the new list\n\t\n\t# check if n is within the length of the list\n\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\t\n\t# split the list\n\tfirst_part = l[1:n]\n\tsecond_part = l[n+1:end]\n\t\n\t# append the first part to the end\n\tnew_list = vcat(second_part, first_part)\n\t\n\treturn new_list\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of array\")\n\t\treturn l\n\tend\n\tif n == 0\n\t\tprintln(\"n is zero\")\n\t\treturn l\n\tend\n\tif n < 0\n\t\tprintln(\"n is negative\")\n\t\treturn l\n\tend\n\tl = vcat(l[n+1:end], l[1:n])\n\treturn l\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of the array\")\n\t\treturn l\n\tend\n\t\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\t\tif n > length(l)\n\t\t\tprintln(\"n is greater than length of list\")\n\t\t\treturn l\n\t\telse\n\t\t\treturn vcat(l[n+1:end], l[1:n])\n\t\tend\n\tend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\tend\n\t\n\tif n == 0\n\t\tprintln(\"n is 0\")\n\t\treturn l\n\tend\n\t\n\tif n < 0\n\t\tprintln(\"n is negative\")\n\t\treturn l\n\tend\n\t\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\t\tif n > length(l)\n\t\t\tprintln(\"n is greater than length of list\")\n\t\t\treturn l\n\t\tend\n\t\t\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\tend\n\t\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\t\tif n > length(l)\n\t\t\treturn l\n\t\telse\n\t\t\treturn [l[n+1:end]; l[1:n]]\n\t\tend\n\tend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\telse\n\t\tl = [l[n+1:end]; l[1:n]]\n\tend\n\treturn l\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of array\")\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\t\treturn [l[n+1:end]; l[1:n]]\n\tend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\t\n\tfor i in 1:n\n\t\tpush!(l, l[i])\n\tend\n\t\n\treturn l[n+1:end]\nend",
    "\t#l = [1,2,3,4,5,6,7,8,9,10]\n\t#n = 3\n\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\tl3 = vcat(l2,l1)\n\treturn l3\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\tend\n\tif n == 0\n\t\tprintln(\"n is 0\")\n\t\treturn l\n\tend\n\tif n < 0\n\t\tprintln(\"n is negative\")\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n:end]; l[1:n-1]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of array\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n < 1 || n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "    if n > length(l)\n        println(\"n is greater than length of the list\")\n    else\n        return vcat(l[n+1:end], l[1:n])\n    end\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\telse\n\t\tl = vcat(l[n:end], l[1:n-1])\n\tend\n\treturn l\nend",
    "\t\tif n > length(l)\n\t\t\tprintln(\"n is greater than the length of the list\")\n\t\t\treturn l\n\t\telse\n\t\t\treturn vcat(l[n+1:end], l[1:n])\n\t\tend\n\tend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\treturn vcat(l2, l1)\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\t\tif n < 1 || n > length(l)\n\t\t\treturn l\n\t\telse\n\t\t\treturn vcat(l[n:end], l[1:n-1])\n\t\tend\n\tend",
    "\tif n == 0\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\t\treturn vcat(l[n+1:end], l[1:n])\n\tend",
    "\tif n == 0\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\t\tif n > length(l)\n\t\t\tprintln(\"n is greater than length of list\")\n\t\telse\n\t\t\tl = [l[n+1:end]; l[1:n]]\n\t\tend\n\t\treturn l\n\tend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\t\treturn [l[n+1:end]; l[1:n]]\n\tend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n == 0\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n < 0 || n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\t\n\t#if n is less than the length of the array, return the array\n\tif n < length(l)\n\t\treturn l\n\tend\n\t\n\t#if n is greater than the length of the array, return the array\n\tif n > length(l)\n\t\treturn l\n\tend\n\t\n\t#if n is equal to the length of the array, return the array\n\tif n == length(l)\n\t\treturn l\n\tend\n\t\n\t#if n is less than or equal to zero, return the array\n\tif n <= 0\n\t\treturn l\n\tend\n\t\n\t#if n is greater than or equal to the length of the array, return the array\n\tif n >= length(l)\n\t\treturn l\n\tend\n\t\n\t#if n is equal to zero, return the array\n\tif n == 0\n\t\treturn l\n\tend\n\t\n\t#if n is equal to one, return the array\n\tif n == 1\n\t\treturn l\n\tend\n\t\n\t#if n is equal to two, return the array\n\tif n == 2\n\t\treturn l\n\tend\n\t\n\t#if n is equal to three, return the array\n\tif n == 3\n\t\treturn l\n\tend\n\t\n\t#if n is equal to four, return the array\n\tif n == 4\n\t\treturn l\n\tend\n\t\n\t#if n is equal to five, return the array\n\tif n == 5\n\t\treturn l\n\tend\n\t\n\t#if n is equal to six, return the array\n\tif n == 6\n\t\treturn l\n\tend\n\t\n\t#if n is equal to seven, return the array\n\tif n == 7\n\t\treturn l\n\tend\n\t\n\t#if n is equal to eight, return the array\n\tif n == 8\n\t\treturn l\n\tend\n\t\n\t#if n is equal to nine, return the array\n\tif n == 9\n\t\treturn l\n\tend\n\t\n\t#if n is equal to ten, return the array\n\tif n == 10\n\t\treturn l\n\tend\n\t\n\t#if n is equal to eleven, return the",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\t\treturn [l[n+1:end]; l[1:n]]\n\tend",
    "\tl1 = l[1:n-1]\n\tl2 = l[n:end]\n\treturn vcat(l2, l1)\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\treturn [l2; l1]\nend",
    "\t#l = [1,2,3,4,5,6,7,8,9,10]\n\t#n = 5\n\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\tl = [l2;l1]\n\treturn l\nend",
    "\t\tif n > length(l)\n\t\t\tprintln(\"n is greater than the length of the array\")\n\t\t\treturn l\n\t\telse\n\t\t\treturn vcat(l[n+1:end], l[1:n])\n\t\tend\n\tend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of the list\")\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\t\"\"\"\n\tFunction to split a list at the nth eelment and add the first part to the end.\n\t\"\"\"\n\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\treturn [l2; l1]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\t# l = [1,2,3,4,5,6,7,8,9,10]\n\t# n = 3\n\t# l[n:end] = [4,5,6,7,8,9,10]\n\t# l[1:n-1] = [1,2,3]\n\t# l[end:end] = [1,2,3]\n\t# l = [4,5,6,7,8,9,10,1,2,3]\n\treturn [l[n:end]; l[1:n-1]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\t\treturn [l[n+1:end]; l[1:n]]\n\tend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of array\")\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\tend\n\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\telse\n\t\tl = [l[n+1:end]; l[1:n]]\n\tend\n\treturn l\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of the array\")\n\t\treturn l\n\telse\n\t\treturn [l[n:end]; l[1:n-1]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the array\")\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\t\treturn l\n\tend\n\t\n\treturn [l[n+1:end]..., l[1:n]...]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is too large\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "    if n > length(l)\n        return l\n    else\n        return vcat(l[n:end], l[1:n-1])\n    end\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is larger than the length of the list\")\n\t\treturn l\n\tend\n\treturn [l[n+1:end];l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\tend\n\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l) \n\t\tprintln(\"n is greater than the length of the list\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of array\")\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of list\")\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn [l[n+1:end]; l[1:n]]\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend"
  ]
}