{
  "name": "mbpp_450_extract_string",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [string(s) for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\tstr_len = length(str)\n\tif l > str_len\n\t\tprintln(\"The length of string is less than the specified length.\")\n\t\treturn str\n\tend\n\treturn str[1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509709,
      "stdout": "The length of string is less than the specified length.\ntest set: Test Failed at /tmp/tmpev6j4clc.jl:20\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"practice\", \"solution\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpev6j4clc.jl:20 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpev6j4clc.jl:19\nThe length of string is less than the specified length.\ntest set: Test Failed at /tmp/tmpev6j4clc.jl:21\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"Python\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpev6j4clc.jl:21 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpev6j4clc.jl:19\nThe length of string is less than the specified length.\ntest set: Test Failed at /tmp/tmpev6j4clc.jl:22\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"exercises\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpev6j4clc.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpev6j4clc.jl:19\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpev6j4clc.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tFunction to extract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t# create an empty vector to store the extracted strings\n\textracted_strings = String[]\n\t# iterate over the list of strings\n\tfor i in str\n\t\t# check if the length of the string is equal to the specified length\n\t\tif length(i) == l\n\t\t\t# append the string to the vector\n\t\t\tpush!(extracted_strings, i)\n\t\tend\n\tend\n\t# return the vector\n\treturn extracted_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extract = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extract, i)\n\t\tend\n\tend\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\tresult = []\n\tfor s in str\n\t\tif length(s) == l\n\t\t\tpush!(result, s)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tresult = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(str_new, str[i])\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123801,
      "stdout": "test set: Error During Test at /tmp/tmp6z4bchvc.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmp6z4bchvc.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6z4bchvc.jl:15 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6z4bchvc.jl:14\ntest set: Error During Test at /tmp/tmp6z4bchvc.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmp6z4bchvc.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6z4bchvc.jl:16 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp6z4bchvc.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given list of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn str[findall(x->length(x)==l, str)]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n    return [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given list of strings.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\n\tArgs:\n\t\tstr: Vector{String}\n\t\tl: Int64\n\t\n\tReturns:\n\t\tVector{String}\n\t\"\"\"\n\t\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\textracted_string = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(extracted_string, i)\n\t\tend\n\tend\n\treturn extracted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123801,
      "stdout": "test set: Error During Test at /tmp/tmp6z4bchvc.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmp6z4bchvc.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6z4bchvc.jl:15 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6z4bchvc.jl:14\ntest set: Error During Test at /tmp/tmp6z4bchvc.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmp6z4bchvc.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6z4bchvc.jl:16 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp6z4bchvc.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extracted = []\n\tfor i in 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(str_extracted, str[i])\n\t\tend\n\tend\n\treturn str_extracted\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given list of strings.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str,i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given list of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extracted = []\n\tfor i in 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(str_extracted, str[i])\n\t\tend\n\tend\n\treturn str_extracted\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = String[]\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n    return [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = String[]\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extract = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extract, i)\n\t\tend\n\tend\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n    return [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a list of strings.\n\t\"\"\"\n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from the vector of strings str.\n\t\"\"\"\n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n    return [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a list of strings.\n\t\"\"\"\n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\tstr_len = length(str)\n\tif l > str_len\n\t\tprintln(\"Length of string is greater than the length of list\")\n\t\treturn str\n\tend\n\treturn str[1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123801,
      "stdout": "Length of string is greater than the length of list\ntest set: Test Failed at /tmp/tmpof3q1ujf.jl:20\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"practice\", \"solution\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpof3q1ujf.jl:20 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpof3q1ujf.jl:19\nLength of string is greater than the length of list\ntest set: Test Failed at /tmp/tmpof3q1ujf.jl:21\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"Python\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpof3q1ujf.jl:21 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpof3q1ujf.jl:19\nLength of string is greater than the length of list\ntest set: Test Failed at /tmp/tmpof3q1ujf.jl:22\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"exercises\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpof3q1ujf.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpof3q1ujf.jl:19\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpof3q1ujf.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\t\tFunction to extract specified size of strings from a given list of string values.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tstr : Vector{String}\n\t\t\tVector of strings.\n\t\tl : Int64\n\t\t\tLength of the strings to be extracted.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tVector{String}\n\t\t\tVector of strings of length l.\n\t\"\"\"\n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tThis function takes a vector of strings and an integer as input and returns a vector of strings.\n\t\"\"\"\n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a list of strings.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_out = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_out, i)\n\t\tend\n\tend\n\treturn str_out\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tresult = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\tn = length(str)\n\tif l > n\n\t\tprintln(\"The length of the string is too large\")\n\t\treturn str\n\telse\n\t\treturn str[1:l]\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123801,
      "stdout": "The length of the string is too large\ntest set: Test Failed at /tmp/tmpxdj8uzz0.jl:21\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"practice\", \"solution\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdj8uzz0.jl:21 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdj8uzz0.jl:20\nThe length of the string is too large\ntest set: Test Failed at /tmp/tmpxdj8uzz0.jl:22\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"Python\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdj8uzz0.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdj8uzz0.jl:20\nThe length of the string is too large\ntest set: Test Failed at /tmp/tmpxdj8uzz0.jl:23\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"exercises\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpxdj8uzz0.jl:23 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpxdj8uzz0.jl:20\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpxdj8uzz0.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123801,
      "stdout": "test set: Error During Test at /tmp/tmp6z4bchvc.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmp6z4bchvc.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6z4bchvc.jl:15 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6z4bchvc.jl:14\ntest set: Error During Test at /tmp/tmp6z4bchvc.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmp6z4bchvc.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp6z4bchvc.jl:16 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp6z4bchvc.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a list of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_out = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_out, i)\n\t\tend\n\tend\n\treturn str_out\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmjsq3gqf.jl:1\nin expression starting at /tmp/tmpmjsq3gqf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tThis function extracts strings of length l from a given list of strings.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9gv88ll1.jl:1\nin expression starting at /tmp/tmp9gv88ll1.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\t\n\t# Initialize an empty vector\n\textracted_string = []\n\t\n\t# Iterate over the list of strings\n\tfor i in str\n\t\t# Check if the length of the string is greater than the specified length\n\t\tif length(i) > l\n\t\t\t# Append the string to the vector\n\t\t\tpush!(extracted_string, i)\n\t\tend\n\tend\n\t\n\t# Return the vector\n\treturn extracted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123801,
      "stdout": "test set: Test Failed at /tmp/tmpq_29sno5.jl:29\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n   Evaluated: [\"exercises\"] == [\"practice\", \"solution\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_29sno5.jl:29 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_29sno5.jl:28\ntest set: Test Failed at /tmp/tmpq_29sno5.jl:30\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n   Evaluated: [\"exercises\", \"practice\", \"solution\"] == [\"Python\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_29sno5.jl:30 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_29sno5.jl:28\ntest set: Test Failed at /tmp/tmpq_29sno5.jl:31\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n   Evaluated: String[] == [\"exercises\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_29sno5.jl:31 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_29sno5.jl:28\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpq_29sno5.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tresult = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a list of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i = 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(new_str, str[i])\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn filter(x->length(x)==l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a list of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tFunction to extract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn str[1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123802,
      "stdout": "test set: Error During Test at /tmp/tmpsthseswu.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [1:8]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpsthseswu.jl:8\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6] macro expansion\n     @ /tmp/tmpsthseswu.jl:15 [inlined]\n   [7] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8] top-level scope\n     @ /tmp/tmpsthseswu.jl:14\ntest set: Error During Test at /tmp/tmpsthseswu.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [1:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpsthseswu.jl:8\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6] macro expansion\n     @ /tmp/tmpsthseswu.jl:16 [inlined]\n   [7] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8] top-level scope\n     @ /tmp/tmpsthseswu.jl:14\ntest set: Error During Test at /tmp/tmpsthseswu.jl:17\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n  BoundsError: attem",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpsthseswu.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t# Create an empty vector\n\textracted_string = Vector{String}()\n\t# Iterate over the vector\n\tfor i in str\n\t\t# Check if the length of the string is equal to the specified length\n\t\tif length(i) == l\n\t\t\t# Append the string to the vector\n\t\t\tpush!(extracted_string, i)\n\t\tend\n\tend\n\t# Return the vector\n\treturn extracted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tresult = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i)==l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given list of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}