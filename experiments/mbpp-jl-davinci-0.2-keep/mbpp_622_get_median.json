{
  "name": "mbpp_622_get_median",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\nfunction get_median(arr1::Vector{Int64}, arr2::Vector{Int64}, n::Int64)::Float64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_median;\n\t@test(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0)\n\t@test(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5)\n\t@test(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tFunction to return median of two sorted arrays of same size\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):(n/2+1)], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):(n/2+1)], n/2)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1+m2)/2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tfor count in 1:n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\t\tFunction to get median of two sorted arrays of same size.\n\t\tThis function assumes that both arrays are sorted.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to return median of two sorted arrays of same size\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tmedian1 = median(arr1, n)\n\tmedian2 = median(arr2, n)\n\tif median1 == median2\n\t\treturn median1\n\tend\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to return median of two sorted lists of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays.\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tmedian = 0.0\n\tcount = 0\n\tm1 = 0\n\tm2 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\tmedian = (m1 + m2) / 2\n\treturn median\nend",
    "\ti = 0\n\tj = 0\n\tcount = 0\n\tm1 = 0\n\tm2 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "    if n == 0\n        return -1\n    end\n    if n == 1\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2\n        return m1\n    end\n    if m1 > m2\n        if n % 2 == 0\n            return get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n        else\n            return get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n        end\n    end\n    if n % 2 == 0\n        return get_median(arr2[1:n/2], arr1[n/2:n], n/2)\n    else\n        return get_median(arr2[1:n/2+1], arr1[n/2:n], n/2+1)\n    end\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2 - 1:n], arr2[1:n/2 + 1], n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2 + 1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2 + 1], arr2[n/2 - 1:n], n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2 + 1], arr2[n/2:n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tmedian1::Int64 = 0\n\tmedian2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (median1 + median2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend"
  ]
}