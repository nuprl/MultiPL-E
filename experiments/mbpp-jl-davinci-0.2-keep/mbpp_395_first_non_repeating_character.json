{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\nfunction first_non_repeating_character(str1::String)::Union{String, Nothing} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = first_non_repeating_character;\n\t@test(candidate(\"abcabc\") == nothing)\n\t@test(candidate(\"abc\") == \"a\")\n\t@test(candidate(\"ababc\") == \"c\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif length(occursin(str1[i], str1)) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tReturns the first non-repeating character in a string.\n\t\tIf there is no non-repeating character, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tReturns the first non-repeating character in a given string.\n\t\tIf no non-repeating character is found, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\t\n\t# Initialize a dictionary\n\tdict = Dict{Char, Int}()\n\t\n\t# Iterate over the string\n\tfor i in str1\n\t\tif haskey(dict, i)\n\t\t\tdict[i] += 1\n\t\telse\n\t\t\tdict[i] = 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string again\n\tfor i in str1\n\t\tif dict[i] == 1\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\t# Return nothing if all are repeating\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t# your code goes here\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i],str1)==1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\tIf there is no non-repeating character, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\tArgs:\n\t\t\tstr1: The string to be searched.\n\t\tReturns:\n\t\t\tThe first non-repeating character in the string.\n\t\t\tIf no non-repeating character is found, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\n\tParameters\n\t----------\n\tstr1 : String\n\t\tThe string to search for the first non-repeating character.\n\t\n\tReturns\n\t-------\n\tUnion{String, Nothing}\n\t\tThe first non-repeating character in the string.\n\t\tIf there is no non-repeating character, return nothing.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the count of each character\n\tchar_count = Dict{Char, Int}()\n\t\n\t# Iterate through the string and store the count of each character\n\tfor c in str1\n\t\tif haskey(char_count, c)\n\t\t\tchar_count[c] += 1\n\t\telse\n\t\t\tchar_count[c] = 1\n\t\tend\n\tend\n\t\n\t# Iterate through the string again and return the first character with a count of 1\n\tfor c in str1\n\t\tif char_count[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If there is no non-repeating character, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\tIf there is no non-repeating character, it returns nothing.\n\t\"\"\"\n\t\n\t# Initialize a dictionary to store the characters and their counts\n\tchar_count = Dict()\n\t\n\t# Iterate over the string\n\tfor char in str1\n\t\t# If the character is not in the dictionary, add it and set its count to 1\n\t\tif !haskey(char_count, char)\n\t\t\tchar_count[char] = 1\n\t\telse\n\t\t\t# If the character is already in the dictionary, increment its count by 1\n\t\t\tchar_count[char] += 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string again\n\tfor char in str1\n\t\t# If the character count is 1, return it\n\t\tif char_count[char] == 1\n\t\t\treturn char\n\t\tend\n\tend\n\t\n\t# If no character has a count of 1, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tThis function takes a string and returns the first non-repeating character in it.\n\t\tIf there is no non-repeating character, it returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturn the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    # your code goes here\n    for i in 1:length(str1)\n        if count(x -> x == str1[i], str1) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    for i in 1:length(str1)\n        if count(x -> x == str1[i], str1) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in the string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t# Create an empty dictionary\n\tdict = Dict{Char, Int}()\n\t\n\t# Traverse the input string\n\tfor c in str1\n\t\t# If character is in dictionary\n\t\tif haskey(dict, c)\n\t\t\t# Increment count of character by 1\n\t\t\tdict[c] += 1\n\t\telse\n\t\t\t# Add the character to dictionary with count 1\n\t\t\tdict[c] = 1\n\t\tend\n\tend\n\t\n\t# Traverse the string again to find first non-repeating character\n\tfor c in str1\n\t\t# If character has a count of 1, return it\n\t\tif dict[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If there is no non-repeating character, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFind the first non-repeating character in a given string.\n\t\tArgs:\n\t\t\tstr1: The string to be searched.\n\t\tReturns:\n\t\t\tThe first non-repeating character, or nothing if there is no non-repeating character.\n\t\"\"\"\n\t\n\t# Create a dictionary of counts\n\tdict = Dict{Char, Int}()\n\tfor c in str1\n\t\tif haskey(dict, c)\n\t\t\tdict[c] += 1\n\t\telse\n\t\t\tdict[c] = 1\n\t\tend\n\tend\n\t\n\t# Search string for the first character with a count of 1\n\tfor c in str1\n\t\tif dict[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no non-repeating characters were found, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i],str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character in a given string.\n\t\n\t#Example\n\t```jldoctest\n\tjulia> first_non_repeating_character(\"abcdabcd\")\n\t\"c\"\n\t\n\tjulia> first_non_repeating_character(\"abcd\")\n\t\"a\"\n\t\n\tjulia> first_non_repeating_character(\"\")\n\tnothing\n\t```\n\t\"\"\"\n\tif str1 == \"\"\n\t\treturn nothing\n\tend\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t#create a dictionary to store the count of each character\n\tcount_dict = Dict{Char, Int}()\n\t\n\t#iterate through the string and store the count of each character\n\tfor i in str1\n\t\tif haskey(count_dict, i)\n\t\t\tcount_dict[i] += 1\n\t\telse\n\t\t\tcount_dict[i] = 1\n\t\tend\n\tend\n\t\n\t#iterate through the string and return the first character with count 1\n\tfor i in str1\n\t\tif count_dict[i] == 1\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\t#if no character has count 1, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tchar_count = Dict{Char, Int}()\n\tfor char in str1\n\t\tif haskey(char_count, char)\n\t\t\tchar_count[char] += 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\tfor char in str1\n\t\tif char_count[char] == 1\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t# create a dictionary to store the count of each character\n\tchar_count = Dict{Char, Int}()\n\t# iterate over the string\n\tfor c in str1\n\t\t# if the character is not in the dictionary, add it with count 1\n\t\tif !haskey(char_count, c)\n\t\t\tchar_count[c] = 1\n\t\t# if the character is already in the dictionary, increment the count\n\t\telse\n\t\t\tchar_count[c] += 1\n\t\tend\n\tend\n\t# iterate over the string\n\tfor c in str1\n\t\t# if the count of the character is 1, return the character\n\t\tif char_count[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t# if no character has count 1, return nothing\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tParameters:\n\t\t\tstr1 (str): The string to search for the first non-repeating character.\n\t\t\n\t\tReturns:\n\t\t\tUnion[str, None]: The first non-repeating character in the string.\n\t\t\t\t\t\t\t\tIf no non-repeating character is found, returns None.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the count of each character in the string\n\tchar_count = Dict{Char, Int64}()\n\t\n\t# Loop through the characters in the string\n\tfor c in str1\n\t\t# If the character is not in the dictionary, add it with a count of 1\n\t\tif !haskey(char_count, c)\n\t\t\tchar_count[c] = 1\n\t\t# If the character is in the dictionary, increment its count\n\t\telse\n\t\t\tchar_count[c] += 1\n\t\tend\n\tend\n\t\n\t# Loop through the characters in the string\n\tfor c in str1\n\t\t# If the character has a count of 1, return it\n\t\tif char_count[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no non-repeating character is found, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\t\n\t# Initialize a dictionary to store the count of each character\n\tcount_dict = Dict{Char, Int}()\n\t\n\t# Iterate through the string and add each character to the dictionary\n\t# If the character already exists, increment the count\n\tfor c in str1\n\t\tif haskey(count_dict, c)\n\t\t\tcount_dict[c] += 1\n\t\telse\n\t\t\tcount_dict[c] = 1\n\t\tend\n\tend\n\t\n\t# Iterate through the string again and return the first character with count 1\n\tfor c in str1\n\t\tif count_dict[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no character has count 1, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tstr1: a string\n\treturns: the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\tIf there is no non-repeating character, it returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturn the first non-repeating character in a given string.\n\t\"\"\"\n\tstr1_chars = Set(str1)\n\tfor char in str1_chars\n\t\tif count(str1, char) == 1\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t# Your code here\n\t# You can also use some built-in python functions\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tchars = Set(str1)\n\tfor c in chars\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tArguments:\n\t\tstr1 -- string to be searched\n\t\t\n\t\tReturns:\n\t\tfirst non-repeating character in a given string.\n\t\t\n\t\t\"\"\"\n\t\t\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif length(findall(str1[i], str1)) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t# your code here\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\tif str1 == \"\"\n\t\t\treturn nothing\n\t\tend\n\t\tfor i in 1:length(str1)\n\t\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\t\treturn str1[i]\n\t\t\tend\n\t\tend\n\t\treturn nothing\n\tend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tArgs:\n\t\t\tstr1(str): String to be searched.\n\t\t\n\t\tReturns:\n\t\t\tUnion[str, None]: First non-repeating character in the string.\n\t\t\t\t\t\t\t  None if no non-repeating character is found.\n\t\"\"\"\n\t\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\t\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\tIf there is no non-repeating character, it returns nothing.\n\t\"\"\"\n\t# Create a dictionary to store the count of each character in the string\n\tchar_count = Dict{Char, Int64}()\n\t\n\t# Iterate over the string and store the count of each character in the dictionary\n\tfor char in str1\n\t\tif haskey(char_count, char)\n\t\t\tchar_count[char] += 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string and return the first character with count 1\n\tfor char in str1\n\t\tif char_count[char] == 1\n\t\t\treturn char\n\t\tend\n\tend\n\t\n\t# If no character has count 1, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tArgs:\n\t\t\tstr1: String to be searched.\n\t\t\n\t\tReturns:\n\t\t\tFirst non-repeating character in the string.\n\t\t\tIf no non-repeating character is found, returns nothing.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the count of each character in the string.\n\tchar_count = Dict{Char, Int}()\n\t\n\t# Iterate over the string and store the count of each character in the dictionary.\n\tfor c in str1\n\t\tif haskey(char_count, c)\n\t\t\tchar_count[c] += 1\n\t\telse\n\t\t\tchar_count[c] = 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string and return the first character with count 1.\n\tfor c in str1\n\t\tif char_count[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no non-repeating character is found, return nothing.\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\t\n\t# Initialize a dictionary to store the count of each character\n\tchar_count = Dict{Char, Int}()\n\t\n\t# Iterate through the string and count the number of times each character appears\n\tfor c in str1\n\t\tif haskey(char_count, c)\n\t\t\tchar_count[c] += 1\n\t\telse\n\t\t\tchar_count[c] = 1\n\t\tend\n\tend\n\t\n\t# Iterate through the string again and return the first character that appears only once\n\tfor c in str1\n\t\tif char_count[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no character appears only once, return nothing\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tif length(str1) == 0\n\t\treturn nothing\n\tend\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tif length(str1) == 0\n\t\treturn nothing\n\tend\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif length(findall(r\"$(str1[i])\", str1)) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tstr1: a string\n\treturns: the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t# your code goes here\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i],str1)==1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tstr1: a string\n\treturns: the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\t# Initialize a dictionary with all the characters in the string\n\t# and the number of times they occur in the string\n\tchar_count = Dict{Char, Int}()\n\tfor char in str1\n\t\tchar_count[char] = get(char_count, char, 0) + 1\n\tend\n\t# Iterate through the string and return the first character\n\t# that occurs only once\n\tfor char in str1\n\t\tif char_count[char] == 1\n\t\t\treturn char\n\t\tend\n\tend\n\t# If no character occurs only once, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tstr1 : String\n\t\t\tA string.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tUnion{String, Nothing}\n\t\t\tThe first non-repeating character in a given string.\n\t\t\t\n\t\tExamples\n\t\t--------\n\t\t>>> first_non_repeating_character(\"abcdefghija\")\n\t\t'a'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijab\")\n\t\t'c'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabc\")\n\t\t'd'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcd\")\n\t\t'e'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcde\")\n\t\t'f'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdef\")\n\t\t'g'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefg\")\n\t\t'h'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefgh\")\n\t\t'i'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefghi\")\n\t\t'j'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefghij\")\n\t\t'a'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefghija\")\n\t\t'b'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefghijab\")\n\t\t'c'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefghijabc\")\n\t\t'd'\n\t\t\n\t\t>>> first_non_repeating_character(\"abcdefghijabcdefghijabcd\")\n\t\t'e'\n\t\t",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\t# Initialize a dictionary\n\tdict = Dict{Char, Int}()\n\t# Iterate over the string\n\tfor c in str1\n\t\t# If the character is not in the dictionary, add it\n\t\tif !haskey(dict, c)\n\t\t\tdict[c] = 1\n\t\t# If the character is already in the dictionary, increment its value by 1\n\t\telse\n\t\t\tdict[c] += 1\n\t\tend\n\tend\n\t# Iterate over the string again\n\tfor c in str1\n\t\t# If the character's value is 1, return it\n\t\tif dict[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t# If no character with value 1 is found, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tstr1 : String\n\t\t\tString to find the first non-repeating character.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tUnion{String, Nothing}\n\t\t\tFirst non-repeating character in the string.\n\t\t\tIf no non-repeating character is found, return nothing.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the count of each character in the string.\n\tchar_count = Dict{Char, Int}()\n\t\n\t# Iterate over the string and update the count of each character in the dictionary.\n\tfor char in str1\n\t\tif haskey(char_count, char)\n\t\t\tchar_count[char] += 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string and return the first character with count 1.\n\tfor char in str1\n\t\tif char_count[char] == 1\n\t\t\treturn char\n\t\tend\n\tend\n\t\n\t# If no non-repeating character is found, return nothing.\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturn the first non-repeating character in a given string.\n\t\"\"\"\n\t# Convert the string to lowercase\n\tstr1 = lowercase(str1)\n\t# Create an empty dictionary\n\tdict1 = Dict{Char, Int}()\n\t# Loop through the string\n\tfor i in str1\n\t\t# If the character is not in the dictionary, add it to the dictionary with a value of 1\n\t\tif !haskey(dict1, i)\n\t\t\tdict1[i] = 1\n\t\t# If the character is already in the dictionary, increment the value by 1\n\t\telse\n\t\t\tdict1[i] += 1\n\t\tend\n\tend\n\t# Loop through the string\n\tfor i in str1\n\t\t# If the character is in the dictionary and the value is 1, return the character\n\t\tif haskey(dict1, i) && dict1[i] == 1\n\t\t\treturn i\n\t\tend\n\tend\n\t# If no character is found, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tParameters:\n\t\tstr1 (str): The string to search for the first non-repeating character.\n\t\t\n\t\tReturns:\n\t\tUnion[str, None]: The first non-repeating character in the string.\n\t\t\t\t\t\t  If there is no non-repeating character, return None.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the number of times each character appears in the string.\n\tchar_count = Dict{Char, Int64}()\n\t\n\t# Iterate through the string and add each character to the dictionary.\n\t# If the character is already in the dictionary, increment the count.\n\tfor c in str1\n\t\tif haskey(char_count, c)\n\t\t\tchar_count[c] += 1\n\t\telse\n\t\t\tchar_count[c] = 1\n\t\tend\n\tend\n\t\n\t# Iterate through the string again and return the first character with a count of 1.\n\tfor c in str1\n\t\tif char_count[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no character has a count of 1, return None.\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character in a given string.\n\t\"\"\"\n\t\n\t# Initialize a dictionary\n\tdict = Dict{Char, Int}()\n\t\n\t# Loop over the string\n\tfor c in str1\n\t\tif haskey(dict, c)\n\t\t\tdict[c] += 1\n\t\telse\n\t\t\tdict[c] = 1\n\t\tend\n\tend\n\t\n\t# Loop over the string again\n\tfor c in str1\n\t\tif dict[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor (i, c) in enumerate(str1)\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i],str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function returns the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    for i in 1:length(str1)\n        if count(x->x==str1[i], str1) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tArgs:\n\t\t\tstr1: String to be searched.\n\t\t\n\t\tReturns:\n\t\t\tFirst non-repeating character in a given string.\n\t\t\tIf no non-repeating character is found, returns nothing.\n\t\"\"\"\n\t\n\t# Initialize an empty dictionary\n\td = Dict{Char, Int}()\n\t\n\t# Loop through the string\n\tfor c in str1\n\t\t# If the character is not in the dictionary, add it with value 1\n\t\tif !haskey(d, c)\n\t\t\td[c] = 1\n\t\t# Else, increment the value by 1\n\t\telse\n\t\t\td[c] += 1\n\t\tend\n\tend\n\t\n\t# Loop through the string\n\tfor c in str1\n\t\t# If the value of the character is 1, return the character\n\t\tif d[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If no non-repeating character is found, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tif str1 == \"\"\n\t\treturn nothing\n\tend\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "\t\"\"\"\n\tstr1: string to search\n\treturn: the first non-repeating character or nothing\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\tIf no non-repeating character is found, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tif str1 == \"\"\n\t\treturn nothing\n\tend\n\t\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\t\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character.\n\t\"\"\"\n\t# Initialize a dictionary to store the count of each character\n\tcount_dict = Dict{Char, Int}()\n\t# Loop over the string\n\tfor i in str1\n\t\t# If the character is not present in the dictionary, add it to the dictionary\n\t\tif !haskey(count_dict, i)\n\t\t\tcount_dict[i] = 1\n\t\t# If the character is already present in the dictionary, increment its count by 1\n\t\telse\n\t\t\tcount_dict[i] += 1\n\t\tend\n\tend\n\t# Loop over the string again\n\tfor i in str1\n\t\t# If the count of the character is 1, return the character\n\t\tif count_dict[i] == 1\n\t\t\treturn i\n\t\tend\n\tend\n\t# If no character is found, return nothing\n\treturn nothing\nend",
    "\tchars = Set(str1)\n\tfor c in chars\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t#str1 = \"abcab\"\n\t#str1 = \"abab\"\n\t#str1 = \"aabbbc\"\n\t#str1 = \"aabbdbc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    for i in 1:length(str1)\n        if count(x -> x == str1[i], str1) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\tIf there is no non-repeating character, then it returns nothing.\n\t\"\"\"\n\t\n\t# Initialize a dictionary\n\tdict = Dict{Char, Int}()\n\t\n\t# Loop over the string\n\tfor i in str1\n\t\t# If the character is not in the dictionary, then add it\n\t\tif !haskey(dict, i)\n\t\t\tdict[i] = 1\n\t\telse\n\t\t\t# If the character is already in the dictionary, then increment its value by 1\n\t\t\tdict[i] += 1\n\t\tend\n\tend\n\t\n\t# Loop over the string\n\tfor i in str1\n\t\t# Check if the value corresponding to the key is 1\n\t\tif dict[i] == 1\n\t\t\t# Return the first non-repeating character\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\t# Return nothing if all the characters are repeating\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i],str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tstr1: string to be searched\n\treturn: the first non-repeating character in a given string\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    for i in 1:length(str1)\n        if count(x -> x == str1[i], str1) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\t# Get the length of the string\n\tstr_len = length(str1)\n\t\n\t# Loop through the string\n\tfor i in 1:str_len\n\t\t# Get the current character\n\t\tcurrent_char = str1[i]\n\t\t\n\t\t# Check if the current character is not repeated\n\t\tif count(str1, current_char) == 1\n\t\t\treturn current_char\n\t\tend\n\tend\n\t\n\t# If no non-repeating character is found, return nothing\n\treturn nothing\nend",
    "\t# your code goes here\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in the string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif length(filter(x -> x == str1[i], str1)) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t#str1 = \"abcab\" \n\t#str1 = \"abab\" \n\t#str1 = \"aabbbc\" \n\t#str1 = \"aabbdbc\"\n\t\n\t#str1 = \"abcdef\"\n\t#str1 = \"aabbcc\"\n\t#str1 = \"abcabc\"\n\t#str1 = \"abcabcabcd\"\n\t\n\t#str1 = \"abcabcd\"\n\t#str1 = \"abcabcdabcd\"\n\t#str1 = \"abcabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcd\"\n\t\n\t#str1 = \"abcabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"\n\t#str1 = \"abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor (i, c) in enumerate(str1)\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "\t\tstr1 = lowercase(str1)\n\t\tfor i in 1:length(str1)\n\t\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\t\treturn str1[i]\n\t\t\tend\n\t\tend\n\t\treturn nothing\n\tend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor (i, c) in enumerate(str1)\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tThis function takes a string as input and returns the first non-repeating character in a given string.\n\t\t\n\t\t# Example \n\t\t```julia\n\t\tjulia> first_non_repeating_character(\"abcdabcd\")\n\t\t\"c\"",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\tIf no such character exists, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFunction to find the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in the string.\n\tIf there are no non-repeating characters, returns nothing.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the number of occurrences of each character\n\toccurrences = Dict{Char, Int}()\n\t\n\t# Iterate through the string and count the number of occurrences of each character\n\tfor c in str1\n\t\tif haskey(occurrences, c)\n\t\t\toccurrences[c] += 1\n\t\telse\n\t\t\toccurrences[c] = 1\n\t\tend\n\tend\n\t\n\t# Iterate through the string and return the first character that occurs only once\n\tfor c in str1\n\t\tif occurrences[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\t# If there are no non-repeating characters, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\tIf there is no non-repeating character, it returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tstr1 : String\n\t\t\tString to be searched for non-repeating character.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tUnion{String, Nothing}\n\t\t\tFirst non-repeating character in the string.\n\t\t\tIf there is no non-repeating character, return nothing.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the count of each character\n\tcount_dict = Dict{Char, Int}()\n\t\n\t# Iterate over the string and store the count of each character\n\tfor i in str1\n\t\tif haskey(count_dict, i)\n\t\t\tcount_dict[i] += 1\n\t\telse\n\t\t\tcount_dict[i] = 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string and return the first character with count 1\n\tfor i in str1\n\t\tif count_dict[i] == 1\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\t# If there is no non-repeating character, return nothing\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x->x==str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\tIf no non-repeating character is found, returns nothing.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tFunction to find the first non-repeating character in a given string.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tstr1 : String\n\t\t\tA string of characters.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tUnion{String, Nothing}\n\t\t\tThe first non-repeating character in the string.\n\t\t\tIf no non-repeating character is found, return nothing.\n\t\t\n\t\tExamples\n\t\t--------\n\t\tjulia> first_non_repeating_character(\"abcdabcd\")\n\t\t\"a\"\n\t\t\n\t\tjulia> first_non_repeating_character(\"abcdabcdabcd\")\n\t\tnothing\n\t\"\"\"\n\t\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string as input and returns the first non-repeating character in a given string.\n\t\"\"\"\n\t\n\t# Initialize a dictionary\n\tdict = Dict{Char, Int}()\n\t\n\t# Loop over each character in the string\n\tfor c in str1\n\t\tif haskey(dict, c)\n\t\t\tdict[c] += 1\n\t\telse\n\t\t\tdict[c] = 1\n\t\tend\n\tend\n\t\n\t# Loop over each character in the string\n\tfor c in str1\n\t\tif dict[c] == 1\n\t\t\treturn c\n\t\tend\n\tend\n\t\n\treturn nothing\nend",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\t\n\t# Initialize a dictionary\n\tdict = Dict{Char, Int}()\n\t\n\t# Iterate over the string\n\tfor i in str1\n\t\tif haskey(dict, i)\n\t\t\tdict[i] += 1\n\t\telse\n\t\t\tdict[i] = 1\n\t\tend\n\tend\n\t\n\t# Iterate over the string again\n\tfor i in str1\n\t\tif dict[i] == 1\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\t\tReturns the first non-repeating character in a given string.\n\t\t\n\t\t# Arguments\n\t\t\tstr1: string.\n\t\t\n\t\t# Returns\n\t\t\tThe first non-repeating character in a given string.\n\t\"\"\"\n\t\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\t\n\treturn nothing\nend",
    "\t\t#str1 = \"abcab\"\n\t\t#str1 = \"abab\"\n\t\t#str1 = \"aabbbc\"\n\t\t#str1 = \"aabbdbc\"\n\t\t#str1 = \"aabbc\"\n\t\t#str1 = \"aabbcc\"\n\t\t#str1 = \"aabbccc\"\n\t\t#str1 = \"aabbcccc\"\n\t\t#str1 = \"aabbccccc\"\n\t\t#str1 = \"aabbcccccc\"\n\t\t#str1 = \"aabbccccccc\"\n\t\t#str1 = \"aabbcccccccc\"\n\t\t#str1 = \"aabbccccccccc\"\n\t\t#str1 = \"aabbcccccccccc\"\n\t\t#str1 = \"aabbccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccccccccccccc\"\n\t\t#str1 = \"aabbccccccccccccccccccccccccc\"\n\t\t#str1 = \"aabbcccccccccccccccccccccc",
    "\t\"\"\"\n\tThis function takes a string and returns the first non-repeating character in it.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tReturns the first non-repeating character in a string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend"
  ]
}