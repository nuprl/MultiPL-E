{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "jl",
  "prompt": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpabetkvyt.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpabetkvyt.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpabetkvyt.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpabetkvyt.jl:23\ntest set: Error During Test at /tmp/tmpabetkvyt.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpabetkvyt.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpabetkvyt.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tcost is a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\t\"\"\"\n\tN = length(cost)\n\t# Initialize the matrix to store the maximum average of path from cell (i,j) to the bottom right cell (N,N)\n\tmaxAvg = zeros(N,N)\n\t# Initialize the matrix to store the number of paths from cell (i,j) to the bottom right cell (N,N)\n\tnumPaths = zeros(N,N)\n\t# Initialize the matrix to store the cost of the path from cell (i,j) to the bottom right cell (N,N)\n\tcostPath = zeros(N,N)\n\t# Initialize the matrix to store the maximum average of path from cell (i,j) to the bottom right cell (N,N)\n\tmaxAvg[N,N] = cost[N,N]\n\t# Initialize the matrix to store the number of paths from cell (i,j) to the bottom right cell (N,N)\n\tnumPaths[N,N] = 1\n\t# Initialize the matrix to store the cost of the path from cell (i,j) to the bottom right cell (N,N)\n\tcostPath[N,N] = cost[N,N]\n\t# Iterate over the matrix from right to left and from bottom to top\n\tfor i in N-1:-1:1\n\t\tfor j in N-1:-1:1\n\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\tif (i != N) || (j != N)\n\t\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\t\tif (i != N) || (j != N)\n\t\t\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\t\t\tif (i != N) || (j != N)\n\t\t\t\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\t\t\t\tif (i != N) || (j != N)\n\t\t\t\t\t\t\t# If\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509925,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcjbkbbci.jl:1\nin expression starting at /tmp/tmpcjbkbbci.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpoeymrpyi.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoeymrpyi.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoeymrpyi.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoeymrpyi.jl:23\ntest set: Error During Test at /tmp/tmpoeymrpyi.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoeymrpyi.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpoeymrpyi.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmph2m27bpk.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph2m27bpk.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph2m27bpk.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph2m27bpk.jl:23\ntest set: Error During Test at /tmp/tmph2m27bpk.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph2m27bpk.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmph2m27bpk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpvbib05f4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpvbib05f4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvbib05f4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvbib05f4.jl:23\ntest set: Error During Test at /tmp/tmpvbib05f4.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpvbib05f4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpvbib05f4.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix with the first row and column\n\tn = length(cost)\n\tavg = zeros(n,n)\n\tavg[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\t# Fill the matrix\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tavg[i,j] = max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the max average\n\treturn avg[n,n] / n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpq70kzwe6.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpq70kzwe6.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq70kzwe6.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq70kzwe6.jl:26\ntest set: Error During Test at /tmp/tmpq70kzwe6.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpq70kzwe6.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpq70kzwe6.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n, j in 2:n\n\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\tend\n\treturn dp[n, n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmp50x3fa8n.jl:22\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp50x3fa8n.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50x3fa8n.jl:22 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50x3fa8n.jl:21\ntest set: Error During Test at /tmp/tmp50x3fa8n.jl:23\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp50x3fa8n.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp50x3fa8n.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpa8p_aneq.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa8p_aneq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa8p_aneq.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa8p_aneq.jl:23\ntest set: Error During Test at /tmp/tmpa8p_aneq.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa8p_aneq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpa8p_aneq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm = length(cost)\n\tn = length(cost[1])\n\t\n\t# initialize the matrix\n\tmat = zeros(Int64, m, n)\n\tmat[1, 1] = cost[1, 1]\n\t\n\t# fill the first row\n\tfor i in 2:n\n\t\tmat[1, i] = mat[1, i-1] + cost[1, i]\n\tend\n\t\n\t# fill the first column\n\tfor i in 2:m\n\t\tmat[i, 1] = mat[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tmat[i, j] = max(mat[i-1, j], mat[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn mat[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmplavumdxz.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmplavumdxz.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmplavumdxz.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmplavumdxz.jl:35\ntest set: Error During Test at /tmp/tmplavumdxz.jl:37\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmplavumdxz.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmplavumdxz.jl:33\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2 * N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmps50bi37d.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps50bi37d.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps50bi37d.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmps50bi37d.jl:23\ntest set: Error During Test at /tmp/tmps50bi37d.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps50bi37d.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmps50bi37d.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmp57q2ustn.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp57q2ustn.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp57q2ustn.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp57q2ustn.jl:23\ntest set: Error During Test at /tmp/tmp57q2ustn.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp57q2ustn.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp57q2ustn.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-2)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmp3xzmrub5.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp3xzmrub5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3xzmrub5.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3xzmrub5.jl:23\ntest set: Error During Test at /tmp/tmp3xzmrub5.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp3xzmrub5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp3xzmrub5.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpvbib05f4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpvbib05f4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvbib05f4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvbib05f4.jl:23\ntest set: Error During Test at /tmp/tmpvbib05f4.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpvbib05f4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpvbib05f4.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\n\t# Initialize the matrix of size N*N\n\tN = length(cost)\n\t\n\t# Initialize the matrix of size N*N\n\tM = zeros(N,N)\n\t\n\t# Initialize the first row\n\tM[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tM[1,i] = M[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Initialize the first column\n\tfor i in 2:N\n\t\tM[i,1] = M[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the matrix\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tM[i,j] = max(M[i-1,j], M[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn M[N,N]/N\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpuxgye1lp.jl:37\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpuxgye1lp.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuxgye1lp.jl:37 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuxgye1lp.jl:36\ntest set: Error During Test at /tmp/tmpuxgye1lp.jl:38\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpuxgye1lp.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpuxgye1lp.jl:34\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\t\n\t# create a matrix to store the max average\n\tmaxAvg = zeros(n,m)\n\t\n\t# initialize the first row and column\n\tmaxAvg[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tmaxAvg[i,1] = maxAvg[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tmaxAvg[1,j] = maxAvg[1,j-1] + cost[1,j]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tmaxAvg[i,j] = max(maxAvg[i-1,j], maxAvg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn maxAvg[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpsq90a2sx.jl:34\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsq90a2sx.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsq90a2sx.jl:34 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsq90a2sx.jl:33\ntest set: Error During Test at /tmp/tmpsq90a2sx.jl:35\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsq90a2sx.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpsq90a2sx.jl:31\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpm0ql6xud.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpm0ql6xud.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm0ql6xud.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm0ql6xud.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp7d12c_vp.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp7d12c_vp.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d12c_vp.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d12c_vp.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the DP matrix\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpr4avxw0a.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpr4avxw0a.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr4avxw0a.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr4avxw0a.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpmk_llz0w.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmk_llz0w.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmk_llz0w.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmk_llz0w.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n, j in 2:n\n\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpj_ucjt1m.jl:22\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpp8ttaozb.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpp8ttaozb.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp8ttaozb.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp8ttaozb.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpx1ue7w7c.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx1ue7w7c.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx1ue7w7c.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx1ue7w7c.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpsfrw6vh4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsfrw6vh4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsfrw6vh4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsfrw6vh4.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn dp[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpvooololy.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpvooololy.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvooololy.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvooololy.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/((n-1)+(m-1)+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpcboqmm1k.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpcboqmm1k.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcboqmm1k.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcboqmm1k.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tfor i in 2:n\n\t\tcost[i,1] += cost[i-1,1]\n\t\tcost[1,i] += cost[1,i-1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tcost[i,j] += max(cost[i-1,j],cost[i,j-1])\n\tend\n\treturn cost[n,n]/n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxl0p6k6n.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxl0p6k6n.jl:1\nin expression starting at /tmp/tmpxl0p6k6n.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmprnkduck6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprnkduck6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnkduck6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnkduck6.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/((N-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp68pbs6du.jl:24\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\t\tcost: a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\t\treturn: a path with the maximum average over all existing paths.\n\t\"\"\"\n\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2*N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpc2avwl0x.jl:28\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc2avwl0x.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc2avwl0x.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc2avwl0x.jl:27\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix with the first row and column\n\tn = length(cost)\n\tmatrix = zeros(n, n)\n\tmatrix[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tmatrix[1, i] = matrix[1, i-1] + cost[1, i]\n\t\tmatrix[i, 1] = matrix[i-1, 1] + cost[i, 1]\n\tend\n\t# Fill the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tmatrix[i, j] = cost[i, j] + max(matrix[i-1, j], matrix[i, j-1])\n\t\tend\n\tend\n\treturn matrix[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp_aooy05t.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpie92grc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpie92grc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpie92grc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpie92grc3.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpfe39d6sx.jl:30\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpfe39d6sx.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfe39d6sx.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfe39d6sx.jl:29\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpb659hn2v.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb659hn2v.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb659hn2v.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb659hn2v.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tfor i in 1:n\n\t\tfor j in 1:n\n\t\t\tif i == 1 && j == 1\n\t\t\t\tcontinue\n\t\t\telseif i == 1\n\t\t\t\tcost[i,j] += cost[i,j-1]\n\t\t\telseif j == 1\n\t\t\t\tcost[i,j] += cost[i-1,j]\n\t\t\telse\n\t\t\t\tcost[i,j] += max(cost[i-1,j], cost[i,j-1])\n\t\t\tend\n\t\tend\n\tend\n\treturn cost[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmps7tdg08i.jl:29\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps7tdg08i.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps7tdg08i.jl:29 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmps7tdg08i.jl:28\ntest set: Error During Test at /tmp/tmps7tdg08i.jl:30\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps7tdg08i.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps7tdg08i.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmps7tdg08i.jl:28\ntest set: Error During Test at /tmp/tmps7tdg08i.jl:31\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps7tdg08i.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps7tdg08i.jl:31 [inlined]\n   [5] macro expansion\n     @ /h",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix\n\tn = length(cost)\n\tm = Matrix{Float64}(undef, n, n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_jmwdww_.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_jmwdww_.jl:1\nin expression starting at /tmp/tmp_jmwdww_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost,1)\n\tM = zeros(Int64,N,N)\n\tM[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tM[1,i] = M[1,i-1] + cost[1,i]\n\t\tM[i,1] = M[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tM[i,j] = max(M[i-1,j],M[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn M[N,N]/N\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmps8htrvft.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps8htrvft.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps8htrvft.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmps8htrvft.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124128,
      "stdout": "test set: Error During Test at /tmp/tmpx15f7rku.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx15f7rku.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx15f7rku.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx15f7rku.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(Int64,n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124128,
      "stdout": "test set: Error During Test at /tmp/tmph6h2f4pu.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph6h2f4pu.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph6h2f4pu.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph6h2f4pu.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpmu7iccfc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmu7iccfc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmu7iccfc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmu7iccfc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the first row and column\n\tfor i in 2:n\n\t\tcost[i,1] = cost[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tcost[1,j] = cost[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Compute the rest of the table\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tcost[i,j] = max(cost[i-1,j], cost[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn cost[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpa6b8ou6t.jl:30\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa6b8ou6t.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa6b8ou6t.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa6b8ou6t.jl:29\ntest set: Error During Test at /tmp/tmpa6b8ou6t.jl:31\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa6b8ou6t.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa6b8ou6t.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa6b8ou6t.jl:29\ntest set: Error During Test at /tmp/tmpa6b8ou6t.jl:32\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa6b8ou6t.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa6b8ou6t.jl:32 [inlined]\n   [5] macro expansion\n     @ /h",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpsfrw6vh4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsfrw6vh4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsfrw6vh4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsfrw6vh4.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpbdylpk2u.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbdylpk2u.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbdylpk2u.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbdylpk2u.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost,1)\n\tdp = zeros(Float64,N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/(N+N-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpmnxnyf5c.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmnxnyf5c.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmnxnyf5c.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmnxnyf5c.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpwx2wczqn.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpwx2wczqn.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwx2wczqn.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwx2wczqn.jl:25\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmprsttg6a2.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprsttg6a2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprsttg6a2.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprsttg6a2.jl:23\ntest set: Error During Test at /tmp/tmprsttg6a2.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprsttg6a2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpx1xgkfck.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx1xgkfck.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx1xgkfck.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx1xgkfck.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# Initialize the table\n\ttable = zeros(Float64, n, n)\n\ttable[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor j = 2:n\n\t\ttable[1,j] = table[1,j-1] + cost[1,j]\n\tend\n\t# Fill the first column\n\tfor i = 2:n\n\t\ttable[i,1] = table[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the table\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\ttable[i,j] = max(table[i-1,j], table[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn table[n,n] / (2n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpje6yye3w.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpje6yye3w.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpje6yye3w.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpje6yye3w.jl:30\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpk86rg27d.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpk86rg27d.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk86rg27d.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk86rg27d.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmprgqe1l5r.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprgqe1l5r.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprgqe1l5r.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprgqe1l5r.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 1:n\n\t\tfor j in 1:n\n\t\t\tif i == 1 && j == 1\n\t\t\t\tcontinue\n\t\t\telseif i == 1\n\t\t\t\tdp[i,j] = dp[i,j-1] + cost[i,j]\n\t\t\telseif j == 1\n\t\t\t\tdp[i,j] = dp[i-1,j] + cost[i,j]\n\t\t\telse\n\t\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmp6fnazapt.jl:28\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6fnazapt.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6fnazapt.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6fnazapt.jl:27\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmp5syt0kmi.jl:30\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5syt0kmi.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5syt0kmi.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5syt0kmi.jl:29\ntest set: Error During Test at /tmp/tmp5syt0kmi.jl:31\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5syt0kmi.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmp3yhpsu8h.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp3yhpsu8h.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3yhpsu8h.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3yhpsu8h.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = copy(cost)\n\tfor i in 2:n\n\t\tdp[i,1] += dp[i-1,1]\n\t\tdp[1,i] += dp[1,i-1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] += max(dp[i-1,j], dp[i,j-1])\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmppfd_b9oj.jl:23\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmppfd_b9oj.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmppfd_b9oj.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmppfd_b9oj.jl:22\ntest set: Error During Test at /tmp/tmppfd_b9oj.jl:24\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmppfd_b9oj.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmppfd_b9oj.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmppfd_b9oj.jl:22\ntest set: Error During Test at /tmp/tmppfd_b9oj.jl:25\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmppfd_b9oj.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmppfd_b9oj.jl:25 [inlined]\n   [5] macro expansion\n     @ /home",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix of size N*N\n\tN = length(cost)\n\tM = zeros(Int64, N, N)\n\tM[1,1] = cost[1,1]\n\t# Fill the first row and column\n\tfor i in 2:N\n\t\tM[i,1] = M[i-1,1] + cost[i,1]\n\t\tM[1,i] = M[1,i-1] + cost[1,i]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tM[i,j] = max(M[i-1,j], M[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the average\n\treturn M[N,N] / (N*N)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpo4oxu_ex.jl:28\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpo4oxu_ex.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo4oxu_ex.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo4oxu_ex.jl:27\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\n\t# Initialize the matrix\n\tn = length(cost)\n\tm = Matrix{Int64}(undef, n, n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j], m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the result\n\treturn m[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpk9gjfvw5.jl:30\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpk9gjfvw5.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk9gjfvw5.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk9gjfvw5.jl:29\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpv2oxto6c.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv2oxto6c.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv2oxto6c.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv2oxto6c.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpx1xgkfck.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx1xgkfck.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx1xgkfck.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx1xgkfck.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmprnkduck6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprnkduck6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnkduck6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnkduck6.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/(N+N-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpkm8cjfih.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkm8cjfih.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkm8cjfih.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkm8cjfih.jl:23\ntest set: Error During Test at /tmp/tmpkm8cjfih.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkm8cjfih.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpfs_okkg6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = zeros(n,n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j],m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn m[n,n]/(n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmp2l74s_0l.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp2l74s_0l.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2l74s_0l.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2l74s_0l.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpmu7iccfc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmu7iccfc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmu7iccfc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmu7iccfc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-2)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmppea5_mq1.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmppea5_mq1.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmppea5_mq1.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmppea5_mq1.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124133,
      "stdout": "test set: Error During Test at /tmp/tmp8_sjl9hy.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp8_sjl9hy.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8_sjl9hy.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8_sjl9hy.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm, n = size(cost)\n\t@assert m == n\n\t@assert m > 0\n\t@assert n > 0\n\t\n\t# dp[i, j] = max average of path from (1, 1) to (i, j)\n\tdp = zeros(Float64, m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:m\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:n\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i = 2:m\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124133,
      "stdout": "test set: Error During Test at /tmp/tmp65qh7iry.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp65qh7iry.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp65qh7iry.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp65qh7iry.jl:30\ntest set: Error During Test at /tmp/tmp65qh7iry.jl:32\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp65qh7iry.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp65qh7iry.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp65qh7iry.jl:30\ntest set: Error During Test at /tmp/tmp65qh7iry.jl:33\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp65qh7iry.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp65qh7iry.jl:33 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/(2*N-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpmqgt4rd5.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmqgt4rd5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmqgt4rd5.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmqgt4rd5.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp7j20zavy.jl:24\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp14btvl29.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp14btvl29.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp14btvl29.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp14btvl29.jl:25\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# Return the result\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpdo46rlgz.jl:37\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdo46rlgz.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdo46rlgz.jl:37 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdo46rlgz.jl:36\ntest set: Error During Test at /tmp/tmpdo46rlgz.jl:38\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdo46rlgz.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm, n = size(cost)\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmprrku0w6h.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprrku0w6h.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprrku0w6h.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprrku0w6h.jl:25\ntest set: Error During Test at /tmp/tmprrku0w6h.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprrku0w6h.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprrku0w6h.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprrku0w6h.jl:25\ntest set: Error During Test at /tmp/tmprrku0w6h.jl:28\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprrku0w6h.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprrku0w6h.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp4pqam9so.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp4pqam9so.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4pqam9so.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4pqam9so.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm = size(cost, 1)\n\tn = size(cost, 2)\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmphe6qdt_1.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphe6qdt_1.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphe6qdt_1.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphe6qdt_1.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpybupovmq.jl:27\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpaww49vfo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpaww49vfo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaww49vfo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaww49vfo.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpnclyhrw0.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnclyhrw0.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnclyhrw0.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnclyhrw0.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp8d8ccsmm.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp8d8ccsmm.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8d8ccsmm.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8d8ccsmm.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor i in 2:m\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the result\n\treturn dp[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp8yd7z6qg.jl:37\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp8yd7z6qg.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8yd7z6qg.jl:37 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8yd7z6qg.jl:36\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmprsttg6a2.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprsttg6a2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprsttg6a2.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprsttg6a2.jl:23\ntest set: Error During Test at /tmp/tmprsttg6a2.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprsttg6a2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix\n\tn = length(cost)\n\tmatrix = zeros(n,n)\n\tmatrix[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tmatrix[1,i] = matrix[1,i-1] + cost[1,i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn matrix[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpimgkuxr1.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpimgkuxr1.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpimgkuxr1.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpimgkuxr1.jl:30\ntest set: Error During Test at /tmp/tmpimgkuxr1.jl:32\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpimgkuxr1.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmprnkduck6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprnkduck6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnkduck6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnkduck6.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp7wau2p2u.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp7wau2p2u.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7wau2p2u.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7wau2p2u.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpmi1o9_3e.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmi1o9_3e.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmi1o9_3e.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmi1o9_3e.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpa8p_aneq.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa8p_aneq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa8p_aneq.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa8p_aneq.jl:23\ntest set: Error During Test at /tmp/tmpa8p_aneq.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpa8p_aneq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpa8p_aneq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpph_q5i8p.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpph_q5i8p.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpph_q5i8p.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpph_q5i8p.jl:23\ntest set: Error During Test at /tmp/tmpph_q5i8p.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpph_q5i8p.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpnclyhrw0.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnclyhrw0.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnclyhrw0.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnclyhrw0.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix\n\tn = length(cost)\n\tpath = zeros(Int64, n, n)\n\tpath[1, 1] = cost[1, 1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tpath[1, i] = path[1, i-1] + cost[1, i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tpath[i, 1] = path[i-1, 1] + cost[i, 1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tpath[i, j] = max(path[i-1, j], path[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t# Return the result\n\treturn path[n, n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp2kzi25yf.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp2kzi25yf.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2kzi25yf.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2kzi25yf.jl:30\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpgdxxcjmk.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgdxxcjmk.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgdxxcjmk.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgdxxcjmk.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\t# Initialize the matrix\n\tn = length(cost)\n\tm = zeros(Int64, n, n)\n\tm[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j], m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn m[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpuvcbbbq1.jl:34\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpuvcbbbq1.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuvcbbbq1.jl:34 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuvcbbbq1.jl:33\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp39qik71h.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp39qik71h.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp39qik71h.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp39qik71h.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpp_2ms_qh.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpp_2ms_qh.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp_2ms_qh.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp_2ms_qh.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N] / (2*N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124138,
      "stdout": "test set: Error During Test at /tmp/tmpgjypfqls.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# DP table\n\tdp = zeros(n,m)\n\t\n\t# Base case\n\tdp[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the table\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn dp[n,m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124138,
      "stdout": "test set: Error During Test at /tmp/tmpjb_k_lqz.jl:38\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpjb_k_lqz.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjb_k_lqz.jl:38 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjb_k_lqz.jl:37\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix to store the average cost of each cell\n\tavg = zeros(n,m)\n\t\n\t# Initialize the first cell\n\tavg[1,1] = cost[1,1]\n\t\n\t# Initialize the first row\n\tfor i = 2:m\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Initialize the first column\n\tfor i = 2:n\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Compute the average cost of each cell\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tavg[i,j] = max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the average cost of the last cell\n\treturn avg[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpahln00l7.jl:39\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpahln00l7.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpahln00l7.jl:39 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpahln00l7.jl:38\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp7yp9byp_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp7yp9byp_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7yp9byp_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7yp9byp_.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpmu7iccfc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmu7iccfc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmu7iccfc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmu7iccfc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpbbq4hw90.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbbq4hw90.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbbq4hw90.jl:26\ntest set: Error During Test at /tmp/tmpbbq4hw90.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpbbq4hw90.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpbbq4hw90.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp39qik71h.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp39qik71h.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp39qik71h.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp39qik71h.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpx1ue7w7c.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx1ue7w7c.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx1ue7w7c.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx1ue7w7c.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpx1ue7w7c.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx1ue7w7c.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx1ue7w7c.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx1ue7w7c.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpsfrw6vh4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsfrw6vh4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsfrw6vh4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsfrw6vh4.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tcost: a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\t\"\"\"\n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp4jtnfkgw.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = cost[i,j] + max(dp[i-1,j],dp[i,j-1])\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpn_bcum9i.jl:24\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp7njvednc.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp7njvednc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7njvednc.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7njvednc.jl:25\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tavg = zeros(n,n)\n\tavg[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tavg[i,j] = max(avg[i-1,j],avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn avg[n,n]/n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpjm6lm5j9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpjm6lm5j9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjm6lm5j9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjm6lm5j9.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp_2oznvcr.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_2oznvcr.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_2oznvcr.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_2oznvcr.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpk86rg27d.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpk86rg27d.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk86rg27d.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk86rg27d.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm, n = size(cost)\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmprrku0w6h.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprrku0w6h.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprrku0w6h.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprrku0w6h.jl:25\ntest set: Error During Test at /tmp/tmprrku0w6h.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprrku0w6h.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprrku0w6h.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprrku0w6h.jl:25\ntest set: Error During Test at /tmp/tmprrku0w6h.jl:28\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprrku0w6h.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprrku0w6h.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmp7wau2p2u.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp7wau2p2u.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7wau2p2u.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7wau2p2u.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpm9jquu8c.jl:24\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmppzi3_ubz.jl:24\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp97iylma5.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp97iylma5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp97iylma5.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp97iylma5.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpmk_llz0w.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmk_llz0w.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmk_llz0w.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmk_llz0w.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix of the same size as the cost matrix\n\t# to store the maximum average of the path\n\tmax_average = zeros(Int64, size(cost, 1), size(cost, 2))\n\t# Initialize the first row of the max_average matrix\n\tmax_average[1, 1] = cost[1, 1]\n\tfor i in 2:size(cost, 1)\n\t\tmax_average[1, i] = max_average[1, i-1] + cost[1, i]\n\tend\n\t# Initialize the first column of the max_average matrix\n\tfor j in 2:size(cost, 2)\n\t\tmax_average[j, 1] = max_average[j-1, 1] + cost[j, 1]\n\tend\n\t# Compute the maximum average of the path\n\tfor i in 2:size(cost, 1)\n\t\tfor j in 2:size(cost, 2)\n\t\t\tmax_average[i, j] = max(max_average[i-1, j], max_average[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t# Return the maximum average of the path\n\treturn max_average[size(cost, 1), size(cost, 2)] / (size(cost, 1) + size(cost, 2) - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp23la0wnz.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp23la0wnz.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp23la0wnz.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp23la0wnz.jl:30\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpjck4iu75.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpjck4iu75.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjck4iu75.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjck4iu75.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmpmu7iccfc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmu7iccfc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmu7iccfc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmu7iccfc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# initialize the matrix\n\tn = length(cost)\n\tmatrix = zeros(n, n)\n\tmatrix[1, 1] = cost[1, 1]\n\t# fill the first row\n\tfor i in 2:n\n\t\tmatrix[1, i] = matrix[1, i - 1] + cost[1, i]\n\tend\n\t# fill the first column\n\tfor i in 2:n\n\t\tmatrix[i, 1] = matrix[i - 1, 1] + cost[i, 1]\n\tend\n\t# fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tmatrix[i, j] = max(matrix[i - 1, j], matrix[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t# return the result\n\treturn matrix[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmp06ddjd66.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp06ddjd66.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp06ddjd66.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp06ddjd66.jl:30\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# Initialize the DP matrix\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor j = 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the result\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpwe_akg45.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmph2m27bpk.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph2m27bpk.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph2m27bpk.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph2m27bpk.jl:23\ntest set: Error During Test at /tmp/tmph2m27bpk.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph2m27bpk.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmph2m27bpk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmphn98sctz.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphn98sctz.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphn98sctz.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphn98sctz.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Float64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmpo0jgrl0w.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpo0jgrl0w.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo0jgrl0w.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo0jgrl0w.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmpsfrw6vh4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsfrw6vh4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsfrw6vh4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsfrw6vh4.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509927,
      "stdout": "test set: Error During Test at /tmp/tmpgxt5im0t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgxt5im0t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgxt5im0t.jl:23\ntest set: Error During Test at /tmp/tmpgxt5im0t.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgxt5im0t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpgxt5im0t.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm = size(cost, 1)\n\tn = size(cost, 2)\n\t\n\t# create a 2D matrix to store the average cost\n\tavg = zeros(m, n)\n\t\n\t# initialize the first cell\n\tavg[1, 1] = cost[1, 1]\n\t\n\t# initialize the first column\n\tfor i = 2:m\n\t\tavg[i, 1] = avg[i - 1, 1] + cost[i, 1]\n\tend\n\t\n\t# initialize the first row\n\tfor j = 2:n\n\t\tavg[1, j] = avg[1, j - 1] + cost[1, j]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i = 2:m\n\t\tfor j = 2:n\n\t\t\tavg[i, j] = max(avg[i - 1, j], avg[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn avg[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at /tmp/tmphu7r5h_r.jl:38\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphu7r5h_r.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphu7r5h_r.jl:38 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphu7r5h_r.jl:37\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmp6th_58fa.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6th_58fa.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6th_58fa.jl:23\ntest set: Error During Test at /tmp/tmp6th_58fa.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6th_58fa.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124141,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124126,
      "stdout": "test set: Error During Test at /tmp/tmprnkduck6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprnkduck6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnkduck6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnkduck6.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124143,
      "stdout": "test set: Error During Test at /tmp/tmpb8sdjwxe.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8sdjwxe.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb8sdjwxe.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb8sdjwxe.jl:23\ntest set: Error During Test at /tmp/tmpb8sdjwxe.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8sdjwxe.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpb8sdjwxe.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124143,
      "stdout": "test set: Error During Test at /tmp/tmpqrgcx2d6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpqrgcx2d6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqrgcx2d6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqrgcx2d6.jl:23\ntest set: Error During Test at /tmp/tmpqrgcx2d6.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpqrgcx2d6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpqrgcx2d6.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124144,
      "stdout": "test set: Error During Test at /tmp/tmp28e8bw1q.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp28e8bw1q.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp28e8bw1q.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp28e8bw1q.jl:23\ntest set: Error During Test at /tmp/tmp28e8bw1q.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp28e8bw1q.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp28e8bw1q.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124136,
      "stdout": "test set: Error During Test at /tmp/tmpnclyhrw0.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnclyhrw0.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnclyhrw0.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnclyhrw0.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124144,
      "stdout": "test set: Error During Test at /tmp/tmpdipp6sjx.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdipp6sjx.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdipp6sjx.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdipp6sjx.jl:25\ntest set: Error During Test at /tmp/tmpdipp6sjx.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdipp6sjx.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpdipp6sjx.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}