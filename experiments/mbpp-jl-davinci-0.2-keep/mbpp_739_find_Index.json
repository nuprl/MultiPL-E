{
  "name": "mbpp_739_find_Index",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\nfunction find_Index(n::Int64)::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = find_Index;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 14)\n\t@test(candidate(4) == 45)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number = triangular_number + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile(length(string(i*(i+1)/2)) < n)\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\t>>> find_Index(3)\n\t45\n\t>>> find_Index(4)\n\t140\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular = i*(i+1)/2\n\t\tif(length(string(triangular)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\tif length(string(i*(i+1)/2)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize the index to 1 and the triangular number to 1\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Loop until the number of digits in the triangular number is less than n\n\twhile(length(string(triangular_number)) < n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\t\n\t# Return the index\n\treturn index\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile length(string(triangle)) < n\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile length(string(triangular)) < n\n\t\ttriangular = triangular + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample\n\t\n\tjulia> find_Index(3)\n\t85\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) >= n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\n\tParameters\n\t----------\n\tn : Int64\n\t\tNumber of digits.\n\t\n\tReturns\n\t-------\n\tInt64\n\t\tIndex of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize the index\n\tindex = 1\n\t\n\t# Initialize the triangular number\n\ttriangular_number = 1\n\t\n\t# Initialize the number of digits\n\tnumber_of_digits = 1\n\t\n\t# Loop until the number of digits is equal to n\n\twhile number_of_digits != n\n\t\t\n\t\t# Increment the index\n\t\tindex += 1\n\t\t\n\t\t# Increment the triangular number\n\t\ttriangular_number += index\n\t\t\n\t\t# Update the number of digits\n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\tend\n\t\n\t# Return the index\n\treturn index\nend",
    "    i = 1\n    j = 1\n    while(true)\n        if(length(string(i*(i+1)/2)) == n)\n            return j\n        end\n        i += 1\n        j += 1\n    end\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangle = sum(i:i)\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tThis function finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n)\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tParameters\n\t----------\n\tn : Int64\n\t\tNumber of digits.\n\t\t\n\tReturns\n\t-------\n\tindex : Int64\n\t\tIndex of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize index\n\tindex = 1\n\t\n\t# Initialize triangular number\n\ttriangular_number = 1\n\t\n\t# Loop until number of digits is equal to n\n\twhile(length(string(triangular_number)) < n)\n\t\t\n\t\t# Increment index\n\t\tindex += 1\n\t\t\n\t\t# Update triangular number\n\t\ttriangular_number += index\n\tend\n\t\n\t# Return index\n\treturn index\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\tindex = 1\n\ttriangular_number = 0\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number += index\n\t\tindex += 1\n\tend\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile length(string(triangular)) < n\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    #Your code here\n    return 0\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = Int64(i*(i+1)/2)\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    a = 1\n    b = 1\n    while(true)\n        if(length(string(a)) == n)\n            return b\n        end\n        a += b\n        b += 1\n    end\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while true\n        if n == length(string(i*(i+1)/2))\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile length(string(triangular)) < n\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti=1\n\twhile(true)\n\t\ttriangle_number = Int64(i*(i+1)/2)\n\t\tif(length(string(triangle_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti+=1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number = triangular_number + i\n\t\ti = i + 1\n\tend\n\treturn i\nend",
    "\t\"\"\"\n\tFinds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile(true)\n\t\ttriangular_number = i*(i+1)/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t# your code goes here\n\treturn 0\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample\n\t\n\tjulia> find_Index(3)\n\t45\n\t\"\"\"\n\t\n\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while(true)\n        if(length(string(i*(i+1)/2)) == n)\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular = triangular + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        t = sum(i:i)\n        if length(string(t)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize the index\n\tindex = 1\n\t# Initialize the triangular number\n\ttriangular_number = 1\n\t# Initialize the number of digits\n\tnumber_of_digits = 1\n\t# Loop until the number of digits is less than n\n\twhile number_of_digits < n\n\t\t# Increment the index\n\t\tindex += 1\n\t\t# Add the index to the triangular number\n\t\ttriangular_number += index\n\t\t# Update the number of digits\n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\tend\n\t# Return the index\n\treturn index\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(sum(i:i))\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile(true)\n\t\tif(length(string(i*(i+1)/2)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\tj = 1\n\twhile(length(string(i)) < n)\n\t\ti = i + j\n\t\tj = j + 1\n\tend\n\treturn j\nend",
    "    i = 1\n    while(true)\n        if(n == length(string(i*(i+1)/2)))\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tThis function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize the index\n\tindex = 1\n\t\n\t# Initialize the triangular number\n\ttriangular_number = 1\n\t\n\t# Initialize the number of digits\n\tnumber_of_digits = 1\n\t\n\t# Loop until the number of digits is equal to n\n\twhile number_of_digits != n\n\t\t# Increment the index\n\t\tindex += 1\n\t\t\n\t\t# Increment the triangular number\n\t\ttriangular_number += index\n\t\t\n\t\t# Update the number of digits\n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\tend\n\t\n\t# Return the index\n\treturn index\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile(true)\n\t\ttriangular_number = i*(i+1)/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tfind_Index(n)\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tParameters\n\t----------\n\tn : Int64\n\t\tThe number of digits.\n\t\n\tReturns\n\t-------\n\tInt64\n\t\tThe index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\ti = 1\n\twhile true\n\t\tif length(string(i*(i+1)/2)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = Int64(i*(i+1)/2)\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        x = Int64(i*(i+1)/2)\n        if length(string(x)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while true\n        temp = i*(i+1)/2\n        if length(string(temp)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tThis function finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number = triangular_number + i\n\t\ti = i + 1\n\tend\n\treturn i\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while(true)\n        if(length(string(i*(i+1)/2)) == n)\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        tri = i*(i+1)/2\n        if length(string(tri)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile (length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\tif length(string(i*(i+1)/2)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif(length(string(triangular)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile length(string(triangular)) < n\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(true)\n\t\ttriangular_number = triangular_number + i\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        tri = Int64(i*(i+1)/2)\n        if length(string(tri)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize the index to 1\n\tindex = 1\n\t# Initialize the triangular number to 1\n\ttriangular_number = 1\n\t# Initialize the number of digits to 1\n\tnumber_of_digits = 1\n\t# Loop until the number of digits is less than n\n\twhile number_of_digits < n\n\t\t# Increment the index by 1\n\t\tindex += 1\n\t\t# Update the triangular number\n\t\ttriangular_number += index\n\t\t# Update the number of digits\n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\tend\n\t# Return the index\n\treturn index\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile length(string(triangle)) < n\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize number of digits in triangular number \n\tnumber_of_digits = 1\n\t# Iterate till number of digits in triangular number is less than n \n\twhile (number_of_digits < n) \n\t\tindex = index + 1\n\t\ttriangular_number = triangular_number + index\n\t\tnumber_of_digits = length(string(triangular_number))\n\tend\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = sum(i:i)\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile length(string(triangle)) < n\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\ti::Int64=1\n\twhile true\n\t\tif length(string(i*(i+1)/2))==n\n\t\t\treturn i\n\t\tend\n\t\ti+=1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while true\n        tri = Int64(i*(i+1)/2)\n        if length(string(tri)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\tfind_Index(n) returns the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\tif(length(string(i*(i+1)/2)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile length(string(triangle)) < n\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttri = i*(i+1)/2\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\t# Example\n\t```julia\n\tjulia> find_Index(3)\n\t45\n\t```\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti=1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\tif(length(string(i*(i+1)/2)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFinds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile(true)\n\t\ttriangular_number = i*(i+1)/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    # Initialize index of triangular number \n    i = 1\n    # Initialize triangular number \n    tri_num = 1\n    # Initialize count of digits in triangular number \n    digits = 1\n    # Loop until count of digits in triangular number becomes n \n    while digits <= n \n        # Increment index by 1 \n        i = i + 1\n        # Add i to triangular number \n        tri_num = tri_num + i \n        # Count digits in triangular number \n        digits = floor(log10(tri_num)) + 1\n    end\n    # Return index \n    return i \nend",
    "    # your code here\n    return 0\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ttriangular_number = 0\n\tindex = 1\n\twhile true\n\t\ttriangular_number += index\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn index\n\t\tend\n\t\tindex += 1\n\tend\nend",
    "\t\"\"\"\n\tThis function finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    # your code here\n    return 0\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index and triangular number \n\tindex = 1\n\ttriangular_number = 1\n\t# Calculate triangular number \n\twhile(length(string(triangular_number)) < n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\treturn index\nend",
    "    i = 1\n    while n > 0\n        n -= log10(i) + 1\n        i += 1\n    end\n    return i - 1\nend",
    "    i = 1\n    while(true)\n        if(length(string(i*(i+1)/2)) == n)\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular_number = i*(i+1)/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n) finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\tif n == 1\n\t\treturn 1\n\tend\n\tif n == 2\n\t\treturn 3\n\tend\n\tif n == 3\n\t\treturn 6\n\tend\n\tif n == 4\n\t\treturn 6\n\tend\n\tif n == 5\n\t\treturn 10\n\tend\n\tif n == 6\n\t\treturn 15\n\tend\n\tif n == 7\n\t\treturn 21\n\tend\n\tif n == 8\n\t\treturn 28\n\tend\n\tif n == 9\n\t\treturn 36\n\tend\n\tif n == 10\n\t\treturn 45\n\tend\n\tif n == 11\n\t\treturn 55\n\tend\n\tif n == 12\n\t\treturn 66\n\tend\n\tif n == 13\n\t\treturn 78\n\tend\n\tif n == 14\n\t\treturn 91\n\tend\n\tif n == 15\n\t\treturn 105\n\tend\n\tif n == 16\n\t\treturn 120\n\tend\n\tif n == 17\n\t\treturn 136\n\tend\n\tif n == 18\n\t\treturn 153\n\tend\n\tif n == 19\n\t\treturn 171\n\tend\n\tif n == 20\n\t\treturn 190\n\tend\n\tif n == 21\n\t\treturn 210\n\tend\n\tif n == 22\n\t\treturn 231\n\tend\n\tif n == 23\n\t\treturn 253\n\tend\n\tif n == 24\n\t\treturn 276\n\tend\n\tif n == 25\n\t\treturn 300\n\tend\n\tif n == 26\n\t\treturn 325\n\tend\n\tif n == 27\n\t\treturn 351\n\tend\n\tif n == 28\n\t\treturn 378\n\tend\n\tif n == 29\n\t\treturn 406\n\tend\n\tif n == 30\n\t\treturn 435\n\tend\n\tif n == 31\n\t\treturn 465\n\tend\n\tif n == 32\n\t\treturn 496\n\tend\n\tif n == 33\n\t\treturn 528\n\tend\n\tif n == 34\n\t\treturn 561\n\tend\n\tif n == 35\n\t",
    "    # your code here\n    return 0\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = (i*(i+1))/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile length(string(triangle)) < n\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "    sum = 0\n    i = 1\n    while(true)\n        sum = sum + i\n        if(length(string(sum)) == n)\n            return i\n        end\n        i = i + 1\n    end\nend",
    "    i = 1\n    while(true)\n        if(length(string(i*(i+1)/2)) == n)\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile length(string(triangular)) < n\n\t\ttriangular = triangular + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "    i = 1\n    while true\n        if length(string(i*(i+1)/2)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = Int64(i*(i+1)/2)\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti=1\n\twhile(true)\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif(length(string(triangular_number))==n)\n\t\t\treturn i\n\t\tend\n\t\ti+=1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\tif length(string(i*(i+1)/2)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        if n == length(string(i*(i+1)/2))\n            return i\n        end\n        i += 1\n    end\nend",
    "\t\"\"\"\n\tInput: n = 3\n\tOutput: 4\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\tt = (i*(i+1))/2\n\t\tif length(string(t)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize the index\n\tindex = 1\n\t# Initialize the triangular number\n\ttriangular_number = 1\n\t# Initialize the number of digits\n\tnumber_of_digits = 1\n\t# Loop until the number of digits is less than n\n\twhile number_of_digits < n\n\t\t# Increment the index\n\t\tindex += 1\n\t\t# Update the triangular number\n\t\ttriangular_number += index\n\t\t# Update the number of digits\n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\tend\n\t# Return the index\n\treturn index\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tThis function finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ttriangular_number = 0\n\tindex = 1\n\twhile(true)\n\t\ttriangular_number += index\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn index\n\t\tend\n\t\tindex += 1\n\tend\nend"
  ]
}