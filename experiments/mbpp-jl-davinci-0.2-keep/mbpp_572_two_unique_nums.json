{
  "name": "mbpp_572_two_unique_nums",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\"\"\"\nfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = two_unique_nums;\n\t@test(candidate([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\n\t@test(candidate([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "    # nums = [1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n    # nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = unique(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn [0, 0]\n\tend\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tReturn a vector of two unique numbers from the input vector.\n\t\"\"\"\n\t# find the unique numbers\n\tunique_nums = unique(nums)\n\t# if there are more than two unique numbers, return the first two\n\tif length(unique_nums) > 2\n\t\treturn unique_nums[1:2]\n\t# if there are two unique numbers, return them\n\telseif length(unique_nums) == 2\n\t\treturn unique_nums\n\t# if there is only one unique number, return it twice\n\telse\n\t\treturn [unique_nums[1], unique_nums[1]]\n\tend\nend",
    "\t# find the unique numbers\n\tunique_nums = unique(nums)\n\t# find the number of unique numbers\n\tnum_unique_nums = length(unique_nums)\n\t# if there are more than two unique numbers, return the first two\n\tif num_unique_nums > 2\n\t\treturn unique_nums[1:2]\n\t# if there are less than two unique numbers, return the unique numbers\n\telse\n\t\treturn unique_nums\n\tend\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tnums_unique = unique(nums)\n\tnums_unique_len = length(nums_unique)\n\tif nums_unique_len < 2\n\t\treturn nums_unique\n\telse\n\t\treturn nums_unique[1:2]\n\tend\nend",
    "\t\"\"\"\n\tReturns a vector of the two unique numbers in the input vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tdelete!(unique_nums, num)\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn collect(unique_nums)\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set(nums)\n\tif length(unique_nums) == 1\n\t\treturn unique_nums\n\telse\n\t\treturn collect(unique_nums)\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\t# create a dictionary to store the number of times each number appears in the vector\n\tnum_counts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(num_counts, num)\n\t\t\tnum_counts[num] += 1\n\t\telse\n\t\t\tnum_counts[num] = 1\n\t\tend\n\tend\n\t# create a vector to store the unique numbers\n\tunique_nums = Vector{Int64}()\n\tfor (num, count) in num_counts\n\t\tif count == 1\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\tend\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of the two unique numbers.\n\t\"\"\"\n\t\n\t# find the unique numbers\n\tunique_nums = unique(nums)\n\t\n\t# return the first two unique numbers\n\treturn unique_nums[1:2]\nend",
    "\t# nums is a vector of integers\n\t# returns a vector of two unique integers\n\t# if there are more than two unique integers, return the first two\n\t# if there are less than two unique integers, return the first two\n\t# if there are no unique integers, return an empty vector\n\t# if nums is an empty vector, return an empty vector\n\t\n\t# your code here\nend",
    "    unique_nums = []\n    for i in nums\n        if i in unique_nums\n            continue\n        else\n            push!(unique_nums, i)\n        end\n    end\n    return unique_nums\nend",
    "\treturn unique(nums)\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\t# Initialize a vector to hold the unique numbers\n\tunique_nums = Vector{Int64}()\n\t# Loop through the numbers\n\tfor num in nums\n\t\t# If the number is not in the unique numbers vector, add it\n\t\tif !(num in unique_nums)\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\t# Return the unique numbers\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\tend\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tTakes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set{Int64}()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn collect(unique_nums)\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    # nums is a vector of integers\n    # return a vector of integers with the duplicate numbers removed\n    # if there are no duplicates, return the original vector\n    # if there are no numbers in the vector, return an empty vector\n    # if there are no duplicates, return the original vector\n    # if there are no numbers in the vector, return an empty vector\n    if length(nums) == 0\n        return []\n    elseif length(nums) == 1\n        return nums\n    else\n        for i in 1:length(nums)\n            for j in 1:length(nums)\n                if i != j && nums[i] == nums[j]\n                    nums = deleteat!(nums, j)\n                end\n            end\n        end\n        return nums\n    end\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2",
    "\tnums = sort(nums)\n\tunique_nums = []\n\tfor i in 1:length(nums)-1\n\t\tif nums[i] != nums[i+1]\n\t\t\tpush!(unique_nums, nums[i])\n\t\tend\n\tend\n\tpush!(unique_nums, nums[end])\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for i in nums\n        if i not in unique_nums\n            push!(unique_nums, i)\n        end\n    end\n    return unique_nums\nend",
    "\t\"\"\"\n\tReturns a vector of the two unique numbers in a vector of numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t# nums is a vector of numbers\n\t# return a vector of numbers that are unique in nums\n\t# hint: use a dictionary to keep track of the number of times each number appears\n\t# hint: use the get() function to get the value of a key in a dictionary\n\t# hint: use the setdefault() function to set the value of a key in a dictionary\n\t# hint: use the haskey() function to check if a key is in a dictionary\n\t# hint: use the push!() function to add an element to the end of a vector\n\t# hint: use the delete!() function to remove an element from a vector\n\t# hint: use the pop!() function to remove the last element from a vector\n\t# hint: use the length() function to get the length of a vector\n\t# hint: use the sort() function to sort a vector\n\t# hint: use the sort!() function to sort a vector in place\n\t# hint: use the reverse!() function to reverse a vector in place\n\t# hint: use the append!() function to append a vector to another vector\n\t# hint: use the pushfirst!() function to add an element to the beginning of a vector\n\t# hint: use the popfirst!() function to remove the first element from a vector\n\t# hint: use the pushfirst!() function to add an element to the beginning of a vector\n\t# hint: use the popfirst!() function to remove the first element from a vector\n\t# hint: use the pushfirst!() function to add an element to the beginning of a vector\n\t# hint: use the popfirst!() function to remove the first element from a vector\n\t# hint: use the pushfirst!() function to add an element to the beginning of a vector\n\t# hint: use the popfirst!() function to remove the first element from a vector\n\t# hint: use the pushfirst!() function to add an element to the beginning of a vector\n\t# hint: use the popfirst!() function to remove the first element from a vector\n\t# hint: use the pushfirst!() function to add an element to the beginning of a vector\n\t# hint: use the popfirst!() function to remove the first element from a vector\n\t# hint: use the pushfirst!() function to add an",
    "    return unique(nums)\nend",
    "\t# nums is a vector of integers\n\t# return a vector of integers containing only the unique numbers in nums\n\t\n\t# your code here\n\t\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of the two unique numbers.\n\t\"\"\"\n\t# find the unique numbers\n\tunique_nums = unique(nums)\n\t# if there are more than two unique numbers, return the first two\n\tif length(unique_nums) > 2\n\t\treturn unique_nums[1:2]\n\t# if there are less than two unique numbers, return the unique numbers\n\telse\n\t\treturn unique_nums\n\tend\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of the two unique numbers.\n\t\"\"\"\n\t# find the unique numbers\n\tunique_nums = unique(nums)\n\t# return the first two unique numbers\n\treturn unique_nums[1:2]\nend",
    "\t# nums = [1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFind the two unique numbers in a list of numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tdelete!(unique_nums, num)\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of only the unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums is a vector of integers\n\t# return a vector of integers with the duplicates removed\n\t# if there are no duplicates, return the original vector\n\t# if there is only one number, return the original vector\n\t# if there are no numbers, return an empty vector\n\t\n\t# your code here\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tReturns a vector of two unique numbers in the input vector.\n\t\"\"\"\n\tunique_nums = unique(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn two_unique_nums(unique_nums)\n\tend\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\t\"\"\"\n\tGiven a vector of integers, return a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn []\n\tend\nend",
    "\t\"\"\"\n\tThis function takes in a vector of numbers and returns a vector of unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes in a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = Set{Int64}()\n    for num in nums\n        push!(unique_nums, num)\n    end\n    return unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num not in unique_nums\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction that takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif !(num in unique_nums)\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn collect(unique_nums)\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of numbers that are unique.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\t\tReturns a vector of the two unique numbers in the input vector.\n\t\"\"\"\n\t# Get the unique numbers\n\tunique_nums = unique(nums)\n\t\n\t# If there are more than two unique numbers, return an empty vector\n\tif length(unique_nums) > 2\n\t\treturn []\n\telse\n\t\treturn unique_nums\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tunique_nums = unique_nums[unique_nums .!= num]\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\treturn unique(nums)\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of numbers with only the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn two_unique_nums(nums[1:end-1])\n\tend\nend",
    "    return unique(nums)\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = Set(nums)\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tunique_nums = unique_nums[unique_nums .!= num]\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums is a vector of integers\n\t# return a vector of integers that contains the unique numbers in nums\n\t# your code here\n\treturn unique(nums)\nend",
    "\t# nums = [1,1,2,3,4,4,5,6,6,7,8,9,9]\n\t# nums = [1,1,2,3,4,4,5,6,6,7,8,9,9,10,11,12,12,13,14,15,15,16,17,18,19,19,20,21,22,23,23,24,25,26,26,27,28,29,29,30,31,32,33,33,34,35,36,37,37,38,39,40,41,41,42,43,44,45,45,46,47,48,49,49,50,51,52,53,53,54,55,56,57,57,58,59,60,61,61,62,63,64,65,65,66,67,68,69,69,70,71,72,73,73,74,75,76,77,77,78,79,80,81,81,82,83,84,85,85,86,87,88,89,89,90,91,92,93,93,94,95,96,97,97,98,99,100]\n\t# nums = [1,1,2,3,4,4,5,6,6,7,8,9,9,10,11,12,12,13,14,15,15,16,17,18,19,19,20,21,22,23,23,24,25,26,26,27,28,29,29,30,31,32,33,33,34,35,36,37,37,38,39,40,41,41,42,43,44,45,45,46,47,48,49,49,50,51,52,53,53,54,55,56,57,57,58,59,60,61,61,62,63,64,65,65,66,67,68,69,69,70,71,72,73,73,74,75,76,77,77,78,79,80,81,81,82,83",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums is a vector of integers\n\t# return a vector of the two unique numbers in nums\n\t# if there are less than two unique numbers, return an empty vector\n\t# if there are more than two unique numbers, return the first two unique numbers\n\t\n\t# your code here\nend",
    "    unique_nums = Set()\n    for num in nums\n        push!(unique_nums, num)\n    end\n    return unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46",
    "    return unique(nums)\nend",
    "\treturn unique(nums)\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\t# Initialize a dictionary to store the number of times each number appears\n\tnum_counts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(num_counts, num)\n\t\t\tnum_counts[num] += 1\n\t\telse\n\t\t\tnum_counts[num] = 1\n\t\tend\n\tend\n\t# Initialize a vector to store the unique numbers\n\tunique_nums = Vector{Int64}()\n\tfor (num, count) in num_counts\n\t\tif count == 1\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tReturn a vector of unique numbers in the input vector.\n\t\"\"\"\n\tunique_nums = Set{Int64}()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn collect(unique_nums)\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of numbers that are unique.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num not in unique_nums\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums is a vector of integers\n\t# returns a vector of integers\n\t# with the same length as nums\n\t# with the same elements as nums\n\t# but with all duplicates removed\n\t#\n\t# e.g. two_unique_nums([1,2,3,3,4,5,5,5,6,7,7,7,7,8,9,9])\n\t# returns [1,2,3,4,5,6,7,8,9]\n\t#\n\t# e.g. two_unique_nums([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])\n\t# returns [1]\n\t#\n\t# e.g. two_unique_nums([1,2,3,4,5,6,7,8,9])\n\t# returns [1,2,3,4,5,6,7,8,9]\n\t#\n\t# e.g. two_unique_nums([])\n\t# returns []\n\t#\n\t# e.g. two_unique_nums([1,2,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9",
    "\t# nums is a vector of integers\n\t# return a vector of integers\n\t# your code here\n\treturn nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t# nums is a vector of numbers\n\t# return a vector of numbers that are unique in nums\n\t# hint: use a dictionary\n\t# hint: use the in operator to check if a key is in a dictionary\n\t# hint: use the push! function to add a value to a vector\n\t# hint: use the get function to get a value from a dictionary\n\t# hint: use the setindex! function to set a value in a dictionary\n\t# hint: use the haskey function to check if a key is in a dictionary\n\t# hint: use the keys function to get all the keys in a dictionary\n\t# hint: use the values function to get all the values in a dictionary\n\t# hint: use the length function to get the length of a vector\n\t# hint: use the length function to get the length of a dictionary\n\t# hint: use the length function to get the length of a string\n\t# hint: use the length function to get the length of a tuple\n\t# hint: use the length function to get the length of an array\n\t# hint: use the length function to get the length of a set\n\t# hint: use the length function to get the length of a range\n\t# hint: use the length function to get the length of a bitarray\n\t# hint: use the length function to get the length of a deque\n\t# hint: use the length function to get the length of a channel\n\t# hint: use the length function to get the length of a stack\n\t# hint: use the length function to get the length of a queue\n\t# hint: use the length function to get the length of a priority queue\n\t# hint: use the length function to get the length of a heap\n\t# hint: use the length function to get the length of a graph\n\t# hint: use the length function to get the length of a tree\n\t# hint: use the length function to get the length of a trie\n\t# hint: use the length function to get the length of a bloom filter\n\t# hint: use the length function to get the length of a bloom set\n\t# hint: use the length function to get the length of a bloom map\n\t# hint: use the length function to get the length of a bloom multiset\n\t# hint: use the length function to get the",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\t# Initialize a vector to store the unique numbers\n\tunique_nums = Vector{Int64}()\n\t# Loop over the vector of numbers\n\tfor num in nums\n\t\t# If the number is not in the unique_nums vector, add it\n\t\tif !(num in unique_nums)\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\t# Return the unique_nums vector\n\treturn unique_nums\nend",
    "\t# your code here\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tReturn a vector of the two unique numbers in the input vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t# sort the list\n\tsort!(nums)\n\t# initialize a new list\n\tnew_nums = []\n\t# loop through the list\n\tfor i in 1:length(nums)\n\t\t# if the number is not the same as the previous number, append it to the new list\n\t\tif nums[i] != nums[i-1]\n\t\t\tpush!(new_nums, nums[i])\n\t\tend\n\tend\n\t# return the new list\n\treturn new_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\tend\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = unique(nums)\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif !(i in unique_nums)\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tfor i in nums\n\t\tif nums[i] == nums[i+1]\n\t\t\tnums[i] = 0\n\t\tend\n\tend\n\treturn nums\nend",
    "\t\"\"\"\n\tThis function takes in a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tTakes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tdelete!(unique_nums, num)\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn collect(unique_nums)\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tunique_nums = unique_nums[unique_nums .!= num]\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tReturns a vector of the two unique numbers in the input vector.\n\t\"\"\"\n\tif length(nums) == 2\n\t\treturn nums\n\tend\n\t\n\t# Sort the vector\n\tsorted_nums = sort(nums)\n\t\n\t# Find the first unique number\n\tfor i in 1:length(sorted_nums)-1\n\t\tif sorted_nums[i] != sorted_nums[i+1]\n\t\t\tfirst_unique = sorted_nums[i]\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\t# Find the second unique number\n\tfor i in length(sorted_nums):-1:2\n\t\tif sorted_nums[i] != sorted_nums[i-1]\n\t\t\tsecond_unique = sorted_nums[i]\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\treturn [first_unique, second_unique]\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = Set{Int64}()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique integers in the input vector.\n\t\"\"\"\n\tuniques = []\n\tfor i in nums\n\t\tif i in uniques\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(uniques, i)\n\t\tend\n\tend\n\treturn uniques\nend",
    "    unique_nums = []\n    for num in nums\n        if num not in unique_nums\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2",
    "\t\"\"\"\n\tReturns a vector of unique numbers from a given vector of numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num not in unique_nums\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for i in nums\n        if i not in unique_nums\n            push!(unique_nums, i)\n        end\n    end\n    return unique_nums\nend",
    "    return unique(nums)\nend",
    "\t\"\"\"\n\tTakes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tdelete!(unique_nums, num)\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn collect(unique_nums)\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFind the two unique numbers in a list of numbers.\n\t\"\"\"\n\t\n\t# Find the xor of all the numbers\n\txor = 0\n\tfor num in nums\n\t\txor = xor \u22bb num\n\tend\n\t\n\t# Find the rightmost set bit in the xor\n\trightmost_set_bit = xor & -xor\n\t\n\t# Find the first number\n\tfirst_num = 0\n\tfor num in nums\n\t\tif num & rightmost_set_bit != 0\n\t\t\tfirst_num = first_num \u22bb num\n\t\tend\n\tend\n\t\n\t# Find the second number\n\tsecond_num = xor \u22bb first_num\n\t\n\treturn [first_num, second_num]\nend",
    "    nums_set = Set(nums)\n    nums_set = collect(nums_set)\n    return nums_set\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        end\n        push!(unique_nums, num)\n    end\n    return unique_nums\nend",
    "\t\"\"\"\n\tFind the two unique numbers in a list of numbers.\n\t\"\"\"\n\tnums_set = Set(nums)\n\tfor num in nums_set\n\t\tif count(nums, num) == 1\n\t\t\treturn [num]\n\t\tend\n\tend\n\treturn []\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tInput:\n\tnums: a vector of integers\n\tOutput:\n\tunique_nums: a vector of unique integers\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\tend\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\treturn unique(nums)\nend",
    "\t\"\"\"\n\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\"\"\"\n\t\tfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n\t\t\t\"\"\"\n\t\t\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\t\t\"\"\"\n\t\t\t\tfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n\t\t\t\t\t\"\"\"\n\t\t\t\t\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\tfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\tfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t\tfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n\t\t\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t\t\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\t\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t\t\t\tfunction two_unique_nums(nums::Vector{Int64})::Vector{Int64} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction two_unique",
    "\t\"\"\"\n\tThis function takes in a vector of numbers and returns a vector of the two unique numbers in the input vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor i in nums\n\t\tif !(i in unique_nums)\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes in a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tGiven a vector of integers, return a vector of the two unique integers.\n\t\"\"\"\n\tunique_nums = unique(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn []\n\tend\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of numbers that only contains the two unique numbers.\n\t\"\"\"\n\t# find the unique numbers\n\tunique_nums = unique(nums)\n\t# return the first two unique numbers\n\treturn unique_nums[1:2]\nend",
    "\t\"\"\"\n\tGiven a vector of numbers, return a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFinds the two unique numbers in a list of numbers.\n\t\"\"\"\n\tunique_nums = Set()\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tdelete!(unique_nums, num)\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tunique_nums = unique_nums[unique_nums .!= num]\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFind the two unique numbers in a list of numbers.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tunique_nums = unique_nums[unique_nums .!= num]\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tnums = sort(nums)\n\tunique_nums = []\n\tfor i in 1:length(nums)\n\t\tif nums[i] != nums[i-1]\n\t\t\tpush!(unique_nums, nums[i])\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = Set(nums)\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of the two unique numbers.\n\t\"\"\"\n\tunique_nums = Set(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn \"There are not two unique numbers in the vector.\"\n\tend\nend",
    "\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\t# nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126",
    "\t\"\"\"\n\tFind two unique numbers in a list of numbers.\n\t\"\"\"\n\tunique_nums = Set{Int64}()\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tdelete!(unique_nums, num)\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn collect(unique_nums)\nend",
    "    return unique(nums)\nend",
    "\t\tunique_nums = []\n\t\tfor i in nums\n\t\t\tif i in unique_nums\n\t\t\t\tcontinue\n\t\t\telse\n\t\t\t\tpush!(unique_nums, i)\n\t\t\tend\n\t\tend\n\t\treturn unique_nums\n\tend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i not in unique_nums\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tReturns a vector of two unique numbers in the input vector.\n\t\"\"\"\n\tunique_nums = Set{Int64}()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\t\tif length(unique_nums) == 2\n\t\t\treturn unique_nums\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of numbers with only two unique numbers.\n\t\"\"\"\n\tunique_nums = unique(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn two_unique_nums(unique_nums)\n\tend\nend",
    "\tunique_nums = Set()\n\tfor num in nums\n\t\tpush!(unique_nums, num)\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to return the two unique numbers in a list of numbers.\n\t\"\"\"\n\tfor i in nums\n\t\tif count(x->x==i, nums) == 1\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of numbers that are unique to the input vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    # nums is a vector of integers\n    # returns a vector of integers\n    # your code here\n    return unique(nums)\nend",
    "    return unique(nums)\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "    unique_nums = []\n    for num in nums\n        if num in unique_nums\n            continue\n        else\n            push!(unique_nums, num)\n        end\n    end\n    return unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    nums_unique = unique(nums)\n    return nums_unique\nend",
    "\t# nums is a vector of integers\n\t# return a vector of integers that are unique in nums\n\t# if there are no unique numbers, return an empty vector\n\t\n\t# YOUR CODE HERE\n\t\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of numbers and returns a vector of two unique numbers.\n\t\"\"\"\n\tunique_nums = unique(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\treturn [0, 0]\n\tend\nend",
    "    nums_unique = unique(nums)\n    if length(nums_unique) == 2\n        return nums_unique\n    else\n        return []\n    end\nend",
    "\t\"\"\"\n\tThis function takes in a vector of numbers and returns a vector of the two unique numbers in the vector.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = []\n    for i in nums\n        if i not in unique_nums\n            push!(unique_nums, i)\n        end\n    end\n    return unique_nums\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers and returns a vector of the two unique numbers in the input vector.\n\t\"\"\"\n\t# Initialize a dictionary to store the number of times each number appears in the input vector\n\tcounts = Dict{Int64, Int64}()\n\t# Initialize a vector to store the unique numbers\n\tunique_nums = Vector{Int64}()\n\t# Loop through the input vector\n\tfor num in nums\n\t\t# If the number is not in the dictionary, add it and set its value to 1\n\t\tif !haskey(counts, num)\n\t\t\tcounts[num] = 1\n\t\t# If the number is in the dictionary, increment its value by 1\n\t\telse\n\t\t\tcounts[num] += 1\n\t\tend\n\tend\n\t# Loop through the dictionary\n\tfor (num, count) in counts\n\t\t# If the number appears only once, add it to the unique numbers vector\n\t\tif count == 1\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\t# Return the unique numbers vector\n\treturn unique_nums\nend",
    "\t\"\"\"\n\tFunction to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n\tunique_nums = []\n\tfor num in nums\n\t\tif num in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, num)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "\tunique_nums = []\n\tfor i in nums\n\t\tif i in unique_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(unique_nums, i)\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "    unique_nums = Set{Int64}()\n    for num in nums\n        push!(unique_nums, num)\n    end\n    return collect(unique_nums)\nend",
    "\t\"\"\"\n\tFind the two unique numbers in a list of numbers.\n\t\"\"\"\n\tunique_nums = Set(nums)\n\tif length(unique_nums) == 2\n\t\treturn unique_nums\n\telse\n\t\tprintln(\"There are not two unique numbers in this list.\")\n\tend\nend"
  ]
}