{
  "name": "mbpp_639_sample_nam",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\nfunction sample_nam(sample_names::Vector{String})::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = sample_nam;\n\t@test(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\n\t@test(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\n\t@test(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\ttotal_length = 0\n\tfor name in sample_names\n\t\tif isupper(name[1])\n\t\t\ttotal_length += length(name)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\treturn sum([length(i) for i in sample_names if !(islower(i[1]))])\nend",
    "\tsum(length.(sample_names[uppercase.(sample_names) .== sample_names]))\nend",
    "\tsum([length(i) for i in sample_names if !islower(i[1])])\nend",
    "\treturn sum(length(x) for x in sample_names if x[1] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nend",
    "\ttotal_length = 0\n\tfor i in sample_names\n\t\tif i[1] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\t\t\ttotal_length += length(i)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\tsum(length.(filter(x->!islower(x[1]), sample_names)))\nend",
    "\tsum(length.(sample_names[startswith.(sample_names, \"A\")::Bool]))\nend",
    "\ttotal_length = 0\n\tfor name in sample_names\n\t\tif name[1] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t\t\ttotal_length += length(name)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\ttotal_length = 0\n\tfor name in sample_names\n\t\tif !(islower(name[1]))\n\t\t\ttotal_length += length(name)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\tsum(length.(filter(name -> !islower(name[1]), sample_names)))\nend",
    "\ttotal_length = 0\n\tfor i in sample_names\n\t\tif isupper(i[1])\n\t\t\ttotal_length += length(i)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\ttotal_length = 0\n\tfor i in sample_names\n\t\tif islower(i[1]) == false\n\t\t\ttotal_length += length(i)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\ttotal_length = 0\n\tfor name in sample_names\n\t\tif isupper(name[1])\n\t\t\ttotal_length += length(name)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\ttotal_length = 0\n\tfor i in sample_names\n\t\tif isupper(i[1])\n\t\t\ttotal_length += length(i)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\tsum(length.(filter(x->!islower(x[1]), sample_names)))\nend",
    "\ttotal_length = 0\n\tfor name in sample_names\n\t\tif name[1] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t\t\ttotal_length += length(name)\n\t\tend\n\tend\n\treturn total_length\nend",
    "\t\tsum_length = 0\n\t\tfor name in sample_names\n\t\t\tif name[1] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t\t\t\tsum_length += length(name)\n\t\t\tend\n\t\tend\n\t\treturn sum_length\n\tend",
    "\t\ttotal_length = 0\n\t\tfor name in sample_names\n\t\t\tif !islower(name[1])\n\t\t\t\ttotal_length += length(name)\n\t\t\tend\n\t\tend\n\t\treturn total_length\n\tend",
    "\ttotal_length = 0\n\tfor name in sample_names\n\t\tif name[1] in string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t\t\ttotal_length += length(name)\n\t\tend\n\tend\n\treturn total_length\nend"
  ]
}