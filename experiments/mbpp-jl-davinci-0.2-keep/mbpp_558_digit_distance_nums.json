{
  "name": "mbpp_558_digit_distance_nums",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\"\"\"\nfunction digit_distance_nums(n1::Int64, n2::Int64)::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = digit_distance_nums;\n\t@test(candidate(1, 2) == 1)\n\t@test(candidate(23, 56) == 6)\n\t@test(candidate(123, 256) == 7)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\tn1_len = length(n1_str)\n\tn2_len = length(n2_str)\n\tif n1_len > n2_len\n\t\tn2_str = repeat(\"0\", n1_len - n2_len) * n2_str\n\telseif n2_len > n1_len\n\t\tn1_str = repeat(\"0\", n2_len - n1_len) * n1_str\n\tend\n\treturn sum(abs.(Int64.(n1_str) .- Int64.(n2_str)))\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1 = abs(n1)\n\tn2 = abs(n2)\n\tn1 = digits(n1)\n\tn2 = digits(n2)\n\tn1 = n1[end:-1:1]\n\tn2 = n2[end:-1:1]\n\tif length(n1) > length(n2)\n\t\tn2 = [0 for i in 1:length(n1)-length(n2)] .+ n2\n\telseif length(n2) > length(n1)\n\t\tn1 = [0 for i in 1:length(n2)-length(n1)] .+ n1\n\tend\n\treturn sum(abs.(n1-n2))\nend",
    "\t\"\"\"\n\tFind the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\tn1_len = length(n1_str)\n\tn2_len = length(n2_str)\n\tif n1_len > n2_len\n\t\tn2_str = repeat(\"0\", n1_len - n2_len) * n2_str\n\telseif n2_len > n1_len\n\t\tn1_str = repeat(\"0\", n2_len - n1_len) * n1_str\n\tend\n\tsum = 0\n\tfor i in 1:length(n1_str)\n\t\tsum += abs(parse(Int64, n1_str[i]) - parse(Int64, n2_str[i]))\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\tn1_len = length(n1_str)\n\tn2_len = length(n2_str)\n\tif n1_len > n2_len\n\t\tn2_str = repeat(\"0\", n1_len - n2_len) * n2_str\n\telseif n1_len < n2_len\n\t\tn1_str = repeat(\"0\", n2_len - n1_len) * n1_str\n\tend\n\tsum = 0\n\tfor i in 1:length(n1_str)\n\t\tsum += abs(parse(Int64, n1_str[i]) - parse(Int64, n2_str[i]))\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_digits = digits(n1)\n\tn2_digits = digits(n2)\n\tn1_len = length(n1_digits)\n\tn2_len = length(n2_digits)\n\tif n1_len > n2_len\n\t\tn2_digits = [0 for i in 1:n1_len - n2_len] .* n2_digits\n\telseif n2_len > n1_len\n\t\tn1_digits = [0 for i in 1:n2_len - n1_len] .* n1_digits\n\tend\n\treturn sum(abs.(n1_digits - n2_digits))\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\tn1_len = length(n1_str)\n\tn2_len = length(n2_str)\n\tif n1_len > n2_len\n\t\tn2_str = repeat(\"0\", n1_len - n2_len) * n2_str\n\telseif n2_len > n1_len\n\t\tn1_str = repeat(\"0\", n2_len - n1_len) * n1_str\n\tend\n\treturn sum(abs.(Int64.(n1_str) .- Int64.(n2_str)))\nend",
    "    n1_digits = digits(n1)\n    n2_digits = digits(n2)\n    n1_digits_len = length(n1_digits)\n    n2_digits_len = length(n2_digits)\n    if n1_digits_len > n2_digits_len\n        n2_digits = vcat(zeros(Int64, n1_digits_len - n2_digits_len), n2_digits)\n    else\n        n1_digits = vcat(zeros(Int64, n2_digits_len - n1_digits_len), n1_digits)\n    end\n    return sum(abs.(n1_digits - n2_digits))\nend",
    "\t\"\"\"\n\tCalculates the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1, n2 = abs(n1), abs(n2)\n\tn1, n2 = minimum(n1, n2), maximum(n1, n2)\n\tsum = 0\n\twhile n1 > 0\n\t\tsum += n2 % 10 - n1 % 10\n\t\tn1 = div(n1, 10)\n\t\tn2 = div(n2, 10)\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tFinds the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_digits = digits(n1)\n\tn2_digits = digits(n2)\n\tdiff = 0\n\tfor i in 1:length(n1_digits)\n\t\tdiff += abs(n1_digits[i] - n2_digits[i])\n\tend\n\treturn diff\nend",
    "\t\"\"\"\n\tCalculates the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_digits = digits(n1)\n\tn2_digits = digits(n2)\n\tn1_digits_len = length(n1_digits)\n\tn2_digits_len = length(n2_digits)\n\tif n1_digits_len > n2_digits_len\n\t\tn2_digits = vcat(zeros(Int64, n1_digits_len - n2_digits_len), n2_digits)\n\telseif n1_digits_len < n2_digits_len\n\t\tn1_digits = vcat(zeros(Int64, n2_digits_len - n1_digits_len), n1_digits)\n\tend\n\treturn sum(abs.(n1_digits - n2_digits))\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_digits = digits(n1)\n\tn2_digits = digits(n2)\n\tdiff = 0\n\tfor i in 1:length(n1_digits)\n\t\tdiff += abs(n1_digits[i] - n2_digits[i])\n\tend\n\treturn diff\nend",
    "\t\"\"\"\n\tFind the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1 = abs(n1)\n\tn2 = abs(n2)\n\tn1_digits = digits(n1)\n\tn2_digits = digits(n2)\n\tn1_digits_len = length(n1_digits)\n\tn2_digits_len = length(n2_digits)\n\tif n1_digits_len > n2_digits_len\n\t\tn2_digits = [0 for i in 1:n1_digits_len - n2_digits_len] .+ n2_digits\n\telseif n2_digits_len > n1_digits_len\n\t\tn1_digits = [0 for i in 1:n2_digits_len - n1_digits_len] .+ n1_digits\n\tend\n\treturn sum(abs.(n1_digits .- n2_digits))\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1, n2 = abs(n1), abs(n2)\n\tdiff = 0\n\twhile n1 > 0 || n2 > 0\n\t\tdiff += abs(mod(n1, 10) - mod(n2, 10))\n\t\tn1 = div(n1, 10)\n\t\tn2 = div(n2, 10)\n\tend\n\treturn diff\nend",
    "\t# convert to string\n\tn1 = string(n1)\n\tn2 = string(n2)\n\t\n\t# make sure both strings are of equal length\n\tif length(n1) > length(n2)\n\t\tn2 = \"0\" * (length(n1) - length(n2)) * n2\n\telseif length(n2) > length(n1)\n\t\tn1 = \"0\" * (length(n2) - length(n1)) * n1\n\tend\n\t\n\t# compute the sum of the per-digit difference\n\tsum = 0\n\tfor i in 1:length(n1)\n\t\tsum += abs(parse(Int64, n1[i]) - parse(Int64, n2[i]))\n\tend\n\t\n\treturn sum\nend",
    "\tn1_digits = digits(n1)\n\tn2_digits = digits(n2)\n\tsum = 0\n\tfor i in 1:length(n1_digits)\n\t\tsum += abs(n1_digits[i] - n2_digits[i])\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\tn1_len = length(n1_str)\n\tn2_len = length(n2_str)\n\tif n1_len > n2_len\n\t\tn2_str = repeat(\"0\", n1_len - n2_len) * n2_str\n\telseif n2_len > n1_len\n\t\tn1_str = repeat(\"0\", n2_len - n1_len) * n1_str\n\tend\n\tsum = 0\n\tfor i in 1:length(n1_str)\n\t\tsum += abs(parse(Int64, n1_str[i]) - parse(Int64, n2_str[i]))\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of the per-digit difference between two integers.\n\t\n\tArgs:\n\t\tn1 (int): The first integer.\n\t\tn2 (int): The second integer.\n\t\n\tReturns:\n\t\tint: The sum of the per-digit difference between the two integers.\n\t\"\"\"\n\t\n\t# Convert the integers to strings.\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\t\n\t# Find the length of the longer string.\n\tmax_len = max(length(n1_str), length(n2_str))\n\t\n\t# Pad the shorter string with zeros.\n\tif length(n1_str) < max_len\n\t\tn1_str = n1_str * \"0\"\n\telseif length(n2_str) < max_len\n\t\tn2_str = n2_str * \"0\"\n\tend\n\t\n\t# Calculate the sum of the per-digit difference.\n\tsum = 0\n\tfor i in 1:max_len\n\t\tsum += abs(parse(Int64, n1_str[i]) - parse(Int64, n2_str[i]))\n\tend\n\t\n\treturn sum\nend",
    "\t\"\"\"\n\tArgs:\n\t\tn1: First integer\n\t\tn2: Second integer\n\tReturns:\n\t\tsum of the per-digit difference between two integers\n\t\"\"\"\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\t\n\tif length(n1_str) > length(n2_str)\n\t\tn2_str = repeat(\"0\", length(n1_str) - length(n2_str)) * n2_str\n\telseif length(n1_str) < length(n2_str)\n\t\tn1_str = repeat(\"0\", length(n2_str) - length(n1_str)) * n1_str\n\tend\n\t\n\tsum = 0\n\tfor i in 1:length(n1_str)\n\t\tsum += abs(parse(Int64, n1_str[i]) - parse(Int64, n2_str[i]))\n\tend\n\t\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculates the sum of the per-digit difference between two integers.\n\t\"\"\"\n\tn1 = abs(n1)\n\tn2 = abs(n2)\n\tsum = 0\n\twhile n1 > 0 || n2 > 0\n\t\tsum += abs(mod(n1, 10) - mod(n2, 10))\n\t\tn1 = div(n1, 10)\n\t\tn2 = div(n2, 10)\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tFind the sum of the per-digit difference between two integers.\n\t\"\"\"\n\t\n\t# Convert to strings\n\tn1_str = string(n1)\n\tn2_str = string(n2)\n\t\n\t# Get the length of the strings\n\tn1_len = length(n1_str)\n\tn2_len = length(n2_str)\n\t\n\t# Get the difference in length\n\tdiff = abs(n1_len - n2_len)\n\t\n\t# Pad the shorter string with zeros\n\tif n1_len < n2_len\n\t\tn1_str = \"0\"^diff * n1_str\n\telseif n2_len < n1_len\n\t\tn2_str = \"0\"^diff * n2_str\n\tend\n\t\n\t# Convert to arrays of integers\n\tn1_arr = parse.(Int64, n1_str)\n\tn2_arr = parse.(Int64, n2_str)\n\t\n\t# Compute the sum of the per-digit difference\n\tsum = 0\n\tfor i in 1:length(n1_arr)\n\t\tsum += abs(n1_arr[i] - n2_arr[i])\n\tend\n\t\n\treturn sum\nend"
  ]
}