{
  "name": "mbpp_392_get_max_sum",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\nfunction get_max_sum(n::Int64)::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_max_sum;\n\t@test(candidate(60) == 106)\n\t@test(candidate(10) == 12)\n\t@test(candidate(2) == 2)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "    if n < 12 \n        return n \n    end\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(div(n,2)) + get_max_sum(div(n,3)) + get_max_sum(div(n,4)) + get_max_sum(div(n,5)), n)\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 0\n\t\treturn 0\n\tend\n\tif n == 0\n\t\treturn 0\n\tend\n\tif n == 1\n\t\treturn 1\n\tend\n\tif n == 2\n\t\treturn 2\n\tend\n\tif n == 3\n\t\treturn 3\n\tend\n\tif n == 4\n\t\treturn 4\n\tend\n\tif n == 5\n\t\treturn 5\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\telse\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend",
    "\tif n < 12\n\t\treturn n\n\tend\n\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend"
  ]
}