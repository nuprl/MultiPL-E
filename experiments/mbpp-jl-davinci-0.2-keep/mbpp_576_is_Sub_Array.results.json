{
  "name": "mbpp_576_is_Sub_Array",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i = 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)\n        if B[i] == A[1]\n            if length(A) == 1\n                return true\n            end\n            if length(A) == length(B[i:end])\n                return is_Sub_Array(A[2:end], B[i:end])\n            end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\treturn A in B\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510634,
      "stdout": "test set: Test Failed at /tmp/tmpcgb7d_83.jl:13\n  Expression: candidate([1, 2, 1], [1, 2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpcgb7d_83.jl:13 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpcgb7d_83.jl:11\nTest Summary: | Pass  Fail  Total\ntest set      |    2     1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpcgb7d_83.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i + length(A) - 1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tFunction to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the sublist of B\n\t# B is the superlist of A\n\t# if A is empty, then it is a sublist of B\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t# if A is not empty, but B is empty, then A is not a sublist of B\n\tif length(B) == 0\n\t\treturn false\n\tend\n\t# if A and B are not empty, then we need to check whether A is a sublist of B\n\t# if A[1] is in B, then we need to check whether A[2:end] is a sublist of B[B.index(A[1]):end]\n\tif A[1] in B\n\t\treturn is_Sub_Array(A[2:end], B[findfirst(B, A[1]):end])\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510635,
      "stdout": "test set: Error During Test at /tmp/tmpjzrbsrv0.jl:28\n  Test threw exception\n  Expression: candidate([1, 4, 3, 5], [1, 2]) == false\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1920\n    findfirst(::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmpjzrbsrv0.jl:18\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzrbsrv0.jl:28 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzrbsrv0.jl:27\ntest set: Error During Test at /tmp/tmpjzrbsrv0.jl:29\n  Test threw exception\n  Expression: candidate([1, 2, 1], [1, 2, 1]) == true\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1920\n    findfirst(::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmpjzrbsrv0.jl:18\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzrbsrv0.jl:29 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzrbsrv0.jl:27\nTest Summary: | Pass  Error  Total\ntest set      |    1      2      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored, 0 broken.\nin expression starting at /tmp/tmpjzrbsrv0.jl:25\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is subarray of B if all elements of A are in B\n\t# and the order of elements in A is the same as in B\n\t# i.e. A[i] = B[j] for some j\n\t# and A[i+1] = B[j+1] for some j+1\n\t# and so on\n\t\n\t# A is subarray of B iff there exists a subarray of B\n\t# which is equal to A\n\t\n\t# check if A is empty\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t\n\t# check if B is empty\n\tif length(B) == 0\n\t\treturn false\n\tend\n\t\n\t# check if first element of A is in B\n\tif A[1] in B\n\t\t# find the index of first element of A in B\n\t\tindex = findfirst(B, A[1])\n\t\t\n\t\t# check if A is subarray of B[index:]\n\t\treturn is_Sub_Array(A[2:end], B[index+1:end])\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510635,
      "stdout": "test set: Error During Test at /tmp/tmpy7mtgxo4.jl:40\n  Test threw exception\n  Expression: candidate([1, 4, 3, 5], [1, 2]) == false\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1920\n    findfirst(::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmpy7mtgxo4.jl:27\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7mtgxo4.jl:40 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7mtgxo4.jl:39\ntest set: Error During Test at /tmp/tmpy7mtgxo4.jl:41\n  Test threw exception\n  Expression: candidate([1, 2, 1], [1, 2, 1]) == true\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1994\n    findfirst(::AbstractArray) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1920\n    findfirst(::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1910\n  Stacktrace:\n   [1] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmpy7mtgxo4.jl:27\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy7mtgxo4.jl:41 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy7mtgxo4.jl:39\nTest Summary: | Pass  Error  Total\ntest set      |    1      2      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored, 0 broken.\nin expression starting at /tmp/tmpy7mtgxo4.jl:37\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function takes two vectors as input and returns true if the second vector is a sublist of the first vector.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    for i in 1:length(A)\n        if A[i] == B[1]\n            for j in 1:length(B)\n                if A[i+j-1] != B[j]\n                    return false\n                end\n            end\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510634,
      "stdout": "test set: Error During Test at /tmp/tmpetc_koto.jl:24\n  Test threw exception\n  Expression: candidate([1, 0, 2, 2], [2, 2, 0]) == false\n  BoundsError: attempt to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmpetc_koto.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpetc_koto.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpetc_koto.jl:21\nTest Summary: | Pass  Error  Total\ntest set      |    2      1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /tmp/tmpetc_koto.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is sublist of B if all elements of A are present in B in the same order\n\t# A is not sublist of B if any element of A is not present in B in the same order\n\t# A is sublist of B if A is empty\n\t# A is not sublist of B if B is empty\n\tif length(A) == 0\n\t\treturn true\n\telseif length(B) == 0\n\t\treturn false\n\telseif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B)\n\t\t\tif B[i] == A[1]\n\t\t\t\tif length(A) == 1\n\t\t\t\t\treturn true\n\t\t\t\telse\n\t\t\t\t\treturn is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function takes two vectors as input and returns true if the first vector is a sublist of the second vector.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif i + length(A) - 1 > length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    \n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function takes two vectors and checks whether the first vector is a subarray of the second vector.\n\t\"\"\"\n\t# Check if the length of the first vector is less than the length of the second vector.\n\tif length(A) <= length(B)\n\t\t# Check if the first vector is a subarray of the second vector.\n\t\tif A in B\n\t\t\t# Return true if the first vector is a subarray of the second vector.\n\t\t\treturn true\n\t\telse\n\t\t\t# Return false if the first vector is not a subarray of the second vector.\n\t\t\treturn false\n\t\tend\n\telse\n\t\t# Return false if the length of the first vector is greater than the length of the second vector.\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "test set: Test Failed at /tmp/tmpwifi7lab.jl:29\n  Expression: candidate([1, 2, 1], [1, 2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpwifi7lab.jl:29 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpwifi7lab.jl:27\nTest Summary: | Pass  Fail  Total\ntest set      |    2     1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpwifi7lab.jl:25\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether A is a sub-array of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck if a vector is a subarray of another vector.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function takes two vectors and checks if the first vector is a subarray of the second vector.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\telseif length(A) == 2\n\t\t\t\tif B[i+1] == A[2]\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif B[i+1] == A[2]\n\t\t\t\t\tif B[i+2] == A[3]\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tlen_A = length(A)\n\tlen_B = length(B)\n\tif len_A > len_B\n\t\treturn false\n\tend\n\tfor i in 1:len_B-len_A+1\n\t\tif A == B[i:i+len_A-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is subarray of B iff A is a subsequence of B\n\t# A is a subsequence of B iff A can be obtained from B by deleting some elements of B without changing the order of the remaining elements.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of B such that A[j] = B[ij] for all j = 1,2,...,k.\n\t# A is a subsequence of B iff there\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qhgxch5.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qhgxch5.jl:1\nin expression starting at /tmp/tmp_qhgxch5.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tChecks if B is subarray of A\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Error During Test at /tmp/tmp8ng4w3kb.jl:27\n  Test threw exception\n  Expression: candidate([1, 0, 2, 2], [2, 2, 0]) == false\n  BoundsError: attempt to access 4-element Vector{Int64} at index [3:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmp8ng4w3kb.jl:13\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8ng4w3kb.jl:27 [inlined]\n   [7] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8ng4w3kb.jl:24\nTest Summary: | Pass  Error  Total\ntest set      |    2      1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /tmp/tmp8ng4w3kb.jl:22\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if B[i:i+length(A)-1] == A\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B)\n\t\t\tif A[1] == B[i]\n\t\t\t\tfor j in 1:length(A)\n\t\t\t\t\tif A[j] != B[i+j-1]\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\t\tif j == length(A)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A[1] == B[i]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif A[j] != B[i+j-1]\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4nko7ukf.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nko7ukf.jl:1\nin expression starting at /tmp/tmp4nko7ukf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\t\tCheck if A is sublist of B\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tChecks if B is a subarray of A\n\t\"\"\"\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(B) == 1\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\tif length(B) <= length(A)-i+1\n\t\t\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124132,
      "stdout": "test set: Error During Test at /tmp/tmpqjo56zeh.jl:29\n  Test threw exception\n  Expression: candidate([1, 0, 2, 2], [2, 2, 0]) == false\n  BoundsError: attempt to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmpqjo56zeh.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqjo56zeh.jl:29 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqjo56zeh.jl:26\nTest Summary: | Pass  Error  Total\ntest set      |    2      1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /tmp/tmpqjo56zeh.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the sublist\n\t# B is the list\n\t\n\t# If the length of A is greater than B, then A cannot be a sublist of B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# If the length of A is equal to B, then A can be a sublist of B only if A is equal to B\n\tif length(A) == length(B)\n\t\tif A == B\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# If the length of A is less than B, then A can be a sublist of B only if A is equal to a sublist of B\n\tif length(A) < length(B)\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is a sublist of B iff A is a contiguous subarray of B\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is equal to A\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B and has the same length as A\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B and has the same length as A and has the same length as B\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B and has the same length as A and has the same length as B and has the same length as A\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B and has the same length as A and has the same length as B and has the same length as A and has the same length as B\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B and has the same length as A and has the same length as B and has the same length as A and has the same length as B and has the same length as A\n\t# A is a contiguous subarray of B iff there exists a contiguous subarray of B that is a permutation of A and has the same length as A and has the same length as B and has the same\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprtlhnfm8.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprtlhnfm8.jl:1\nin expression starting at /tmp/tmprtlhnfm8.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function takes two vectors and checks if the first vector is a sub-array of the second vector.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tis_Sub_Array(A, B)\n\t\n\tA function to check whether a list is sublist of another or not.\n\t\n\tParameters\n\t----------\n\tA : Vector{Int64}\n\t\tA vector of integers.\n\tB : Vector{Int64}\n\t\tA vector of integers.\n\t\n\tReturns\n\t-------\n\tBool\n\t\tTrue if B is a sublist of A, False otherwise.\n\t\n\tExamples\n\t--------\n\t>>> is_Sub_Array([1, 2, 3, 4], [2, 3])\n\ttrue\n\t>>> is_Sub_Array([1, 2, 3, 4], [2, 3, 4])\n\ttrue\n\t>>> is_Sub_Array([1, 2, 3, 4], [2, 3, 5])\n\tfalse\n\t\"\"\"\n\t\n\tif length(B) > length(A)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(B) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t\n\t\t\tif i + length(B) - 1 > length(A)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\n\t\t\tif A[i:i + length(B) - 1] == B\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\t\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tReturns true if B is a subarray of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i >= length(B)\n\t\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Test Failed at /tmp/tmpqbpyjtcr.jl:28\n  Expression: candidate([1, 2, 1], [1, 2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpqbpyjtcr.jl:28 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpqbpyjtcr.jl:26\nTest Summary: | Pass  Fail  Total\ntest set      |    2     1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpqbpyjtcr.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    for i in 1:length(A)\n        if A[i] == B[1]\n            if length(A) - i >= length(B)\n                if A[i:i+length(B)-1] == B\n                    return true\n                end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "test set: Test Failed at /tmp/tmpyac85pu6.jl:22\n  Expression: candidate([1, 2, 1], [1, 2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpyac85pu6.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpyac85pu6.jl:20\nTest Summary: | Pass  Fail  Total\ntest set      |    2     1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpyac85pu6.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B)\n\t\t\tif B[i] == A[1]\n\t\t\t\tfor j in 1:length(A)\n\t\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\t\tbreak\n\t\t\t\t\telseif j == length(A)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck if B is a subarray of A.\n\t\"\"\"\n\tif length(B) > length(A)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif i + length(B) - 1 <= length(A)\n\t\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck if B is a sub-array of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i + 1 < length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\n\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i = 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)\n        if A[1] == B[i]\n            if length(A) == 1\n                return true\n            end\n            if is_Sub_Array(A[2:end], B[i+1:end])\n                return true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check if a list is sublist of another.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tInput:\n\t\tA: Vector of integers\n\t\tB: Vector of integers\n\tOutput:\n\t\tTrue if B is sublist of A, False otherwise\n\t\"\"\"\n\t\n\t# Check if B is empty\n\tif length(B) == 0\n\t\treturn true\n\tend\n\t\n\t# Check if B is longer than A\n\tif length(B) > length(A)\n\t\treturn false\n\tend\n\t\n\t# Check if B is sublist of A\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124132,
      "stdout": "test set: Error During Test at /tmp/tmp_tziug9a.jl:41\n  Test threw exception\n  Expression: candidate([1, 0, 2, 2], [2, 2, 0]) == false\n  BoundsError: attempt to access 4-element Vector{Int64} at index [3:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmp_tziug9a.jl:26\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_tziug9a.jl:41 [inlined]\n   [7] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_tziug9a.jl:38\nTest Summary: | Pass  Error  Total\ntest set      |    2      1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /tmp/tmp_tziug9a.jl:36\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether the list B is a sublist of list A or not.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124132,
      "stdout": "test set: Error During Test at /tmp/tmp7u_7dh0_.jl:32\n  Test threw exception\n  Expression: candidate([1, 0, 2, 2], [2, 2, 0]) == false\n  BoundsError: attempt to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmp7u_7dh0_.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7u_7dh0_.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7u_7dh0_.jl:29\nTest Summary: | Pass  Error  Total\ntest set      |    2      1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /tmp/tmp7u_7dh0_.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the sub array of B\n\t# B is the main array\n\t# A is the sub array of B if all the elements of A are present in B\n\t# and the elements of A are in the same order as they appear in B\n\t# A is not the sub array of B if any of the element of A is not present in B\n\t# or the elements of A are not in the same order as they appear in B\n\t\n\t# if the length of A is greater than the length of B then A can not be the sub array of B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# if the length of A is equal to the length of B then A can be the sub array of B\n\t# only if all the elements of A are equal to the elements of B\n\tif length(A) == length(B)\n\t\tfor i in 1:length(A)\n\t\t\tif A[i] != B[i]\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\n\t# if the length of A is less than the length of B then A can be the sub array of B\n\t# only if all the elements of A are present in B and the elements of A are in the same order as they appear in B\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tj = 1\n\t\t\tk = i\n\t\t\twhile j <= length(A) && B[k] == A[j]\n\t\t\t\tj += 1\n\t\t\t\tk += 1\n\t\t\tend\n\t\t\tif j == length(A) + 1\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A[1] == B[i]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    n = length(A)\n    m = length(B)\n    if n > m\n        return false\n    end\n    for i in 1:m-n+1\n        if A == B[i:i+n-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)\n        if A[1] == B[i]\n            if A == B[i:i+length(A)-1]\n                return true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the subarray of B\n\t# B is the array\n\t# A is the subarray of B if all the elements of A are in B\n\t# A is the subarray of B if A is a subset of B\n\t# A is the subarray of B if A is a proper subset of B\n\t# A is the subarray of B if A is a subset of B and A is not equal to B\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty and A is not B\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty and A is not B and A is not empty\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty and A is not B and A is not empty and B is not empty\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty and A is not B and A is not empty and B is not empty and A is not empty\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty and A is not B and A is not empty and B is not empty and A is not empty and B is not empty\n\t# A is the subarray of B if A is a proper subset of B and A is not equal to B and A is not empty and B is not empty and A is not B and A is not empty and B is not empty and A is not empty and B is not empty and A is not B\n\t# A is the subarray of B if A\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps8rlcxyz.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps8rlcxyz.jl:1\nin expression starting at /tmp/tmps8rlcxyz.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is sublist of B iff A is a contiguous subsequence of B\n\t# A is a contiguous subsequence of B iff there exists a sequence of indices i1, i2, ..., in such that\n\t# A[1] = B[i1], A[2] = B[i2], ..., A[n] = B[in] and i1 < i2 < ... < in\n\t# This is equivalent to saying that there exists a sequence of indices i1, i2, ..., in such that\n\t# A[1] = B[i1], A[2] = B[i2], ..., A[n] = B[in] and i1 + 1 = i2, i2 + 1 = i3, ..., in-1 = in\n\t# This is equivalent to saying that there exists a sequence of indices i1, i2, ..., in such that\n\t# A[1] = B[i1], A[2] = B[i2], ..., A[n] = B[in] and i2 = i1 + 1, i3 = i2 + 1, ..., in = in-1\n\t# This is equivalent to saying that there exists a sequence of indices i1, i2, ..., in such that\n\t# A[1] = B[i1], A[2] = B[i2], ..., A[n] = B[in] and i2 - i1 = 1, i3 - i2 = 1, ..., in - in-1 = 1\n\t# This is equivalent to saying that there exists a sequence of indices i1, i2, ..., in such that\n\t# A[1] = B[i1], A[2] = B[i2], ..., A[n] = B[in] and i2 - i1 = i3 - i2 = ... = in - in-1 = 1\n\t# This is equivalent to saying that there exists a sequence of indices i1, i2, ..., in such that\n\t# A[1] = B[i1], A[2] = B[i2], ..., A[n] = B[in] and i2 - i1 = i3 - i2 = ... = in - in-1 = 1\n\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgdgxn9j5.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgdgxn9j5.jl:1\nin expression starting at /tmp/tmpgdgxn9j5.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the sublist of B\n\t# B is the main list\n\t\n\t# If the length of sublist is greater than the main list then it is not a sublist\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# If the sublist is empty then it is a sublist\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t\n\t# If the first element of sublist is not in the main list then it is not a sublist\n\tif !(A[1] in B)\n\t\treturn false\n\tend\n\t\n\t# If the first element of sublist is in the main list then we will check for the rest of the elements of sublist\n\t# in the main list\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t\n\t\t\t# If the first element of sublist is found in the main list then we will check for the rest of the elements\n\t\t\t# of sublist in the main list\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck if B is a subarray of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124132,
      "stdout": "test set: Error During Test at /tmp/tmp0t0qgcrc.jl:32\n  Test threw exception\n  Expression: candidate([1, 0, 2, 2], [2, 2, 0]) == false\n  BoundsError: attempt to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n     @ Main /tmp/tmp0t0qgcrc.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0t0qgcrc.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0t0qgcrc.jl:29\nTest Summary: | Pass  Error  Total\ntest set      |    2      1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /tmp/tmp0t0qgcrc.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif i + length(A) - 1 <= length(B)\n\t\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the sub array\n\t# B is the array\n\t\n\t# check if the length of A is less than B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# check if all the elements of A are in B\n\tfor i in A\n\t\tif !(i in B)\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function takes two vectors as input and returns true if A is a sub-array of B.\n\t\"\"\"\n\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is the sub array\n\t# B is the array\n\t\n\t# check if the length of A is less than B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# check if A is a sub array of B\n\tfor i in 1:length(A)\n\t\tif A[i] != B[i]\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tCheck if B is a sub-array of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A) - length(B) + 1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tfor i in 1:length(B)\n\t\tif A[i] != B[i]\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)\n        if B[i] == A[1]\n            if length(A) == 1\n                return true\n            end\n            if is_Sub_Array(A[2:end], B[i+1:end])\n                return true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4nko7ukf.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nko7ukf.jl:1\nin expression starting at /tmp/tmp4nko7ukf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4nko7ukf.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nko7ukf.jl:1\nin expression starting at /tmp/tmp4nko7ukf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tFunction to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\telse\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i = 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks if B is a subarray of A\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i + 1 < length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tfor i in 1:length(A)\n\t\tif A[i] in B\n\t\t\tcontinue\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4nko7ukf.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nko7ukf.jl:1\nin expression starting at /tmp/tmp4nko7ukf.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\n\tParameters:\n\t\tA: Vector{Int64}\n\t\t\tThe first list.\n\t\tB: Vector{Int64}\n\t\t\tThe second list.\n\tReturns:\n\t\tBool\n\t\t\tTrue if B is sublist of A, False otherwise.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i + 1 < length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks if the array B is a subarray of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function to check if a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tInput:\n\t\tA: Vector of integers\n\t\tB: Vector of integers\n\tOutput:\n\t\tTrue if B is sublist of A, else False\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i + 1 < length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t# A is a subarray of B iff A is a contiguous subarray of B\n\t# A is a contiguous subarray of B iff there exists an index i such that\n\t# A[1] == B[i] and A[2] == B[i+1] and ... and A[end] == B[i+end-1]\n\t# We can check this by iterating through B and checking if A is a subarray\n\t# of B[i:i+length(A)] for each i.\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A[1] == B[i]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function that checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i = 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B)\n\t\t\tif B[i] == A[1]\n\t\t\t\tfor j in 1:length(A)\n\t\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\t\tif j == length(A)\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\n\tn = length(A)\n\tm = length(B)\n\t\n\tif m > n\n\t\treturn false\n\tend\n\t\n\tfor i in 1:n-m+1\n\t\tif A[i:i+m-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tA function that checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\"\"\"\n\tFunction to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
      "timestamp": 1666124131,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}