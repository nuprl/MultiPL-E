{
  "name": "mbpp_576_is_Sub_Array",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i = 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)\n        if B[i] == A[1]\n            if length(A) == 1\n                return true\n            end\n            if length(A) == length(B[i:end])\n                return is_Sub_Array(A[2:end], B[i:end])\n            end\n        end\n    end\n    return false\nend",
    "\treturn A in B\nend",
    "    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i + length(A) - 1]\n            return true\n        end\n    end\n    return false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tFunction to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# A is the sublist of B\n\t# B is the superlist of A\n\t# if A is empty, then it is a sublist of B\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t# if A is not empty, but B is empty, then A is not a sublist of B\n\tif length(B) == 0\n\t\treturn false\n\tend\n\t# if A and B are not empty, then we need to check whether A is a sublist of B\n\t# if A[1] is in B, then we need to check whether A[2:end] is a sublist of B[B.index(A[1]):end]\n\tif A[1] in B\n\t\treturn is_Sub_Array(A[2:end], B[findfirst(B, A[1]):end])\n\telse\n\t\treturn false\n\tend\nend",
    "\t# A is subarray of B if all elements of A are in B\n\t# and the order of elements in A is the same as in B\n\t# i.e. A[i] = B[j] for some j\n\t# and A[i+1] = B[j+1] for some j+1\n\t# and so on\n\t\n\t# A is subarray of B iff there exists a subarray of B\n\t# which is equal to A\n\t\n\t# check if A is empty\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t\n\t# check if B is empty\n\tif length(B) == 0\n\t\treturn false\n\tend\n\t\n\t# check if first element of A is in B\n\tif A[1] in B\n\t\t# find the index of first element of A in B\n\t\tindex = findfirst(B, A[1])\n\t\t\n\t\t# check if A is subarray of B[index:]\n\t\treturn is_Sub_Array(A[2:end], B[index+1:end])\n\telse\n\t\treturn false\n\tend\nend",
    "    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend",
    "\t\"\"\"\n\tA function to check whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend",
    "\t\"\"\"\n\tThis function checks whether a list is sublist of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tThis function takes two vectors as input and returns true if the second vector is a sublist of the first vector.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    for i in 1:length(A)\n        if A[i] == B[1]\n            for j in 1:length(B)\n                if A[i+j-1] != B[j]\n                    return false\n                end\n            end\n            return true\n        end\n    end\n    return false\nend",
    "    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B) - length(A) + 1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend"
  ]
}