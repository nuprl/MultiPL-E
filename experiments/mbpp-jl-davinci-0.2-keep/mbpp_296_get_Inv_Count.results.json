{
  "name": "mbpp_296_get_Inv_Count",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tinv_count = 0\n\tfor i in 1:length(arr)-1\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tleft = get_Inv_Count(arr[1:n\u00f72])\n\t\tright = get_Inv_Count(arr[n\u00f72+1:n])\n\t\tsplit = get_Split_Inv_Count(arr)\n\t\treturn left + right + split\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510576,
      "stdout": "test set: Error During Test at /tmp/tmpv6u7lzoz.jl:23\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: get_Split_Inv_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpv6u7lzoz.jl:14\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpv6u7lzoz.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv6u7lzoz.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv6u7lzoz.jl:22\ntest set: Error During Test at /tmp/tmpv6u7lzoz.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: get_Split_Inv_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpv6u7lzoz.jl:14\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpv6u7lzoz.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv6u7lzoz.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv6u7lzoz.jl:22\ntest set: Error During Test at /tmp/tmpv6u7lzoz.jl:25\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: get_Split_Inv_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpv6u7lzoz.jl:14\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpv6u7lzoz.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv6u7lzoz.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n    ",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpv6u7lzoz.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif(arr[i] > arr[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\n\tinv_count = 0\n\t\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:n]\n\tcount_left = get_Inv_Count(left)\n\tcount_right = get_Inv_Count(right)\n\tcount_split = merge_and_count_split(left, right)\n\treturn count_left + count_right + count_split\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpmm6vyka9.jl:22\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count_split not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpmm6vyka9.jl:14\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpmm6vyka9.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmm6vyka9.jl:22 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmm6vyka9.jl:21\ntest set: Error During Test at /tmp/tmpmm6vyka9.jl:23\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count_split not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpmm6vyka9.jl:14\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpmm6vyka9.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmm6vyka9.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmm6vyka9.jl:21\ntest set: Error During Test at /tmp/tmpmm6vyka9.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count_split not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpmm6vyka9.jl:14\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpmm6vyka9.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmm6vyka9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scop",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpmm6vyka9.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = div(n,2)\n\tleft = get_Inv_Count(arr[1:mid])\n\tright = get_Inv_Count(arr[mid+1:n])\n\tmerge = merge_and_count(arr[1:mid],arr[mid+1:n])\n\treturn left + right + merge\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpq2anuzoj.jl:23\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpq2anuzoj.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpq2anuzoj.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq2anuzoj.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq2anuzoj.jl:22\ntest set: Error During Test at /tmp/tmpq2anuzoj.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpq2anuzoj.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpq2anuzoj.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq2anuzoj.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq2anuzoj.jl:22\ntest set: Error During Test at /tmp/tmpq2anuzoj.jl:25\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpq2anuzoj.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpq2anuzoj.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq2anuzoj.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpq2anuzoj.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:n]\n\tleft_inv = get_Inv_Count(left)\n\tright_inv = get_Inv_Count(right)\n\tsplit_inv = 0\n\ti = 1\n\tj = 1\n\tfor k = 1:n\n\t\tif i > mid\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\telseif j > n-mid\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telseif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tsplit_inv += mid - i + 1\n\t\tend\n\tend\n\treturn left_inv + right_inv + split_inv\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\n\t# Initialize result \n\tinv_count = 0\n\t\n\t# Loop through the array \n\tfor i in 1:length(arr)\n\t\t\n\t\t# Loop through the array again\n\t\tfor j in i+1:length(arr)\n\t\t\t\n\t\t\t# If the element is smaller than the element to the right, add one to the inversion count\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    count = 0\n    for i in 1:length(arr)\n        for j in i+1:length(arr)\n            if arr[i] > arr[j]\n                count += 1\n            end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i = 1:n\n        for j = i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t\n\t# Recursive case\n\tmid = div(length(arr), 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\t\n\t# Recursive calls\n\tleft_count = get_Inv_Count(left)\n\tright_count = get_Inv_Count(right)\n\tsplit_count = merge_and_count(left, right)\n\t\n\treturn left_count + right_count + split_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpis71g7gq.jl:30\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpis71g7gq.jl:21\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpis71g7gq.jl:19\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpis71g7gq.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpis71g7gq.jl:29\ntest set: Error During Test at /tmp/tmpis71g7gq.jl:31\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpis71g7gq.jl:21\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpis71g7gq.jl:20\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpis71g7gq.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpis71g7gq.jl:29\ntest set: Error During Test at /tmp/tmpis71g7gq.jl:32\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpis71g7gq.jl:21\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpis71g7gq.jl:19\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpis71g7gq.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpis71g7gq.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    inv_count = 0\n    for i in 1:length(arr)\n        for j in i+1:length(arr)\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t\n\t# Recursive case\n\tmid = div(length(arr), 2)\n\tleft_arr = arr[1:mid]\n\tright_arr = arr[mid+1:end]\n\t\n\tleft_count = get_Inv_Count(left_arr)\n\tright_count = get_Inv_Count(right_arr)\n\t\n\t# Merge and count\n\tmerge_count = 0\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left_arr) && j <= length(right_arr)\n\t\tif left_arr[i] <= right_arr[j]\n\t\t\tarr[k] = left_arr[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right_arr[j]\n\t\t\tj += 1\n\t\t\tmerge_count += length(left_arr) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\t\n\twhile i <= length(left_arr)\n\t\tarr[k] = left_arr[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\t\n\twhile j <= length(right_arr)\n\t\tarr[k] = right_arr[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\t\n\treturn left_count + right_count + merge_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = convert(Int64, floor(n/2))\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\tleft_count = get_Inv_Count(left)\n\tright_count = get_Inv_Count(right)\n\tmerge_count = merge_and_count(left, right)\n\treturn left_count + right_count + merge_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmp3lvrx26u.jl:25\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3lvrx26u.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3lvrx26u.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3lvrx26u.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3lvrx26u.jl:24\ntest set: Error During Test at /tmp/tmp3lvrx26u.jl:26\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3lvrx26u.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3lvrx26u.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3lvrx26u.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3lvrx26u.jl:24\ntest set: Error During Test at /tmp/tmp3lvrx26u.jl:27\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3lvrx26u.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3lvrx26u.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3lvrx26u.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3lvrx26u.jl:22\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tinv_count = 0\n\tfor i = 1:length(arr)\n\t\tfor j = i+1:length(arr)\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i = 1:n-1\n        for j = i+1:n\n            if arr[j] < arr[i]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n, 2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tleft_inv = get_Inv_Count(left)\n\t\tright_inv = get_Inv_Count(right)\n\t\tmerge_inv = merge_and_count(left, right)\n\t\treturn left_inv + right_inv + merge_inv\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpbxqxria5.jl:26\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpbxqxria5.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpbxqxria5.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbxqxria5.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbxqxria5.jl:25\ntest set: Error During Test at /tmp/tmpbxqxria5.jl:27\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpbxqxria5.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpbxqxria5.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbxqxria5.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbxqxria5.jl:25\ntest set: Error During Test at /tmp/tmpbxqxria5.jl:28\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpbxqxria5.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpbxqxria5.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbxqxria5.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpbxqxria5.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n, 2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tcount_left = get_Inv_Count(left)\n\t\tcount_right = get_Inv_Count(right)\n\t\tcount_split = get_Split_Inv_Count(left, right)\n\t\treturn count_left + count_right + count_split\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmp2od3dpr5.jl:26\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: get_Split_Inv_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp2od3dpr5.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp2od3dpr5.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2od3dpr5.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2od3dpr5.jl:25\ntest set: Error During Test at /tmp/tmp2od3dpr5.jl:27\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: get_Split_Inv_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp2od3dpr5.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp2od3dpr5.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2od3dpr5.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2od3dpr5.jl:25\ntest set: Error During Test at /tmp/tmp2od3dpr5.jl:28\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: get_Split_Inv_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp2od3dpr5.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp2od3dpr5.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2od3dpr5.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n    ",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp2od3dpr5.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tleft = arr[1:n\u00f72]\n\t\tright = arr[n\u00f72+1:n]\n\t\treturn get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpl2qsjtov.jl:22\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpl2qsjtov.jl:14\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2qsjtov.jl:22 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2qsjtov.jl:21\ntest set: Error During Test at /tmp/tmpl2qsjtov.jl:23\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpl2qsjtov.jl:14\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2qsjtov.jl:23 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2qsjtov.jl:21\ntest set: Error During Test at /tmp/tmpl2qsjtov.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpl2qsjtov.jl:14\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2qsjtov.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2qsjtov.jl:21\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpl2qsjtov.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\n\tn = length(arr)\n\t\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = n \u00f7 2\n\t\t\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\t\n\t\tleft_count = get_Inv_Count(left)\n\t\tright_count = get_Inv_Count(right)\n\t\t\n\t\tmerge_count = merge_and_count_split_inv(left, right)\n\t\t\n\t\treturn left_count + right_count + merge_count\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpft_6vck7.jl:29\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count_split_inv not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpft_6vck7.jl:19\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpft_6vck7.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpft_6vck7.jl:29 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpft_6vck7.jl:28\ntest set: Error During Test at /tmp/tmpft_6vck7.jl:30\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count_split_inv not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpft_6vck7.jl:19\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpft_6vck7.jl:17\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpft_6vck7.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpft_6vck7.jl:28\ntest set: Error During Test at /tmp/tmpft_6vck7.jl:31\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count_split_inv not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpft_6vck7.jl:19\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpft_6vck7.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpft_6vck7.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] to",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpft_6vck7.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\n\t# Base case \n\tif length(arr) == 1\n\t\treturn 0\n\tend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpppeo26le.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpppeo26le.jl:1\nin expression starting at /tmp/tmpppeo26le.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tinv_count = 0\n\tfor i = 1:length(arr)\n\t\tfor j = i+1:length(arr)\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tInput:\n\t\tarr: Vector of integers\n\tOutput:\n\t\tcount: Number of inversions in the array\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i = 1:n-1\n        for j = i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t\n\t# Split the array into two halves\n\tmid = div(length(arr), 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\t\n\t# Recursively call the function on the two halves\n\tleft_count = get_Inv_Count(left)\n\tright_count = get_Inv_Count(right)\n\t\n\t# Merge the two halves and count the inversions\n\tmerge_count = merge_and_count(left, right)\n\t\n\t# Return the total number of inversions\n\treturn left_count + right_count + merge_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpz4sah7rx.jl:31\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpz4sah7rx.jl:21\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpz4sah7rx.jl:17\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz4sah7rx.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz4sah7rx.jl:30\ntest set: Error During Test at /tmp/tmpz4sah7rx.jl:32\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpz4sah7rx.jl:21\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpz4sah7rx.jl:18\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz4sah7rx.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz4sah7rx.jl:30\ntest set: Error During Test at /tmp/tmpz4sah7rx.jl:33\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpz4sah7rx.jl:21\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpz4sah7rx.jl:17\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz4sah7rx.jl:33 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpz4sah7rx.jl:28\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t# Initialize result \n\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i = 1:length(arr)\n\t\tfor j = i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn=length(arr)\n\tcount=0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i]>arr[j]\n\t\t\t\tcount+=1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n,2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tleft_inv = get_Inv_Count(left)\n\t\tright_inv = get_Inv_Count(right)\n\t\tsplit_inv = merge_and_count(left, right)\n\t\treturn left_inv + right_inv + split_inv\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmp7aqnttj4.jl:26\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp7aqnttj4.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp7aqnttj4.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7aqnttj4.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7aqnttj4.jl:25\ntest set: Error During Test at /tmp/tmp7aqnttj4.jl:27\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp7aqnttj4.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp7aqnttj4.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7aqnttj4.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7aqnttj4.jl:25\ntest set: Error During Test at /tmp/tmp7aqnttj4.jl:28\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp7aqnttj4.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp7aqnttj4.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7aqnttj4.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp7aqnttj4.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:n]\n\tinv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left) && j <= length(right)\n\t\tif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tinv_count += length(left) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\twhile i <= length(left)\n\t\tarr[k] = left[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\twhile j <= length(right)\n\t\tarr[k] = right[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\tinv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left) && j <= length(right)\n\t\tif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tinv_count += length(left) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\twhile i <= length(left)\n\t\tarr[k] = left[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\twhile j <= length(right)\n\t\tarr[k] = right[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n, 2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:end]\n\t\tleft_count = get_Inv_Count(left)\n\t\tright_count = get_Inv_Count(right)\n\t\tsplit_count = merge_and_count_split_inv(left, right)\n\t\treturn left_count + right_count + split_count\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmpfqtsbrp_.jl:26\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count_split_inv not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpfqtsbrp_.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpfqtsbrp_.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfqtsbrp_.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfqtsbrp_.jl:25\ntest set: Error During Test at /tmp/tmpfqtsbrp_.jl:27\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count_split_inv not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpfqtsbrp_.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpfqtsbrp_.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfqtsbrp_.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfqtsbrp_.jl:25\ntest set: Error During Test at /tmp/tmpfqtsbrp_.jl:28\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count_split_inv not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpfqtsbrp_.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmpfqtsbrp_.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfqtsbrp_.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] to",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpfqtsbrp_.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t# Base case \n\tif length(arr) == 1\n\t\treturn 0\n\tend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc540z7a_.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc540z7a_.jl:1\nin expression starting at /tmp/tmpc540z7a_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t# Recursive case\n\tmid = div(length(arr),2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\treturn get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left,right)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124043,
      "stdout": "test set: Error During Test at /tmp/tmppgxz_vsy.jl:23\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmppgxz_vsy.jl:16\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgxz_vsy.jl:23 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgxz_vsy.jl:22\ntest set: Error During Test at /tmp/tmppgxz_vsy.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmppgxz_vsy.jl:16\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgxz_vsy.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgxz_vsy.jl:22\ntest set: Error During Test at /tmp/tmppgxz_vsy.jl:25\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmppgxz_vsy.jl:16\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgxz_vsy.jl:25 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgxz_vsy.jl:22\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmppgxz_vsy.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\t\n\t\t# Base case\n\t\tif length(arr) == 1\n\t\t\treturn 0\n\t\tend\n\t\t\n\t\t# Recursive case\n\t\telse\n\t\t\tmid = div(length(arr),2)\n\t\t\tleft = arr[1:mid]\n\t\t\tright = arr[mid+1:end]\n\t\t\t\n\t\t\t# Recursive calls\n\t\t\tleft_count = get_Inv_Count(left)\n\t\t\tright_count = get_Inv_Count(right)\n\t\t\t\n\t\t\t# Merge and count\n\t\t\tmerge_count = 0\n\t\t\ti = 1\n\t\t\tj = 1\n\t\t\tfor k = 1:length(arr)\n\t\t\t\tif i > length(left)\n\t\t\t\t\tarr[k] = right[j]\n\t\t\t\t\tj += 1\n\t\t\t\telseif j > length(right)\n\t\t\t\t\tarr[k] = left[i]\n\t\t\t\t\ti += 1\n\t\t\t\telseif left[i] <= right[j]\n\t\t\t\t\tarr[k] = left[i]\n\t\t\t\t\ti += 1\n\t\t\t\telse\n\t\t\t\t\tarr[k] = right[j]\n\t\t\t\t\tj += 1\n\t\t\t\t\tmerge_count += length(left) - i + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\treturn left_count + right_count + merge_count\n\t\tend\n\tend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmpo01g3ng3.jl:4 expected \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo01g3ng3.jl:12\nin expression starting at /tmp/tmpo01g3ng3.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = n >> 1\n\t\tleft = get_Inv_Count(arr[1:mid])\n\t\tright = get_Inv_Count(arr[mid+1:end])\n\t\tmerge = merge_Count(arr[1:mid], arr[mid+1:end])\n\t\treturn left + right + merge\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124044,
      "stdout": "test set: Error During Test at /tmp/tmphbq_o3qh.jl:24\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmphbq_o3qh.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmphbq_o3qh.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphbq_o3qh.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphbq_o3qh.jl:23\ntest set: Error During Test at /tmp/tmphbq_o3qh.jl:25\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmphbq_o3qh.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmphbq_o3qh.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphbq_o3qh.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphbq_o3qh.jl:23\ntest set: Error During Test at /tmp/tmphbq_o3qh.jl:26\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_Count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmphbq_o3qh.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmphbq_o3qh.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphbq_o3qh.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphbq_o3qh.jl:2",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmphbq_o3qh.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = div(n, 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\tinv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left) && j <= length(right)\n\t\tif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tinv_count += length(left) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\twhile i <= length(left)\n\t\tarr[k] = left[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\twhile j <= length(right)\n\t\tarr[k] = right[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = div(n, 2)\n\tleft = get_Inv_Count(arr[1:mid])\n\tright = get_Inv_Count(arr[mid+1:n])\n\tmerge = merge_and_count(arr[1:mid], arr[mid+1:n])\n\treturn left + right + merge\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124044,
      "stdout": "test set: Error During Test at /tmp/tmph0y4ccsf.jl:23\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmph0y4ccsf.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmph0y4ccsf.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph0y4ccsf.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph0y4ccsf.jl:22\ntest set: Error During Test at /tmp/tmph0y4ccsf.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmph0y4ccsf.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmph0y4ccsf.jl:14\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph0y4ccsf.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph0y4ccsf.jl:22\ntest set: Error During Test at /tmp/tmph0y4ccsf.jl:25\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmph0y4ccsf.jl:15\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmph0y4ccsf.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph0y4ccsf.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmph0y4ccsf.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t# Base case \n\tif length(arr) <= 1\n\t\treturn 0\n\tend\n\t\n\t# Divide the array into two halves \n\tmid = div(length(arr), 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\t\n\t# Recursively count inversions in the left and right halves \n\tleft_inv_count = get_Inv_Count(left)\n\tright_inv_count = get_Inv_Count(right)\n\t\n\t# Merge the two halves and count inversions while merging \n\tmerge_inv_count = merge_and_count(left, right)\n\t\n\t# Return the sum of inversions in the left, right and merged halves \n\treturn left_inv_count + right_inv_count + merge_inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124044,
      "stdout": "test set: Error During Test at /tmp/tmp5vg72vdf.jl:30\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp5vg72vdf.jl:20\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp5vg72vdf.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5vg72vdf.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5vg72vdf.jl:29\ntest set: Error During Test at /tmp/tmp5vg72vdf.jl:31\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp5vg72vdf.jl:20\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp5vg72vdf.jl:17\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5vg72vdf.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5vg72vdf.jl:29\ntest set: Error During Test at /tmp/tmp5vg72vdf.jl:32\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp5vg72vdf.jl:20\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp5vg72vdf.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5vg72vdf.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp5vg72vdf.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n \n\t\tfor j in i+1:n \n\t\t\tif arr[i] > arr[j] \n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n,2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tleft_count = get_Inv_Count(left)\n\t\tright_count = get_Inv_Count(right)\n\t\tmerge_count = merge_and_count(left,right)\n\t\treturn left_count + right_count + merge_count\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124044,
      "stdout": "test set: Error During Test at /tmp/tmp3gyy2pzy.jl:26\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3gyy2pzy.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3gyy2pzy.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gyy2pzy.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3gyy2pzy.jl:25\ntest set: Error During Test at /tmp/tmp3gyy2pzy.jl:27\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3gyy2pzy.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3gyy2pzy.jl:16\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gyy2pzy.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3gyy2pzy.jl:25\ntest set: Error During Test at /tmp/tmp3gyy2pzy.jl:28\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3gyy2pzy.jl:17\n   [2] get_Inv_Count(arr::Vector{Int64})\n     @ Main /tmp/tmp3gyy2pzy.jl:15\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3gyy2pzy.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3gyy2pzy.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = length(arr)\n    if n == 1\n        return 0\n    else\n        mid = div(n,2)\n        left = arr[1:mid]\n        right = arr[mid+1:n]\n        return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124044,
      "stdout": "test set: Error During Test at /tmp/tmpppz84oxz.jl:23\n  Test threw exception\n  Expression: candidate([1, 20, 6, 4, 5]) == 5\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpppz84oxz.jl:15\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppz84oxz.jl:23 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppz84oxz.jl:22\ntest set: Error During Test at /tmp/tmpppz84oxz.jl:24\n  Test threw exception\n  Expression: candidate([1, 2, 1]) == 1\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpppz84oxz.jl:15\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppz84oxz.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppz84oxz.jl:22\ntest set: Error During Test at /tmp/tmpppz84oxz.jl:25\n  Test threw exception\n  Expression: candidate([1, 2, 5, 6, 1]) == 3\n  UndefVarError: merge_and_count not defined\n  Stacktrace:\n   [1] get_Inv_Count(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpppz84oxz.jl:15\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppz84oxz.jl:25 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppz84oxz.jl:22\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpppz84oxz.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nusing Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
      "timestamp": 1666124040,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}