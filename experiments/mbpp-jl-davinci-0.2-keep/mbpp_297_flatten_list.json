{
  "name": "mbpp_297_flatten_list",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\nfunction flatten_list(list1::Any)::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = flatten_list;\n\t@test(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n\t@test(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\tlist2 = Vector{Int64}()\n\t\tfor i in 1:length(list1)\n\t\t\tif isa(list1[i],Vector)\n\t\t\t\tlist2 = [list2;flatten_list(list1[i])]\n\t\t\telse\n\t\t\t\tlist2 = [list2;list1[i]]\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\t\"\"\"\n\tFlatten a given nested list structure.\n\t\"\"\"\n\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\"\"\"\n\tThis function takes a nested list and flattens it into a vector.\n\t\"\"\"\n\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telseif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2;i]\n\t\telseif typeof(i) == Array{Any,1}\n\t\t\tlist2 = [list2;flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tappend!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\tif isa(list1, Int64)\n\t\t\treturn [list1]\n\t\telse\n\t\t\treturn [flatten_list(x) for x in list1]\n\t\tend\n\tend",
    "\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Array)\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = vcat(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\"\"\"\n\tFlattens a nested list.\n\t\"\"\"\n\tif isa(list1,Array)\n\t\tlist1 = convert(Vector,list1)\n\tend\n\tif isa(list1,Vector)\n\t\tif length(list1) == 0\n\t\t\treturn []\n\t\telseif length(list1) == 1\n\t\t\tif isa(list1[1],Vector)\n\t\t\t\treturn flatten_list(list1[1])\n\t\t\telse\n\t\t\t\treturn list1\n\t\t\tend\n\t\telse\n\t\t\treturn vcat(flatten_list(list1[1]),flatten_list(list1[2:end]))\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1, Vector)\n\t\tif isa(list1[1], Vector)\n\t\t\treturn flatten_list(list1[1])\n\t\telse\n\t\t\treturn list1\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a nested list as input and returns a vector with all the elements of the list.\n\t\"\"\"\n\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Number)\n\t\treturn list1\n\telseif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telseif isa(list1, Array)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn 0\n\tend\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\tend\n\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = vcat(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn flatten_list(list1[1]) .* flatten_list(list1[2])\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\"\"\"\n\tFlatten a given nested list structure.\n\t\"\"\"\n\tif isa(list1, Int64)\n\t\treturn [list1]\n\telseif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn []\n\tend\nend",
    "\tif isa(list1,Array)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Vector)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Int64)\n\t\treturn [list1]\n\tend\n\tif isa(list1,Any)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Tuple)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Dict)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Set)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractString)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractDict)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractSet)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractArray)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractVector)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractMatrix)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractRNG)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractSparseArray)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractSparseMatrixCSC)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractSparseMatrix)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractSparseMatrixCSC)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,AbstractSparseMatrix)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Int64)\n\t\treturn [list1]\n\tend\n\tif isa(list1,Array)\n\t\tlist1 = collect(list1)\n\tend\n\tif isa(list1,Any)\n\t\tlist1 = collect(list1)\n\tend\n\tlist2 = []\n\tfor i in list1\n\t\tif isa(i,Vector)\n\t\t\tlist2 = vcat(list2,flatten_list(i))\n\t\telse\n\t\t\tlist2 = vcat(list2,i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif isa(i,Int64)\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = vcat(list2,flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\tif isa(list1[1], Vector)\n\t\t\treturn flatten_list(list1[1])\n\t\telse\n\t\t\treturn list1\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = vcat(list2,flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tif isa(list1, Vector)\n\t\tlist2 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif isa(list1[i], Vector)\n\t\t\t\tlist2 = [list2; flatten_list(list1[i])]\n\t\t\telse\n\t\t\t\tlist2 = [list2; list1[i]]\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = vcat(list2,flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif typeof(list1) == Int64\n\t\treturn [list1]\n\telseif typeof(list1) == Array\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\telseif typeof(list1) == Vector{Any}\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\telse\n\t\treturn []\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\"\"\"\n\tFlattens a given nested list structure.\n\t\"\"\"\n\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a nested list and returns a flattened list of integers.\n\t\"\"\"\n\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\tresult = []\n\t\tfor i in list1\n\t\t\tresult = vcat(result, flatten_list(i))\n\t\tend\n\t\treturn result\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\tresult = []\n\t\tfor i in 1:length(list1)\n\t\t\tresult = [result; flatten_list(list1[i])]\n\t\tend\n\t\treturn result\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2,flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2,i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tif isa(list1, Array)\n\t\tlist1 = list1[1]\n\tend\n\tif isa(list1, Int64)\n\t\treturn [list1]\n\telseif isa(list1, Array)\n\t\treturn flatten_list(list1[1])\n\telseif isa(list1, Vector)\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\t\tlist2 = []\n\t\tfor i in list1\n\t\t\tif typeof(i) == Array{Any,1}\n\t\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\t\telse\n\t\t\t\tlist2 = append!(list2, i)\n\t\t\tend\n\t\tend\n\t\treturn list2\n\tend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\tlist2 = []\n\t\tfor i in list1\n\t\t\tif isa(i,Vector)\n\t\t\t\tlist2 = append!(list2,flatten_list(i))\n\t\t\telse\n\t\t\t\tlist2 = append!(list2,i)\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\tlist2 = Vector{Int64}()\n\t\tfor i in list1\n\t\t\tif isa(i,Vector)\n\t\t\t\tlist2 = [list2;flatten_list(i)]\n\t\t\telse\n\t\t\t\tlist2 = [list2;i]\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn list1\n\tend\nend",
    "\tif isa(list1,Vector)\n\t\tif length(list1) == 0\n\t\t\treturn []\n\t\telse\n\t\t\treturn [flatten_list(list1[1])..., flatten_list(list1[2:end])...]\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tpush!(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\tif length(list1) == 0\n\t\t\treturn []\n\t\telse\n\t\t\treturn vcat(flatten_list(list1[1]), flatten_list(list1[2:end]))\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\tlist1 = list1[1]\n\tend\n\tif isa(list1, Int64)\n\t\treturn [list1]\n\tend\n\tif isa(list1, Array)\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tif isa(list1, Vector)\n\t\tif length(list1) == 0\n\t\t\treturn []\n\t\telse\n\t\t\treturn [flatten_list(list1[1])..., flatten_list(list1[2:end])...]\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array{Any,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telseif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn []\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Array)\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\telse\n\t\treturn list1\n\tend\nend",
    "\t\"\"\"\n\tFlatten a nested list.\n\t\"\"\"\n\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\t\"\"\"\n\tFlattens a given nested list structure.\n\t\"\"\"\n\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = Vector{Int64}()\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = vcat(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1,Vector) \n\t\tlist2 = []\n\t\tfor i in list1\n\t\t\tif isa(i,Vector)\n\t\t\t\tlist2 = [list2; flatten_list(i)]\n\t\t\telse\n\t\t\t\tlist2 = [list2; i]\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\"\"\"\n\tThis function takes a nested list and returns a flattened list of integers.\n\t\"\"\"\n\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telseif isa(list1, Int64)\n\t\treturn list1\n\telse\n\t\treturn 0\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\tlist2 = []\n\t\tfor i in list1\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\t\treturn list2\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\tlist2 = Vector{Int64}()\n\t\tfor i in 1:length(list1)\n\t\t\tif isa(list1[i], Vector)\n\t\t\t\tlist2 = [list2; flatten_list(list1[i])]\n\t\t\telse\n\t\t\t\tlist2 = [list2; list1[i]]\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tif isa(list1,Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tif typeof(list1) == Int64\n\t\treturn [list1]\n\telseif typeof(list1) == Array\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn []\n\tend\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\telse\n\t\t\tlist2 = [list2; i]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2,flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2,i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Array)\n\t\tif length(list1) == 0\n\t\t\treturn []\n\t\telse\n\t\t\treturn [flatten_list(list1[1])..., flatten_list(list1[2:end])...]\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(list1[i]) for i in 1:length(list1)]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif isa(i,Array)\n\t\t\tlist2 = append!(list2,flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2,i)\n\t\tend\n\tend\n\treturn list2\nend",
    "    if isa(list1,Vector)\n        return [flatten_list(x) for x in list1]\n    else\n        return list1\n    end\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\tend\n\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tresult = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tresult = [result; flatten_list(i)]\n\t\telse\n\t\t\tresult = [result; i]\n\t\tend\n\tend\n\treturn result\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = vcat(list2,flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tresult = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(result, i)\n\t\telseif typeof(i) == Array\n\t\t\tpush!(result, flatten_list(i))\n\t\tend\n\tend\n\treturn result\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\tlist2 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif isa(list1[i], Vector)\n\t\t\t\tlist2 = [list2; flatten_list(list1[i])]\n\t\t\telse\n\t\t\t\tlist2 = [list2; list1[i]]\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif typeof(list1) == Int64\n\t\treturn [list1]\n\telseif typeof(list1) == Array\n\t\tlist2 = []\n\t\tfor i in list1\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\tend\n\t\treturn list2\n\tend\nend",
    "\tif isa(list1,Vector)\n\t\tlist2 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif isa(list1[i],Vector)\n\t\t\t\tlist2 = vcat(list2,flatten_list(list1[i]))\n\t\t\telse\n\t\t\t\tlist2 = vcat(list2,list1[i])\n\t\t\tend\n\t\tend\n\t\treturn list2\n\telse\n\t\treturn list1\n\tend\nend",
    "\tif isa(list1,Vector)\n\t\treturn [flatten_list(x) for x in list1]\n\telse\n\t\treturn list1\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telse\n\t\t\tlist2 = [list2;flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\t\"\"\"\n\tFlattens a nested list.\n\t\"\"\"\n\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Array)\n\t\tlist1 = list1[1]\n\tend\n\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn vcat(flatten_list(list1[1]),flatten_list(list1[2]))\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telseif typeof(i) == Array{Any,1}\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Array{Int64,1})\n\t\treturn list1\n\telse\n\t\tlist2 = []\n\t\tfor i in 1:length(list1)\n\t\t\tlist2 = append!(list2,flatten_list(list1[i]))\n\t\tend\n\t\treturn list2\n\tend\nend",
    "\t\tlist2 = []\n\t\tfor i in list1\n\t\t\tif typeof(i) == Array\n\t\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\t\telse\n\t\t\t\tlist2 = append!(list2, i)\n\t\t\tend\n\t\tend\n\t\treturn list2\n\tend\n\t\n\t\"\"\"\n\tWrite a function that returns the running total of a given list.\n\t\"\"\"",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = vcat(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1,Vector)\n\t\treturn list1\n\telse\n\t\treturn flatten_list(list1[1])\n\tend\nend",
    "\tif isa(list1,Int64)\n\t\treturn [list1]\n\telse\n\t\treturn [flatten_list(x) for x in list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2,i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = append!(list2,flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tif isa(list1, Vector)\n\t\tif length(list1) == 0\n\t\t\treturn []\n\t\telse\n\t\t\treturn [flatten_list(list1[1])..., flatten_list(list1[2:end])...]\n\t\tend\n\telse\n\t\treturn [list1]\n\tend\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = vcat(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Array{Int64,1}\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\telse\n\t\t\tlist2 = append!(list2, i)\n\t\tend\n\tend\n\treturn list2\nend",
    "    if isa(list1,Vector)\n        list1 = collect(list1)\n    end\n    if isa(list1,Int64)\n        return [list1]\n    end\n    if isa(list1,Array)\n        list1 = collect(list1)\n    end\n    if isa(list1,Dict)\n        list1 = collect(list1)\n    end\n    if isa(list1,Any)\n        list1 = collect(list1)\n    end\n    if isa(list1,Tuple)\n        list1 = collect(list1)\n    end\n    if isa(list1,Set)\n        list1 = collect(list1)\n    end\n    if isa(list1,String)\n        list1 = collect(list1)\n    end\n    if isa(list1,Char)\n        list1 = collect(list1)\n    end\n    if isa(list1,Symbol)\n        list1 = collect(list1)\n    end\n    if isa(list1,Function)\n        list1 = collect(list1)\n    end\n    if isa(list1,Complex)\n        list1 = collect(list1)\n    end\n    if isa(list1,Rational)\n        list1 = collect(list1)\n    end\n    if isa(list1,Float64)\n        list1 = collect(list1)\n    end\n    if isa(list1,Int64)\n        list1 = collect(list1)\n    end\n    if isa(list1,Int32)\n        list1 = collect(list1)\n    end\n    if isa(list1,Int16)\n        list1 = collect(list1)\n    end\n    if isa(list1,Int8)\n        list1 = collect(list1)\n    end\n    if isa(list1,UInt64)\n        list1 = collect(list1)\n    end\n    if isa(list1,UInt32)\n        list1 = collect(list1)\n    end\n    if isa(list1,UInt16)\n        list1 = collect(",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telseif typeof(i) == Array\n\t\t\tlist2 = append!(list2, flatten_list(i))\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlist2 = []\n\tfor i in list1\n\t\tif typeof(i) == Int64\n\t\t\tpush!(list2, i)\n\t\telse\n\t\t\tlist2 = [list2; flatten_list(i)]\n\t\tend\n\tend\n\treturn list2\nend"
  ]
}