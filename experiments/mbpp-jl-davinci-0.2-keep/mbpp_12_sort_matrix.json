{
  "name": "mbpp_12_sort_matrix",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = sort_matrix;\n\t@test(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\n\t@test(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\n\t@test(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tSort a matrix M in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tm = length(M[1])\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tfor j in 1:m\n\t\t\tsums[i] += M[i][j]\n\t\tend\n\tend\n\tsorted_indices = sortperm(sums)\n\treturn M[sorted_indices]\nend",
    "\tn = length(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\tidx = sortperm(sums)\n\treturn M[idx]\nend",
    "\t# sort the matrix by the sum of each row\n\tsorted_M = sort(M, by = sum)\n\treturn sorted_M\nend",
    "\t\"\"\"\n\tSort a matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t# Create a vector of the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t# Sort the matrix according to the row sums\n\treturn M[sortperm(row_sums)]\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\tsorted_indices = sortperm(sums)\n\treturn M[sorted_indices]\nend",
    "\tsorted_M = sort(M, by = sum)\n\treturn sorted_M\nend",
    "\tn = length(M)\n\tfor i in 1:n\n\t\tfor j in 1:n-i\n\t\t\tif sum(M[j]) > sum(M[j+1])\n\t\t\t\tM[j], M[j+1] = M[j+1], M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\torder = sortperm(sums)\n\treturn M[order]\nend",
    "\tn = length(M)\n\tfor i in 1:n\n\t\tfor j in 1:n-i\n\t\t\tif sum(M[j]) > sum(M[j+1])\n\t\t\t\tM[j], M[j+1] = M[j+1], M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\tM = M[sortperm(sums)]\n\treturn M\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t# Get the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t# Sort the rows by their sum\n\tsorted_rows = sort(zip(row_sums, M), by=x->x[1])\n\t# Unzip the sorted rows\n\tsorted_row_sums, sorted_M = unzip(sorted_rows)\n\treturn sorted_M\nend",
    "\t\"\"\"\n\tSort the matrix M according to the sum of its rows.\n\t\"\"\"\n\t# Get the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t# Sort the matrix according to the row sums\n\treturn M[sortperm(row_sums)]\nend",
    "\t\"\"\"\n\tSort the given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tfor i in 1:n\n\t\tfor j in 1:n-1\n\t\t\tif sum(M[j]) > sum(M[j+1])\n\t\t\t\tM[j], M[j+1] = M[j+1], M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend",
    "\tn = length(M)\n\tfor i = 1:n\n\t\tfor j = 1:n\n\t\t\tM[i][j] = M[i][j]^2\n\t\tend\n\tend\n\treturn M\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\tsorted_indices = sortperm(sums)\n\treturn M[sorted_indices]\nend",
    "\t# sort the matrix according to the sum of its rows\n\t# return the sorted matrix\n\t\n\t# get the sum of each row\n\tsums = [sum(row) for row in M]\n\t\n\t# sort the rows according to the sums\n\tsorted_rows = sort(zip(sums, M), by=x->x[1])\n\t\n\t# return the sorted matrix\n\treturn [row[2] for row in sorted_rows]\nend",
    "\t# sort the matrix according to the sum of its rows\n\t# return the sorted matrix\n\t# your code here\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t# sort the matrix according to the sum of its rows\n\tsorted_M = sort(M, by=sum)\n\treturn sorted_M\nend",
    "\t\"\"\"\n\tSort the matrix M in ascending order according to the sum of its rows.\n\t\"\"\"\n\t\n\t# Create a vector of the sums of the rows of M\n\tsums = [sum(row) for row in M]\n\t\n\t# Sort the sums\n\tsorted_sums = sort(sums)\n\t\n\t# Create a vector of the indices of the sorted sums\n\tsorted_indices = [findfirst(sums, sorted_sums[i])[1] for i in 1:length(sums)]\n\t\n\t# Create a vector of the sorted rows of M\n\tsorted_rows = [M[sorted_indices[i]] for i in 1:length(sums)]\n\t\n\treturn sorted_rows\nend",
    "\t# Sort the matrix according to the sum of its rows\n\t# Input: M is a matrix of integers\n\t# Output: M is the matrix sorted according to the sum of its rows\n\t\n\t# Sort the matrix according to the sum of its rows\n\t# Input: M is a matrix of integers\n\t# Output: M is the matrix sorted according to the sum of its rows\n\t\n\t# Get the sum of the rows of the matrix\n\tsums = [sum(row) for row in M]\n\t\n\t# Sort the matrix according to the sums\n\tsorted_matrix = sortperm(sums)\n\t\n\t# Return the sorted matrix\n\treturn M[sorted_matrix]\nend"
  ]
}