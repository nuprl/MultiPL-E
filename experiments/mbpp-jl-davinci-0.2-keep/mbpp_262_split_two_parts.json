{
  "name": "mbpp_262_split_two_parts",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\t\"\"\"\n\tFunction to split a list into two parts where the length of the first part of the list is L.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn list2, list3\nend",
    "\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend",
    "\t\"\"\"\n\tInput:\n\t\tlist1: Any\n\t\tL: Int64\n\tOutput:\n\t\tAny\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\t\"\"\"\n\tFunction to split the list into two parts.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor j in L+1:length(list1)\n\t\tpush!(list3, list1[j])\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "    list2 = []\n    list3 = []\n    for i in 1:length(list1)\n        if i <= L\n            push!(list2, list1[i])\n        else\n            push!(list3, list1[i])\n        end\n    end\n    return (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn list2, list3\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend",
    "\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend"
  ]
}