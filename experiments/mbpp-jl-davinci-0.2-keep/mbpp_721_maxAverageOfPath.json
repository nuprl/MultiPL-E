{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "jl",
  "prompt": "\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n+n-1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\t\"\"\"\n\tcost is a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\t\"\"\"\n\tN = length(cost)\n\t# Initialize the matrix to store the maximum average of path from cell (i,j) to the bottom right cell (N,N)\n\tmaxAvg = zeros(N,N)\n\t# Initialize the matrix to store the number of paths from cell (i,j) to the bottom right cell (N,N)\n\tnumPaths = zeros(N,N)\n\t# Initialize the matrix to store the cost of the path from cell (i,j) to the bottom right cell (N,N)\n\tcostPath = zeros(N,N)\n\t# Initialize the matrix to store the maximum average of path from cell (i,j) to the bottom right cell (N,N)\n\tmaxAvg[N,N] = cost[N,N]\n\t# Initialize the matrix to store the number of paths from cell (i,j) to the bottom right cell (N,N)\n\tnumPaths[N,N] = 1\n\t# Initialize the matrix to store the cost of the path from cell (i,j) to the bottom right cell (N,N)\n\tcostPath[N,N] = cost[N,N]\n\t# Iterate over the matrix from right to left and from bottom to top\n\tfor i in N-1:-1:1\n\t\tfor j in N-1:-1:1\n\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\tif (i != N) || (j != N)\n\t\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\t\tif (i != N) || (j != N)\n\t\t\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\t\t\tif (i != N) || (j != N)\n\t\t\t\t\t\t# If the cell (i,j) is not the bottom right cell\n\t\t\t\t\t\tif (i != N) || (j != N)\n\t\t\t\t\t\t\t# If",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend",
    "\t# Initialize the matrix with the first row and column\n\tn = length(cost)\n\tavg = zeros(n,n)\n\tavg[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\t# Fill the matrix\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tavg[i,j] = max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the max average\n\treturn avg[n,n] / n\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n, j in 2:n\n\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\tend\n\treturn dp[n, n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend",
    "\tm = length(cost)\n\tn = length(cost[1])\n\t\n\t# initialize the matrix\n\tmat = zeros(Int64, m, n)\n\tmat[1, 1] = cost[1, 1]\n\t\n\t# fill the first row\n\tfor i in 2:n\n\t\tmat[1, i] = mat[1, i-1] + cost[1, i]\n\tend\n\t\n\t# fill the first column\n\tfor i in 2:m\n\t\tmat[i, 1] = mat[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tmat[i, j] = max(mat[i-1, j], mat[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn mat[m, n] / (m + n - 1)\nend",
    "\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2 * N - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-2)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend",
    "\t\n\t# Initialize the matrix of size N*N\n\tN = length(cost)\n\t\n\t# Initialize the matrix of size N*N\n\tM = zeros(N,N)\n\t\n\t# Initialize the first row\n\tM[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tM[1,i] = M[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Initialize the first column\n\tfor i in 2:N\n\t\tM[i,1] = M[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the matrix\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tM[i,j] = max(M[i-1,j], M[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn M[N,N]/N\nend",
    "\tn = size(cost,1)\n\tm = size(cost,2)\n\t\n\t# create a matrix to store the max average\n\tmaxAvg = zeros(n,m)\n\t\n\t# initialize the first row and column\n\tmaxAvg[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tmaxAvg[i,1] = maxAvg[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tmaxAvg[1,j] = maxAvg[1,j-1] + cost[1,j]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tmaxAvg[i,j] = max(maxAvg[i-1,j], maxAvg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn maxAvg[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n-1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the DP matrix\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n, j in 2:n\n\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn dp[n,m] / (n+m-1)\nend",
    "\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/((n-1)+(m-1)+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tfor i in 2:n\n\t\tcost[i,1] += cost[i-1,1]\n\t\tcost[1,i] += cost[1,i-1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tcost[i,j] += max(cost[i-1,j],cost[i,j-1])\n\tend\n\treturn cost[n,n]/n\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/((N-1)*2 + 1)\nend",
    "\t\"\"\"\n\t\tcost: a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\t\treturn: a path with the maximum average over all existing paths.\n\t\"\"\"\n\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2*N - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\t# Initialize the matrix with the first row and column\n\tn = length(cost)\n\tmatrix = zeros(n, n)\n\tmatrix[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tmatrix[1, i] = matrix[1, i-1] + cost[1, i]\n\t\tmatrix[i, 1] = matrix[i-1, 1] + cost[i, 1]\n\tend\n\t# Fill the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tmatrix[i, j] = cost[i, j] + max(matrix[i-1, j], matrix[i, j-1])\n\t\tend\n\tend\n\treturn matrix[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend",
    "\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend",
    "\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tfor i in 1:n\n\t\tfor j in 1:n\n\t\t\tif i == 1 && j == 1\n\t\t\t\tcontinue\n\t\t\telseif i == 1\n\t\t\t\tcost[i,j] += cost[i,j-1]\n\t\t\telseif j == 1\n\t\t\t\tcost[i,j] += cost[i-1,j]\n\t\t\telse\n\t\t\t\tcost[i,j] += max(cost[i-1,j], cost[i,j-1])\n\t\t\tend\n\t\tend\n\tend\n\treturn cost[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\t# Initialize the matrix\n\tn = length(cost)\n\tm = Matrix{Float64}(undef, n, n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend",
    "\tN = size(cost,1)\n\tM = zeros(Int64,N,N)\n\tM[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tM[1,i] = M[1,i-1] + cost[1,i]\n\t\tM[i,1] = M[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tM[i,j] = max(M[i-1,j],M[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn M[N,N]/N\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(Int64,n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the first row and column\n\tfor i in 2:n\n\t\tcost[i,1] = cost[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tcost[1,j] = cost[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Compute the rest of the table\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tcost[i,j] = max(cost[i-1,j], cost[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn cost[n,m] / (n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n + n - 1)\nend",
    "\tN = size(cost,1)\n\tdp = zeros(Float64,N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/(N+N-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/n\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\t# Initialize the table\n\ttable = zeros(Float64, n, n)\n\ttable[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor j = 2:n\n\t\ttable[1,j] = table[1,j-1] + cost[1,j]\n\tend\n\t# Fill the first column\n\tfor i = 2:n\n\t\ttable[i,1] = table[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the table\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\ttable[i,j] = max(table[i-1,j], table[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn table[n,n] / (2n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 1:n\n\t\tfor j in 1:n\n\t\t\tif i == 1 && j == 1\n\t\t\t\tcontinue\n\t\t\telseif i == 1\n\t\t\t\tdp[i,j] = dp[i,j-1] + cost[i,j]\n\t\t\telseif j == 1\n\t\t\t\tdp[i,j] = dp[i-1,j] + cost[i,j]\n\t\t\telse\n\t\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = copy(cost)\n\tfor i in 2:n\n\t\tdp[i,1] += dp[i-1,1]\n\t\tdp[1,i] += dp[1,i-1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] += max(dp[i-1,j], dp[i,j-1])\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\t# Initialize the matrix of size N*N\n\tN = length(cost)\n\tM = zeros(Int64, N, N)\n\tM[1,1] = cost[1,1]\n\t# Fill the first row and column\n\tfor i in 2:N\n\t\tM[i,1] = M[i-1,1] + cost[i,1]\n\t\tM[1,i] = M[1,i-1] + cost[1,i]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tM[i,j] = max(M[i-1,j], M[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the average\n\treturn M[N,N] / (N*N)\nend",
    "\t\n\t# Initialize the matrix\n\tn = length(cost)\n\tm = Matrix{Int64}(undef, n, n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j], m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the result\n\treturn m[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/(N+N-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = size(cost, 1)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tm = zeros(n,n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j],m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn m[n,n]/(n+n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-2)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tm, n = size(cost)\n\t@assert m == n\n\t@assert m > 0\n\t@assert n > 0\n\t\n\t# dp[i, j] = max average of path from (1, 1) to (i, j)\n\tdp = zeros(Float64, m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:m\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:n\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i = 2:m\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend",
    "\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/(2*N-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# Return the result\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tm, n = size(cost)\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tm = size(cost, 1)\n\tn = size(cost, 2)\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor i in 2:m\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the result\n\treturn dp[n,m] / (n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\t# Initialize the matrix\n\tn = length(cost)\n\tmatrix = zeros(n,n)\n\tmatrix[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tmatrix[1,i] = matrix[1,i-1] + cost[1,i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn matrix[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\t# Initialize the matrix\n\tn = length(cost)\n\tpath = zeros(Int64, n, n)\n\tpath[1, 1] = cost[1, 1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tpath[1, i] = path[1, i-1] + cost[1, i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tpath[i, 1] = path[i-1, 1] + cost[i, 1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tpath[i, j] = max(path[i-1, j], path[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t# Return the result\n\treturn path[n, n] / (n*n)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\t\"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\t# Initialize the matrix\n\tn = length(cost)\n\tm = zeros(Int64, n, n)\n\tm[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j], m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn m[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N] / (2*N - 1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# DP table\n\tdp = zeros(n,m)\n\t\n\t# Base case\n\tdp[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the table\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn dp[n,m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix to store the average cost of each cell\n\tavg = zeros(n,m)\n\t\n\t# Initialize the first cell\n\tavg[1,1] = cost[1,1]\n\t\n\t# Initialize the first row\n\tfor i = 2:m\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Initialize the first column\n\tfor i = 2:n\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Compute the average cost of each cell\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tavg[i,j] = max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the average cost of the last cell\n\treturn avg[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*n)\nend",
    "\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = size(cost,1)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\t\"\"\"\n\tcost: a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n\t\"\"\"\n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = cost[i,j] + max(dp[i-1,j],dp[i,j-1])\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tavg = zeros(n,n)\n\tavg[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tavg[i,j] = max(avg[i-1,j],avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn avg[n,n]/n\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tm, n = size(cost)\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:n\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/n\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\t# Initialize the matrix of the same size as the cost matrix\n\t# to store the maximum average of the path\n\tmax_average = zeros(Int64, size(cost, 1), size(cost, 2))\n\t# Initialize the first row of the max_average matrix\n\tmax_average[1, 1] = cost[1, 1]\n\tfor i in 2:size(cost, 1)\n\t\tmax_average[1, i] = max_average[1, i-1] + cost[1, i]\n\tend\n\t# Initialize the first column of the max_average matrix\n\tfor j in 2:size(cost, 2)\n\t\tmax_average[j, 1] = max_average[j-1, 1] + cost[j, 1]\n\tend\n\t# Compute the maximum average of the path\n\tfor i in 2:size(cost, 1)\n\t\tfor j in 2:size(cost, 2)\n\t\t\tmax_average[i, j] = max(max_average[i-1, j], max_average[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t# Return the maximum average of the path\n\treturn max_average[size(cost, 1), size(cost, 2)] / (size(cost, 1) + size(cost, 2) - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\t# initialize the matrix\n\tn = length(cost)\n\tmatrix = zeros(n, n)\n\tmatrix[1, 1] = cost[1, 1]\n\t# fill the first row\n\tfor i in 2:n\n\t\tmatrix[1, i] = matrix[1, i - 1] + cost[1, i]\n\tend\n\t# fill the first column\n\tfor i in 2:n\n\t\tmatrix[i, 1] = matrix[i - 1, 1] + cost[i, 1]\n\tend\n\t# fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tmatrix[i, j] = max(matrix[i - 1, j], matrix[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t# return the result\n\treturn matrix[n, n] / (n * n)\nend",
    "\tn = length(cost)\n\t# Initialize the DP matrix\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor j = 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the result\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Float64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend",
    "\tm = size(cost, 1)\n\tn = size(cost, 2)\n\t\n\t# create a 2D matrix to store the average cost\n\tavg = zeros(m, n)\n\t\n\t# initialize the first cell\n\tavg[1, 1] = cost[1, 1]\n\t\n\t# initialize the first column\n\tfor i = 2:m\n\t\tavg[i, 1] = avg[i - 1, 1] + cost[i, 1]\n\tend\n\t\n\t# initialize the first row\n\tfor j = 2:n\n\t\tavg[1, j] = avg[1, j - 1] + cost[1, j]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i = 2:m\n\t\tfor j = 2:n\n\t\t\tavg[i, j] = max(avg[i - 1, j], avg[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn avg[m, n] / (m + n - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m] / (n+m-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend",
    "\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n-1)\nend",
    "\tn = length(cost)\n\tdp = Array{Float64}(undef, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n-1)\nend",
    "\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend",
    "\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend",
    "\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend"
  ]
}