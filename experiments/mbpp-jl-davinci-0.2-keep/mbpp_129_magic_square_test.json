{
  "name": "mbpp_129_magic_square_test",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\nfunction magic_square_test(my_matrix::Vector{Vector{Int64}})::Bool \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = magic_square_test;\n\t@test(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == true)\n\t@test(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == true)\n\t@test(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t# check if the matrix is a square\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\tif sum(my_matrix[1]) != sum(my_matrix[2]) || sum(my_matrix[2]) != sum(my_matrix[3])\n\t\treturn false\n\tend\n\tif sum(my_matrix[1]) != sum(my_matrix[:,1]) || sum(my_matrix[1]) != sum(my_matrix[:,2]) || sum(my_matrix[1]) != sum(my_matrix[:,3])\n\t\treturn false\n\tend\n\tif sum(my_matrix[1]) != sum(diag(my_matrix)) || sum(my_matrix[1]) != sum(diag(reverse(my_matrix)))\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# check if the matrix is a square\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\tif sum(my_matrix[1,:]) != sum(my_matrix[2,:]) || sum(my_matrix[1,:]) != sum(my_matrix[3,:])\n\t\treturn false\n\tend\n\tif sum(my_matrix[:,1]) != sum(my_matrix[:,2]) || sum(my_matrix[:,1]) != sum(my_matrix[:,3])\n\t\treturn false\n\tend\n\tif sum(diag(my_matrix)) != sum(diag(my_matrix[:,end:-1:1]))\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# Check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t\n\t# Check if the matrix is a magic square\n\t# Check the sum of each row\n\trow_sum = 0\n\tfor i in 1:length(my_matrix)\n\t\trow_sum = sum(my_matrix[i])\n\t\tif row_sum != sum(my_matrix[1])\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# Check the sum of each column\n\tcolumn_sum = 0\n\tfor i in 1:length(my_matrix)\n\t\tcolumn_sum = sum(my_matrix[:][i])\n\t\tif column_sum != sum(my_matrix[:][1])\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# Check the sum of the diagonals\n\tdiagonal_sum = 0\n\tfor i in 1:length(my_matrix)\n\t\tdiagonal_sum = diagonal_sum + my_matrix[i][i]\n\tend\n\tif diagonal_sum != sum(my_matrix[1])\n\t\treturn false\n\tend\n\t\n\tdiagonal_sum = 0\n\tfor i in 1:length(my_matrix)\n\t\tdiagonal_sum = diagonal_sum + my_matrix[i][length(my_matrix)-i+1]\n\tend\n\tif diagonal_sum != sum(my_matrix[1])\n\t\treturn false\n\tend\n\t\n\treturn true\nend",
    "\t# check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\tif sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9])\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t\n\t# check if the matrix is a magic square\n\t# check the sum of each row\n\tfor i in 1:length(my_matrix)\n\t\tif sum(my_matrix[i]) != sum(my_matrix[1])\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# check the sum of each column\n\tfor i in 1:length(my_matrix[1])\n\t\tif sum(my_matrix[:,i]) != sum(my_matrix[:,1])\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# check the sum of the diagonal\n\tif sum(diag(my_matrix)) != sum(my_matrix[:,1])\n\t\treturn false\n\tend\n\t\n\t# check the sum of the anti-diagonal\n\tif sum(diag(my_matrix[end:-1:1,:])) != sum(my_matrix[:,1])\n\t\treturn false\n\tend\n\t\n\t# if all the conditions are satisfied, the matrix is a magic square\n\treturn true\nend",
    "\t# check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\t# check if the sum of each row is the same\n\trow_sum = sum(my_matrix[1])\n\tfor i in 2:length(my_matrix)\n\t\tif sum(my_matrix[i]) != row_sum\n\t\t\treturn false\n\t\tend\n\tend\n\t# check if the sum of each column is the same\n\tcolumn_sum = sum(my_matrix[1])\n\tfor i in 2:length(my_matrix)\n\t\tif sum(my_matrix[i]) != column_sum\n\t\t\treturn false\n\t\tend\n\tend\n\t# check if the sum of each diagonal is the same\n\tdiagonal_sum = sum(diag(my_matrix))\n\tif sum(diag(my_matrix')) != diagonal_sum\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# Check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# Check if the matrix is a magic square\n\tif sum(my_matrix[1]) != sum(my_matrix[2]) || sum(my_matrix[1]) != sum(my_matrix[3])\n\t\treturn false\n\tend\n\tif sum(my_matrix[1]) != sum(my_matrix[1,:]) || sum(my_matrix[1]) != sum(my_matrix[2,:]) || sum(my_matrix[1]) != sum(my_matrix[3,:])\n\t\treturn false\n\tend\n\tif sum(my_matrix[1]) != sum(my_matrix[1,1:3:end]) || sum(my_matrix[1]) != sum(my_matrix[1,2:3:end])\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t\"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n\t# Calculate the sum of the first row\n\tsum_row = sum(my_matrix[1,:])\n\t# Calculate the sum of the first column\n\tsum_col = sum(my_matrix[:,1])\n\t# Calculate the sum of the diagonal\n\tsum_diag = sum(diag(my_matrix))\n\t# Calculate the sum of the anti-diagonal\n\tsum_anti_diag = sum(diag(reverse(my_matrix,dims=1)))\n\t# Check if the sum of the first row is equal to the sum of the first column\n\tif sum_row == sum_col\n\t\t# Check if the sum of the first row is equal to the sum of the diagonal\n\t\tif sum_row == sum_diag\n\t\t\t# Check if the sum of the first row is equal to the sum of the anti-diagonal\n\t\t\tif sum_row == sum_anti_diag\n\t\t\t\t# Check if the sum of the first column is equal to the sum of the diagonal\n\t\t\t\tif sum_col == sum_diag\n\t\t\t\t\t# Check if the sum of the first column is equal to the sum of the anti-diagonal\n\t\t\t\t\tif sum_col == sum_anti_diag\n\t\t\t\t\t\t# Check if the sum of the diagonal is equal to the sum of the anti-diagonal\n\t\t\t\t\t\tif sum_diag == sum_anti_diag\n\t\t\t\t\t\t\t# Return true if all the conditions are satisfied\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t# Return false if any of the conditions are not satisfied\n\treturn false\nend",
    "\t# Check if the matrix is a square matrix\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\t\n\t# Check if the matrix is a magic square\n\tn = size(my_matrix)[1]\n\tsum_row = 0\n\tsum_col = 0\n\tsum_diag = 0\n\tsum_anti_diag = 0\n\t\n\tfor i in 1:n\n\t\tsum_row = 0\n\t\tsum_col = 0\n\t\tfor j in 1:n\n\t\t\tsum_row += my_matrix[i][j]\n\t\t\tsum_col += my_matrix[j][i]\n\t\tend\n\t\tif sum_row != sum_col\n\t\t\treturn false\n\t\tend\n\t\tsum_diag += my_matrix[i][i]\n\t\tsum_anti_diag += my_matrix[i][n-i+1]\n\tend\n\t\n\tif sum_diag != sum_anti_diag\n\t\treturn false\n\tend\n\t\n\treturn true\nend",
    "\t\"\"\"\n\tTests whether a matrix is a magic square.\n\t\"\"\"\n\t# Check that the matrix is square\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t\n\t# Check that the matrix is filled with integers\n\tfor i in 1:length(my_matrix)\n\t\tfor j in 1:length(my_matrix[i])\n\t\t\tif typeof(my_matrix[i][j]) != Int64\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# Check that the matrix is filled with unique integers\n\tfor i in 1:length(my_matrix)\n\t\tfor j in 1:length(my_matrix[i])\n\t\t\tfor k in 1:length(my_matrix)\n\t\t\t\tfor l in 1:length(my_matrix[k])\n\t\t\t\t\tif (i != k || j != l) && my_matrix[i][j] == my_matrix[k][l]\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# Check that the sum of the rows is equal\n\trow_sum = sum(my_matrix[1])\n\tfor i in 2:length(my_matrix)\n\t\tif sum(my_matrix[i]) != row_sum\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# Check that the sum of the columns is equal\n\tfor i in 1:length(my_matrix)\n\t\tcolumn_sum = 0\n\t\tfor j in 1:length(my_matrix[i])\n\t\t\tcolumn_sum += my_matrix[j][i]\n\t\tend\n\t\tif column_sum != row_sum\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t# Check that the sum of the diagonals is equal\n\tdiagonal_sum = 0\n\tfor i in 1:length(my_matrix)\n\t\tdiagonal_sum += my_matrix[i][",
    "\t\"\"\"\n\tTest whether the matrix is a magic square.\n\t\"\"\"\n\tn = length(my_matrix)\n\tif n != length(my_matrix[1])\n\t\treturn false\n\tend\n\ts = sum(my_matrix[1])\n\tfor i in 1:n\n\t\tif sum(my_matrix[i]) != s\n\t\t\treturn false\n\t\tend\n\t\tif sum(my_matrix[j][i] for j in 1:n) != s\n\t\t\treturn false\n\t\tend\n\tend\n\tif sum(my_matrix[i][i] for i in 1:n) != s\n\t\treturn false\n\tend\n\tif sum(my_matrix[i][n-i+1] for i in 1:n) != s\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# check if the matrix is a square\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\tif sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9])\n\t\tif sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9])\n\t\t\tif sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n\t# check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\t# calculate the sum of the first row\n\tsum_row = sum(my_matrix[1])\n\tfor i in 2:length(my_matrix)\n\t\tif sum(my_matrix[i]) != sum_row\n\t\t\treturn false\n\t\tend\n\tend\n\tfor i in 1:length(my_matrix)\n\t\tif sum(my_matrix[:,i]) != sum_row\n\t\t\treturn false\n\t\tend\n\tend\n\tif sum(diag(my_matrix)) != sum_row\n\t\treturn false\n\tend\n\tif sum(diag(my_matrix[:,end:-1:1])) != sum_row\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# check if the matrix is a square matrix\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\tif sum(my_matrix[1,:]) != sum(my_matrix[2,:]) || sum(my_matrix[1,:]) != sum(my_matrix[3,:]) || sum(my_matrix[2,:]) != sum(my_matrix[3,:])\n\t\treturn false\n\tend\n\tif sum(my_matrix[:,1]) != sum(my_matrix[:,2]) || sum(my_matrix[:,1]) != sum(my_matrix[:,3]) || sum(my_matrix[:,2]) != sum(my_matrix[:,3])\n\t\treturn false\n\tend\n\tif sum(diag(my_matrix)) != sum(diag(my_matrix[:,end:-1:1]))\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# check if the matrix is a square matrix\n\tif length(my_matrix) != length(my_matrix[1])\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\t# check if the sum of each row is equal\n\tsum_row = sum(my_matrix[1])\n\tfor i = 2:length(my_matrix)\n\t\tif sum(my_matrix[i]) != sum_row\n\t\t\treturn false\n\t\tend\n\tend\n\t# check if the sum of each column is equal\n\tsum_column = sum(my_matrix[1,:])\n\tfor i = 2:length(my_matrix)\n\t\tif sum(my_matrix[:,i]) != sum_column\n\t\t\treturn false\n\t\tend\n\tend\n\t# check if the sum of each diagonal is equal\n\tsum_diagonal = sum(diag(my_matrix))\n\tif sum(diag(my_matrix,1)) != sum_diagonal\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t# check if the matrix is a square matrix\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\t\n\t# check if the matrix is a magic square\n\tn = size(my_matrix)[1]\n\tsum = 0\n\tfor i = 1:n\n\t\tsum = sum + my_matrix[i][1]\n\tend\n\tfor i = 1:n\n\t\tsum_row = 0\n\t\tsum_col = 0\n\t\tfor j = 1:n\n\t\t\tsum_row = sum_row + my_matrix[i][j]\n\t\t\tsum_col = sum_col + my_matrix[j][i]\n\t\tend\n\t\tif sum_row != sum || sum_col != sum\n\t\t\treturn false\n\t\tend\n\tend\n\tsum_diag = 0\n\tsum_diag_2 = 0\n\tfor i = 1:n\n\t\tsum_diag = sum_diag + my_matrix[i][i]\n\t\tsum_diag_2 = sum_diag_2 + my_matrix[i][n-i+1]\n\tend\n\tif sum_diag != sum || sum_diag_2 != sum\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t\"\"\"\n\tThis function takes a matrix and returns a boolean value.\n\t\"\"\"\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\tn = size(my_matrix)[1]\n\tsum_row = sum(my_matrix[1,:])\n\tfor i in 2:n\n\t\tif sum(my_matrix[i,:]) != sum_row\n\t\t\treturn false\n\t\tend\n\tend\n\tfor j in 1:n\n\t\tif sum(my_matrix[:,j]) != sum_row\n\t\t\treturn false\n\t\tend\n\tend\n\tif sum(diag(my_matrix)) != sum_row\n\t\treturn false\n\tend\n\tif sum(diag(my_matrix[:,end:-1:1])) != sum_row\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t\"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\t\n\tn = size(my_matrix)[1]\n\t\n\t# check if all elements are unique\n\tif length(unique(my_matrix)) != n^2\n\t\treturn false\n\tend\n\t\n\t# check if all elements are between 1 and n^2\n\tif maximum(my_matrix) > n^2 || minimum(my_matrix) < 1\n\t\treturn false\n\tend\n\t\n\t# check if all rows sum to the same value\n\trow_sums = [sum(row) for row in my_matrix]\n\tif length(unique(row_sums)) != 1\n\t\treturn false\n\tend\n\t\n\t# check if all columns sum to the same value\n\tcolumn_sums = [sum(column) for column in transpose(my_matrix)]\n\tif length(unique(column_sums)) != 1\n\t\treturn false\n\tend\n\t\n\t# check if the diagonals sum to the same value\n\tdiagonal_sums = [sum(diag(my_matrix)) sum(diag(reverse(my_matrix, dims=1))) ]\n\tif length(unique(diagonal_sums)) != 1\n\t\treturn false\n\tend\n\t\n\treturn true\nend",
    "\t# check if the matrix is a square matrix\n\tif size(my_matrix, 1) != size(my_matrix, 2)\n\t\treturn false\n\tend\n\t# check if the matrix is a magic square\n\tif sum(my_matrix[1,:]) != sum(my_matrix[2,:]) || sum(my_matrix[1,:]) != sum(my_matrix[3,:]) || sum(my_matrix[2,:]) != sum(my_matrix[3,:])\n\t\treturn false\n\tend\n\tif sum(my_matrix[:,1]) != sum(my_matrix[:,2]) || sum(my_matrix[:,1]) != sum(my_matrix[:,3]) || sum(my_matrix[:,2]) != sum(my_matrix[:,3])\n\t\treturn false\n\tend\n\tif sum(diag(my_matrix)) != sum(diag(my_matrix'))\n\t\treturn false\n\tend\n\treturn true\nend",
    "\t\"\"\"\n\tFunction to test whether the matrix is a magic square.\n\t\"\"\"\n\t# Check whether the matrix is a square matrix\n\tif size(my_matrix)[1] != size(my_matrix)[2]\n\t\treturn false\n\tend\n\t# Check whether the sum of each row is equal\n\tfor i in 1:size(my_matrix)[1]\n\t\tif sum(my_matrix[i,:]) != sum(my_matrix[1,:])\n\t\t\treturn false\n\t\tend\n\tend\n\t# Check whether the sum of each column is equal\n\tfor i in 1:size(my_matrix)[1]\n\t\tif sum(my_matrix[:,i]) != sum(my_matrix[:,1])\n\t\t\treturn false\n\t\tend\n\tend\n\t# Check whether the sum of the diagonal is equal\n\tif sum(diag(my_matrix)) != sum(my_matrix[:,1])\n\t\treturn false\n\tend\n\t# Check whether the sum of the anti-diagonal is equal\n\tif sum(diag(reverse(my_matrix,dims=1))) != sum(my_matrix[:,1])\n\t\treturn false\n\tend\n\treturn true\nend"
  ]
}