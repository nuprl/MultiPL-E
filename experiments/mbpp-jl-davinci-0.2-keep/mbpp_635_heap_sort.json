{
  "name": "mbpp_635_heap_sort",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = heap_sort;\n\t@test(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\n\t@test(candidate([7, 1, 9, 5]) == [1, 5, 7, 9])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\t# Build the heap\n\theap = build_heap(iterable)\n\t# Sort the heap\n\tfor i in length(heap):-1:1\n\t\t# Swap the first and last elements\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\t# Re-heapify the heap\n\t\theap = heapify(heap, 1, i-1)\n\tend\n\t# Return the sorted heap\n\treturn heap\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort algorithm.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = floor(Int64, n/2):-1:1\n\t\titerable = heapify(iterable, i, n)\n\tend\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\titerable = heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t# Build a max heap from the input data.\n\theap = build_max_heap(iterable)\n\t# The following loop maintains the invariants that a[1:end-1] is a heap and every element\n\t# beyond the end is greater than everything before it (so a[end:end] is a heap).\n\tfor i in length(heap):-1:2\n\t\t# The child indices of the root are 2*i and 2*i + 1.\n\t\t# The largest of these children is the root if the heap property holds.\n\t\t# If one of the children is larger, swap the elements and recurse.\n\t\t# The child index of the root is 2*i.\n\t\tif heap[2*i] > heap[i]\n\t\t\t# Swap the elements.\n\t\t\ttemp = heap[i]\n\t\t\theap[i] = heap[2*i]\n\t\t\theap[2*i] = temp\n\t\t\t# Recurse.\n\t\t\theap = max_heapify(heap, 2*i)\n\t\tend\n\t\t# The child index of the root is 2*i + 1.\n\t\tif heap[2*i + 1] > heap[i]\n\t\t\t# Swap the elements.\n\t\t\ttemp = heap[i]\n\t\t\theap[i] = heap[2*i + 1]\n\t\t\theap[2*i + 1] = temp\n\t\t\t# Recurse.\n\t\t\theap = max_heapify(heap, 2*i + 1)\n\t\tend\n\tend\n\t# Return the sorted data.\n\treturn heap\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\tn = length(iterable)\n\tfor i = n:-1:2\n\t\titerable = swap(iterable, 1, i)\n\t\titerable = heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tThis function sorts the given list using the heap sort algorithm.\n\t\"\"\"\n\t# Create a heap\n\theap = Heap(iterable)\n\t# Sort the heap\n\tsorted_heap = sort(heap)\n\t# Return the sorted heap\n\treturn sorted_heap\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\t# Build the heap\n\theap = build_heap(iterable)\n\t# Sort the heap\n\theap_size = length(heap)\n\tfor i in length(heap):-1:1\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap_size -= 1\n\t\theap = max_heapify(heap, 1, heap_size)\n\tend\n\treturn heap\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = build_heap(iterable)\n\tfor i in length(heap):-1:2\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap = heapify(heap, 1, i-1)\n\tend\n\treturn heap\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = build_max_heap(iterable)\n\tfor i in length(iterable):-1:2\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap = max_heapify(heap, 1, i-1)\n\tend\n\treturn heap\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tThis function sorts the given list using heap sort algorithm.\n\t\"\"\"\n\t# Build heap\n\theapify(iterable)\n\tend = length(iterable)\n\twhile end > 1\n\t\t# Swap the first and last element\n\t\titerable[1], iterable[end] = iterable[end], iterable[1]\n\t\tend -= 1\n\t\t# Sift down the new root element to the correct position\n\t\tsift_down(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\t# Build max heap.\n\tbuild_max_heap(iterable)\n\t# Extract max element from heap.\n\tfor i in length(iterable):-1:2\n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\tmax_heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSorts the given list using heap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = build_heap(iterable)\n\tsorted_list = Vector{Int64}()\n\tfor i in 1:length(heap)\n\t\tpush!(sorted_list, heap[1])\n\t\theap[1] = heap[end]\n\t\tpop!(heap)\n\t\theap = heapify(heap, 1)\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap()\n\tfor i in iterable\n\t\tpush!(heap, i)\n\tend\n\tsorted = []\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tThis function sorts the given list using Heap Sort algorithm.\n\t\"\"\"\n\theapify(iterable)\n\tend = length(iterable)\n\twhile end > 1\n\t\titerable[1], iterable[end] = iterable[end], iterable[1]\n\t\tend -= 1\n\t\tsift_down(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\t# Build a maxheap. \n\tbuild_max_heap(iterable)\n\theapsize = length(iterable)\n\tfor i = heapsize:-1:2\n\t\t# Swap the first element with the last element.\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\t# Decrease the size of heap by 1.\n\t\theapsize -= 1\n\t\t# Heapify the root element.\n\t\tmax_heapify(iterable, 1, heapsize)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = floor(Int64, n/2):-1:1\n\t\theapify(iterable, i, n)\n\tend\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\t# Build a maxheap. \n\tbuild_max_heap(iterable)\n\t# One by one extract elements \n\tfor i = length(iterable):-1:2\n\t\t# Move current root to end \n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\t# call max heapify on the reduced heap \n\t\tmax_heapify(iterable, 1, i - 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort implementation.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t# Build a max heap from the input data.\n\theap = build_max_heap(iterable)\n\t# The following loop maintains the invariants that a[:end] is a heap and every element\n\t# beyond end is greater than everything before it (so a[end:end] is a sorted subarray).\n\tend = length(iterable)\n\twhile end > 1\n\t\t# The smallest item in the heap is stored at the root. Replace it with the last item\n\t\t# of the heap followed by reducing the size of heap by 1.\n\t\titerable[1], iterable[end] = iterable[end], iterable[1]\n\t\tend -= 1\n\t\t# Put the heap back in max-heap order.\n\t\theapify(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t# Build a max heap.\n\theapify(iterable)\n\tend = length(iterable)\n\twhile end \u2265 1\n\t\titerable[end], iterable[1] = iterable[1], iterable[end]\n\t\tend -= 1\n\t\tsift_down(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort is a comparison based sorting technique based on Binary Heap data structure. \n\tIt is similar to selection sort where we first find the maximum element and place the maximum element at the end. \n\tWe repeat the same process for remaining element.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t# Build the heap\n\tfor i in (1:length(iterable))\n\t\theapify(iterable, i)\n\tend\n\t# Sort the heap\n\tfor i in (length(iterable):-1:1)\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, 1, i)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\t# Build a maxheap. \n\tbuild_max_heap(iterable)\n\t# One by one extract elements \n\tfor i = length(iterable):-1:2\n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\tmax_heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpop!(heap)\n\t\tpush!(sorted_list, heap.heap[1])\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tThis function sorts the given list using heap sort.\n\t\"\"\"\n\theapify(iterable)\n\tend_index = length(iterable)\n\twhile end_index > 1\n\t\titerable[1], iterable[end_index] = iterable[end_index], iterable[1]\n\t\tend_index -= 1\n\t\tsift_down(iterable, 1, end_index)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort.\n\t\"\"\"\n\t# build max heap\n\theap = build_max_heap(iterable)\n\t# sort\n\tfor i in length(heap):length(heap)-1\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap = max_heapify(heap, 1, i-1)\n\tend\n\treturn heap\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\t# Build a maxheap. \n\tbuild_max_heap(iterable)\n\t# One by one extract elements \n\tfor i = length(iterable):-1:2\n\t\t# Move current root to end \n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\t# call max heapify on the reduced heap \n\t\theapify(iterable, 1, i - 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\t# Build the heap\n\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\t# Extract the elements\n\tfor i in n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\t# Build the heap\n\theapify(iterable)\n\t# Sort the heap\n\tfor i in length(iterable):-1:2\n\t\t# Swap the first and last element\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\t# Restore the heap property\n\t\tsift_down(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1, 1)\n\tend\n\treturn iterable\nend",
    "\t# Build a max heap\n\tfor i in 1:length(iterable)\n\t\theapify(iterable, length(iterable), i)\n\tend\n\t# One by one extract elements\n\tfor i in length(iterable):-1:1\n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given iterable using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = heap.pop()\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn [pop!(heap) for i in 1:length(iterable)]\nend",
    "\t\"\"\"\n\tSorts the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted_list[i] = heap.pop()\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tThis function sorts the given list using heap sort algorithm.\n\t\"\"\"\n\tn = length(iterable)\n\t# Build a maxheap.\n\tfor i = div(n, 2):-1:1\n\t\titerable = heapify(iterable, n, i)\n\tend\n\t# One by one extract elements\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\titerable = heapify(iterable, i - 1, 1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t# Build a max heap. \n\tbuild_max_heap(iterable)\n\t# One by one extract elements \n\tfor i in length(iterable):-1:2\n\t\t# Move current root to end \n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\t# call max heapify on the reduced heap \n\t\tmax_heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "    heap = Heap()\n    for i in iterable\n        push!(heap, i)\n    end\n    return [pop!(heap) for i in 1:length(iterable)]\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap Sort\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = div(n, 2):-1:1\n\t\theapify(iterable, n, i)\n\tend\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t# Build a max heap\n\theapify(iterable)\n\tend_index = length(iterable)\n\tfor i in (end_index:-1:2)\n\t\t# Swap the first and last element\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\t# Heapify the reduced heap\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\tn = length(iterable)\n\theapify(iterable, n)\n\tfor i in n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tsorted_list = push!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort the given iterable.\n\t\"\"\"\n\tn = length(iterable)\n\tbuild_max_heap(iterable)\n\tfor i in n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\tn -= 1\n\t\tmax_heapify(iterable, 1, n)\n\tend\n\treturn iterable\nend",
    "\theap = build_max_heap(iterable)\n\tfor i in length(heap):-1:2\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap = max_heapify(heap, 1, i-1)\n\tend\n\treturn heap\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\t# Build the heap\n\tfor i in 1:length(iterable)\n\t\theapify(iterable, i)\n\tend\n\t# Sort the heap\n\tfor i in length(iterable):-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tThis function sorts the given list using heap sort algorithm.\n\t\"\"\"\n\tn = length(iterable)\n\tbuild_max_heap(iterable, n)\n\tfor i in n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\tn -= 1\n\t\tmax_heapify(iterable, 1, n)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = heap.pop()\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = []\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t# build heap\n\theap = build_heap(iterable)\n\t# sort heap\n\tsorted_heap = sort_heap(heap)\n\treturn sorted_heap\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted_list[i] = pop!(heap)\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap{Int64}(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(heap.heap))\n\tfor i in 1:length(heap.heap)\n\t\tsorted[i] = heap.pop()\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\t# Build the heap\n\tfor i in length(iterable):-1:1\n\t\theapify(iterable, i, length(iterable))\n\tend\n\t# Sort the heap\n\tfor i in length(iterable):-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\t# Build the heap\n\theapify(iterable)\n\t# Sort the heap\n\tfor i in length(iterable):-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\tsift_down(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\tn = length(iterable)\n\tfor i = 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i = n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tSort the given iterable using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = build_max_heap(iterable)\n\tfor i in length(heap):-1:1\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap = max_heapify(heap, 1, i)\n\tend\n\treturn heap\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn [heap.pop() for i in 1:length(iterable)]\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = build_heap(iterable)\n\tsorted_list = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop_max!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\tn = length(iterable)\n\theapify(iterable, n)\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i-1)\n\tend\n\treturn iterable\nend",
    "\theap = build_heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tsorted_list = [heap[1]] + sorted_list\n\t\theap[1] = heap[end]\n\t\theap = heap[1:end-1]\n\t\theap = heapify(heap, 1)\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpop!(heap)\n\t\tpush!(sorted_list, heap.heap[1])\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t# Build a maxheap. \n\theapify(iterable)\n\tend = length(iterable)\n\twhile end >= 2 \n\t\t# Swap\n\t\titerable[1], iterable[end] = iterable[end], iterable[1]\n\t\t# Heapify root element to get highest element at root again.\n\t\tend -= 1\n\t\tsift_down(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap_size = length(iterable)\n\tbuild_max_heap(iterable)\n\tfor i in length(iterable):-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theap_size = heap_size - 1\n\t\tmax_heapify(iterable, 1, heap_size)\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t# Build a max heap from the input data.\n\theap = build_max_heap(iterable)\n\t# The following loop maintains the invariants that a[:end\u22121] is a heap and every element\n\t# beyond end is greater than everything before it (so a[end:end] is a sorted subarray).\n\tfor end = length(heap)\n\t\t# a[1] is the root and largest value. The swap moves it in front of the sorted elements.\n\t\theap[1], heap[end] = heap[end], heap[1]\n\t\t# the heap size is reduced by one\n\t\tend -= 1\n\t\t# the swap ruined the heap property, so restore it\n\t\theap = max_heapify(heap, 1, end)\n\tend\n\treturn heap\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theapify(iterable)\n\tend = length(iterable)\n\twhile end > 1\n\t\titerable[1], iterable[end] = iterable[end], iterable[1]\n\t\tend -= 1\n\t\tsift_down(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort implementation.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort implementation.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t# build a max heap\n\theapify(iterable)\n\t# sort the heap\n\tfor i in length(iterable):-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\tsift_down(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\t# Build max heap\n\tbuild_max_heap(iterable)\n\t# Heap sort\n\tfor i in length(iterable):-1:2\n\t\t# Swap the first and last element\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\t# Heapify the heap\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.heap_sort()\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort algorithm.\n\t\"\"\"\n\theapify(iterable)\n\tend = length(iterable)\n\twhile end > 1\n\t\titerable[1], iterable[end] = iterable[end], iterable[1]\n\t\tend -= 1\n\t\tsift_down(iterable, 1, end)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\t# build heap\n\theap = build_heap(iterable)\n\t# sort\n\tfor i in length(heap):-1:1\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\theap = max_heapify(heap, 1, i-1)\n\tend\n\treturn heap\nend",
    "\t\"\"\"\n\tHeap sort function.\n\t\"\"\"\n\t# Build a maxheap. \n\tbuild_max_heap(iterable)\n\t# One by one extract elements \n\tfor i = length(iterable):-1:2\n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given iterable using heap sort.\n\t\"\"\"\n\t# Build the heap\n\theap = build_heap(iterable)\n\t# Sort the heap\n\tsorted_heap = sort_heap(heap)\n\t# Return the sorted heap\n\treturn sorted_heap\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\t# Build the heap\n\tfor i in 1:length(iterable)\n\t\theapify(iterable, length(iterable), i)\n\tend\n\t# Extract elements from the heap\n\tfor i in length(iterable):-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list,pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort implementation.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\t# Build a maxheap. \n\tbuild_max_heap(iterable)\n\t# One by one extract elements \n\tfor i = length(iterable):-1:2\n\t\t# Move current root to end \n\t\titerable[i], iterable[1] = iterable[1], iterable[i]\n\t\t# call max heapify on the reduced heap \n\t\tmax_heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tsorted = push!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = build_heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile length(heap) > 0\n\t\tpush!(sorted_list, heap[1])\n\t\theap[1] = heap[end]\n\t\tpop!(heap)\n\t\theap = heapify(heap, 1)\n\tend\n\treturn sorted_list\nend"
  ]
}