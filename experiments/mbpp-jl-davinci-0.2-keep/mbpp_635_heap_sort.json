{
  "name": "mbpp_635_heap_sort",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = heap_sort;\n\t@test(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\n\t@test(candidate([7, 1, 9, 5]) == [1, 5, 7, 9])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tHeap sort the given list.\n\t\"\"\"\n\t# Build the heap\n\theap = build_heap(iterable)\n\t# Sort the heap\n\tfor i in length(heap):-1:1\n\t\t# Swap the first and last elements\n\t\theap[1], heap[i] = heap[i], heap[1]\n\t\t# Re-heapify the heap\n\t\theap = heapify(heap, 1, i-1)\n\tend\n\t# Return the sorted heap\n\treturn heap\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort algorithm.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = floor(Int64, n/2):-1:1\n\t\titerable = heapify(iterable, i, n)\n\tend\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\titerable = heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t# Build a max heap from the input data.\n\theap = build_max_heap(iterable)\n\t# The following loop maintains the invariants that a[1:end-1] is a heap and every element\n\t# beyond the end is greater than everything before it (so a[end:end] is a heap).\n\tfor i in length(heap):-1:2\n\t\t# The child indices of the root are 2*i and 2*i + 1.\n\t\t# The largest of these children is the root if the heap property holds.\n\t\t# If one of the children is larger, swap the elements and recurse.\n\t\t# The child index of the root is 2*i.\n\t\tif heap[2*i] > heap[i]\n\t\t\t# Swap the elements.\n\t\t\ttemp = heap[i]\n\t\t\theap[i] = heap[2*i]\n\t\t\theap[2*i] = temp\n\t\t\t# Recurse.\n\t\t\theap = max_heapify(heap, 2*i)\n\t\tend\n\t\t# The child index of the root is 2*i + 1.\n\t\tif heap[2*i + 1] > heap[i]\n\t\t\t# Swap the elements.\n\t\t\ttemp = heap[i]\n\t\t\theap[i] = heap[2*i + 1]\n\t\t\theap[2*i + 1] = temp\n\t\t\t# Recurse.\n\t\t\theap = max_heapify(heap, 2*i + 1)\n\t\tend\n\tend\n\t# Return the sorted data.\n\treturn heap\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i in 1:n\n\t\theapify(iterable, n, i)\n\tend\n\tfor i in n:-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, i, 1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\tn = length(iterable)\n\tfor i = n:-1:2\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\theapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\tn = length(iterable)\n\tfor i = n:-1:2\n\t\titerable = swap(iterable, 1, i)\n\t\titerable = heapify(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tThis function sorts the given list using the heap sort algorithm.\n\t\"\"\"\n\t# Create a heap\n\theap = Heap(iterable)\n\t# Sort the heap\n\tsorted_heap = sort(heap)\n\t# Return the sorted heap\n\treturn sorted_heap\nend",
    "\theap = Heap(iterable)\n\tsorted_list = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given list using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_list = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_list, pop!(heap))\n\tend\n\treturn sorted_list\nend",
    "\t\"\"\"\n\tHeap sort algorithm.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend"
  ]
}