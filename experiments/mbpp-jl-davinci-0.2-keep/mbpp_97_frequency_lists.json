{
  "name": "mbpp_97_frequency_lists",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\nfunction frequency_lists(list1::Vector{Vector{Int64}})::Dict{Int64, Int64}> \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = frequency_lists;\n\t@test(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == Dict(1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1))\n\t@test(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == Dict(1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1))\n\t@test(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == Dict(20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1))\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tFunction to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\t# Initialize dictionary\n\tfreq_dict = Dict{Int64, Int64}()\n\t# Flatten list\n\tflat_list = [item for sublist in list1 for item in sublist]\n\t# Iterate over flattened list\n\tfor i in flat_list\n\t\t# If element is not in dictionary, add it\n\t\tif i in keys(freq_dict) == false\n\t\t\tfreq_dict[i] = 1\n\t\t# If element is in dictionary, increment value\n\t\telse\n\t\t\tfreq_dict[i] += 1\n\t\tend\n\tend\n\t# Return dictionary\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tdict1 = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(dict1, list1[i][j])\n\t\t\t\tdict1[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tdict1[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dict1\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq = Dict{Int64, Int64}()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq, j)\n\t\t\t\tfreq[j] += 1\n\t\t\telse\n\t\t\t\tfreq[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq\nend",
    "\t# create a dictionary\n\tfreq_dict = Dict{Int64, Int64}()\n\t# loop through the list\n\tfor i in 1:length(list1)\n\t\t# loop through the sublist\n\t\tfor j in 1:length(list1[i])\n\t\t\t# if the element is not in the dictionary, add it\n\t\t\tif !haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\t# if the element is in the dictionary, add 1 to the value\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t# Initialize a dictionary\n\tfreq_dict = Dict{Int64, Int64}()\n\t\n\t# Loop through the list\n\tfor i in list1\n\t\t# Loop through the sublist\n\t\tfor j in i\n\t\t\t# If the element is already in the dictionary, add 1 to the value\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\t# If the element is not in the dictionary, add it with a value of 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# Return the dictionary\n\treturn freq_dict\nend",
    "\t# create a dictionary to store the frequency of each element\n\tfrequency_dict = Dict{Int64, Int64}()\n\t# loop through each sublist\n\tfor sublist in list1\n\t\t# loop through each element in the sublist\n\t\tfor element in sublist\n\t\t\t# if the element is already in the dictionary, increment the value by 1\n\t\t\tif element in keys(frequency_dict)\n\t\t\t\tfrequency_dict[element] += 1\n\t\t\t# if the element is not in the dictionary, add it and set the value to 1\n\t\t\telse\n\t\t\t\tfrequency_dict[element] = 1\n\t\t\tend\n\t\tend\n\tend\n\t# return the dictionary\n\treturn frequency_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t# Initialize dictionary\n\tdict1 = Dict{Int64, Int64}()\n\t# Iterate through list of lists\n\tfor i in 1:length(list1)\n\t\t# Iterate through each list\n\t\tfor j in 1:length(list1[i])\n\t\t\t# If element is already in dictionary, increment value\n\t\t\tif haskey(dict1, list1[i][j])\n\t\t\t\tdict1[list1[i][j]] += 1\n\t\t\t# If element is not in dictionary, add it\n\t\t\telse\n\t\t\t\tdict1[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\t# Return dictionary\n\treturn dict1\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\t\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfrequency_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(frequency_dict, list1[i][j])\n\t\t\t\tfrequency_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfrequency_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn frequency_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in list1\n\t\tfor j in i\n\t\t\tif haskey(freq_dict, j)\n\t\t\t\tfreq_dict[j] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[j] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend",
    "\t\"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n\tfreq_dict = Dict{Int64, Int64}()\n\tfor i in 1:length(list1)\n\t\tfor j in 1:length(list1[i])\n\t\t\tif haskey(freq_dict, list1[i][j])\n\t\t\t\tfreq_dict[list1[i][j]] += 1\n\t\t\telse\n\t\t\t\tfreq_dict[list1[i][j]] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn freq_dict\nend"
  ]
}