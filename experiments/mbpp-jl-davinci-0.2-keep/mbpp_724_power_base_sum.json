{
  "name": "mbpp_724_power_base_sum",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\nfunction power_base_sum(base::Int64, power::Int64)::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = power_base_sum;\n\t@test(candidate(2, 100) == 115)\n\t@test(candidate(8, 10) == 37)\n\t@test(candidate(8, 15) == 62)\n\t@test(candidate(3, 3) == 9)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\t\n\t# Calculate the base to the specified power.\n\tbase_power = base ^ power\n\t\n\t# Convert the base to the specified power to a string.\n\tbase_power_string = string(base_power)\n\t\n\t# Initialize the sum of all digits of the base to the specified power.\n\tbase_power_sum = 0\n\t\n\t# Iterate through the string of the base to the specified power.\n\tfor i in 1:length(base_power_string)\n\t\t\n\t\t# Convert the character to an integer.\n\t\tbase_power_digit = parse(Int64, base_power_string[i])\n\t\t\n\t\t# Add the digit to the sum.\n\t\tbase_power_sum += base_power_digit\n\tend\n\t\n\t# Return the sum of all digits of the base to the specified power.\n\treturn base_power_sum\nend",
    "\treturn sum(digits(base^power))\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tresult = base ^ power\n\tsum = 0\n\twhile result > 0\n\t\tsum += result % 10\n\t\tresult = result \u00f7 10\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tif power == 0\n\t\treturn 1\n\telse\n\t\treturn base^power |> sum_digits\n\tend\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tresult = base ^ power\n\tsum = 0\n\twhile result > 0\n\t\tsum += result % 10\n\t\tresult = result \u00f7 10\n\tend\n\treturn sum\nend",
    "\tsum = 0\n\tfor i in 1:power\n\t\tsum += sum_digits(base^i)\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tresult = base ^ power\n\tsum = 0\n\twhile result > 0\n\t\tsum += result % 10\n\t\tresult = result \u00f7 10\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\treturn sum(digits(base^power))\nend",
    "\tsum = 0\n\tfor i in 1:power\n\t\tsum += sum_digits(base^i)\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tsum = 0\n\tfor i in 1:power\n\t\tsum += sum_digits(base^i)\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tThis function takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tif power == 0\n\t\treturn 1\n\telse\n\t\treturn base * power_base_sum(base, power - 1)\n\tend\nend",
    "\tsum = 0\n\tfor i in string(base^power)\n\t\tsum += parse(Int64, i)\n\tend\n\treturn sum\nend",
    "    sum = 0\n    for i in string(base^power)\n        sum += parse(Int64, i)\n    end\n    return sum\nend",
    "\tresult = 0\n\tfor i in 1:power\n\t\tresult += sum(digits(base^i))\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\treturn sum(digits(base^power))\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\t# Initialize the sum\n\tsum = 0\n\t# Calculate the base to the power\n\tbase_power = base^power\n\t# Convert the base to the power to a string\n\tbase_power_string = string(base_power)\n\t# Loop through the string\n\tfor i in 1:length(base_power_string)\n\t\t# Add the current digit to the sum\n\t\tsum += parse(Int64, base_power_string[i])\n\tend\n\t# Return the sum\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tresult = base^power\n\tsum = 0\n\twhile result > 0\n\t\tsum += result % 10\n\t\tresult = result \u00f7 10\n\tend\n\treturn sum\nend",
    "\tsum = 0\n\tfor i in 1:power\n\t\tsum += sum_digits(base^i)\n\tend\n\treturn sum\nend",
    "\t\"\"\"\n\tCalculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n\tresult = base^power\n\tsum = 0\n\twhile result > 0\n\t\tsum += result % 10\n\t\tresult = result \u00f7 10\n\tend\n\treturn sum\nend",
    "\tif base < 0 || power < 0\n\t\treturn 0\n\tend\n\tsum = 0\n\tfor i in 1:power\n\t\tsum += base^i\n\tend\n\treturn sum\nend"
  ]
}