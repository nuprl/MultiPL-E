{
  "name": "mbpp_411_snake_to_camel",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\nfunction snake_to_camel(word::String)::String \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"android_tv\") == \"AndroidTv\")\n\t@test(candidate(\"google_pixel\") == \"GooglePixel\")\n\t@test(candidate(\"apple_watch\") == \"AppleWatch\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x->uppercase(x[2]))\nend",
    "    word = split(word, \"_\")\n    word[2:end] = map(x -> capitalize(x), word[2:end])\n    return join(word)\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[2]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConverts the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(char)\n\t\telse\n\t\t\tcamel_case *= char\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to a camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend"
  ]
}