{
  "name": "mbpp_411_snake_to_camel",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\nfunction snake_to_camel(word::String)::String \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"android_tv\") == \"AndroidTv\")\n\t@test(candidate(\"google_pixel\") == \"GooglePixel\")\n\t@test(candidate(\"apple_watch\") == \"AppleWatch\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x->uppercase(x[2]))\nend",
    "    word = split(word, \"_\")\n    word[2:end] = map(x -> capitalize(x), word[2:end])\n    return join(word)\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[2]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConverts the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(char)\n\t\telse\n\t\t\tcamel_case *= char\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to a camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= uppercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(titlecase, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_case = \"\"\n\tfor i in 1:length(words)\n\t\tcamel_case *= uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\twords = split(word, \"_\")\n\treturn join(map(x->uppercase(x[1])*lowercase(x[2:end]), words), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to a camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x -> uppercase(x[2]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to a camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= uppercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\n\tParameters\n\t----------\n\tword : String\n\t\tThe snake case string.\n\t\n\tReturns\n\t-------\n\tString\n\t\tThe camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_case_word = \"\"\n\tfor (index, word) in enumerate(words)\n\t\tif index == 1\n\t\t\tcamel_case_word *= uppercase(word[1]) * lowercase(word[2:end])\n\t\telseif index > 1\n\t\t\tcamel_case_word *= uppercase(word)\n\t\telse\n\t\t\tcamel_case_word *= word\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\tword = replace(word, \"_\", \" \")\n\tword = split(word)\n\tfor i in 1:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel *= lowercase(letter)\n\t\telse\n\t\t\tcamel *= letter\n\t\tend\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tnew_word = \"\"\n\tfor i in 1:length(word)\n\t\tif word[i] == '_'\n\t\t\tnew_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tnew_word *= word[i]\n\t\tend\n\tend\n\treturn new_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join([w[1:].capitalize() for w in split(word, \"_\")], \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= uppercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\twords = split(word, \"_\")\n\tcamel_case = \"\"\n\tfor i in 1:length(words)\n\t\tcamel_case *= uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_case = words[1]\n\tfor w in words[2:end]\n\t\tcamel_case *= uppercase(w[1]) * w[2:end]\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x->uppercase(x[1])*lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_case_word = \"\"\n\tfor i in 1:length(words)\n\t\tcamel_case_word *= uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, '_')\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i,char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake_case string to a camelCase string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case *= char\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake_case string to a camelCase string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tresult = \"\"\n\tfor (i, c) in enumerate(word)\n\t\tif c == '_'\n\t\t\tresult *= word[i+1]\n\t\telse\n\t\t\tresult *= c\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel *= char\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "    \"\"\"\n    Convert snake case string to camel case string.\n    \"\"\"\n    word = split(word, \"_\")\n    for i in 2:length(word)\n        word[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n    end\n    return join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x->uppercase(x[1])*lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join([word[1:end] for word in words], \"\")\nend",
    "\t\"\"\"\n\tConverts the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_case = \"\"\n\tfor i in 1:length(words)\n\t\tcamel_case = camel_case * uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_word *= char\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\twords = split(word, \"_\")\n\tfor i in 1:length(words)\n\t\twords[i] = uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word)\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake_case string to a camelCase string\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case *= char\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tcamel_word = \"\"\n\tfor (i,char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= word[i+1]\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i,char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\twords = split(word, \"_\")\n\tcamel_case = \"\"\n\tfor i in 1:length(words)\n\t\tcamel_case *= uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t\n\t# Split the string into words\n\twords = split(word, \"_\")\n\t\n\t# Capitalize the first letter of each word\n\t# Join them together\n\tcamel_case_word = join(map(capitalize, words), \"\")\n\t\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tif length(word) == 0\n\t\treturn \"\"\n\tend\n\t\n\tif word[1] == '_'\n\t\treturn snake_to_camel(word[2:end])\n\tend\n\t\n\tif length(word) > 1 && word[2] == '_'\n\t\treturn uppercase(word[1]) * snake_to_camel(word[3:end])\n\tend\n\t\n\treturn lowercase(word[1]) * snake_to_camel(word[2:end])\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_case_word = \"\"\n\tfor (i, w) in enumerate(words)\n\t\tif i == 1\n\t\t\tcamel_case_word *= uppercase(w[1]) * w[2:end]\n\t\telseif i > 1\n\t\t\tcamel_case_word *= uppercase(w[1]) * w[2:end]\n\t\telse\n\t\t\tcamel_case_word *= w\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x -> uppercase(x[2]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\t\n\t# Split the string into words\n\twords = split(word, \"_\")\n\t\n\t# Capitalize the first letter of each word\n\t# Join them together\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case *= char\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConverts the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case *= char\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend"
  ]
}