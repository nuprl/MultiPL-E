{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\nfunction consecutive_duplicates(nums::Any)::Any \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates from a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tnew_nums = []\n\tfor i in nums\n\t\tif i in new_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_nums, i)\n\t\tend\n\tend\n\treturn new_nums\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\ti = 1\n\twhile i <= length(nums)\n\t\tif nums[i] == nums[i-1]\n\t\t\tnums = delete!(nums, i)\n\t\telse\n\t\t\ti += 1\n\t\tend\n\tend\n\treturn nums\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates from a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[2:end] == []\n\t\treturn nums[1]\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\t>>> consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list of numbers and removes the consecutive duplicates.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tInput: A list of numbers.\n\tOutput: A list of numbers with consecutive duplicates removed.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list as an argument and returns a list with consecutive duplicates removed.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list as an argument and returns a list without consecutive duplicates.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tInput: A list of numbers\n\tOutput: A list of numbers with consecutive duplicates removed\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tnums_new = []\n\tfor i in nums\n\t\tif i in nums_new\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(nums_new, i)\n\t\tend\n\tend\n\treturn nums_new\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list as input and returns a list with consecutive duplicates removed.\n\t\"\"\"\n\tnew_list = []\n\tfor i in nums\n\t\tif i in new_list\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates from a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates from a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list as an argument and returns a list with consecutive duplicates removed.\n\t\"\"\"\n\tnew_nums = []\n\tfor i in nums\n\t\tif i in new_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_nums,i)\n\t\tend\n\tend\n\treturn new_nums\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[2:end] == []\n\t\treturn [nums[1]]\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tnew_list = []\n\tfor i in nums\n\t\tif i in new_list\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list as an argument and returns a list with consecutive duplicates removed.\n\t\"\"\"\n\tnew_list = []\n\tfor i in nums\n\t\tif i in new_list\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\t>>> consecutive_duplicates([1,1,2,3,3,3,4,4,4,4,5,5,5,5,5])\n\t[1,2,3,4,5]\n\t\"\"\"\n\tnew_list = []\n\tfor i in nums:\n\t\tif i not in new_list:\n\t\t\tnew_list.append(i)\n\treturn new_list",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tnums: list of numbers\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\t>>> consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates from a list.\n\t\"\"\"\n\tnew_list = []\n\tfor i in nums\n\t\tif i in new_list\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a list of numbers and returns a list of numbers with consecutive duplicates removed.\n\t\"\"\"\n\tnew_list = []\n\tfor i in nums\n\t\tif i in new_list\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "    if length(nums) == 0\n        return []\n    elseif length(nums) == 1\n        return nums\n    else\n        if nums[1] == nums[2]\n            return consecutive_duplicates(nums[2:end])\n        else\n            return [nums[1]] * consecutive_duplicates(nums[2:end])\n        end\n    end\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates from a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tnew_list = []\n\tfor i in nums\n\t\tif i in new_list\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given list.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend"
  ]
}