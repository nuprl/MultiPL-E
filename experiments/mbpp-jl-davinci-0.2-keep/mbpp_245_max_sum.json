{
  "name": "mbpp_245_max_sum",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\nfunction max_sum(arr::Vector{Int64})::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_sum;\n\t@test(candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\n\t@test(candidate([80, 60, 30, 40, 20, 10]) == 210)\n\t@test(candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[1] = arr[1]\n\tfor i in 2:n\n\t\tinc[i] = arr[i]\n\t\tdec[i] = arr[i]\n\t\tfor j in 1:i-1\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinc[i] = max(inc[i], inc[j] + arr[i])\n\t\t\tend\n\t\t\tif arr[i] < arr[j]\n\t\t\t\tdec[i] = max(dec[i], dec[j] + arr[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn max(inc[n], dec[n])\nend",
    "\tn = length(arr)\n\tleft = zeros(Int64, n)\n\tright = zeros(Int64, n)\n\tleft[1] = arr[1]\n\tright[n] = arr[n]\n\tfor i in 2:n\n\t\tleft[i] = max(arr[i], left[i-1] + arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tright[i] = max(arr[i], right[i+1] + arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, left[i] + right[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = arr[i]\n\t\tfor j in 1:i-1\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinc[i] = max(inc[i], inc[j] + arr[i])\n\t\t\tend\n\t\tend\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = arr[i]\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tdec[i] = max(dec[i], dec[j] + arr[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn maximum([inc[i] + dec[i] - arr[i] for i in 1:n])\nend",
    "\tn = length(arr)\n\tleft = zeros(Int64, n)\n\tright = zeros(Int64, n)\n\tleft[1] = arr[1]\n\tright[n] = arr[n]\n\tfor i in 2:n\n\t\tleft[i] = max(arr[i], left[i-1] + arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tright[i] = max(arr[i], right[i+1] + arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, left[i] + right[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tsum = 0\n\t\tfor j in i:n\n\t\t\tsum += arr[j]\n\t\t\tif sum > max_sum\n\t\t\t\tmax_sum = sum\n\t\t\tend\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n-1\n\t\tmax_sum = max(max_sum, inc[i] + dec[i+1])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tleft = zeros(Int64, n)\n\tright = zeros(Int64, n)\n\tleft[1] = arr[1]\n\tright[n] = arr[n]\n\tfor i in 2:n\n\t\tleft[i] = max(left[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tright[i] = max(right[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, left[i] + right[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tleft = zeros(Int64, n)\n\tright = zeros(Int64, n)\n\tleft[1] = arr[1]\n\tright[n] = arr[n]\n\tfor i in 2:n\n\t\tleft[i] = max(arr[i], arr[i] + left[i-1])\n\tend\n\tfor i in n-1:-1:1\n\t\tright[i] = max(arr[i], arr[i] + right[i+1])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, left[i] + right[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tleft = zeros(Int64, n)\n\tright = zeros(Int64, n)\n\tleft[1] = arr[1]\n\tright[n] = arr[n]\n\tfor i in 2:n\n\t\tleft[i] = max(left[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tright[i] = max(right[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, left[i] + right[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tsum = 0\n\tfor i in 1:n\n\t\tsum = max(sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn sum\nend",
    "\tn = length(arr)\n\t\n\t# max sum of increasing subsequence ending at i\n\tinc = Array{Int64}(undef, n)\n\tinc[1] = arr[1]\n\tfor i in 2:n\n\t\tinc[i] = arr[i]\n\t\tfor j in 1:i-1\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinc[i] = max(inc[i], inc[j] + arr[i])\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# max sum of decreasing subsequence starting at i\n\tdec = Array{Int64}(undef, n)\n\tdec[n] = arr[n]\n\tfor i in n-1:-1:1\n\t\tdec[i] = arr[i]\n\t\tfor j in i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tdec[i] = max(dec[i], dec[j] + arr[i])\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# max sum of bitonic subsequence\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\tend\n\t\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tsum = 0\n\tfor i in 1:n\n\t\tsum = max(sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\tend\n\treturn max_sum\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1] + arr[i], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1] + arr[i], arr[i])\n\tend\n\tmax_sum = inc[1] + dec[2]\n\tfor i in 2:n-1\n\t\tmax_sum = max(max_sum, inc[i] + dec[i+1])\n\tend\n\treturn max_sum\nend",
    "\t#find the max sum of the increasing subsequence\n\t#find the max sum of the decreasing subsequence\n\t#return the max of the two\n\t\n\t#increasing subsequence\n\tmax_sum_inc = 0\n\tmax_sum_dec = 0\n\t\n\t#decreasing subsequence\n\t\n\treturn max(max_sum_inc, max_sum_dec)\nend",
    "\tn = length(arr)\n\tinc = zeros(Int64, n)\n\tdec = zeros(Int64, n)\n\tinc[1] = arr[1]\n\tdec[n] = arr[n]\n\tfor i in 2:n\n\t\tinc[i] = max(inc[i-1], arr[i])\n\tend\n\tfor i in n-1:-1:1\n\t\tdec[i] = max(dec[i+1], arr[i])\n\tend\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum = max(max_sum, inc[i] + dec[i])\n\tend\n\treturn max_sum\nend"
  ]
}