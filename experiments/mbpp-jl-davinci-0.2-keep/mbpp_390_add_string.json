{
  "name": "mbpp_390_add_string",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\nfunction add_string(list_::Any, string::String)::Vector{String} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = add_string;\n\t@test(candidate([1, 2, 3, 4], \"temp{0}\") == [\"temp1\", \"temp2\", \"temp3\", \"temp4\"])\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\") == [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])\n\t@test(candidate([5, 6, 7, 8], \"string{0}\") == [\"string5\", \"string6\", \"string7\", \"string8\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * i)\n\tend\n\treturn new_list\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string*string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\treturn [string*string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * i)\n\tend\n\treturn new_list\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn map(x -> string * x, list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string*i for i in list_]\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\t\"\"\"\n\tAdd a string to all of the elements in a list.\n\t\"\"\"\n\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * i)\n\tend\n\treturn new_list\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements of a list.\n\t\"\"\"\n\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn map(x -> string * x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\t\"\"\"\n\tAdd a string to each element in a list.\n\t\"\"\"\n\treturn map(x -> string * x, list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * x for x in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements of a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tAdd a string to each element in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tAdd a string to each element of a list.\n\t\"\"\"\n\treturn [string * x for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tApply a given format string to all of the elements in a list.\n\t\"\"\"\n\treturn [string * string(i) for i in list_]\nend",
    "\tnew_list = []\n\tfor i in 1:length(list_)\n\t\tpush!(new_list, string*list_[i])\n\tend\n\treturn new_list\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x->string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn map(x -> string * x, list_)\nend",
    "\tresult = []\n\tfor i in list_\n\t\tpush!(result, string * i)\n\tend\n\treturn result\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements of a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\tresult = Vector{String}()\n\tfor i in 1:length(list_)\n\t\tpush!(result, string * string(list_[i]))\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * x for x in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements of a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * string(i) for i in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn [string * x for x in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\tresult = []\n\tfor i in list_\n\t\tpush!(result, string * string(i))\n\tend\n\treturn result\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\tresult = Vector{String}()\n\tfor i in list_\n\t\tpush!(result, string * i)\n\tend\n\treturn result\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tApply a given format string to all of the elements in a list.\n\t\"\"\"\n\tresult = []\n\tfor i in list_\n\t\tpush!(result, string * string(i))\n\tend\n\treturn result\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements of a list.\n\t\"\"\"\n\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * i)\n\tend\n\treturn new_list\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\tnew_list = []\n\tfor i in list_\n\t\tpush!(new_list, string * string(i))\n\tend\n\treturn new_list\nend",
    "\treturn map(x->string*x, list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string*string(x), list_)\nend",
    "\treturn map(x->string*string(x), list_)\nend",
    "\treturn [string * string(i) for i in list_]\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn [string*string(i) for i in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\t\"\"\"\n\tAdd a string to all elements in a list.\n\t\"\"\"\n\treturn [string * string(x) for x in list_]\nend",
    "\t\"\"\"\n\tApply a given format string to all of the elements in a list.\n\t\"\"\"\n\treturn [string * string(i) for i in list_]\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn map(x -> string * string(x), list_)\nend",
    "\treturn map(x -> string * x, list_)\nend",
    "\treturn [string * string(x) for x in list_]\nend"
  ]
}