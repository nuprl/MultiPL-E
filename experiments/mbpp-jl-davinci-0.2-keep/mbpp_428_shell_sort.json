{
  "name": "mbpp_428_shell_sort",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\t\"\"\"\nfunction shell_sort(my_list::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = shell_sort;\n\t@test(candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95])\n\t@test(candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87])\n\t@test(candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap \u00f7= 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tgap = div(length(my_list), 2)\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = div(gap, 2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "    n = length(my_list)\n    gap = n \u00f7 2\n    while gap > 0\n        for i in gap:n\n            temp = my_list[i]\n            j = i\n            while j \u2265 gap && my_list[j - gap] > temp\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            end\n            my_list[j] = temp\n        end\n        gap = gap \u00f7 2\n    end\n    return my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = convert(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = convert(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(floor(n/2))\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap \u00f7 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes an array as input and returns the sorted array using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = round(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = round(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function sorts the given array by using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\tgap = div(length(my_list),2)\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = div(gap,2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = round(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = round(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers as an argument and returns a sorted vector.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap \u00f7= 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap + 1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function sorts the given array by using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = Int(floor(n/2))\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap \u00f7 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes a vector of integers as an argument and returns a sorted vector.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function sorts the given array using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap \u00f7= 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tgap = div(length(my_list), 2)\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = div(gap, 2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function sorts the given array by using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int(gap/2)\n\tend\n\treturn my_list\nend",
    "    n = length(my_list)\n    gap = n//2\n    while gap > 0\n        for i in gap:n\n            temp = my_list[i]\n            j = i\n            while j >= gap && my_list[j-gap] > temp\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            end\n            my_list[j] = temp\n        end\n        gap = gap//2\n    end\n    return my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n // 2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap // 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tShell sort is a variation of insertion sort.\n\tIn shell sort, we make the array h-sorted for a large value of h.\n\tWe keep reducing the value of h until it becomes 1.\n\tAn array is said to be h-sorted if all sublists of every h\u2019th element is sorted.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n // 2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap // 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes an array as input and returns a sorted array.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tgap = length(my_list) // 2\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap // 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(floor(n/2))\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n // 2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap // 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap \u00f7 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes an array as input and returns the sorted array.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tgap = div(length(my_list), 2)\n\twhile gap > 0\n\t\tfor i = gap:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = div(gap, 2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n // 2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap // 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tFunction to sort the given array by using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "    n = length(my_list)\n    gap = n//2\n    while gap > 0\n        for i in gap:n\n            temp = my_list[i]\n            j = i\n            while j >= gap && my_list[j-gap] > temp\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            end\n            my_list[j] = temp\n        end\n        gap = gap//2\n    end\n    return my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function sorts the given array by using shell sort.\n\t\"\"\"\n\tgap = div(length(my_list), 2)\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = div(gap, 2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n // 2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap // 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n/2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap/2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64,n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64,gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(floor(n/2))\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "    n = length(my_list)\n    gap = floor(Int, n/2)\n    while gap > 0\n        for i in gap:n\n            temp = my_list[i]\n            j = i\n            while j >= gap && my_list[j - gap] > temp\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            end\n            my_list[j] = temp\n        end\n        gap = floor(Int, gap/2)\n    end\n    return my_list\nend",
    "\tn = length(my_list)\n\tgap = Int(n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int(gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n \u00f7 2\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap \u00f7 2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes an array of integers and returns a sorted array.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int(floor(n/2))\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(floor(n/2))\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(floor(n/2))\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i = gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tThis function takes an array as an input and returns a sorted array.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tSort the given array by using shell sort.\n\t\"\"\"\n\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j - gap] > temp\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "    n = length(my_list)\n    gap = floor(Int, n/2)\n    while gap > 0\n        for i = gap:n\n            temp = my_list[i]\n            j = i\n            while j >= gap && my_list[j - gap] > temp\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            end\n            my_list[j] = temp\n        end\n        gap = floor(Int, gap/2)\n    end\n    return my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = Int64(floor(n/2))\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = Int64(floor(gap/2))\n\tend\n\treturn my_list\nend",
    "\t\"\"\"\n\tFunction to sort the given array by using shell sort.\n\t\"\"\"\n\tgap = floor(Int64, length(my_list)/2)\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tgap = length(my_list)//2\n\twhile gap > 0\n\t\tfor i in gap+1:length(my_list)\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int64, n/2)\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int64, gap/2)\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = n//2\n\twhile gap > 0\n\t\tfor i in gap+1:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j > gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = gap//2\n\tend\n\treturn my_list\nend",
    "\tn = length(my_list)\n\tgap = floor(Int, n/2)\n\twhile gap > 0\n\t\tfor i in gap:n\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap && my_list[j-gap] > temp\n\t\t\t\tmy_list[j] = my_list[j-gap]\n\t\t\t\tj -= gap\n\t\t\tend\n\t\t\tmy_list[j] = temp\n\t\tend\n\t\tgap = floor(Int, gap/2)\n\tend\n\treturn my_list\nend"
  ]
}