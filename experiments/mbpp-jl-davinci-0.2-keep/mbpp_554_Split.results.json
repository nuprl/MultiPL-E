{
  "name": "mbpp_554_Split",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\t\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds,i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 == 1, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x%2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn list[list .% 2 .!= 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd,i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [list[i] for i in 1:length(list) if i%2==1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123100,
      "stdout": "test set: Test Failed at /tmp/tmpgp7zoh_b.jl:13\n  Expression: candidate([10, 11, 12, 13]) == [11, 13]\n   Evaluated: [10, 12] == [11, 13]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpgp7zoh_b.jl:13 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpgp7zoh_b.jl:11\ntest set: Test Failed at /tmp/tmpgp7zoh_b.jl:14\n  Expression: candidate([7, 8, 9, 1]) == [7, 9, 1]\n   Evaluated: [7, 9] == [7, 9, 1]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpgp7zoh_b.jl:14 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpgp7zoh_b.jl:11\nTest Summary: | Pass  Fail  Total\ntest set      |    1     2      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpgp7zoh_b.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list,i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 == 1, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list,i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn list[mod.(list,2) .!= 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x%2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x%2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x%2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tnew_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x->x%2!=0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n    odd_list = []\n    for i in list\n        if i % 2 == 1\n            push!(odd_list, i)\n        end\n    end\n    return odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\t\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd,i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\t\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x%2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list,i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x%2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn list[mod.(list,2) .!= 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 == 1, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x%2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd_list,i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}