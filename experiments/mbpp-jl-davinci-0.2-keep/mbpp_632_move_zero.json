{
  "name": "mbpp_632_move_zero",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\"\"\"\nfunction move_zero(num_list::Vector{Int64})::Vector{Int64} \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = move_zero;\n\t@test(candidate([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\n\t@test(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\n\t@test(candidate([0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tThis function takes a list of integers as input and returns a list with all zeros at the end.\n\t\"\"\"\n\t\n\t# Initialize a counter variable\n\tcounter = 0\n\t\n\t# Iterate through the list\n\tfor i in 1:length(num_list)\n\t\t\n\t\t# If the element is not zero, then replace the element at index 'counter' with this element\n\t\tif num_list[i] != 0\n\t\t\tnum_list[counter] = num_list[i]\n\t\t\tcounter += 1\n\t\tend\n\tend\n\t\n\t# Now all non-zero elements have been shifted to front and 'counter' is set as index of first 0.\n\t# Make all elements 0 from counter till end of list\n\twhile counter < length(num_list)\n\t\tnum_list[counter] = 0\n\t\tcounter += 1\n\tend\n\t\n\treturn num_list\nend",
    "\t# your code here\nend",
    "\t\"\"\"\n\tFunction to move all zeroes to the end of the given list.\n\t\"\"\"\n\t# Initialize a new list\n\tnew_list = []\n\t# Initialize a counter\n\tcount = 0\n\t# Loop over the list\n\tfor i in num_list\n\t\t# If the element is not zero\n\t\tif i != 0\n\t\t\t# Append the element to the new list\n\t\t\tpush!(new_list, i)\n\t\telse\n\t\t\t# Increment the counter\n\t\t\tcount += 1\n\t\tend\n\tend\n\t# Append the zeroes to the new list\n\tfor i in 1:count\n\t\tpush!(new_list, 0)\n\tend\n\t# Return the new list\n\treturn new_list\nend",
    "    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return vcat(non_zero_list, zero_list)\nend",
    "\t# your code here\nend",
    "    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return [non_zero_list; zero_list]\nend",
    "    zero_pos = []\n    for i in 1:length(num_list)\n        if num_list[i] == 0\n            push!(zero_pos, i)\n        end\n    end\n    for i in 1:length(zero_pos)\n        num_list[zero_pos[i]] = num_list[zero_pos[i]-i]\n        num_list[zero_pos[i]-i] = 0\n    end\n    return num_list\nend",
    "\t\"\"\"\n\tMove all zeroes to the end of the given list.\n\t\"\"\"\n\t\n\t# Initialize a new list to store the result\n\tresult = []\n\t\n\t# Initialize a counter to store the number of zeros\n\tzero_counter = 0\n\t\n\t# Loop through the list\n\tfor i in num_list\n\t\t# If the element is not zero, append it to the result\n\t\tif i != 0\n\t\t\tpush!(result, i)\n\t\telse\n\t\t\t# If the element is zero, increment the counter\n\t\t\tzero_counter += 1\n\t\tend\n\tend\n\t\n\t# Append the zeros to the end of the result\n\tfor i in 1:zero_counter\n\t\tpush!(result, 0)\n\tend\n\t\n\treturn result\nend",
    "    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return [non_zero_list; zero_list]\nend",
    "\t# your code goes here\n\t\n\treturn num_list\nend",
    "\tnon_zero_list = []\n\tzero_list = []\n\tfor i in num_list\n\t\tif i == 0\n\t\t\tpush!(zero_list, i)\n\t\telse\n\t\t\tpush!(non_zero_list, i)\n\t\tend\n\tend\n\treturn append!(non_zero_list, zero_list)\nend",
    "    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return [non_zero_list; zero_list]\nend",
    "\tnon_zero_list = []\n\tzero_list = []\n\tfor i in num_list\n\t\tif i != 0\n\t\t\tpush!(non_zero_list, i)\n\t\telse\n\t\t\tpush!(zero_list, i)\n\t\tend\n\tend\n\treturn [non_zero_list; zero_list]\nend",
    "    non_zero_list = []\n    zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return append!(non_zero_list, zero_list)\nend",
    "\t\"\"\"\n\tThis function moves all the zeros to the end of the list.\n\t\"\"\"\n\tn = length(num_list)\n\tcount = 0\n\tfor i in 1:n\n\t\tif num_list[i] != 0\n\t\t\tnum_list[count] = num_list[i]\n\t\t\tcount += 1\n\t\tend\n\tend\n\twhile count < n\n\t\tnum_list[count] = 0\n\t\tcount += 1\n\tend\n\treturn num_list\nend",
    "\t\"\"\"\n\tMove all zeroes to the end of the given list.\n\t\"\"\"\n\t# Initialize a new list\n\tnew_list = []\n\t# Initialize a counter\n\tcounter = 0\n\t# Loop through the list\n\tfor i in num_list\n\t\t# If the number is not zero, append it to the new list\n\t\tif i != 0\n\t\t\tpush!(new_list, i)\n\t\telse\n\t\t\t# Increment the counter\n\t\t\tcounter += 1\n\t\tend\n\tend\n\t# Append the zeroes to the end of the new list\n\tfor i in 1:counter\n\t\tpush!(new_list, 0)\n\tend\n\t# Return the new list\n\treturn new_list\nend",
    "    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return vcat(non_zero_list, zero_list)\nend",
    "    j = length(num_list)\n    for i in 1:length(num_list)\n        if num_list[i] != 0\n            num_list[j] = num_list[i]\n            j -= 1\n        end\n    end\n    for i in 1:j\n        num_list[i] = 0\n    end\n    return num_list\nend",
    "\tnon_zero_list = []\n\tzero_list = []\n\tfor i in num_list\n\t\tif i == 0\n\t\t\tpush!(zero_list, i)\n\t\telse\n\t\t\tpush!(non_zero_list, i)\n\t\tend\n\tend\n\treturn append!(non_zero_list, zero_list)\nend",
    "    zero_list = []\n    non_zero_list = []\n    for i in num_list\n        if i == 0\n            push!(zero_list, i)\n        else\n            push!(non_zero_list, i)\n        end\n    end\n    return vcat(non_zero_list, zero_list)\nend"
  ]
}