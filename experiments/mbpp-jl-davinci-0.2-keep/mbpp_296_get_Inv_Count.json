{
  "name": "mbpp_296_get_Inv_Count",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tinv_count = 0\n\tfor i in 1:length(arr)-1\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tleft = get_Inv_Count(arr[1:n\u00f72])\n\t\tright = get_Inv_Count(arr[n\u00f72+1:n])\n\t\tsplit = get_Split_Inv_Count(arr)\n\t\treturn left + right + split\n\tend\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif(arr[i] > arr[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\n\tinv_count = 0\n\t\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:n]\n\tcount_left = get_Inv_Count(left)\n\tcount_right = get_Inv_Count(right)\n\tcount_split = merge_and_count_split(left, right)\n\treturn count_left + count_right + count_split\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = div(n,2)\n\tleft = get_Inv_Count(arr[1:mid])\n\tright = get_Inv_Count(arr[mid+1:n])\n\tmerge = merge_and_count(arr[1:mid],arr[mid+1:n])\n\treturn left + right + merge\nend",
    "\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:n]\n\tleft_inv = get_Inv_Count(left)\n\tright_inv = get_Inv_Count(right)\n\tsplit_inv = 0\n\ti = 1\n\tj = 1\n\tfor k = 1:n\n\t\tif i > mid\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\telseif j > n-mid\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telseif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tsplit_inv += mid - i + 1\n\t\tend\n\tend\n\treturn left_inv + right_inv + split_inv\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\n\t# Initialize result \n\tinv_count = 0\n\t\n\t# Loop through the array \n\tfor i in 1:length(arr)\n\t\t\n\t\t# Loop through the array again\n\t\tfor j in i+1:length(arr)\n\t\t\t\n\t\t\t# If the element is smaller than the element to the right, add one to the inversion count\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn inv_count\nend",
    "    count = 0\n    for i in 1:length(arr)\n        for j in i+1:length(arr)\n            if arr[i] > arr[j]\n                count += 1\n            end\n        end\n    end\n    return count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i = 1:n\n        for j = i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t\n\t# Recursive case\n\tmid = div(length(arr), 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\t\n\t# Recursive calls\n\tleft_count = get_Inv_Count(left)\n\tright_count = get_Inv_Count(right)\n\tsplit_count = merge_and_count(left, right)\n\t\n\treturn left_count + right_count + split_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    inv_count = 0\n    for i in 1:length(arr)\n        for j in i+1:length(arr)\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t\n\t# Recursive case\n\tmid = div(length(arr), 2)\n\tleft_arr = arr[1:mid]\n\tright_arr = arr[mid+1:end]\n\t\n\tleft_count = get_Inv_Count(left_arr)\n\tright_count = get_Inv_Count(right_arr)\n\t\n\t# Merge and count\n\tmerge_count = 0\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left_arr) && j <= length(right_arr)\n\t\tif left_arr[i] <= right_arr[j]\n\t\t\tarr[k] = left_arr[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right_arr[j]\n\t\t\tj += 1\n\t\t\tmerge_count += length(left_arr) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\t\n\twhile i <= length(left_arr)\n\t\tarr[k] = left_arr[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\t\n\twhile j <= length(right_arr)\n\t\tarr[k] = right_arr[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\t\n\treturn left_count + right_count + merge_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = convert(Int64, floor(n/2))\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\tleft_count = get_Inv_Count(left)\n\tright_count = get_Inv_Count(right)\n\tmerge_count = merge_and_count(left, right)\n\treturn left_count + right_count + merge_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tinv_count = 0\n\tfor i = 1:length(arr)\n\t\tfor j = i+1:length(arr)\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i = 1:n-1\n        for j = i+1:n\n            if arr[j] < arr[i]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n, 2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tleft_inv = get_Inv_Count(left)\n\t\tright_inv = get_Inv_Count(right)\n\t\tmerge_inv = merge_and_count(left, right)\n\t\treturn left_inv + right_inv + merge_inv\n\tend\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n, 2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tcount_left = get_Inv_Count(left)\n\t\tcount_right = get_Inv_Count(right)\n\t\tcount_split = get_Split_Inv_Count(left, right)\n\t\treturn count_left + count_right + count_split\n\tend\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tleft = arr[1:n\u00f72]\n\t\tright = arr[n\u00f72+1:n]\n\t\treturn get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n\tend\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\n\tn = length(arr)\n\t\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = n \u00f7 2\n\t\t\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\t\n\t\tleft_count = get_Inv_Count(left)\n\t\tright_count = get_Inv_Count(right)\n\t\t\n\t\tmerge_count = merge_and_count_split_inv(left, right)\n\t\t\n\t\treturn left_count + right_count + merge_count\n\tend\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\n\t# Base case \n\tif length(arr) == 1\n\t\treturn 0\n\tend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tinv_count = 0\n\tfor i = 1:length(arr)\n\t\tfor j = i+1:length(arr)\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tInput:\n\t\tarr: Vector of integers\n\tOutput:\n\t\tcount: Number of inversions in the array\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i = 1:n-1\n        for j = i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t\n\t# Split the array into two halves\n\tmid = div(length(arr), 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\t\n\t# Recursively call the function on the two halves\n\tleft_count = get_Inv_Count(left)\n\tright_count = get_Inv_Count(right)\n\t\n\t# Merge the two halves and count the inversions\n\tmerge_count = merge_and_count(left, right)\n\t\n\t# Return the total number of inversions\n\treturn left_count + right_count + merge_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t# Initialize result \n\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i = 1:length(arr)\n\t\tfor j = i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn=length(arr)\n\tcount=0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i]>arr[j]\n\t\t\t\tcount+=1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n,2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tleft_inv = get_Inv_Count(left)\n\t\tright_inv = get_Inv_Count(right)\n\t\tsplit_inv = merge_and_count(left, right)\n\t\treturn left_inv + right_inv + split_inv\n\tend\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:n]\n\tinv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left) && j <= length(right)\n\t\tif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tinv_count += length(left) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\twhile i <= length(left)\n\t\tarr[k] = left[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\twhile j <= length(right)\n\t\tarr[k] = right[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = n \u00f7 2\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\tinv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left) && j <= length(right)\n\t\tif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tinv_count += length(left) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\twhile i <= length(left)\n\t\tarr[k] = left[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\twhile j <= length(right)\n\t\tarr[k] = right[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n, 2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:end]\n\t\tleft_count = get_Inv_Count(left)\n\t\tright_count = get_Inv_Count(right)\n\t\tsplit_count = merge_and_count_split_inv(left, right)\n\t\treturn left_count + right_count + split_count\n\tend\nend",
    "\t# Base case \n\tif length(arr) == 1\n\t\treturn 0\n\tend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\t# Base case\n\tif length(arr) == 1\n\t\treturn 0\n\tend\n\t# Recursive case\n\tmid = div(length(arr),2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\treturn get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left,right)\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\t\t\n\t\t# Base case\n\t\tif length(arr) == 1\n\t\t\treturn 0\n\t\tend\n\t\t\n\t\t# Recursive case\n\t\telse\n\t\t\tmid = div(length(arr),2)\n\t\t\tleft = arr[1:mid]\n\t\t\tright = arr[mid+1:end]\n\t\t\t\n\t\t\t# Recursive calls\n\t\t\tleft_count = get_Inv_Count(left)\n\t\t\tright_count = get_Inv_Count(right)\n\t\t\t\n\t\t\t# Merge and count\n\t\t\tmerge_count = 0\n\t\t\ti = 1\n\t\t\tj = 1\n\t\t\tfor k = 1:length(arr)\n\t\t\t\tif i > length(left)\n\t\t\t\t\tarr[k] = right[j]\n\t\t\t\t\tj += 1\n\t\t\t\telseif j > length(right)\n\t\t\t\t\tarr[k] = left[i]\n\t\t\t\t\ti += 1\n\t\t\t\telseif left[i] <= right[j]\n\t\t\t\t\tarr[k] = left[i]\n\t\t\t\t\ti += 1\n\t\t\t\telse\n\t\t\t\t\tarr[k] = right[j]\n\t\t\t\t\tj += 1\n\t\t\t\t\tmerge_count += length(left) - i + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\treturn left_count + right_count + merge_count\n\t\tend\n\tend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tThis function returns the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = n >> 1\n\t\tleft = get_Inv_Count(arr[1:mid])\n\t\tright = get_Inv_Count(arr[mid+1:end])\n\t\tmerge = merge_Count(arr[1:mid], arr[mid+1:end])\n\t\treturn left + right + merge\n\tend\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = div(n, 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\tinv_count = get_Inv_Count(left) + get_Inv_Count(right)\n\ti = 1\n\tj = 1\n\tk = 1\n\twhile i <= length(left) && j <= length(right)\n\t\tif left[i] <= right[j]\n\t\t\tarr[k] = left[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tarr[k] = right[j]\n\t\t\tj += 1\n\t\t\tinv_count += length(left) - i + 1\n\t\tend\n\t\tk += 1\n\tend\n\twhile i <= length(left)\n\t\tarr[k] = left[i]\n\t\ti += 1\n\t\tk += 1\n\tend\n\twhile j <= length(right)\n\t\tarr[k] = right[j]\n\t\tj += 1\n\t\tk += 1\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tGet the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\tend\n\tmid = div(n, 2)\n\tleft = get_Inv_Count(arr[1:mid])\n\tright = get_Inv_Count(arr[mid+1:n])\n\tmerge = merge_and_count(arr[1:mid], arr[mid+1:n])\n\treturn left + right + merge\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i = 1:n-1\n\t\tfor j = i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t# Base case \n\tif length(arr) <= 1\n\t\treturn 0\n\tend\n\t\n\t# Divide the array into two halves \n\tmid = div(length(arr), 2)\n\tleft = arr[1:mid]\n\tright = arr[mid+1:end]\n\t\n\t# Recursively count inversions in the left and right halves \n\tleft_inv_count = get_Inv_Count(left)\n\tright_inv_count = get_Inv_Count(right)\n\t\n\t# Merge the two halves and count inversions while merging \n\tmerge_inv_count = merge_and_count(left, right)\n\t\n\t# Return the sum of inversions in the left, right and merged halves \n\treturn left_inv_count + right_inv_count + merge_inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n \n\t\tfor j in i+1:n \n\t\t\tif arr[i] > arr[j] \n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count the number of inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tmid = div(n,2)\n\t\tleft = arr[1:mid]\n\t\tright = arr[mid+1:n]\n\t\tleft_count = get_Inv_Count(left)\n\t\tright_count = get_Inv_Count(right)\n\t\tmerge_count = merge_and_count(left,right)\n\t\treturn left_count + right_count + merge_count\n\tend\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = length(arr)\n    if n == 1\n        return 0\n    else\n        mid = div(n,2)\n        left = arr[1:mid]\n        right = arr[mid+1:n]\n        return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n    end\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tinv_count = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend"
  ]
}