{
  "name": "mbpp_296_get_Inv_Count",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\nfunction get_Inv_Count(arr::Vector{Int64})::Int64 \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_Inv_Count;\n\t@test(candidate([1, 20, 6, 4, 5]) == 5)\n\t@test(candidate([1, 2, 1]) == 1)\n\t@test(candidate([1, 2, 5, 6, 1]) == 3)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n-1\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tinv_count = 0\n\tfor i in 1:length(arr)-1\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\t\"\"\"\n\tFunction to count inversions in an array.\n\t\"\"\"\n\tn = length(arr)\n\tif n == 1\n\t\treturn 0\n\telse\n\t\tleft = get_Inv_Count(arr[1:n\u00f72])\n\t\tright = get_Inv_Count(arr[n\u00f72+1:n])\n\t\tsplit = get_Split_Inv_Count(arr)\n\t\treturn left + right + split\n\tend\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif(arr[i] > arr[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(arr)\n\t\tfor j in i+1:length(arr)\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "    n = length(arr)\n    inv_count = 0\n    for i in 1:n\n        for j in i+1:n\n            if arr[i] > arr[j]\n                inv_count += 1\n            end\n        end\n    end\n    return inv_count\nend",
    "\tn = length(arr)\n\tcount = 0\n\tfor i in 1:n\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[j] < arr[i]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend",
    "\tn = length(arr)\n\tinv_count = 0\n\tfor i in 1:n-1\n\t\tfor j in i+1:n\n\t\t\tif arr[i] > arr[j]\n\t\t\t\tinv_count += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend"
  ]
}