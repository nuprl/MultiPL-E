{
  "name": "mbpp_262_split_two_parts",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction to split a list into two parts where the length of the first part of the list is L.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tInput:\n\t\tlist1: Any\n\t\tL: Int64\n\tOutput:\n\t\tAny\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction to split the list into two parts.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor j in L+1:length(list1)\n\t\tpush!(list3, list1[j])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n    list2 = []\n    list3 = []\n    for i in 1:length(list1)\n        if i <= L\n            push!(list2, list1[i])\n        else\n            push!(list3, list1[i])\n        end\n    end\n    return (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tInputs:\n\t\tlist1: Any\n\t\tL: Int64\n\tOutputs:\n\t\tAny\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tlist2 = push!(list2, list1[i])\n\t\telse\n\t\t\tlist3 = push!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\t\tFunction that splits a list into two parts where the length of the first part of the list is L.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tlist1 : Any\n\t\t\tList to be split.\n\t\tL : Int64\n\t\t\tLength of the first part of the list.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tAny\n\t\t\tTuple with the two resulting lists.\n\t\"\"\"\n\t\n\tlist2 = []\n\tlist3 = []\n\t\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\t\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\t\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2,list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3,list1[i])\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tlist2 = push!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tlist3 = push!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tSplit a list into two parts where the length of the first part of the list is L.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that splits a list into two parts where the length of the first part of the list is L.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tif L > length(list1)\n\t\tprintln(\"L is greater than the length of the list\")\n\telse\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:end]\n\t\treturn (list2, list3)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:L\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\t\tfor i in (L+1):length(list1)\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = list1[L+1:end]\n\tlist1 = list1[1:L]\n\treturn (list1, list2)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction to split a list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tif L > length(list1)\n\t\tprintln(\"L is greater than the length of the list\")\n\telse\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:end]\n\t\treturn (list2, list3)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2,list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3,list1[i])\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\treturn (list1[1:L], list1[L+1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\t\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2,list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3,list1[i])\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif i <= L\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list1[i])\n\t\t\tend\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\treturn (list1[1:L], list1[L+1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThe function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn(list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tif L > length(list1)\n\t\tprintln(\"The length of the first part of the list cannot be greater than the length of the list\")\n\telse\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:length(list1)]\n\t\treturn (list2, list3)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tif L == 0\n\t\treturn (list1, [])\n\telse\n\t\treturn (list1[1:L], list1[L+1:end])\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tlist2 = push!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tlist3 = push!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list1[i])\n\t\tend\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list1[i])\n\t\tend\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif i <= L\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list1[i])\n\t\t\tend\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThe function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in (L+1):length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2,list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3,list1[i])\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\treturn (list1[1:L], list1[L+1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThe function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\t\tFunction to split a list into two parts where the length of the first part of the list is L\n\t\t\n\t\tArgs:\n\t\t\tlist1: list to be split\n\t\t\tL: length of the first part of the list\n\t\t\n\t\tReturns:\n\t\t\ttuple: tuple of two lists\n\t\"\"\"\n\tlist2 = list1[L+1:end]\n\tlist1 = list1[1:L]\n\treturn (list1, list2)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\treturn (list1[1:L], list1[L+1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif i <= L\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list1[i])\n\t\t\tend\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\t\n\t# Check if the length of the list is greater than L\n\tif length(list1) > L\n\t\t# If so, split the list into two parts\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:end]\n\t\t# Return the two lists in a tuple\n\t\treturn (list2, list3)\n\telse\n\t\t# If not, return the original list\n\t\treturn list1\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tif L > length(list1)\n\t\t\tprintln(\"L is greater than length of list\")\n\t\telse\n\t\t\tlist2 = list1[1:L]\n\t\t\tlist3 = list1[L+1:end]\n\t\t\treturn (list2, list3)\n\t\tend\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tif L < length(list1)\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:end]\n\t\treturn (list2, list3)\n\telse\n\t\treturn \"L is greater than the length of the list\"\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\t\tFunction to split a list into two parts.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tlist1 : Any\n\t\t\tThe list to be split.\n\t\tL : Int64\n\t\t\tThe length of the first part of the list.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tAny\n\t\t\tThe two parts of the list in a tuple.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn list2, list3\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n    list2 = []\n    list3 = []\n    for i in 1:L\n        push!(list2, list1[i])\n    end\n    for i in L+1:length(list1)\n        push!(list3, list1[i])\n    end\n    return (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2,list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3,list1[i])\n\tend\n\treturn (list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:L\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\t\tfor i in L+1:length(list1)\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\treturn (list1[1:L], list1[L+1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:L\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\t\tfor i in L+1:length(list1)\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tif L > length(list1)\n\t\tprintln(\"L is greater than the length of the list\")\n\telse\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:end]\n\t\treturn (list2, list3)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tif L > length(list1)\n\t\tprintln(\"L is greater than length of list\")\n\telse\n\t\tlist2 = list1[1:L]\n\t\tlist3 = list1[L+1:end]\n\t\treturn (list2, list3)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:L\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\t\tfor i in L+1:length(list1)\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\t\treturn list2, list3\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tThis function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = list1[1:L]\n\tlist3 = list1[L+1:end]\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tlist2 = [list2; list1[i]]\n\t\telse\n\t\t\tlist3 = [list3; list1[i]]\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif i <= L\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list1[i])\n\t\t\tend\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tlist2 = [list2; list1[i]]\n\t\telse\n\t\t\tlist3 = [list3; list1[i]]\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\tlist2 = []\n\t\tlist3 = []\n\t\tfor i in 1:length(list1)\n\t\t\tif i <= L\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list1[i])\n\t\t\tend\n\t\tend\n\t\treturn (list2, list3)\n\tend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123634,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n    list2 = []\n    list3 = []\n    for i in 1:length(list1)\n        if i <= L\n            push!(list2, list1[i])\n        else\n            push!(list3, list1[i])\n        end\n    end\n    return (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\n\tlist2 = []\n\tlist3 = []\n\t\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\t\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\t\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2,list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3,list1[i])\n\tend\n\treturn(list2,list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\t\"\"\"\n\tFunction that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n\tlist1_1 = list1[1:L]\n\tlist1_2 = list1[L+1:end]\n\treturn list1_1, list1_2\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1666123635,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:L\n\t\tpush!(list2, list1[i])\n\tend\n\tfor i in L+1:length(list1)\n\t\tpush!(list3, list1[i])\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\nfunction split_two_parts(list1::Any, L::Int64)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i <= L\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list1[i])\n\t\tend\n\tend\n\treturn (list2, list3)\nend\nusing Test\n\n@testset begin\n\ncandidate = split_two_parts;\n\t@test(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))\n\t@test(candidate([\"a\", \"b\", \"c\", \"d\"], 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))\n\t@test(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))\nend\n",
      "timestamp": 1665510571,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}