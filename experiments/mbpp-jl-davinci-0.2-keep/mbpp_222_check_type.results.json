{
  "name": "mbpp_222_check_type",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "using Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ta = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != a\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\ttype_of_first_element = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != type_of_first_element\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\treturn length(unique(type_list)) == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\telse\n\t\tfor i in test_tuple\n\t\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\ttest_tuple = tuple(test_tuple)\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123566,
      "stdout": "test set: Test Failed at /tmp/tmp_kvro6iw.jl:22\n  Expression: candidate((1, 2, \"4\")) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp_kvro6iw.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp_kvro6iw.jl:20\nTest Summary: | Pass  Fail  Total\ntest set      |    2     1      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp_kvro6iw.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\ttype_of_first_element = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != type_of_first_element\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\treturn all(typeof(x) == typeof(test_tuple[1]) for x in test_tuple)\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123566,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ppup5bc.jl:7\nin expression starting at /tmp/tmp9ppup5bc.jl:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function will check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif all(typeof(x) == typeof(test_tuple[1]) for x in test_tuple)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\t\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\treturn all(typeof(x) == typeof(test_tuple[1]) for x in test_tuple)\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\treturn length(unique(type_list)) == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tdata_type = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != data_type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t#check if the tuple is empty\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\t#check if the tuple has only one element\n\tif length(test_tuple) == 1\n\t\treturn true\n\tend\n\t#check if the tuple has more than one element\n\tif length(test_tuple) > 1\n\t\t#check if the first element is of type Int\n\t\tif typeof(test_tuple[1]) == Int\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != Int\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t#check if the first element is of type Float64\n\t\tif typeof(test_tuple[1]) == Float64\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != Float64\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t#check if the first element is of type String\n\t\tif typeof(test_tuple[1]) == String\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != String\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t#check if the first element is of type Bool\n\t\tif typeof(test_tuple[1]) == Bool\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != Bool\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\ttype_tuple = tuple(typeof(i) for i in test_tuple)\n\tif type_tuple[1:end] == type_tuple[1]\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123566,
      "stdout": "test set: Test Failed at /tmp/tmpgydh6fg1.jl:20\n  Expression: candidate((5, 6, 7, 3, 5, 6)) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpgydh6fg1.jl:20 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpgydh6fg1.jl:19\ntest set: Test Failed at /tmp/tmpgydh6fg1.jl:22\n  Expression: candidate((3, 2, 1, 4, 5)) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpgydh6fg1.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpgydh6fg1.jl:19\nTest Summary: | Pass  Fail  Total\ntest set      |    1     2      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpgydh6fg1.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tdata_type = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != data_type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in the tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tdata_type = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != data_type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\ttest_tuple_type = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != test_tuple_type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\telse\n\t\ttype_of_first_element = typeof(test_tuple[1])\n\t\tfor i in test_tuple\n\t\t\tif typeof(i) != type_of_first_element\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tChecks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tdata_type = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != data_type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\t\n\t# Check if the tuple is empty\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\t\n\t# Check if the tuple has only one element\n\tif length(test_tuple) == 1\n\t\treturn true\n\tend\n\t\n\t# Check if the tuple has more than one element\n\tfor i in 1:length(test_tuple)-1\n\t\tif typeof(test_tuple[i]) != typeof(test_tuple[i+1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t# check if the tuple is empty\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\t# check if the tuple is not empty\n\telse\n\t\t# get the data type of the first element\n\t\tfirst_type = typeof(test_tuple[1])\n\t\t# check if the rest of the elements have the same data type\n\t\tfor i in 2:length(test_tuple)\n\t\t\tif typeof(test_tuple[i]) != first_type\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123566,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1_3ugc5_.jl:4 expected \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1_3ugc5_.jl:10\nin expression starting at /tmp/tmp1_3ugc5_.jl:10\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\t# Initialize a variable to store the first element of the tuple\n\tfirst_element = test_tuple[1]\n\t# Iterate through the tuple\n\tfor element in test_tuple\n\t\t# Check if the type of the element is same as the first element\n\t\tif typeof(element) != typeof(first_element)\n\t\t\t# If not, return false\n\t\t\treturn false\n\t\tend\n\tend\n\t# If all the elements are of same type, return true\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1fctkyt_.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fctkyt_.jl:1\nin expression starting at /tmp/tmp1fctkyt_.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\treturn all(typeof(x) == typeof(test_tuple[1]) for x in test_tuple)\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\treturn all(typeof(x) == typeof(test_tuple[1]) for x in test_tuple)\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\treturn all(typeof(x) == typeof(test_tuple[1]) for x in test_tuple)\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t#check if the tuple is empty\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\t#check if the tuple has only one element\n\tif length(test_tuple) == 1\n\t\treturn true\n\tend\n\t#check if the tuple has more than one element\n\tif length(test_tuple) > 1\n\t\t#check if the first element is of type Int64\n\t\tif typeof(test_tuple[1]) == Int64\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != Int64\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t#check if the first element is of type Float64\n\t\tif typeof(test_tuple[1]) == Float64\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != Float64\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t#check if the first element is of type String\n\t\tif typeof(test_tuple[1]) == String\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != String\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\t#check if the first element is of type Bool\n\t\tif typeof(test_tuple[1]) == Bool\n\t\t\tfor i in test_tuple\n\t\t\t\tif typeof(i) != Bool\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\ttype = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tif length(test_tuple) == 0\n\t\treturn true\n\tend\n\ttype = typeof(test_tuple[1])\n\tfor i in test_tuple\n\t\tif typeof(i) != type\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t# check if all the elements in tuple have same data type or not.\n\t# return true if all the elements have same data type\n\t# return false if all the elements do not have same data type\n\t\n\t# write your code after this line\n\t\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123568,
      "stdout": "test set: Error During Test at /tmp/tmp8namzn7d.jl:17\n  Test threw exception\n  Expression: candidate((5, 6, 7, 3, 5, 6)) == true\n  MethodError: Cannot `convert` an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] check_type(test_tuple::NTuple{6, Int64})\n     @ Main /tmp/tmp8namzn7d.jl:11\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8namzn7d.jl:17 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8namzn7d.jl:16\ntest set: Error During Test at /tmp/tmp8namzn7d.jl:18\n  Test threw exception\n  Expression: candidate((1, 2, \"4\")) == false\n  MethodError: Cannot `convert` an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] check_type(test_tuple::Tuple{Int64, Int64, String})\n     @ Main /tmp/tmp8namzn7d.jl:11\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8namzn7d.jl:18 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp8namzn7d.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function takes a tuple as an argument and returns true if all the elements in tuple have same data type or not.\n\t\"\"\"\n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\tif length(unique(type_list)) == 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tThis function checks if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\ttype_list = []\n\tfor i in test_tuple\n\t\tpush!(type_list, typeof(i))\n\tend\n\treturn length(unique(type_list)) == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tFunction to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\t\"\"\"\n\tCheck if all the elements in tuple have same data type or not.\n\t\"\"\"\n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\nfunction check_type(test_tuple::Any)::Bool \n\tfor i in test_tuple\n\t\tif typeof(i) != typeof(test_tuple[1])\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_type;\n\t@test(candidate((5, 6, 7, 3, 5, 6)) == true)\n\t@test(candidate((1, 2, \"4\")) == false)\n\t@test(candidate((3, 2, 1, 4, 5)) == true)\nend\n",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}