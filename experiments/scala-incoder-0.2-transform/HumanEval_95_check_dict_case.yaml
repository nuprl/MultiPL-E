name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\"\
  )))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
  , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    //\
  \ >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\"\
  , \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isAllStringInLowerCase\
    \ = isStringInLowerCase && isStringInUpperCase\n        val isAllStringInUpperCase\
    \ = isStringInLowerCase && !isStringInUpperCase\n        val isAllStringInBothCases\
    \ = isAllStringInLowerCase && isAllStringInUpperCase\n        isAllStringInBothCases",
  "        if (dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val lowerSet = lower.toSet\n        val upperSet = upper.toSet\n    \
    \    val result = lowerSet.subsetOf(upperSet)\n        if (result)\n         \
    \   return true\n        return false", "        val keys = dict.keys\n      \
    \  if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase() == _.toString.toLowerCase)", "     \
    \   val keys = dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNot",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = keys.forall(_.toLowerCase.contains(\"a\"))\n        val allUpperCaseKeys =\
    \ keys.forall(_.toUpperCase.contains(\"A\"))\n        val allKeysAreStrings =\
    \ keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.contains(\"a\"))\n   \
    \     val allKeysAreStringsOrInUpperCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.contains(\"A\"))\n        val allKeysAreStringsOrBothCases\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys && allUpperCaseKeys)\n\
    \        val allKeysAreStringsOrBothCasesOrInLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || allLowerCaseKeys || allUpperCaseKeys)\n        val allKeysAreStringsOrBothCasesOrInUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCaseKeys || allLowerCaseKeys)\n\
    \        val allKeysAreStringsOrBothCasesOrBothCases = keys.forall(_.isInstanceOf[String]\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrInUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCaseKeys || allLowerCaseKeys\
    \ || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrBothCases\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrBothCasesOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCase", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val allKeys = upperCaseKeys ++ lowerCaseKeys\n\
    \        val isAllKeysString = allKeys.forall(_.isInstanceOf[String])\n      \
    \  val isAllKeysStringOrUpperCase = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        isAllKeysString && isAllKeysStringOrUpperCase", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else if(keys.forall(_.isInstanceOf[String]) && keys.forall(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)) true\n        else false", "        val keys = dict.keys\n\
    \        if (keys.length == 0) false\n        else if (keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == key) \n            || upperCaseKeys.forall(key\
    \ => dict.get(key) == key)", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val\
    \ keys = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     val isAllKeysLowerCase = lowerCaseDict.size == keys.size\n        val isAllKeysUpperCase\
    \ = upperCaseDict.size == keys.size\n        val isAllKeysBothCases = lowerCaseDict.intersect(upperCaseDict).size\
    \ == keys.size\n        isAllKeysLowerCase && isAllKeysUpperCase && isAllKeysBothCases",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => !upperCaseKeys.contains(key))", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys\n            val lower = keys.map(_.toLowerCase)\n\
    \            val upper = keys.map(_.toUpperCase)\n            val both = lower\
    \ ++ upper\n            val result = both.forall(x => keys.contains(x))\n    \
    \        result\n        }", "        if(dict.isEmpty)\n            return false\n\
    \        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key =>\
    \ (key.toLowerCase, key.toUpperCase))\n        val result = lower == upper ||\
    \ both == keys\n        result", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n     \
    \   val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n \
    \       val notBoth = keys.filter(!both.contains(_))\n        notBoth.isEmpty",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])", "        if(dict.isEmpty) false\n \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val result = both.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        result", "        val keys = dict.keys\n        if (keys.length == 0)\
    \ return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keySet\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty == upperCaseKeys.isEmpty",
  "        if(dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val allLowerCaseKeys = keys.forall(_.toLowerCase.equalsIgnoreCase)\n\
    \        val allUpperCaseKeys = keys.forall(_.toUpperCase.equalsIgnoreCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        val allKeysAreStrings\
    \ = allKeys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = allKeys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStrings\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings)\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrUpperCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings || allKeysAreStringsOrUpperCase)\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrLowerCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings || allKeysAreStringsOrLowerCase)\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrUpperCaseOrLowerCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings || allKeysAreStringsOrUpperCaseOrLowerCase)\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStrings\
    \ = allKeys.forall(_.isInstance", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n        upperCaseKeys.forall(key =>\
    \ dict.get(key).isInstanceOf[String])", "        val keys = dict.keys\n      \
    \  val upperCaseKeys = keys.filter(_.isUpper)\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeysCount = upperCaseKeys.size\n        val lowerCaseKeysCount\
    \ = lowerCaseKeys.size\n        val isAllUpperCase = upperCaseKeysCount == keys.size\n\
    \        val isAllLowerCase = lowerCaseKeysCount == keys.size\n        val isAllCase\
    \ = isAllUpperCase && isAllLowerCase\n        val isAllCaseOrNot = isAllCase ||\
    \ upperCaseKeysCount == 0 || lowerCaseKeysCount == 0\n        isAllCaseOrNot",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keys\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allKeysAreStrings = keys.forall(_.isInstanceOf[String])\n       \
    \ val allKeysAreStringsOrUpperCase = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNot",
  "        if(dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(key => (key, key.toLowerCase, key.toUpperCase))\n\
    \        val result = lower == upper || both == keys\n        result", "     \
    \   val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val lowerSet = lower.toSet\n        val upperSet = upper.toSet\n       \
    \ val result = lowerSet.intersect(upperSet).isEmpty\n        result", "      \
    \  val keys = dict.keys\n        if (keys.length == 0) return false\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        if (dict.isEmpty) {\n            return false\n        }\n        var flag\
    \ = true\n        val keys = dict.keys\n        keys.foreach { key =>\n      \
    \      if (key.isInstanceOf[String]) {\n                if (key.toString.toLowerCase\
    \ != key.toString.toUpperCase) {\n                    flag = false\n         \
    \       }\n            } else {\n                flag = false\n            }\n\
    \        }\n        return flag", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == key) \n            || upperCaseKeys.forall(key\
    \ => dict.get(key) == key)", "        val keys = dict.keys\n        val isAllStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val isAllUpper = keys.forall(_.toUpperCase.isInstanceOf[String])\n\
    \        val isAllLower = keys.forall(_.toLowerCase.isInstanceOf[String])\n  \
    \      isAllStrings && isAllUpper && isAllLower", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        allLowerCaseKeys && allUpperCaseKeys", "        val keys = dict.keySet\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).toLowerCase == dict.get(key))\n\
    \        upperCaseKeys.forall(key => dict.get(key).toUpperCase == dict.get(key))",
  "        if(dict.isEmpty) false\n        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val lowerSet = lower.toSet\n        val upperSet = upper.toSet\n       \
    \ if(lowerSet.size == upperSet.size && lowerSet.size == keys.size) true\n    \
    \    else false", "        val keys = dict.keys\n        if(keys.length == 0)\
    \ return false\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val result\
    \ = both.forall(x => dict(x) == dict(x))\n        return result", "        val\
    \ keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        if(dict.isEmpty)\
    \ false\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains)\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isDefined) && upperCaseKeys.forall(key => dict.get(key).isDefined)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.contains(key))\n        upperCaseKeys.forall(key => dict.contains(key))",
  "        val keys = dict.keys\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toLowerCase.equals(_.toLowerCase))", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val isLowerOrUpper = lower ++ upper.forall(_.contains(_))\n        !isLowerOrUpper\
    \ && keys.forall(_.isInstanceOf[String])", "        val keys = dict.keys\n   \
    \     if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n       \
    \ lowerCaseDict.isEmpty  && upperCaseDict.isEmpty", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        val lowerDict = lowerKeys.toSet\n\
    \        val upperDict = upperKeys.toSet\n        if (lowerDict.size == keys.length\
    \ && upperDict.size == keys.length)\n            return true\n        return false",
  "        if (dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.forall\
    \ { case (k,v) => v == upperCaseDict.get(k) }", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val allKeys = lowerCaseKeys ++ upperCaseKeys\n\
    \        val isAllKeysString = allKeys.forall(_.isInstanceOf[String])\n      \
    \  val isAllKeysStringOrAllKeysStrings = allKeys.forall(_.isInstanceOf[String]\
    \ || _.isInstanceOf[String])\n        val isAllKeysStringOrAllKeysStringsOrAllKeysStrings\
    \ = allKeys.forall(_.isInstanceOf[String] || _.isInstanceOf[String] || _.isInstanceOf[String])\n\
    \        isAllKeysString && isAllKeysStringOrAllKeysStrings && isAllKeysStringOrAllKeysStringsOrAllKeysStrings",
  "        if(dict.isEmpty) false\n        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n     \
    \   val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n  \
    \      val notAll = keys.filterNot(all.contains)\n        notAll.isEmpty", " \
    \       val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val notAllKeysAreStrings = keys.filter(!_.toString.isInstanceOf[String]).isEmpty\n\
    \        val notAllKeysAreStringsOrUpperCase = keys.filter(!_.toString.isInstanceOf[String]\
    \ || _.toString.toUpperCase == _.toString.toUpperCase).isEmpty\n        val notAllKeysAreStringsOrLowerCase\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toLowerCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBoth = keys.filter(!_.toString.isInstanceOf[String]\
    \ || _.toString.toUpperCase == _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNull\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNull\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNullOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val not", "        val keys = dict.keys\n\
    \        if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        if(lowerCaseKeys.forall(_.equals(upperCaseKeys)))\
    \ return true\n        else return false", "        val keys = dict.keys\n   \
    \     if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keySet\n\
    \        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val isAllStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val isAllUppercase = keys.forall(_.isInstanceOf[String]\
    \ && _.toUpperCase == _)\n        isAllStrings && isAllUppercase", "        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(key => (key, key.toUpperCase))\n\
    \        val all = lower ++ upper ++ both\n        val isAll = all.forall(key\
    \ => dict.get(key) == key)\n        !isAll", "        if (dict.isEmpty) false\n\
    \        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || \n              dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))",
  "        if (dict.isEmpty) false\n        else (\n            dict.keys.forall(_.isInstanceOf[String])\
    \ &&\n            dict.keys.forall(_.isInstanceOf[String]) &&\n            dict.keys.forall(_.toLowerCase\
    \ == _.toLowerCase)\n        )", "        if (dict.isEmpty) false\n        else\
    \ (dict.toList.map(_.toLowerCase).forall(_.equals(\"name\"))\n            || dict.toList.map(_.toUpperCase).forall(_.equals(\"\
    NAME\")))", "        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        if(dict.isEmpty) false\n        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => !upperCaseKeys.contains(key))", "        val keys = dict.keySet\n       \
    \ val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(k => k -> dict.get(k).toString.toUpperCase)\n   \
    \     val all = lower ++ upper ++ both\n        all.forall(k => k._1.equals(k._2))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val isLower = lower.forall(_.isInstanceOf[String])\n\
    \        val isUpper = upper.forall(_.isInstanceOf[String])\n        val isSame\
    \ = keys.forall(_.isInstanceOf[String])\n        isSame && isLower && isUpper",
  "        if(dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.forall(lowerCaseKey\
    \ => upperCaseDict.contains(lowerCaseKey))", "        val keys = dict.keys\n \
    \       val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        if(dict.isEmpty) false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \         || upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict2 = dict.filterKeys(_.toLowerCase.contains(\"b\"))\n\
    \        val upperCaseDict2 = dict.filterKeys(_.toUpperCase.contains(\"B\"))\n\
    \        val lowerCaseDict3 = dict.filterKeys(_.toLowerCase.contains(\"c\"))\n\
    \        val upperCaseDict3 = dict.filterKeys(_.toUpperCase.contains(\"C\"))\n\
    \        val lowerCaseDict4 = dict.filterKeys(_.toLowerCase.contains(\"d\"))\n\
    \        val upperCaseDict4 = dict.filterKeys(_.toUpperCase.contains(\"D\"))\n\
    \        val lowerCaseDict5 = dict.filterKeys(_.toLowerCase.contains(\"e\"))\n\
    \        val upperCaseDict5 = dict.filterKeys(_.toUpperCase.contains(\"E\"))\n\
    \        val lowerCaseDict6 = dict.filterKeys(_.toLowerCase.contains(\"f\"))\n\
    \        val upperCaseDict6 = dict.filterKeys(_.toUpperCase.contains(\"F\"))\n\
    \        val lowerCaseDict7 = dict.filterKeys(_.toLowerCase.contains(\"g\"))\n\
    \        val upperCaseDict7 = dict.filterKeys(_.toUpperCase.contains(\"G\"))\n\
    \        val lowerCaseDict8 = dict.filterKeys(_.toLowerCase.contains(\"h\"))\n\
    \        val upperCaseDict8 = dict.filterKeys(_.toUpperCase.contains(\"H\"))\n\
    \        val lowerCaseDict9 = dict.filterKeys(_.toLowerCase.contains(\"i\"))\n\
    \        val upperCaseDict9 = dict.filterKeys(_.toUpperCase.contains(\"I\"))\n\
    \        val lowerCaseDict10 = dict.filterKeys(_.toLowerCase.contains(\"j\"))\n\
    \        val upperCaseDict10 = dict.filterKeys(_.toUpperCase.contains(\"J\"))\n\
    \        val lowerCaseDict11 = dict.filterKeys(_.toLowerCase.contains(\"k\"))\n\
    \        val upperCaseDict11 = dict.filterKeys(_.toUpperCase.contains(\"K\"))\n\
    \        val lowerCaseDict12 = dict.filterKeys(_.toLowerCase.contains(\"l\"))\n\
    \        val upperCaseDict12 = dict.filterKeys(_.toUpperCase.contains(\"L\"))\n\
    \        val lowerCaseDict13 = dict.filterKeys(_.toLowerCase.contains(\"m\"))\n\
    \        val upperCaseDict13 = dict.filterKeys(_.toUpperCase.contains(\"M\"))\n\
    \        val lowerCaseDict14 = dict.filterKeys(_.toLowerCase.contains(\"n\"))\n\
    \        val upperCaseDict14", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        if (keys.length == 0) false\n        else\
    \ keys.forall(_.isInstanceOf[String]) && keys.forall(_.toLowerCase == _.toLowerCase)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        if (lowerCaseKeys.isEmpty)\
    \ {\n            if (upperCaseKeys.isEmpty) {\n                return true\n \
    \           } else {\n                return false\n            }\n        } else\
    \ {\n            if (upperCaseKeys.isEmpty) {\n                return false\n\
    \            } else {\n                return true\n            }\n        }",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keySet\n\
    \        val isStringInLowerCase = keys.forall(_.toString.toLowerCase.contains(\"\
    a\"))\n        val isStringInUpperCase = keys.forall(_.toString.toUpperCase.contains(\"\
    A\"))\n        isStringInLowerCase && isStringInUpperCase", "        val keys\
    \ = dict.keys\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isLower) && keys.forall(_.isUpper)", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys\n            val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \            val allLowerCase = keys.forall(_.toLowerCase.equalsIgnoreCase(lowerCaseKeys))\n\
    \            val allUpperCase = keys.forall(_.toUpperCase.equalsIgnoreCase(upperCaseKeys))\n\
    \            allLowerCase && allUpperCase\n        }", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n        upperCaseKeys.forall(key =>\
    \ dict.get(key).isInstanceOf[String])", "        if (dict.isEmpty) false\n   \
    \     else (dict.keys.toSet.toList.forall(_.isInstanceOf[String]) || dict.keys.toSet.toList.forall(_.isInstanceOf[String])\
    \ && dict.values.toSet.toList.forall(_.isInstanceOf[String]))", "        val keys\
    \ = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()",
  "        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))", "     \
    \   val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lower = keys.map(_.toLowerCase)\n        val\
    \ upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower ++ upper.forall(_.contains(_))\n\
    \        return isLowerOrUpper", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n      \
    \  val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        else if(keys.forall(_.isInstanceOf[String])) true\n        else\
    \ false", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase", "        val keys = dict.keys\n  \
    \      val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        allLowerCaseKeys && allUpperCaseKeys", "        if(dict.isEmpty) false\n\
    \        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val both = keys.map(k =>\
    \ k -> dict.get(k).toLowerCase)\n        val bothUpper = keys.map(k => k -> dict.get(k).toUpperCase)\n\
    \        val bothLower = keys.map(k => k -> dict.get(k).toLowerCase)\n       \
    \ val bothUpperLower = keys.map(k => k -> dict.get(k).toLowerCase)\n        val\
    \ bothLowerUpper = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper\
    \ = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper\
    \ = keys.map(k => k -> ", "        val keys = dict.keySet\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase.contains(\"a\"))\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase.contains(\"A\"))\n        lowerCaseKeys.isEmpty\
    \  && upperCaseKeys.isEmpty", "        val keys = dict.keys\n        if(keys.isEmpty)\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))", "        if (dict.isEmpty)\n            return\
    \ false\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toMap\n        val upperCaseDict = upperCaseKeys.toMap\n   \
    \     lowerCaseKeys.forall { key =>\n            val value = dict.get(key)\n \
    \           val lowerCaseValue = lowerCaseDict.get(key)\n            val upperCaseValue\
    \ = upperCaseDict.get(key)\n            val lowerCaseValueIsEmpty = lowerCaseValue\
    \ == None\n            val upperCaseValueIsEmpty = upperCaseValue == None\n  \
    \          if (lowerCaseValueIsEmpty && upperCaseValueIsEmpty)\n             \
    \   true\n            else if (lowerCaseValueIsEmpty || upperCaseValueIsEmpty)\n\
    \                false\n            else\n                value == lowerCaseValue\
    \ || value == upperCaseValue\n        }", "        val keys = dict.keys\n    \
    \    if (keys.isEmpty) false\n        else keys.toSet.size == keys.toSet.filter(_.isLower).size\
    \ == keys.toSet.filter(_.isUpper).size", "        val keys = dict.keys\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val containsAllLowerCaseKeys = lowerCaseKeys.forall(key => dict.contains(key))\n\
    \        val containsAllUpperCaseKeys = upperCaseKeys.forall(key => dict.contains(key))\n\
    \        containsAllLowerCaseKeys && containsAllUpperCaseKeys", "        val keys\
    \ = dict.keySet\n        if (keys.isEmpty) false\n        else {\n           \
    \ val lowerCaseKeys = keys.map(_.toLowerCase)\n            val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key => dict.get(key).toLowerCase\
    \ == dict.get(key))\n            upperCaseKeys.forall(key => dict.get(key).toUpperCase\
    \ == dict.get(key))\n        }", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allKeysAreStrings = allLowerCaseKeys || allUpperCaseKeys\n      \
    \  allKeysAreStrings", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val isAllLowerOrAllUpper =\
    \ lower.forall(x => upper.contains(x))\n        val isAllLowerOrAllUpperOrEmpty\
    \ = lower.forall(x => upper.contains(x) || keys.contains(x))\n        isAllLowerOrAllUpper\
    \ || isAllLowerOrAllUpperOrEmpty", "        if (dict.isEmpty)\n            return\
    \ false\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.forall(lowerCaseKey => upperCaseDict.contains(lowerCaseKey))",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val lower\
    \ = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n   \
    \     val both = keys.map(k => k -> dict.get(k).toLowerCase)\n        val all\
    \ = lower ++ upper ++ both\n        all forall keys.contains {k => k.length ==\
    \ 0 || lower(k) == upper(k)}", "        if (dict.isEmpty) false\n        else\
    \ {\n            val keys = dict.keys\n            val lower = keys.map(_.toLowerCase)\n\
    \            val upper = keys.map(_.toUpperCase)\n            val lowerSet = lower.toSet\n\
    \            val upperSet = upper.toSet\n            val result = lowerSet.subsetOf(upperSet)\n\
    \            result && lowerSet.size == upperSet.size\n        }", "        val\
    \ keys = dict.keys\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase == _.toString.toLowerCase || _.toString.toUpperCase\
    \ == _.toString.toUpperCase)", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        if(dict.isEmpty) false\n\
    \        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val allKeysAreStrings = keys.forall(_.isInstanceOf[String])\n       \
    \ val allKeysAreStringsOrUpperCase = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInBothCases\
    \ = isStringInLowerCase && isStringInUpperCase\n        val isStringInBothCasesAndNotEmpty\
    \ = isStringInBothCases && keys.nonEmpty\n        isStringInBothCasesAndNotEmpty",
  "        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(\"\
    state\")) || dict.toList.map(_.toLowerCase).forall(_.equals(\"zip\")))", "   \
    \     val keys = dict.keys\n        if (keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase", "        val keys = dict.keys\n  \
    \      val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val isAllLowerOrUpper = both.forall(x\
    \ => keys.contains(x))\n        val isAllLowerOrUpperOrEmpty = both.forall(x =>\
    \ keys.contains(x) || x.isEmpty)\n        isAllLowerOrUpper && isAllLowerOrUpperOrEmpty",
  "        val keys = dict.keys\n        if (keys.length == 0) return false\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys =\
    \ keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()", "        if (dict.isEmpty) false\n        else\
    \ {\n            val keys = dict.keys\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \            val upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n        }", "        val keys\
    \ = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))", "        val keys = dict.keys\n        val\
    \ lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val allLowerCaseKeys = lowerCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allUpperCaseKeys = upperCaseKeys.forall(_.isInstanceOf[String])\n\
    \        val allKeys = allLowerCaseKeys && allUpperCaseKeys\n        allKeys",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase", "        val keys = dict.keySet\n\
    \        if (keys.length == 0) return false\n        val lowerKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        if (lowerKeys.isEmpty) false\n        else if (upperKeys.isEmpty)\
    \ true\n        else false", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerKeys = keys.map(_.toLowerCase)\n\
    \        val upperKeys = keys.map(_.toUpperCase)\n        lowerKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n        upperKeys.forall(key => dict.get(key).isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  || upperCaseDict.isEmpty", "        val keys = dict.keys\n        if (keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        return lowerCaseDict.isEmpty && upperCaseDict.isEmpty", "        val\
    \ keys = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        if(dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val keysAreInUpperCase = upperCaseKeys.forall(_.contains(_))\n\
    \        val keysAreInLowerCase = lowerCaseKeys.forall(_.contains(_))\n      \
    \  keysAreInUpperCase || keysAreInLowerCase", "        if (dict.isEmpty) false\n\
    \        else (dict.toList.map(_.toLowerCase).forall(_.isLower) || dict.toList.map(_.toUpperCase).forall(_.isUpper))",
  "        val keys = dict.keys\n        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keySet\n        val lowerCaseKeys\
    \ = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n        val\
    \ upperCaseKeys = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        if(dict.isEmpty)\n\
    \            return false\n        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = lowerCaseKeys.toSet\n        val upperCaseDict =\
    \ upperCaseKeys.toSet\n        lowerCaseDict.size == upperCaseDict.size && lowerCaseDict.size\
    \ == keys.size", "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty", "        val keys =\
    \ dict.keySet\n        if (keys.isEmpty) false\n        else keys.forall(_.isInstanceOf[String])",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val isLower = lower.forall(_.isInstanceOf[String])\n\
    \        val isUpper = upper.forall(_.isInstanceOf[String])\n        val isSame\
    \ = keys.forall(_.toLowerCase() == _.toUpperCase())\n        isSame && isLower\
    \ && isUpper", "        val keys = dict.keySet\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String])", "        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase.nonEmpty)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n       \
    \ lowerCaseKeys.forall(lowerCaseDict.contains) &&\n            upperCaseKeys.forall(upperCaseDict.contains)",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        allLower\
    \ && allUpper", "        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String]))\n            keys.forall(_.toString.toLowerCase.equals(keys.toString.toLowerCase))\n\
    \        else\n            keys.forall(_.toString.toUpperCase.equals(keys.toString.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInBothCases\
    \ = isStringInLowerCase && isStringInUpperCase\n        !isStringInBothCases",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key) && upperCaseKeys.forall(key => dict.get(key) == key)",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase", "        val keys = dict.keys\n  \
    \      val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val none = keys.filterNot(all.contains)\n\
    \        none.isEmpty", "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val result = all forall keys.contains {\n            case key => key.toLowerCase\
    \ == key.toUpperCase || key.toUpperCase == key.toLowerCase\n        }\n      \
    \  result", "        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val isAllLowerCase = lowerCaseKeys.forall(_.equals(_))\n        val isAllUpperCase\
    \ = upperCaseKeys.forall(_.equals(_))\n        isAllLowerCase && isAllUpperCase",
  "        val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()",
  "        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n   \
    \     val upper = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        allLower\
    \ && allUpper", "        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys\n            val lower\
    \ = keys.map(_.toLowerCase)\n            val upper = keys.map(_.toUpperCase)\n\
    \            val allLower = lower.forall(_.isInstanceOf[String])\n           \
    \ val allUpper = upper.forall(_.isInstanceOf[String])\n            allLower &&\
    \ allUpper\n        }", "        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(\"\
    state\")) || dict.toList.map(_.toUpperCase).forall(_.equals(\"STATE\")))", " \
    \       val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n  \
    \      val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isLowercase = lower.forall(_.isInstanceOf[String])\n        val isUppercase\
    \ = upper.forall(_.isInstanceOf[String])\n        val isBoth = both.forall(_.isInstanceOf[String])\n\
    \        val isAll = keys.forall(_.isInstanceOf[String])\n        isAll", "  \
    \      val keys = dict.keys\n        if(keys.length == 0) return false\n     \
    \   val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n       \
    \ val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n        if(upperCaseDict.isEmpty)\
    \ return false\n        if(lowerCaseDict.isEmpty) return true\n        val keysAreEqual\
    \ = upperCaseKeys.forall(lowerCaseDict.contains)\n        if(keysAreEqual) return\
    \ true\n        return false", "        val keys = dict.keySet\n        val upperCaseKeys\
    \ = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n        val\
    \ lowerCaseKeys = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \        val allKeys = upperCaseKeys ++ lowerCaseKeys\n        allKeys.size ==\
    \ keys.size", "        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  &&  upperCaseDict.isEmpty", "        val keys = dict.keys\n        if(keys.length\
    \ == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n  \
    \      val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n        val isString\
    \ = keys.forall(_.isInstanceOf[String])\n        val isStringInBoth = both.forall(_.isInstanceOf[String])\n\
    \        isString && isStringInBoth", "        val keys = dict.keys\n        val\
    \ lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(k => (k.toLowerCase, k.toUpperCase))\n        val\
    \ result = lower == upper || both == keys\n        result", "        val keys\
    \ = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val allLowerOrAllUpper = lower ++ upper\n\
    \        allLowerOrAllUpper.forall(key => dict.get(key) != null)", "        val\
    \ keys = dict.keys\n        if(keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        if(keys.length == 0) return false\n       \
    \ val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key.toLowerCase)\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == key.toUpperCase)", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeys\
    \ = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty", "        val keys =\
    \ dict.keys\n        if (keys.length == 0) return false\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val allLowerOrAllUpper =\
    \ lower.forall(_.isEmpty || upper.forall(_.isEmpty))\n        val allLowerOrAllUpperOrEmpty\
    \ = allLowerOrAllUpper || lower.forall(_.nonEmpty) || upper.forall(_.nonEmpty)\n\
    \        return allLowerOrAllUpperOrEmpty", "        val keys = dict.keys\n  \
    \      if(keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).toLowerCase == dict.get(key))\n        upperCaseKeys.forall(key\
    \ => dict.get(key).toUpperCase == dict.get(key))", "        val keys = dict.keySet\n\
    \        if (keys.length == 0) return false\n        val lowerKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerKeys.isEmpty  && upperKeys.isEmpty", "        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val all = lower ++ upper\n        val result = all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n\
    \        val lowerCaseDict2 = dict.filterKeys(_.toLowerCase.contains(\"b\"))\n\
    \        val upperCaseDict2 = dict.filterKeys(_.toUpperCase.contains(\"B\"))\n\
    \        val lowerCaseDict3 = dict.filterKeys(_.toLowerCase.contains(\"c\"))\n\
    \        val upperCaseDict3 = dict.filterKeys(_.toUpperCase.contains(\"C\"))\n\
    \        val lowerCaseDict4 = dict.filterKeys(_.toLowerCase.contains(\"d\"))\n\
    \        val upperCaseDict4 = dict.filterKeys(_.toUpperCase.contains(\"D\"))\n\
    \        val lowerCaseDict5 = dict.filterKeys(_.toLowerCase.contains(\"e\"))\n\
    \        val upperCaseDict5 = dict.filterKeys(_.toUpperCase.contains(\"E\"))\n\
    \        val lowerCaseDict6 = dict.filterKeys(_.toLowerCase.contains(\"f\"))\n\
    \        val upperCaseDict6 = dict.filterKeys(_.toUpperCase.contains(\"F\"))\n\
    \        val lowerCaseDict7 = dict.filterKeys(_.toLowerCase.contains(\"g\"))\n\
    \        val upperCaseDict7 = dict.filterKeys(_.toUpperCase.contains(\"G\"))\n\
    \        val lowerCaseDict8 = dict.filterKeys(_.toLowerCase.contains(\"h\"))\n\
    \        val upperCaseDict8 = dict.filterKeys(_.toUpperCase.contains(\"H\"))\n\
    \        val lowerCaseDict9 = dict.filterKeys(_.toLowerCase.contains(\"i\"))\n\
    \        val upperCaseDict9 = dict.filterKeys(_.toUpperCase.contains(\"I\"))\n\
    \        val lowerCaseDict10 = dict.filterKeys(_.toLowerCase.contains(\"j\"))\n\
    \        val upperCaseDict10 = dict.filterKeys(_.toUpperCase.contains(\"J\"))\n\
    \        val lowerCaseDict11 = dict.filterKeys(_.toLowerCase.contains(\"k\"))\n\
    \        val upperCaseDict11 = dict.filterKeys(_.toUpperCase.contains(\"K\"))\n\
    \        val lowerCaseDict12 = dict.filterKeys(_.toLowerCase.contains(\"l\"))\n\
    \        val upperCaseDict12 = dict.filterKeys(_.toUpperCase.contains(\"L\"))\n\
    \        val lowerCaseDict13 = dict.filterKeys(_.toLowerCase.contains(\"m\"))\n\
    \        val upperCaseDict13 = dict.filterKeys(_.toUpperCase.contains(\"M\"))\n\
    \        val lowerCaseDict14 = dict.filterKeys(_.toLowerCase.contains(\"n\"))\n\
    \        val upperCaseDict14", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict\
    \ = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.equals(_.toString.toLowerCase))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.equals(_.toString.toUpperCase))\n\
    \        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty", "        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = keys.forall(_.toLowerCase.equalsIgnoreCase)\n        val allUpperCaseKeys\
    \ = keys.forall(_.toUpperCase.equalsIgnoreCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\"))\n        val allKeysAreStringsOrInt\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Int\"))\n        val allKeysAreStringsOrLong = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Long\"))\n        val allKeysAreStringsOrDouble\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Double\"))\n        val allKeysAreStringsOrBoolean = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Boolean\"))\n        val allKeysAreStringsOrChar\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Char\"))\n        val allKeysAreStringsOrByte = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Byte\"))\n        val allKeysAreStringsOrShort\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Short\"))\n        val allKeysAreStringsOrInt = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Int\"))\n        val allKeysAreStringsOrLong\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Long\"))\n        val allKeysAreStringsOrDouble = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Double\"))\n        val allKeysAreStringsOrBoolean\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Boolean\"))\n        val allKeysAreStringsOrChar = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") "]
stop_tokens:
- "\n    }\n"
