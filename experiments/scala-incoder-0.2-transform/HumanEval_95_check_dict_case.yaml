name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\"\
  )))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
  , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    //\
  \ >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\"\
  , \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isAllStringInLowerCase\
    \ = isStringInLowerCase && isStringInUpperCase\n        val isAllStringInUpperCase\
    \ = isStringInLowerCase && !isStringInUpperCase\n        val isAllStringInBothCases\
    \ = isAllStringInLowerCase && isAllStringInUpperCase\n        isAllStringInBothCases",
  "        if (dict.isEmpty)\n            return false\n        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val lowerSet = lower.toSet\n        val upperSet = upper.toSet\n    \
    \    val result = lowerSet.subsetOf(upperSet)\n        if (result)\n         \
    \   return true\n        return false", "        val keys = dict.keys\n      \
    \  if (keys.length == 0) false\n        else keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase() == _.toString.toLowerCase)", "     \
    \   val keys = dict.keys\n        if(keys.isEmpty) false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])", "    \
    \    val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNot",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = keys.forall(_.toLowerCase.contains(\"a\"))\n        val allUpperCaseKeys =\
    \ keys.forall(_.toUpperCase.contains(\"A\"))\n        val allKeysAreStrings =\
    \ keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.contains(\"a\"))\n   \
    \     val allKeysAreStringsOrInUpperCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.contains(\"A\"))\n        val allKeysAreStringsOrBothCases\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys && allUpperCaseKeys)\n\
    \        val allKeysAreStringsOrBothCasesOrInLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || allLowerCaseKeys || allUpperCaseKeys)\n        val allKeysAreStringsOrBothCasesOrInUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCaseKeys || allLowerCaseKeys)\n\
    \        val allKeysAreStringsOrBothCasesOrBothCases = keys.forall(_.isInstanceOf[String]\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrInUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCaseKeys || allLowerCaseKeys\
    \ || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrBothCases\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrBothCasesOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCase", "        val keys\
    \ = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val\
    \ upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key =>\
    \ dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val allKeys = upperCaseKeys ++ lowerCaseKeys\n\
    \        val isAllKeysString = allKeys.forall(_.isInstanceOf[String])\n      \
    \  val isAllKeysStringOrUpperCase = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        isAllKeysString && isAllKeysStringOrUpperCase", "        val keys = dict.keys\n\
    \        if (keys.length == 0) return false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))", "        val keys = dict.keys\n\
    \        if(keys.isEmpty) false\n        else if(keys.forall(_.isInstanceOf[String]))\
    \ true\n        else if(keys.forall(_.isInstanceOf[String]) && keys.forall(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)) true\n        else false", "        val keys = dict.keys\n\
    \        if (keys.length == 0) false\n        else if (keys.forall(_.isInstanceOf[String]))\
    \ true\n        else false", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == key) \n            || upperCaseKeys.forall(key\
    \ => dict.get(key) == key)", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty", "        val\
    \ keys = dict.keys\n        if (keys.length == 0) return false\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key) == dict.get(key.toLowerCase))\n\
    \        upperCaseKeys.forall(key => dict.get(key) == dict.get(key.toUpperCase))",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     val isAllKeysLowerCase = lowerCaseDict.size == keys.size\n        val isAllKeysUpperCase\
    \ = upperCaseDict.size == keys.size\n        val isAllKeysBothCases = lowerCaseDict.intersect(upperCaseDict).size\
    \ == keys.size\n        isAllKeysLowerCase && isAllKeysUpperCase && isAllKeysBothCases",
  "        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => !upperCaseKeys.contains(key))", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys\n            val lower = keys.map(_.toLowerCase)\n\
    \            val upper = keys.map(_.toUpperCase)\n            val both = lower\
    \ ++ upper\n            val result = both.forall(x => keys.contains(x))\n    \
    \        result\n        }", "        if(dict.isEmpty)\n            return false\n\
    \        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n \
    \       val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key =>\
    \ (key.toLowerCase, key.toUpperCase))\n        val result = lower == upper ||\
    \ both == keys\n        result", "        val keys = dict.keys\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \     upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])"]
stop_tokens:
- "\n    }\n"
