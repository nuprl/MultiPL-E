name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ["        val max = l.foldLeft(0l) { (max, e) => if (e > max) e else\
    \ max }\n        max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max ", "        val\
    \ maxElem = l.foldLeft(0l.toLong)((max, elem) => if (elem > max) elem else max)\n\
    \        l.indexOf(maxElem)", "        val max = l.foldLeft(0l) { (max, e) =>\n\
    \            if (e > max) e else max\n        }\n        max ", "        val maxElem\
    \ = l.foldLeft(0l)((max, elem) => if (max < elem) elem else max)\n        maxElem",
  "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n            if (max > elem)\
    \ max else elem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max > elem) max else elem\n        }\n   \
    \     maxElem", "        val max = l.foldLeft(0l){\n            (max, elem) =>\
    \ if (elem > max) elem else max\n        }\n        max", "        val maxElem\
    \ = l.foldLeft(0l){ (max, elem) => if (max < elem) elem else max }\n        maxElem",
  "        val maxElem = l.foldLeft(0l)((max, elem) => if (max < elem) elem else max)\n\
    \        maxElem", "        val max = l.foldLeft(0l){ (max, elem) => if (elem\
    \ > max) elem else max }\n        max ", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) => if (max < elem) elem else max }\n        l.indexOf(maxElem)",
  "        l.foldLeft(0L) {\n            (max, el) => if (max < el) max else el\n\
    \        }", "        val maxElem = l.foldLeft(0L) {\n            (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem\n        }\n        maxElem", "   \
    \     val maxElem = l.foldLeft(0L) {\n            (max, elem) => if (max < elem)\
    \ elem else max\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)(\
    \ (maxElem, elem) => if (elem > maxElem) elem else maxElem)\n        maxElem",
  "        val max = l.foldLeft(0l)( (max, elem) => if (elem > max) elem else max\
    \ )\n        max ", "        val maxElem = l.foldLeft(0l) { (max, e) => if (e\
    \ > max) e else max }\n        maxElem", "        val max = l.foldLeft(0l) { (max,\
    \ e) => if (e > max) e else max }\n        max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max ", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max\
    \ > elem) max else elem }\n        l.indexOf(maxElem)", "        val maxElem =\
    \ l.foldLeft(0l) { (max, elem) => if (max < elem) elem else max }\n        maxElem",
  "        val maxElem = l.foldLeft(0L) {\n            (maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem\n        }\n        maxElem", "        val max\
    \ = l.foldLeft(0l.toLong)((max, x) => if (x > max) x else max)\n        l.indexOf(max)",
  "        val max = l.foldLeft(0l)( (max, x) => if (x > max) x else max )\n     \
    \   max ", "        val max = l.foldLeft(0l)(_ > _) ? _ : _\n        l.foldLeft(0l)(_\
    \ > _) ? max : _", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n  \
    \          if (max > elem) max else elem\n        }\n        maxElem", '        l.foldLeft(0l)
    { (max, e) => if (e > max) e else max }', "        val max = l.foldLeft(0l) {\
    \ (max, e) => if (e > max) e else max }\n        max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max ", "        val maxElem = l.foldLeft(0l)( (maxElem, elem) =>\
    \ if (elem > maxElem) elem else maxElem)\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0L){ (max, elem) => if (max < elem) elem else max }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max > elem) max else\
    \ elem }\n        l.indexOf(maxElem)", "        val max = l.foldLeft(0l) { (max,\
    \ x) => if (x > max) x else max }\n        max ", "        val maxElem = l.foldLeft(0l)(\
    \ (maxElem, elem) => if (elem > maxElem) elem else maxElem)\n        return maxElem",
  "        val max = l.foldLeft(0L)( (max, x) => if (x > max) x else max )\n     \
    \   max ", "        val max = l.foldLeft(0L)(_ > _) ? _ : _\n        l.max", " \
    \       val maxElem = l.foldLeft(0l) { (max, elem) =>\n            if (max < elem)\
    \ max else elem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0L)(\
    \ (max, elem) => if (max < elem) elem else max )\n        maxElem", "        val\
    \ maxElem = l.foldLeft(0l) { (max, elem) => if (elem > max) elem else max }\n\
    \        l.last", "        val maxElem = l.foldLeft(0l){\n            (max, elem)\
    \ => if (max < elem) elem else max\n        }\n        maxElem", "        val\
    \ maxElem = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max < elem) elem else\
    \ max }\n        l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0l) {\
    \ (max, elem) =>\n            if (max < elem) max else elem\n        }\n     \
    \   maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n       \
    \     if (max > elem) max else elem\n        }\n        maxElem", "        val\
    \ max = l.foldLeft(0l.toLong)((max, x) => if (x > max) x else max)\n        max ",
  "        val max = l.foldLeft(0l){ (max, e) => if (e > max) e else max }\n     \
    \   max ", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n          \
    \  if (max < elem) elem else max\n        }\n        maxElem", "        val max\
    \ = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n        max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max ", "        val maxElem = l.foldLeft(0L)\
    \ { (max, elem) => if (max < elem) elem else max }\n        maxElem", "      \
    \  val maxElem = l.foldLeft(0L) { (max, elem) =>\n            if (max > elem)\
    \ max else elem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max > elem) max else elem\n        }\n   \
    \     maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (elem\
    \ > max) elem else max }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max < elem) max else elem\n        }\n   \
    \     maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n     \
    \       if (max < elem) max else elem\n        }\n        maxElem", "        val\
    \ maxElem = l.foldLeft(0L){ (max, elem) =>\n            if (max < elem) elem else\
    \ max\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l) { (max,\
    \ elem) => if (elem > max) elem else max }\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0l) { (max, elem) => if (elem > max) elem else max }\n        maxElem",
  "        val maxElem = l.foldLeft(0l){ (maxElem, elem) =>\n            if (elem\
    \ > maxElem) elem else maxElem\n        }\n        maxElem", "        l.foldLeft(0l)\
    \ { (max, el) =>\n            if (max > el) max else el\n        }", "       \
    \ val maxElem = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n     \
    \   l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n\
    \            if (max < elem) max else elem\n        }\n        maxElem", "   \
    \     val max = l.foldLeft(0l){ (max, e) => if (e > max) e else max }\n      \
    \  max ", "        val max = l.foldLeft(0L) { (max, x) => if (x > max) x else\
    \ max }\n        max ", "        val maxElem = l.foldLeft(0l) { (maxElem, elem)\
    \ =>\n            if (elem > maxElem)\n                elem\n            else\n\
    \                maxElem\n        }\n        maxElem", "        val max = l.foldLeft(0l)\
    \ { (max, e) =>\n            if (e > max) e else max\n        }\n        max ",
  "        val max = l.foldLeft(0l)( (max, x) => if (x > max) x else max )\n     \
    \   max ", "        val max = l.foldLeft(0L) { (max, e) => if (e > max) e else\
    \ max }\n        max ", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\
    \ if (max < elem) elem else max }\n        l.indexOf(maxElem)", "        val maxElem\
    \ = l.foldLeft(0l) { (max, elem) =>\n            if (max > elem) max else elem\n\
    \        }\n        maxElem", "        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        l.indexOf(maxElem)", "    \
    \    val max = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n      \
    \  max ", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max < elem)\
    \ elem else max }\n        l.indexOf(maxElem)", "        val max = l.foldLeft(0l.toLong)((max,\
    \ x) => if (x > max) x else max)\n        max ", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) => if (elem > max) elem else max }\n        l.indexOf(maxElem)",
  "        val max = l.foldLeft(0l)(_ > _) ? _ : _\n        l.foldLeft(max)(_ > _)\
    \ ? _ : _", "        val max = l.foldLeft(0L) {\n            (max, x) => if (x\
    \ > max) x else max\n        }\n        max", "        val max = l.foldLeft(0l)\
    \ { (max, e) => if (e > max) e else max }\n        max ", "        val maxElem\
    \ = l.foldLeft(0l.toLong)((max, elem) => if (max < elem) elem else max)\n    \
    \    l.indexOf(maxElem)", '        l.foldLeft(0l) { (max, e) => if (e > max) e
    else max }', "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n        \
    \    if (max < elem) max else elem\n        }\n        maxElem", "        val\
    \ maxElem = l.foldLeft(0l)((max, elem) => if (elem > max) elem else max)\n   \
    \     l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (elem > max) elem else max)\n        l.last", "        val maxElem = l.foldLeft(0L)\
    \ { (max, elem) => if (elem > max) elem else max }\n        maxElem", "      \
    \  val maxElem = l.foldLeft(0l) { (max, elem) => if (elem > max) elem else max\
    \ }\n        l.last", "        val max = l.foldLeft(0L){ (max, x) => if (x > max)\
    \ x else max }\n        max ", "        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem",
  '        l.foldLeft(0l) { (max, e) => if (e > max) e else max }', "        val maxElem\
    \ = l.foldLeft(0l) { (max, e) => if (max < e) e else max }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0l) { (max, elem) => if (elem > max) elem else\
    \ max }\n        maxElem", "        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max ", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (elem > max)\
    \ elem else max }\n        l.last", "        val max = l.foldLeft(0l)( (max, elem)\
    \ => if (elem > max) elem else max )\n        max ", "        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0l) { (max, elem) => if (max > elem) max else elem }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n            if (max < elem)\
    \ max else elem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, e) => if (max < e) e else max }\n        l.indexOf(maxElem)", "    \
    \    val maxElem = l.foldLeft(0l) { (max, elem) => if (elem > max) elem else max\
    \ }\n        maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n\
    \            if (max > elem) max else elem\n        }\n        maxElem", '        l.foldLeft(0l)
    { (max, e) => if (e > max) e else max }', "        val max = l.foldLeft(0l)( (max,\
    \ x) => if (x > max) x else max )\n        max ", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max < elem) elem else max\n        }\n   \
    \     maxElem", "        val maxElem = l.foldLeft(0l) { (maxElem, e) =>\n    \
    \        if (e > maxElem) e else maxElem\n        }\n        maxElem", "     \
    \   val maxElem = l.foldLeft(0l)( (acc, x) => if (acc > x) acc else x )\n    \
    \    maxElem", "        val max = l.foldLeft(0l)( (max, x) => if (x > max) x else\
    \ max )\n        max ", "        val maxElem = l.foldLeft(0L) { (max, elem) =>\n\
    \            if (max < elem) elem else max\n        }\n        maxElem", "   \
    \     val maxElem = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n \
    \       l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0l){ (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)", "        val\
    \ maxElem = l.foldLeft(0l) { (max, e) =>\n            if (max < e) e\n       \
    \     else max\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max < elem) max else elem\n        }\n   \
    \     maxElem", "        val maxElem = l.foldLeft(0l) { (max, e) => if (e > max)\
    \ e else max }\n        maxElem", "        val max = l.foldLeft(0l) { (max, e)\
    \ =>\n            if (e > max) e else max\n        }\n        max", "        val\
    \ max = l.foldLeft(0l) { (max, elem) =>\n            if (elem > max) elem else\
    \ max\n        }\n        max", "        val maxElem = l.foldLeft(0l)( (max, elem)\
    \ => if (max < elem) elem else max )\n        maxElem", "        val maxElem =\
    \ l.foldLeft(0L) { (max, elem) => if (elem > max) elem else max }\n        maxElem",
  "        val maxElem = l.foldLeft(0l) { (maxElem, e) =>\n            if (e > maxElem)\
    \ e else maxElem\n        }\n        maxElem", "        val max = l.foldLeft(0l)\
    \ { (max, x) => if (x > max) x else max }\n        max ", "        val maxElem\
    \ = l.foldLeft(0l) { (max, elem) => if (max < elem) elem else max }\n        l.indexOf(maxElem)",
  '        l.foldLeft(0l) { (max, element) => if (element > max) element else max
    }', "        val max = l.foldLeft(0L) { (max, e) => if (e > max) e else max }\n\
    \        max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max ", "        val maxElem = l.foldLeft(0l)\
    \ { (max, e) => if (e > max) e else max }\n        l.max", "        val maxElem\
    \ = l.foldLeft(0l) { (max, elem) => if (max > elem) max else elem }\n        maxElem",
  "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max < elem) elem else\
    \ max }\n        maxElem", "        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) =>\n                if (elem > maxElem) elem else maxElem\n\
    \        }\n        maxElem", "        val max = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        max ", "        val max = l.foldLeft(0l){\
    \ (max, e) => if (e > max) e else max }\n        max ", "        val maxElem =\
    \ l.foldLeft(0l){ (max, elem) => if (elem > max) elem else max }\n        l.indexOf(maxElem)",
  "        val max = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n    \
    \    max ", "        val maxElem = l.foldLeft(0L) { (max, elem) =>\n         \
    \   if (max < elem) elem else max\n        }\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0L){ (max, elem) => if (max < elem) elem else max }\n        maxElem",
  "        val max = l.foldLeft(0L){ (max, e) => if (e > max) e else max }\n     \
    \   max ", "        val maxElem = l.foldLeft(0l.toLong)((max, elem) => if (max\
    \ > elem) max else elem)\n        maxElem", "        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        maxElem", "        val max\
    \ = l.foldLeft(0L) { (max, e) => if (e > max) e else max }\n        max ", " \
    \       val maxElem = l.foldLeft(0l.toLong)((max, elem) => if (max < elem) elem\
    \ else max)\n        maxElem", "        val max = l.foldLeft(0l)( (max, x) =>\
    \ if (x > max) x else max )\n        max ", "        val max = l.foldLeft(0l.toLong)((max,\
    \ x) => if (x > max) x else max)\n        max ", "        val maxElem = l.foldLeft(0L)\
    \ { (max, elem) =>\n            if (max < elem) max else elem\n        }\n   \
    \     maxElem", '        l.foldLeft(0l) { (max, element) => if (element > max)
    element else max }', "        val maxElem = l.foldLeft(0l)((max, elem) => if (max\
    \ > elem) max else elem)\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) => if (elem > max) elem else max }\n        maxElem", "      \
    \  val maxElem = l.foldLeft(0l) { (max, elem) => if (elem > max) elem else max\
    \ }\n        maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\
    \ if (elem > max) elem else max }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max < elem) max else elem\n        }\n   \
    \     maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (elem\
    \ > max) elem else max }\n        l.indexOf(maxElem)", "        val max = l.foldLeft(0l)\
    \ { (max, x) => if (x > max) x else max }\n        max.toLong", "        val maxElem\
    \ = l.foldLeft(0L) { (max, elem) => if (max < elem) elem else max }\n        maxElem",
  "        val maxElem = l.foldLeft(0l)( (max, elem) => if (max > elem) max else elem\
    \ )\n        maxElem", '        l.foldLeft(0l) { (max, e) => if (e > max) e else
    max }', "        val maxElem = l.foldLeft(0l.toLong){\n            (max, elem)\
    \ => if (elem > max) elem else max\n        }\n        maxElem", "        val\
    \ max = l.foldLeft(0l.toLong)(_ > _) ? _ : _\n        l.foldLeft(max)(_ > _) ?\
    \ _ : _", "        val maxElem = l.foldLeft(0l){ (maxElem, elem) =>\n        \
    \    if (elem > maxElem) elem else maxElem\n        }\n        maxElem", "   \
    \     val maxElem = l.foldLeft(0l) { (max, elem) => if (max < elem) elem else\
    \ max }\n        maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem", "        val maxElem =\
    \ l.foldLeft(0L){\n            (maxElem, elem) => if (elem > maxElem) elem else\
    \ maxElem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)(_\
    \ > _) ? _ : _\n        l.max", "        val maxElem = l.foldLeft(0l) { (max,\
    \ elem) =>\n            if (max < elem) elem else max\n        }\n        maxElem",
  "        l.foldLeft(0l) { (max, elem) =>\n            if (max > elem) max else elem\n\
    \        }", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max >\
    \ elem) max else elem }\n        maxElem", "        val max = l.foldLeft(0L)(\
    \ (max, x) => if (x > max) x else max )\n        max ", "        val maxElem =\
    \ l.foldLeft(0l)( (maxElem, elem) => if (elem > maxElem) elem else maxElem)\n\
    \        maxElem", "        val max = l.foldLeft(0L){ (max, e) => if (e > max)\
    \ e else max }\n        max ", '        l.foldLeft(0l) { (max, el) => if (max
    < el) max else el }', "        val max = l.foldLeft(0L) { (max, e) =>\n      \
    \      if (e > max) e else max\n        }\n        max", "        val maxElem\
    \ = l.foldLeft(0l)(_ > _) ? _ : _\n        l.max", "        val max = l.foldLeft(0L)\
    \ { (max, e) =>\n            if (e > max) e else max\n        }\n        max",
  "        val maxElem = l.foldLeft(0l) { (max, elem) => if (max > elem) max else\
    \ elem }\n        maxElem", "        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.last", "        val maxElem = l.foldLeft(0L)\
    \ { (max, elem) => if (max < elem) elem else max }\n        maxElem", '        l.foldLeft(0l)
    { (max, element) => if (element > max) element else max }', "        val maxElem\
    \ = l.foldLeft(0l) { (max, elem) =>\n            if (max > elem) max else elem\n\
    \        }\n        maxElem", "        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last", "        val maxElem =\
    \ l.foldLeft(0l) { (max, e) =>\n            if (max < e) max else e\n        }\n\
    \        maxElem", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (elem\
    \ > max) elem else max }\n        l.indexOf(maxElem)", "        val maxElem =\
    \ l.foldLeft(0l) { (max, elem) => if (elem > max) elem else max }\n        l.indexOf(maxElem)",
  "        val max = l.foldLeft(0l.toLong)((max, x) => if (x > max) x else max)\n\
    \        max ", "        val max = l.foldLeft(0l.toLong)((max, x) => if (x > max)\
    \ x else max)\n        l.indexOf(max)", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) => if (max < elem) elem else max }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0l)((max, elem) => if (elem > max) elem else max)\n\
    \        maxElem", "        val maxElem = l.foldLeft(0l)((max, elem) => if (elem\
    \ > max) elem else max)\n        maxElem", "        val maxElem = l.foldLeft(0l)((maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        maxElem", "       \
    \ val maxElem = l.foldLeft(0l) { (max, elem) => if (max > elem) max else elem\
    \ }\n        l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0l) { (max,\
    \ elem) => if (elem > max) elem else max }\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0L) {\n            (maxElem, elem) => if (elem > maxElem) elem\
    \ else maxElem\n        }\n        maxElem", "        val max = l.foldLeft(0l)(\
    \ (max, current) => if (current > max) current else max )\n        max ", "  \
    \      val maxElem = l.foldLeft(0l){ (max, elem) =>\n            if (max > elem)\
    \ max else elem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) => if (elem > max) elem else max }\n        l.last", "       \
    \ val maxElem = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n     \
    \   l.last", "        val maxElem = l.foldLeft(0l) { (max, elem) => if (elem >\
    \ max) elem else max }\n        l.last", "        val maxElem = l.foldLeft(0l){\n\
    \            (max, elem) => if (elem > max) elem else max\n        }\n       \
    \ maxElem", "        val max = l.foldLeft(0L){ (max, e) => if (e > max) e else\
    \ max }\n        l.indexOf(max)", "        val max = l.foldLeft(0l) { (max, e)\
    \ => if (e > max) e else max }\n        max ", "        val maxElem = l.foldLeft(0l)\
    \ { (max, elem) =>\n            if (max > elem) max else elem\n        }\n   \
    \     maxElem", "        val max = l.foldLeft(0l) { (max, e) => if (e > max) e\
    \ else max }\n        max ", "        val maxElem = l.foldLeft(0l)((max, elem)\
    \ => if (elem > max) elem else max)\n        maxElem", "        val maxElem =\
    \ l.foldLeft(0l)( (max, elem) => if (max < elem) elem else max )\n        maxElem",
  "        val maxElem = l.foldLeft(0l) { (maxElem, e) => if (e > maxElem) e else\
    \ maxElem }\n        maxElem", "        val maxElem = l.foldLeft(0L){ (max, e)\
    \ =>\n            if (max > e) max else e\n        }\n        maxElem", "    \
    \    val maxElem = l.foldLeft(0l)( (max, elem) => if (elem > max) elem else max\
    \ )\n        maxElem", "        val maxElem = l.foldLeft(0l) { (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem }\n        maxElem", "        val max\
    \ = l.foldLeft(0l) { (max, e) =>\n            if (e > max) e else max\n      \
    \  }\n        max", "        val maxElem = l.foldLeft(0l) { (max, elem) =>\n \
    \           if (max > elem) max else elem\n        }\n        maxElem", "    \
    \    val max = l.foldLeft(0l) { (max, e) => if (e > max) e else max }\n      \
    \  max "]
stop_tokens:
- "\n    }\n"
