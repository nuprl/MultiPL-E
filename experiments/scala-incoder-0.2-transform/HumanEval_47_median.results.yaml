language: scala
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val midVal\
    \ = median(left)\n            val leftVal = median(right)\n            val median\
    \ = (midVal + leftVal) / 2\n            median\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu778zw9l.scala:18:26 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (midVal\
    \ + leftVal) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mmidVal\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val median = (m + n) / 2\n        val half = if (n %\
    \ 2 == 0) n / 2 else n / 2\n        val median1 = if (half == 0) m else (m + half)\
    \ / 2\n        val median2 = if (half == 0) n else (m + half) / 2\n        val\
    \ median3 = if (half == 0) n else (m + half) / 2\n        val median4 = if (half\
    \ == 0) n else (m + half) / 2\n        val median5 = if (half == 0) n else (m\
    \ + half) / 2\n        val median6 = if (half == 0) n else (m + half) / 2\n  \
    \      val median7 = if (half == 0) n else (m + half) / 2\n        val median8\
    \ = if (half == 0) n else (m + half) / 2\n        val median9 = if (half == 0)\
    \ n else (m + half) / 2\n        val median10 = if (half == 0) n else (m + half)\
    \ / 2\n        val median11 = if (half == 0) n else (m + half) / 2\n        val\
    \ median12 = if (half == 0) n else (m + half) / 2\n        val median13 = if (half\
    \ == 0) n else (m + half) / 2\n        val median14 = if (half == 0) n else (m\
    \ + half) / 2\n        val median15 = if (half == 0) n else (m + half) / 2\n \
    \       val median16 = if (half == 0) n else (m + half) / 2\n        val median17\
    \ = if (half == 0) n else (m + half) / 2\n        val median18 = if (half == 0)\
    \ n else (m + half) / 2\n        val median19 = if (half == 0) n else (m + half)\
    \ / 2\n        val median20 = if (half == 0) n else (m + half) / 2\n        val\
    \ median21 = if (half == 0) n else (m + half) / 2\n        val median22 = if (half\
    \ == 0) n else (m + half) / 2\n        val median23 = if (half == 0) n else (m\
    \ + half) / 2\n        val median24 = if (half == 0) n else (m + half) / 2\n \
    \       val median25 = if (half == 0) n else (m + half) / 2\n        val median26\
    \ = if (half == 0) n else (m + half) / 2\n        val median27 = if (half == 0)\
    \ n else (m + half) / 2\n        val median28 = if (half == 0) n else (m + half)\
    \ / 2\n        val median29 = if (half == 0) n else (m + half) / 2\n        val\
    \ median30 = if (half == 0) n else (m + half) / 2\n        val median31 = if (half\
    \ == 0) \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuos4lmb6.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuos4lmb6.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ leftMedian = median(left)\n            val rightMedian = median(right)\n   \
    \         val median = (leftMedian + rightMedian) / 2\n            median\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgytrjt2l.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpgytrjt2l.scala:18:26 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (leftMedian\
    \ + rightMedian) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \   ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m\
    \ \e[35mleftMedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n\
    \        else sorted.last.toFloat + sorted.last.toFloat / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedejsxo4.scala:16)\n\tat Problem.main(tmpedejsxo4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            if (medianFloat == 0) 0f\n            else medianFloat\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfftjtj_n.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpfftjtj_n.scala:16:25 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val m = l.min\n        val median = (m + n) / 2\n        val l1 = l.filter(_\
    \ < median)\n        val l2 = l.filter(_ >= median)\n        val l3 = l1.size\
    \ + l2.size\n        if (l3 > 1) (l1 + l2) / 2.0\n        else median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprxra8zs5.scala:16:24 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (l3 > \e[31m1\e[0m) (l1 + l2) /\
    \ \e[31m2.0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[Long], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = if (sorted.length %\
    \ 2 == 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ow_p8_1.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        median\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (median : AnyVal)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = (left + right).sortWith(_ < _).last\n            median.toFloat\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7k9tzsvc.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right).sortWith(_ < _).last\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = (left + right).sorted\n            val midPoint = median.head\n   \
    \         val leftMedian = median.tail.head\n            val rightMedian = median.tail.tail.head\n\
    \            val leftMedianIsSmaller = leftMedian < midPoint\n            val\
    \ rightMedianIsSmaller = rightMedian < midPoint\n            if (leftMedianIsSmaller\
    \ && rightMedianIsSmaller) midPoint\n            else (leftMedianIsSmaller ? leftMedian\
    \ : rightMedian)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz4wyixuf.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mright\e[0m = l.slice(mid)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpz4wyixuf.scala:16:31 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4wyixuf.scala:23:53\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e\
    [0m (leftMedianIsSmaller ? leftMedian : rightMedian)\n\e[31m\e[31m   |\e[0m  \
    \                                                   ^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                             Not found: type rightMedian\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = left match {\n                case x :: xs => x\n                case _ =>\
    \ right\n            }\n            val median = (left + right) match {\n    \
    \            case x :: xs => x\n                case _ => mid\n            }\n\
    \            median.toFloat\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnv2ld9p7.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left\
    \ + right) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnv2ld9p7.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m x :: xs => x\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = if (n == 1) left else (left + right) / 2\n        median.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp285rf1ns.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (n == \e[31m1\e[0m) left \e[33melse\e[0m (left + right) / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp285rf1ns.scala:15:15 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        median.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toFloat is not a member of List[Long], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val median\
    \ = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            if (medianFloat == 0.0f) 0.0f\n            else medianFloat\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd68mnhug.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = median(left)\
    \ + median(right)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmedian\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0\n        else {\n            val half = n / 2\n            val\
    \ left = l.take(half)\n            val right = l.drop(half)\n            val mid\
    \ = left.length / 2\n            val median = (left.take(mid) + right.take(mid)).sorted\n\
    \            median.last\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong,\
    \ 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo53w6hb2.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = (left.take(mid)\
    \ + right.take(mid)).sorted\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        val medianMedian = median(List(medianLeft, medianRight))\n        val\
    \ medianMedianFloat = medianMedian.toFloat\n        val medianMedianInt = medianMedianFloat.toInt\n\
    \        val medianMedianLong = medianMedianFloat.toLong\n        val medianMedianDouble\
    \ = medianMedianFloat.toDouble\n        val medianMedianString = medianMedianFloat.toString\n\
    \        val medianMedianBoolean = medianMedianFloat.toBoolean\n        val medianMedianNull\
    \ = medianMedianFloat.isNull\n        val medianMedianUnit = medianMedianFloat.toUnit\n\
    \        val medianMedianNullableUnit = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n\
    \        val medianMedianUnitNullableUnit = medianMedianFloat.asInstanceOf[Unit]\n\
    \        val medianMedianUnitNullableUnitNullableUnit = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n\
    \        val medianMedianUnitNullableUnitNullableUnitNullableUnit = medianMedianFloat.asInstanceOf[Unit]\n\
    \        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1_45grnm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp1_45grnm.scala:15:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36mmedianLeft\e[0m = median(left)\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                         \e[33mvalue\e\
    [0m \e[35mmedian\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp1_45grnm.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianRight\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp1_45grnm.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmedianMedian\e[0m = median(List(medianLeft,\
    \ medianRight))\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           \e[33mvalue\e[0m \e[35mmedian\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_45grnm.scala:26:70\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmedianMedianNullableUnit\e[0m = medianMedianFloat.asInstanceOf[\e[35mNullable\e\
    [0m[\e[35mUnit\e[0m]]\n\e[31m\e[31m   |\e[0m                                 \
    \                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                       Not found: type Nullable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_45grnm.scala:28:86 ------------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val medianLeft = median(left)\n        val medianRight = median(right)\n\
    \        val medianMedian = (medianLeft + medianRight) / 2\n        val medianMedianDiff\
    \ = medianMedian - median\n        val medianMedianDiffAbs = Math.abs(medianMedianDiff)\n\
    \        if (medianMedianDiffAbs < 0.1f)\n            medianMedian\n        else\n\
    \            medianMedianDiff\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\
    \ == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong,\
    \ 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong)))\
    \ == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n\
    \    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong,\
    \ 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpdkm05ine.scala:15:25 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmedianLeft\e[0m = median(left)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpdkm05ine.scala:16:26 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmedianRight\e[0m = median(right)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        \e[33mvalue\e[0m \e[35mmedian\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  val mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val median = (left + right).sorted match {\n            case Nil => 0f\n\
    \            case x :: xs => xs.last + 1f\n        }\n        median\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy16rds2.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmedian\e[0m = (left + right).sorted\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvy16rds2.scala:16:28 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x :: xs => xs.last + \e[31m1f\e\
    [0m\n\e[31m\e[31m   |\e[0m                            ^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        if (sorted.length == 1) sorted\n\
    \        else (sorted take mid) match {\n            case x :: xs => if (x < sorted((mid-1).toInt))\
    \ x else median(xs)\n            case _ => sorted((mid-1).toInt)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpftl9b981.scala:12:32\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (sorted.length\
    \ == \e[31m1\e[0m) sorted\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                                Found:    (sorted\
    \ : List[Long])\n\e[31m   |\e[0m                                Required: Float\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val medianOfMedians = leftMedian + rightMedian\n        val medianOfMediansAsFloat\
    \ = medianOfMedians.toFloat\n        val medianOfMediansAsInt = medianOfMediansAsFloat.toInt\n\
    \        val medianOfMediansAsLong = medianOfMediansAsInt.toLong\n        medianOfMediansAsLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjw1i7rik.scala:22)\n\tat Problem.main(tmpjw1i7rik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val sorted = l.sorted\n \
    \       val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ncxa0_8.scala:16)\n\tat Problem.main(tmp7ncxa0_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
    \    def median(l : List[Long]) : Float = {\n        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.take(mid)\n            val right = l.drop(mid)\n            val midVal\
    \ = median(left)\n            val rightVal = median(right)\n            val median\
    \ = if (midVal < rightVal) midVal else rightVal\n            median\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
    \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n\
    \    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
    \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
    \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwftl_zil.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (midVal < rightVal) midVal \e[33melse\e[0m rightVal\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \     Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwftl_zil.scala:18:48 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmedian\e[0m = \e[33mif\e\
    [0m (midVal < rightVal) midVal \e[33melse\e[0m rightVal\n\e[31m\e[31m   |\e[0m\
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                  Recursive \e[33mvalue\e[0m \e[35mmidVal\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwftl_zil.scala:17:27\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mrightVal\e[0m = median(right)\n\e[31m\e[31m   |\e[0m               \
    \            ^\e[0m\n\e[31m   |\e[0m                           Recursive \e[33mvalue\e\
    [0m \e[35mmedian\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659792704
