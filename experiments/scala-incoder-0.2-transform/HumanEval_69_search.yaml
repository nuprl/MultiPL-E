name: HumanEval_69_search
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n    // zero, and has a frequency greater than or\
  \ equal to the value of the integer itself. \n    // The frequency of an integer\
  \ is the number of times it appears in the list.\n    // If no such a value exist,\
  \ return -1.\n    // Examples:\n    // >>> search((List[Long](4l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    // (2l)\n    // >>> search((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n\
  \    // (3l)\n    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong,\
  \ 4l.toLong)))\n    // (-1l)\n    def search(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong,\
  \ 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong,\
  \ 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong,\
  \ 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong,\
  \ 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong,\
  \ 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n\
  \    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) ==\
  \ (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong,\
  \ 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong,\
  \ 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong,\
  \ 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong,\
  \ 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong,\
  \ 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong,\
  \ 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong,\
  \ 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
  \ 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong,\
  \ 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong,\
  \ 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong,\
  \ 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong,\
  \ 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong,\
  \ 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong,\
  \ 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong,\
  \ 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong,\
  \ 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong,\
  \ 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong)))\
  \ == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong,\
  \ 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong,\
  \ 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong,\
  \ 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong,\
  \ 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong,\
  \ 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong)))\
  \ == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong,\
  \ 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong,\
  \ 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong,\
  \ 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong,\
  \ 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong,\
  \ 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong,\
  \ 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"
completions: ["        val freq = mutable.Map[Long, Int]()\n        for (i <- lst)\
    \ {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val\
    \ max = freq.maxBy(_._2)\n        if (max != 0) {\n            freq.filter(_._2\
    \ > 0).maxBy(_._1)._1\n        } else {\n            -1\n        }", "       \
    \ val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n            freq\
    \ += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val maxFreq = mutable.HashMap.empty[Long, Int]\n        val maxFreqKey\
    \ = mutable.HashMap.empty[Long, Long]\n        val maxFreqVal = mutable.HashMap.empty[Long,\
    \ Long]\n        val maxFreqKey = mutable.HashMap.empty[Long, Long]\n        val\
    \ maxFreqVal = mutable.HashMap.empty[Long, Long]\n        for(i <- 0 until lst.size)\
    \ {\n            freq += lst(i) -> 1\n            maxFreq += lst(i) -> 1\n   \
    \         maxFreqKey += lst(i) -> i\n            maxFreqVal += lst(i) -> i\n \
    \       }\n        val maxFreqKeyVal = maxFreqKey.toSeq.sortWith(_._1 < _._1).last\n\
    \        val maxFreqValVal = maxFreqVal.toSeq.sortWith(_._1 < _._1).last\n   \
    \     if(maxFreqKeyVal._2 > maxFreqValVal._2) {\n            -1\n        } else\
    \ {\n            freq(maxFreqKeyVal._2)\n        }", "        var max = 0\n  \
    \      var freq = 0\n        var maxIndex = 0\n        lst.foreach{ x =>\n   \
    \         if (x > max) {\n                max = x\n                freq = 1\n\
    \                maxIndex = 0\n            } else if (freq > x) {\n          \
    \      freq = x\n                maxIndex = 0\n            } else if (freq ==\
    \ x) {\n                maxIndex += 1\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return -1\n        }\n        return max", "        val\
    \ freq = mutable.HashMap.empty[Long, Int]\n        val maxFreq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1L)\n   \
    \     lst.foreach(x => maxFreq += x -> freq.getOrElse(x, 0) + 1L)\n        lst.foreach(x\
    \ => freq -= x)\n        lst.foreach(x => maxFreq -= x)\n        lst.foreach(x\
    \ => if (maxFreq.getOrElse(x, 0) > freq.getOrElse(x, 0)) x else -1)", "      \
    \  val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x\
    \ -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max >= 0l) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n \
    \       } else {\n            -1l\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if(maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= freq.filter(_._2 == max._2).head._2) {\n            max._1\n\
    \        } else {\n            -1\n        }", "        var max = 0\n        var\
    \ maxCount = 0\n        var maxFreq = 0\n        var i = 0\n        while(i <\
    \ lst.size) {\n            val freq = lst(i).toLong\n            if(freq > maxFreq)\
    \ {\n                max = lst(i)\n                maxCount = freq\n         \
    \       maxFreq = freq\n            }\n            i += 1\n        }\n       \
    \ if(maxCount == 0) {\n            return -1\n        }\n        return max",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)._1\n     \
    \   if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ freq(lst(i))+1)\n        }\n        val max = freq.maxBy(_._2)\n        if (max\
    \ > 0) max\n        else -1", "        var max = 0\n        var freq = 0\n   \
    \     for (i <- 0 until lst.size) {\n            freq = lst(i).toLong\n      \
    \      if (freq > 0) {\n                max = Math.max(freq, max)\n          \
    \  }\n        }\n        if (max > 0) {\n            return max\n        }\n \
    \       return -1", "        val freq = mutable.Map[Long, Int]()\n        val\
    \ max = -1\n        lst.foreach{ x =>\n            freq += x -> freq.getOrElse(x,\
    \ 0) + 1\n            if (freq.getOrElse(x, 0) >= max) max = freq.getOrElse(x,\
    \ 0)\n        }\n        if (max > 0) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1L)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        var max = 0\n        var freq = 0\n        var i\
    \ = 0\n        while(i < lst.length) {\n            val num = lst(i)\n       \
    \     freq = freq + 1\n            if(num > 0) {\n                max = Math.max(max,\
    \ num)\n            }\n            i = i + 1\n        }\n        if(freq >= lst.length)\
    \ {\n            return -1\n        }\n        else {\n            return max\n\
    \        }", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> 1)\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if(max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        for (i <-\
    \ lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n     \
    \   val max = freq.maxBy(_._2)._1\n        if (max >= 0) max else -1", "     \
    \   val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x ->\
    \ freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n       \
    \ val freqMax = freq.filter(_._2 == max).map(_._1)\n        val result = freqMax.find(_\
    \ > 0l).getOrElse(-1)\n        result", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n   \
    \     val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2 >= freq.size)\n \
    \           -1\n        else\n            maxFreq._1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> freq.getOrElse(lst(i),\
    \ 0) + 1)\n        }\n        val maxFreq = freq.maxBy(_._2)\n        if(maxFreq._2\
    \ >= freq.size)\n            return -1\n        else\n            return maxFreq._1",
  "        val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n   \
    \         freq(i) += 1\n        }\n        val max = freq.maxBy(_._1)._1\n   \
    \     val maxFreq = freq.maxBy(_._1)._2\n        if (maxFreq >= max) {\n     \
    \       max\n        } else {\n            -1\n        }", "        var max =\
    \ 0\n        var maxCount = 0\n        var maxFreq = 0\n        var maxIndex =\
    \ 0\n        var i = 0\n        while(i < lst.length) {\n            val cur =\
    \ lst(i)\n            val curCount = lst.count(_ == cur)\n            val curFreq\
    \ = lst.count(_ == cur).toLong\n            val curIndex = lst.indexOf(cur)\n\
    \            if(curCount > maxCount) {\n                max = cur\n          \
    \      maxCount = curCount\n                maxFreq = curFreq\n              \
    \  maxIndex = curIndex\n            }\n            i += 1\n        }\n       \
    \ if(maxCount == 0) {\n            return -1\n        }\n        val cur = max\n\
    \        val curCount = maxCount\n        val curFreq = maxFreq\n        val curIndex\
    \ = maxIndex\n        if(curFreq >= curCount) {\n            return cur\n    \
    \    } else {\n            return -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ freq.getOrElse(lst(i), 0) + 1)\n        }\n        val maxFreq = freq.maxBy(_._2)._1\n\
    \        if (maxFreq >= 0) {\n            maxFreq\n        } else {\n        \
    \    -1\n        }", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max\
    \ = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n        if\
    \ (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val res = mutable.HashMap.empty[Long, Long]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => res += x ->\
    \ freq.getOrElse(x, 0l))\n        res.maxBy(_._2)._1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 2)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 4)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 5)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 7)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 9)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 10)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 12)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 14)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 15)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 17)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 19)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 20)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 22)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + ", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ max else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n       \
    \ for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq.getOrElse(lst(i),\
    \ 0) + 1)\n        }\n        val maxFreq = freq.maxBy(_._2)\n        if (maxFreq\
    \ >= 0) {\n            maxFreq\n        } else {\n            -1\n        }",
  "        val freq = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach{\
    \ x =>\n            freq += x -> freq.getOrElse(x, 0) + 1\n            if (freq.getOrElse(x,\
    \ 0) > max) {\n                max = freq.getOrElse(x, 0)\n            }\n   \
    \     }\n        if (max > 0) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n \
    \       val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach(x => {\n            freq +=\
    \ x -> freq.getOrElse(x, 0) + 1\n            if (freq.getOrElse(x, 0) >= max)\
    \ max = freq.getOrElse(x, 0)\n        })\n        max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >=\
    \ freq.maxBy(_._1)._1) {\n            -1\n        } else {\n            max\n\
    \        }", "        var max = 0\n        var freq = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (lst(i) > 0) {\n                freq = freq + 1\n\
    \                if (freq > max) {\n                    max = freq\n         \
    \       }\n            }\n        }\n        if (max > 0) {\n            return\
    \ max\n        } else {\n            return -1\n        }", "        val freq\
    \ = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)._1\n        val freqMax = freq.filter(_._2\
    \ == max).length\n        if (max > 0 && freqMax >= freq.getOrElse(max, 0l)) {\n\
    \            max\n        } else {\n            -1\n        }", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        val maxFreq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += lst(i) -> freq(i)\
    \ + 1\n            maxFreq += lst(i) -> maxFreq(i) + 1\n        }\n        val\
    \ maxFreqKey = maxFreq.keys.max\n        val maxFreqValue = maxFreq(maxFreqKey)\n\
    \        if (maxFreqValue == 0) -1\n        else maxFreqKey -> maxFreqValue",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max >= freq.keys.toSet.size) -1\n        else max", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst)\
    \ {\n            freq(i) = freq.getOrElse(i, 0) + 1\n        }\n        val max\
    \ = freq.maxBy(_._2)\n        if (max > 0) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1) {\n\
    \            return max\n        } else {\n            return -1\n        }",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)\n        max match\
    \ {\n            case Some(max) => max\n            case None => -1\n        }",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        val res = mutable.HashMap.empty[Long,\
    \ Long]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n      \
    \  lst.foreach(x => res += x -> res.getOrElse(x, 0l))\n        res.values.max",
  "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        val max\
    \ = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n        if(maxFreq\
    \ >= max) max else -1", "        val freq = mutable.Map[Long, Int]()\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n  \
    \          freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max =\
    \ freq.maxBy(_._2)._1\n        if (max > 0) {\n            return max\n      \
    \  } else {\n            return -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "      \
    \  val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val maxFreq = freq.maxBy(_._2)\n\
    \        val maxFreqVal = freq.maxBy(_._1)\n        if (maxFreqVal > 0) maxFreqVal\
    \ else -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        val max = freq.maxBy(_._2)._1\n        if (max >= freq.keys.toSet.last)\
    \ -1\n        else max", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        val max = -1\n        lst.foreach{ x =>\n            val count = freq.getOrElse(x,\
    \ 0)\n            freq(x) = count + 1\n            if (count > max) {\n      \
    \          max = count\n            }\n        }\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        val maxFreq =\
    \ mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        lst.foreach(x => maxFreq += (x -> freq.getOrElse(x, 0)))\n\
    \        lst.foreach(x => freq -= x)\n        lst.foreach(x => maxFreq -= x)\n\
    \        lst.foreach(x => if (maxFreq.getOrElse(x, 0) > freq.getOrElse(x, 0))\
    \ x else -1)", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= freq.filter(x => x._2 == max._1).head._2)\n           \
    \ max._1\n        else\n            -1", "        var max = 0\n        var maxFreq\
    \ = -1\n        var i = 0\n        while(i < lst.length) {\n            if(lst(i)\
    \ > 0) {\n                val freq = lst(i).toLong\n                if(freq >=\
    \ maxFreq) {\n                    max = lst(i)\n                    maxFreq =\
    \ freq\n                }\n                i += 1\n            } else {\n    \
    \            i += 1\n            }\n        }\n        if(maxFreq < 0) return\
    \ -1\n        return max", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        val maxFreq = mutable.HashMap[Long, Int]()\n        for(i <- 0 until\
    \ lst.size) {\n            freq += (lst(i) -> 1)\n            if(freq(lst(i))\
    \ == 0) {\n                maxFreq += (lst(i) -> 1)\n            }\n         \
    \   else {\n                maxFreq += (lst(i) -> freq(lst(i)))\n            }\n\
    \        }\n        val maxKey = maxFreq.keys.max\n        if(maxFreq(maxKey)\
    \ == 0) {\n            return -1\n        }\n        else {\n            return\
    \ maxKey\n        }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        lst.foreach(x => freq\
    \ += (x -> freq.getOrElse(x, 0) - 1l))\n        lst.foreach(x => freq += (x ->\
    \ freq.getOrElse(x, 0)))\n        lst.foreach(x => if (freq.getOrElse(x, 0) >\
    \ 0) x else -1l)", "        var max = 0\n        var maxCount = 0\n        var\
    \ maxFreq = 0\n        var maxIndex = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var freq = 0\n        var maxFreq = 0\n        var\
    \ maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n        var maxIndex\
    \ = 0\n        var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n\
    \        var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n   \
    \     var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n      \
    \  var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var\
    \ freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var freq\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n\
    \        var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n   \
    \     var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n      \
    \  var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n        var\
    \ maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n        var maxFreq\
    \ = 0\n        var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n\
    \        var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n   \
    \     var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n      \
    \  var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n        var\
    \ maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n        var maxIndex\
    \ = 0\n        var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n\
    \        var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n   \
    \     var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n      \
    \  var freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var\
    \ freq = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var freq\
    \ = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n\
    \        var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n   \
    \     var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n      \
    \  var maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n        var\
    \ maxFreq = 0\n        var maxIndex = 0\n        var freq = 0\n        var maxFreq\
    \ = 0\n        var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n\
    \        var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n   \
    \     var maxIndex = 0\n        var freq = 0\n        var maxFreq = 0\n      \
    \  var maxIndex = 0\n        var ", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        val max = -1\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n       \
    \     freq += i -> freq(i) + 1\n        }\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if (maxFreq._2 >= 0) {\n            maxFreq._1\n        } else {\n  \
    \          -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        for (i <- 0 until lst.size) {\n            freq += (lst(i) -> freq(lst(i)))\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n    \
    \        max._1\n        } else {\n            -1\n        }", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)._1\n        val maxFreq = freq.maxBy(_._2)._2\n\
    \        if (maxFreq >= max) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) += 1\n        }\n    \
    \    val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "     \
    \   val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n        if (max\
    \ > 0) max else -1", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n        val max\
    \ = freq.maxBy(_._2)._1\n        max match {\n            case x if freq.getOrElse(x,\
    \ 0) > freq.getOrElse(max, 0) => x\n            case _ => -1\n        }", "  \
    \      var max = 0\n        var maxFreq = 0\n        var maxIndex = 0\n      \
    \  var i = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) > 0)\
    \ {\n                if(lst(i) == max) {\n                    maxFreq += 1\n \
    \               }\n                if(lst(i) == max) {\n                    if(maxFreq\
    \ >= lst(i)) {\n                        maxFreq = 1\n                        maxIndex\
    \ = i\n                    }\n                }\n            }\n        }\n  \
    \      if(maxIndex == -1) {\n            return -1\n        }\n        return\
    \ lst(maxIndex)", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0l) max else -1l", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n    \
    \        freq.filter(_._2 > 0).maxBy(_._1)._1\n        } else {\n            -1\n\
    \        }", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += (x ->\
    \ freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n       \
    \ if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n  \
    \      lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max =\
    \ freq.maxBy(_._2)._1\n        val maxFreq = freq.filter(x => x._2 == max).length\n\
    \        if (maxFreq >= freq.filter(x => x._2 == max).length) max else -1", " \
    \       val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n      \
    \      freq += i -> freq.getOrElse(i, 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if (max != null && freq.contains(max._1)) {\n            max._1\n   \
    \     } else {\n            -1\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 2)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 4)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 5)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 7)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 9)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 10)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 12)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 14)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 15)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 17)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 19)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 20)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 22)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l", "        val freq = mutable.Map[Long, Int]()\n        for (i <- lst) {\n\
    \            freq += i -> freq(i) + 1\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= 0) {\n            max._1\n        } else {\n          \
    \  -1\n        }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n", "      \
    \  var max = 0\n        var maxFreq = 0\n        var maxIndex = 0\n        var\
    \ i = 0\n        while(i < lst.size) {\n            if(lst(i) > 0) {\n       \
    \         val freq = lst(i).toLong\n                if(freq > maxFreq) {\n   \
    \                 max = lst(i)\n                    maxFreq = freq\n         \
    \           maxIndex = i\n                }\n            }\n            i += 1\n\
    \        }\n        if(maxIndex == lst.size) {\n            return -1\n      \
    \  }\n        return max", "        var max = 0\n        var maxFreq = 0\n   \
    \     var maxIndex = 0\n        for (i <- 0 until lst.size) {\n            if\
    \ (lst(i) > 0) {\n                if (lst(i) == max) {\n                    maxFreq\
    \ += 1\n                }\n                if (lst(i) == max) {\n            \
    \        maxFreq += 1\n                }\n                if (lst(i) > max) {\n\
    \                    max = lst(i)\n                    maxFreq = 1\n         \
    \           maxIndex = i\n                }\n            }\n        }\n      \
    \  if (maxFreq > max) {\n            return -1\n        } else {\n           \
    \ return max\n        }", "        val freq = mutable.Map[Long, Int]()\n     \
    \   val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n\
    \        lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x, 1l))\
    \ max = x)\n        max", "        val freq = mutable.Map[Long, Int]()\n     \
    \   for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n    \
    \    }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n        \
    \    freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n            -1\n\
    \        }", "        val freq = mutable.HashMap[Long, Int]()\n        val res\
    \ = mutable.HashMap[Long, Long]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x,\
    \ 1l)) res += x -> freq.getOrElse(x, 0l))\n        res.values.max", "        var\
    \ max = 0\n        var maxCount = 0\n        var maxFreq = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while(i < lst.length) {\n            if(lst(i)\
    \ > 0) {\n                val count = lst(i).toLong\n                if(count\
    \ > maxCount) {\n                    max = lst(i)\n                    maxCount\
    \ = count\n                    maxFreq = lst(i).toLong\n                    maxIndex\
    \ = i\n                }\n                i += 1\n            }\n        }\n \
    \       if(maxCount == 0) {\n            return -1\n        }\n        if(maxCount\
    \ > maxFreq) {\n            return max\n        }\n        return -1", "     \
    \   val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)\n        if\
    \ (max._2 >= freq.size)\n            -1\n        else\n            max._1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        val maxFreq = mutable.Long.MinValue\n\
    \        for(i <- 0 until lst.size) {\n            freq += (lst(i) -> freq(i))\n\
    \            if(freq(i) > maxFreq) maxFreq = freq(i)\n        }\n        if(maxFreq\
    \ == Long.MinValue) -1\n        else maxFreq", "        var max = 0\n        var\
    \ freq = 0\n        var i = 0\n        while (i < lst.length) {\n            freq\
    \ = lst(i).toLong\n            if (freq > 0) {\n                max = Math.max(freq,\
    \ max)\n            }\n            i += 1\n        }\n        if (max > 0) {\n\
    \            return max\n        } else {\n            return -1\n        }",
  "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until lst.size) {\n            freq += lst(i) -> freq(lst(i))+1\n\
    \        }\n        val maxFreq = freq.maxBy(_._2)\n        if(maxFreq._2 >= freq(maxFreq._1))\
    \ {\n            return maxFreq._1\n        }\n        return -1", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.head._2)\
    \ -1\n        else max._1", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        val max = -1\n        lst.foreach(x => {\n            freq.getOrElse(x,\
    \ 0)\n            freq(x) = freq(x) + 1\n        })\n        val maxFreq = freq.filter(_._2\
    \ >= max).map(_._1).max\n        max match {\n            case -1 => -1\n    \
    \        case x if maxFreq >= x => x\n            case _ => -1\n        }", " \
    \       val freq = mutable.Map[Long, Int]()\n        lst.foreach{x => freq +=\
    \ x -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)\n        if (max\
    \ > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n        val\
    \ max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n\
    \        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= 0l) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n\
    \        } else {\n            -1l\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 2)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 4)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 5)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 7)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 9)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 10)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 12)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 14)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 15)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 17)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 19)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 20)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 22)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        for (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max > 0) max._1 else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        val max =\
    \ -1\n        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0)}\n        max",
  "        val freq = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long,\
    \ Int]()\n        for(i <- lst) {\n            freq(i) += 1\n            maxFreq(i)\
    \ = freq(i).max\n        }\n        if(maxFreq.contains(-1l)) {\n            -1l\n\
    \        } else {\n            maxFreq.max\n        }", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        lst.foreach(x => if (freq.getOrElse(x, 0) > 0) freq.getOrElse(x, 0) else\
    \ -1l)", "        val freq = mutable.HashMap.empty[Long, Int]\n        for (i\
    \ <- 0 until lst.size) {\n            freq += (lst(i) -> freq(lst(i)))\n     \
    \   }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n         \
    \   freq.maxBy(_._2)._1\n        } else {\n            -1\n        }", "     \
    \   val freq = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0))\n        max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq(i) = freq.getOrElse(i, 0)\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max > 0)\
    \ {\n            return max\n        }\n        return -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)._1\n        if (max >= 0l) {\n    \
    \        freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n         \
    \   -1l\n        }", "        val freq = mutable.Map[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)\n        if (max._2 >= freq.size)\n      \
    \      -1\n        else\n            max._1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n     \
    \   val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "      \
    \  val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n       \
    \ lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x =>\
    \ if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0)}\n        max", " \
    \       val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach{x =>\
    \ freq += x -> freq.getOrElse(x, 0)}\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if(maxFreq._2 >= freq.size)\n            -1\n        else\n         \
    \   maxFreq._1", "        val freq = mutable.HashMap[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq(i) = freq.getOrElse(i, 0) + 1\n        }\n  \
    \      val max = freq.maxBy(_._2)\n        if (max != null) {\n            if\
    \ (freq(max) >= lst(max)) {\n                return max\n            }\n     \
    \   }\n        -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach{x\
    \ => freq += x -> freq.getOrElse(x, 0)+1}\n        val max = freq.maxBy(_._2)\n\
    \        if(max._2 >= freq.maxBy(_._1)._2) -1\n        else max._1", "       \
    \ val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n        if\
    \ (max >= freq.keys.toSet.max)\n            -1\n        else\n            max",
  "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x\
    \ -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 2)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 4)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 5)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 6)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 7)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 9)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 10)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 11)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 12)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 14)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 15)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 16)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 17)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 19)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 20)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 21)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 22)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + ", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1l)\n        lst.foreach(x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0))\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n  \
    \      for(i <- 0 until lst.size) {\n            freq += lst(i) -> freq(lst(i))\
    \ + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if(max >= 0)\
    \ {\n            return max\n        }\n        return -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        val maxFreq = mutable.Map[Long, Int]()\n\
    \        val maxVal = mutable.Map[Long, Long]()\n        val maxValIndex = mutable.Map[Long,\
    \ Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex\
    \ = mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long", "   \
    \     val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x\
    \ -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n    \
    \    if (max >= freq.keys.head) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x,\
    \ 1l)) max = x)\n        max", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        val res = mutable.HashMap[Long, Long]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => res.putIfAbsent(x,\
    \ -1l))\n        res.values.max", "        val freq = mutable.Map[Long, Int]()\n\
    \        val maxFreq = mutable.Map[Long, Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            freq += (lst(i) -> freq(lst(i)))\n            maxFreq += (lst(i)\
    \ -> freq(lst(i))) max freq(lst(i))\n        }\n        val maxFreqVal = maxFreq.maxBy(_._2)\n\
    \        if(maxFreqVal._2 > 0) maxFreqVal._1 else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max._2 >=\
    \ freq.head._2) {\n            max._1\n        } else {\n            -1\n    \
    \    }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach{x =>\
    \ freq += x -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)\n   \
    \     max match {\n            case Some(max) => max\n            case None =>\
    \ -1\n        }", "        val freq = mutable.Map[Long, Int]()\n        val max\
    \ = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n       \
    \ lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x, 1l)) max = x)\n\
    \        max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach{x\
    \ => freq += x -> freq.getOrElse(x, 0)+1}\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n        max match {\n    \
    \        case x if freq.getOrElse(x, 0) > freq.getOrElse(max, 0) => x\n      \
    \      case _ => -1l\n        }", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        for(i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n\
    \        }\n        val max = freq.maxBy(_._2)._1\n        if(max > 0) max else\
    \ -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1L)\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => if (freq.getOrElse(x,\
    \ 0l) >= x) x else -1)", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max >= 0l) {\n            freq.filter(_._2\
    \ >= max).maxBy(_._1)._1\n        } else {\n            -1l\n        }", "   \
    \     val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x => freq +=\
    \ (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n \
    \       if (max >= 0l) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n\
    \        } else {\n            -1l\n        }", "        var max = 0\n       \
    \ var maxCount = 0\n        var maxFreq = 0\n        var maxFreqCount = 0\n  \
    \      var maxFreqFreq = 0\n        var maxFreqFreqCount = 0\n        var maxFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreq =\
    \ 0\n        var maxFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqCount = 0\n        var maxFreqFreqFreqFreqFreqFreqFreqFreq\
    \ = 0\n        var maxFreq", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)}\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1",
  "        val freq = mutable.Map[Long, Int]()\n        val max = -1\n        lst.foreach{x\
    \ => freq += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x => if (freq.getOrElse(x,\
    \ 0) > max) max = freq.getOrElse(x, 0)}\n        max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 2)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 3)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 4)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 5)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 7)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 8)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 9)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 10)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 12)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 13)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 14)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 15)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 17)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 18)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 19)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 20)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 22)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 23)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq\
    \ += x -> freq.getOrElse(x, 0) + 1l)\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if (maxFreq >= freq.head._2) -1\n        else maxFreq", "        var\
    \ max = 0\n        var freq = 0\n        var i = 0\n        while(i < lst.length)\
    \ {\n            if(lst(i) > 0) {\n                freq = freq + 1\n         \
    \       if(max < lst(i)) {\n                    max = lst(i)\n               \
    \ }\n            }\n            i = i + 1\n        }\n        if(freq >= lst.length)\n\
    \            return -1\n        else\n            return max", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x =>\
    \ freq += x -> freq.getOrElse(x, 0) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val maxFreq = freq.maxBy(_._2)\n\
    \        if(maxFreq._2 >= freq.size)\n            -1\n        else\n         \
    \   maxFreq._1", "        var max = 0\n        var maxFreq = 0\n        var maxIndex\
    \ = 0\n        var i = 0\n        while(i < lst.size) {\n            if(lst(i)\
    \ > 0) {\n                val freq = lst(i).toLong\n                if(freq >=\
    \ maxFreq) {\n                    max = lst(i)\n                    maxFreq =\
    \ freq\n                    maxIndex = i\n                }\n                i\
    \ += 1\n            }\n        }\n        if(maxIndex == lst.size) {\n       \
    \     return -1\n        }\n        return max", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => if (freq.getOrElse(x, 0l) >= freq.getOrElse(x,\
    \ 1l)) max = x)\n        max", "        var max = 0\n        var maxFreq = -1\n\
    \        var maxIndex = 0\n        for (i <- 0 until lst.size) {\n           \
    \ if (lst(i) > 0) {\n                val freq = lst.count(_ == lst(i))\n     \
    \           if (freq > maxFreq) {\n                    max = lst(i)\n        \
    \            maxFreq = freq\n                    maxIndex = i\n              \
    \  }\n            }\n        }\n        if (maxFreq == -1) {\n            return\
    \ -1\n        } else {\n            return max\n        }", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1))\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)._1\n\
    \        max match {\n            case x if freq.getOrElse(x, 0) > freq.getOrElse(max,\
    \ 0) => x\n            case _ => -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val result = mutable.HashMap.empty[Long, Long]\n        lst.foreach{x\
    \ => freq += x -> freq.getOrElse(x, 0)}\n        lst.foreach{x => result += (x\
    \ -> freq.getOrElse(x, 0) - x)}\n        result.values.max", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1)\n        val max = freq.maxBy(_._2)._1\n        if (max > 0) max else\
    \ -1", "        var max = 0\n        var maxCount = 0\n        var maxFreq = 0\n\
    \        var maxIndex = 0\n        for (i <- 0 until lst.size) {\n           \
    \ if (lst(i) > 0) {\n                if (lst(i) == max) {\n                  \
    \  maxCount += 1\n                    if (lst(i) > maxFreq) {\n              \
    \          maxFreq = lst(i)\n                        maxIndex = i\n          \
    \          }\n                }\n                else {\n                    if\
    \ (lst(i) > max) {\n                        max = lst(i)\n                   \
    \     maxCount = 1\n                        maxFreq = lst(i)\n               \
    \         maxIndex = i\n                    }\n                }\n           \
    \ }\n        }\n        if (maxCount == 0) {\n            return -1\n        }\n\
    \        return max", "        val freq = mutable.HashMap.empty[Long, Int]\n \
    \       for(i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n      \
    \  val max = freq.maxBy(_._2)._1\n        if(max >= freq.maxBy(_._1)._1) {\n \
    \           return max\n        } else {\n            return -1\n        }", " \
    \       val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n       \
    \ if (max >= freq.keys.toSet.size) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n \
    \       val maxFreq = freq.maxBy(_._2)\n        if (maxFreq._2 >= freq.maxBy(_._1)._2)\
    \ -1\n        else maxFreq._1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        val max = freq.maxBy(_._2)._1\n\
    \        val freqMax = freq.filter(_._2 == max).length\n        if (max > 0 &&\
    \ freqMax >= freq.getOrElse(max, 0l)) {\n            max\n        } else {\n \
    \           -1\n        }", "        val freq = mutable.Map[Long, Int]()\n   \
    \     lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val\
    \ maxFreq = freq.maxBy(_._2)._1\n        val maxFreqValue = freq.maxBy(_._2)._2\n\
    \        if(maxFreqValue == 0l) -1l else maxFreq", "        val freq = mutable.Map[Long,\
    \ Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        var max = 0\n        var maxFreq\
    \ = 0\n        var maxIndex = 0\n        var i = 0\n        while(i < lst.length)\
    \ {\n            val freq = lst(i).toLong\n            val index = i\n       \
    \     val value = lst(i)\n            if(value > 0 && freq >= value) {\n     \
    \           max = value\n                maxFreq = freq\n                maxIndex\
    \ = index\n            }\n            i += 1\n        }\n        if(maxFreq ==\
    \ 0) -1\n        else max", "        val freq = mutable.Map[Long, Int]()\n   \
    \     lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max >= 0l) {\n            freq.filter(_._2\
    \ >= max).maxBy(_._1)._1\n        } else {\n            -1l\n        }", "   \
    \     val freq = mutable.HashMap[Long, Int]()\n        val res = -1\n        lst.foreach{x\
    \ => freq += x -> freq.getOrElse(x, 0)}\n        val max = freq.maxBy(_._2)\n\
    \        val maxFreq = freq.filter(_._2 == max).length\n        if (maxFreq >=\
    \ res.toLong) {\n            res = max\n        }\n        res", "        val\
    \ freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n   \
    \     val max = freq.maxBy(_._2)._2\n        if (max >= 0l) max else -1", "  \
    \      val freq = mutable.HashMap[Long, Int]()\n        val max = -1\n       \
    \ lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        lst.foreach(x\
    \ => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x, 0))\n        max",
  "        var max = 0\n        var maxCount = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) > 0) {\n                val count = lst.count(_ ==\
    \ lst(i))\n                if(count > maxCount) {\n                    max = lst(i)\n\
    \                    maxCount = count\n                }\n            }\n    \
    \    }\n        if(maxCount == 0) {\n            return -1\n        }\n      \
    \  return max", "        var max = 0\n        var maxCount = 0\n        var maxFreq\
    \ = 0\n        var maxIndex = 0\n        var i = 0\n        while(i < lst.size)\
    \ {\n            if(lst(i) > 0) {\n                val count = lst(i).toLong\n\
    \                if(count > maxCount) {\n                    max = lst(i)\n  \
    \                  maxCount = count\n                    maxFreq = lst(i).toLong\n\
    \                    maxIndex = i\n                }\n                i += 1\n\
    \            }\n        }\n        if(maxCount == 0) {\n            return -1\n\
    \        }\n        if(maxFreq > 0) {\n            return max\n        }\n   \
    \     return -1", "        val freq = mutable.HashMap[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n        val max\
    \ = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1) {\n         \
    \   return max\n        }\n        return -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach{x => freq += x -> freq.getOrElse(x,\
    \ 0)}\n        lst.foreach{x => if (freq.getOrElse(x, 0) > max) max = freq.getOrElse(x,\
    \ 0)}\n        max", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 1)\n", "      \
    \  val freq = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0) + 1l)\n        val max = freq.maxBy(_._2)._1\n        val\
    \ maxFreq = freq.maxBy(_._2)._2\n        if (maxFreq >= max) max else -1", " \
    \       val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n  \
    \          freq(i) += 1\n        }\n        val max = freq.maxBy(_._2)._1\n  \
    \      if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until lst.size) {\n            freq += (lst(i) ->\
    \ freq.getOrElse(lst(i), 0) + 1)\n        }\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        val max = -1\n        lst.foreach{ x =>\n            freq += x\
    \ -> freq.getOrElse(x, 0) + 1\n        }\n        val res = freq.maxBy(_._2)\n\
    \        res._1 match {\n            case x if x > max => max\n            case\
    \ x => x\n        }", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n\
    \        val maxFreq = freq.filter(x => x._2 == max).length\n        if (maxFreq\
    \ >= freq.filter(x => x._2 == max).length) max else -1", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)._1\n        if (max >\
    \ 0) {\n            freq.filter(_._2 >= max).maxBy(_._1)._1\n        } else {\n\
    \            -1\n        }", "        val freq = mutable.Map[Long, Int]()\n  \
    \      for (i <- lst) {\n            freq(i) = freq(i) + 1\n        }\n      \
    \  val max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "       \
    \ val freq = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size)\
    \ {\n            freq += lst(i) -> freq(lst(i)) + 1\n        }\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if (maxFreq >= freq.maxBy(_._1)) {\n           \
    \ return -1\n        } else {\n            return maxFreq._1\n        }", "  \
    \      val freq = mutable.HashMap[Long, Int]()\n        for (i <- lst) {\n   \
    \         freq(i) = freq(i) + 1\n        }\n        val max = freq.maxBy(_._2)\n\
    \        if (max != 0) {\n            freq.filter(_._2 > 0).maxBy(_._1)\n    \
    \    } else {\n            -1\n        }", "        val freq = mutable.Map[Long,\
    \ Int]()\n        for (i <- lst) {\n            freq += i -> freq.getOrElse(i,\
    \ 0) + 1\n        }\n        val max = freq.maxBy(_._2)\n        if (max > 0)\
    \ max._1 else -1", "        val freq = mutable.Map[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max >= freq.maxBy(_._1)._1) -1 else max", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1)\n    \
    \    val max = freq.maxBy(_._2)._1\n        max match {\n            case x if\
    \ freq.getOrElse(x, 0) > freq.getOrElse(max, 0) => x\n            case _ => -1\n\
    \        }", "        val freq = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        lst.foreach(x => freq += x ->\
    \ freq.getOrElse(x, 0l) + 1)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 2)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 3)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 4)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 5)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 6)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 7)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 8)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 9)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 10)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 11)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 12)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 13)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 14)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 15)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 16)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 17)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 18)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 19)\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l) + 20)\n        lst.foreach(x => freq +=\
    \ x -> freq.getOrElse(x, 0l) + 21)\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l) + 22)\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l) + 23)\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0) + 1l)\n        val max = freq.maxBy(_._2)\n        max match {\n        \
    \    case Some((_, count)) => count\n            case None => -1\n        }",
  "        val freq = mutable.HashMap[Long, Int]()\n        for(i <- lst) {\n    \
    \        freq(i) += 1\n        }\n        val max = freq.maxBy(_._2)._1\n    \
    \    if(max > 0) max else -1", "        val freq = mutable.HashMap[Long, Int]()\n\
    \        lst.foreach(x => freq += (x -> freq.getOrElse(x, 0) + 1l))\n        val\
    \ max = freq.maxBy(_._2)._1\n        if (max > 0) max else -1", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 0 until lst.size) {\n\
    \            freq += (lst(i) -> freq(lst(i))+1)\n        }\n        val maxFreq\
    \ = freq.maxBy(_._2)\n        if (maxFreq._2 > 0) maxFreq._1 else -1", "     \
    \   val freq = mutable.HashMap.empty[Long, Int]\n        val max = -1\n      \
    \  lst.foreach{ x =>\n            freq += x -> freq.getOrElse(x, 0) + 1\n    \
    \    }\n        lst.foreach{ x =>\n            val count = freq.getOrElse(x, 0)\n\
    \            if (count > max) {\n                max = count\n            }\n\
    \        }\n        max", "        val freq = mutable.HashMap.empty[Long, Int]\n\
    \        for (i <- 0 until lst.size) {\n            freq += lst(i) -> freq(lst(i))+1\n\
    \        }\n        val max = freq.maxBy(_._2)\n        if (max != 0) {\n    \
    \        max._1\n        } else {\n            -1\n        }", "        val freq\
    \ = mutable.HashMap.empty[Long, Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x,\
    \ 0l))\n        val max = freq.maxBy(_._2)\n        if (max > 0) max\n       \
    \ else -1", "        val freq = mutable.HashMap[Long, Int]()\n        lst.foreach(x\
    \ => freq += x -> freq.getOrElse(x, 0l))\n        val max = freq.maxBy(_._2)._1\n\
    \        if(max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        lst.foreach(x => freq += x -> freq.getOrElse(x, 0) + 1l)\n        val\
    \ max = freq.maxBy(_._2)._1\n        val freqMax = freq.filter(_._2 == max).length\n\
    \        if (max > 0 && freqMax >= freq.getOrElse(max, 0)) {\n            max\n\
    \        } else {\n            -1\n        }", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach(x => freq += x -> freq.getOrElse(x, 0l))\n       \
    \ val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqVal = freq.maxBy(_._2)._1\n\
    \        if (maxFreqVal >= 0l) {\n            return maxFreqVal\n        }\n \
    \       return -1l", "        var max = 0\n        var freq = 0\n        var i\
    \ = 0\n        while (i < lst.length) {\n            if (lst(i) > 0) {\n     \
    \           freq = freq + 1\n                if (freq > lst(i)) {\n          \
    \          max = lst(i)\n                }\n            }\n            i = i +\
    \ 1\n        }\n        if (max < 0) {\n            return -1\n        }\n   \
    \     return max", "        var max = 0\n        var maxCount = 0\n        var\
    \ maxFreq = 0\n        var maxIndex = 0\n        for (i <- 0 until lst.size) {\n\
    \            val freq = lst(i).toLong\n            if (freq > maxFreq) {\n   \
    \             max = lst(i)\n                maxCount = freq\n                maxFreq\
    \ = freq\n                maxIndex = i\n            }\n        }\n        if (maxCount\
    \ == 0) {\n            return -1\n        }\n        return max", "        val\
    \ freq = mutable.HashMap[Long, Int]()\n        val max = -1\n        lst.foreach{\
    \ x =>\n            freq += x -> freq.getOrElse(x, 0) + 1\n            if (freq.getOrElse(x,\
    \ 0) > max) {\n                max = freq.getOrElse(x, 0)\n            }\n   \
    \     }\n        if (max > 0) max else -1", "        val freq = mutable.HashMap[Long,\
    \ Int]()\n        val max = -1\n        lst.foreach{ x =>\n            freq +=\
    \ x -> freq.getOrElse(x, 0) + 1\n            if (freq.getOrElse(x, 0) > max) {\n\
    \                max = freq.getOrElse(x, 0)\n            }\n        }\n      \
    \  if (max > 0) max else -1", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- lst) {\n            if (freq.contains(i)) {\n      \
    \          freq(i) += 1\n            } else {\n                freq(i) = freq(i)\
    \ + 1\n            }\n        }\n        val max = freq.maxBy(_._2)\n        if\
    \ (max > 0) {\n            freq.maxBy(_._1)._1\n        } else {\n           \
    \ -1\n        }", "        val freq = mutable.HashMap[Long, Int]()\n        for\
    \ (i <- lst) {\n            freq += i -> freq.getOrElse(i, 0) + 1\n        }\n\
    \        val max = freq.maxBy(_._2)._1\n        val max = freq.maxBy(_._2)._1\n\
    \        if (max > 0) max else -1", "        val freq = mutable.Map[Long, Int]()\n\
    \        val maxFreq = mutable.Map[Long, Int]()\n        val maxVal = mutable.Map[Long,\
    \ Long]()\n        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex\
    \ = mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long, Int]()\n        val maxValIndex =\
    \ mutable.Map[Long, Int]()\n        val maxValIndex = mutable.Map[Long, Int]()\n\
    \        val maxValIndex = mutable.Map[Long", "        val freq = mutable.HashMap.empty[Long,\
    \ Int]\n        lst.foreach{x => freq += x -> freq.getOrElse(x, 0)+1}\n      \
    \  val maxFreq = freq.maxBy(_._2)._2\n        val maxFreqValue = freq.maxBy(_._2)._1\n\
    \        if(maxFreqValue == 0) -1\n        else maxFreqValue", "        val freq\
    \ = mutable.Map[Long, Int]()\n        lst.foreach(x => freq += (x -> freq.getOrElse(x,\
    \ 0) + 1l))\n        val max = freq.maxBy(_._2)._1\n        if (max >= freq.maxBy(_._1)._1)\
    \ -1l else max"]
stop_tokens:
- "\n    }\n"
