name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    //\
  \ ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n\
  \    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        val minDistance = math.abs(numbers(0) - numbers(1))\n     \
    \   val minIndex = 0\n        val minValue = numbers(0)\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            val distance = Math.abs(number - numbers(index))\n\
    \            if (distance < minDistance) {\n                minDistance = distance\n\
    \                minIndex = index\n                minValue = number\n       \
    \     }\n        }\n        (minValue, numbers(minIndex))", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val minDistance\
    \ = math.min(numbers.map(math.abs))\n        val minIndex = numbers.indexWhere(x\
    \ => math.abs(x - minDistance) < math.abs(x - numbers.last))\n        (numbers.take(minIndex),\
    \ numbers.drop(minIndex))", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val minDistance\
    \ = numbers.minBy(x => math.abs(x - numbers.last))\n        val maxDistance =\
    \ numbers.maxBy(x => math.abs(x - numbers.last))\n        (minDistance, maxDistance)",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._2)\n        closestPairs.headOption.toTuple2(closestPairs.lastOption)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.length/2)\n        closestTo.map(_._1).reverse", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val minDistance = numbers.minBy(_.abs)\
    \ - numbers.minBy(_.abs)\n        val maxDistance = numbers.maxBy(_.abs) - numbers.maxBy(_.abs)\n\
    \        (minDistance, maxDistance)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val largestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexOf(closestTo)\n        (closestTo,\
    \ closestToIndex)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val firstClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val secondClosestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val minDistance = numbers.minBy(x => math.abs(x - numbers.last))\n    \
    \    val maxDistance = numbers.maxBy(x => math.abs(x - numbers.last))\n      \
    \  (minDistance, maxDistance)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n\
    \        val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortBy(math.abs(_))\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse(sortedNumbers.last)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val difference = largest - smallest\n        val differences = numbers.map(x\
    \ => (x - smallest) / difference)\n        val smallestDifference = differences.min\n\
    \        val largestDifference = differences.max\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ minDistance = math.abs(numbers.min() - numbers.max())\n        val maxDistance\
    \ = math.abs(numbers.max() - numbers.min())\n        val minIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.max()) < maxDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val sortedNumbers = numbers.sortBy(math.abs)\n        val firstClosest\
    \ = sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n     \
    \   (firstClosest, secondClosest)", "        val minDistance = math.max(numbers.min)(numbers.max)\
    \ - math.min(numbers.min)(numbers.max)\n        val minIndex : Int = numbers.indexWhere(x\
    \ => math.abs(x - minDistance) < math.abs(x - numbers.max))\n        val maxIndex\
    \ : Int = numbers.indexWhere(x => math.abs(x - minDistance) < math.abs(x - numbers.min))\n\
    \        (numbers.min, numbers.max)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n    \
    \    val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference\
    \ = sortedNumbers.head - sortedNumbers.last\n        val largestDifference = sortedNumbers.last\
    \ - sortedNumbers.head\n        smallestDifference, largestDifference", "    \
    \    val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = 0\n        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val maxIndex = (numbers.size - 1).toInt\n        val maxDistance = math.abs(maxValue\
    \ - numbers.max)\n        val maxIndexInRange = maxIndex - minIndex\n        val\
    \ maxDistanceInRange = maxDistance - minDistance\n        val maxIndexInRangeInRange\
    \ = maxIndexInRange - maxIndexInRange\n        val maxDistanceInRangeInRange =\
    \ maxDistanceInRange - maxDistanceInRange\n        val maxIndexInRangeInRangeInRange\
    \ = maxIndexInRangeInRange - maxIndexInRangeInRange\n        val maxDistanceInRangeInRangeInRange\
    \ = maxDistanceInRangeInRange - maxDistanceInRangeInRange\n        val maxIndexInRangeInRangeInRangeInRange\
    \ = maxIndexInRangeInRangeInRange - maxIndexInRangeInRangeInRange\n        val\
    \ maxDistanceInRangeInRangeInRangeInRange = maxDistanceInRangeInRangeInRange -\
    \ maxDistanceInRangeInRangeInRange\n        val maxIndexInRangeInRangeInRangeInRangeInRange\
    \ = maxIndexInRangeInRangeInRangeInRange - maxIndexInRangeInRangeInRangeInRange\n\
    \        val maxDistanceInRangeInRangeInRangeInRangeInRange = maxDistanceInRangeInRangeInRangeInRange\
    \ - maxDistanceInRangeInRangeInRangeInRange\n        val maxIndexInRangeInRangeInRangeInRangeInRangeInRange\
    \ = maxIndexInRangeInRangeInRangeInRangeInRange - maxIndexInRangeInRangeInRangeInRangeInRange\n\
    \        val maxDistanceInRangeInRangeInRangeInRangeInRangeInRange = maxDistanceInRangeInRangeInRangeInRangeInRange\
    \ - maxDistanceInRangeInRangeInRangeInRangeInRange\n        val maxIndexInRangeInRangeInRangeInRangeInRangeInRange\
    \ = maxIndexInRangeInRangeInRangeInRangeInRange - maxIndexInRangeInRangeInRangeInRangeInRange\n\
    \        val maxDistanceInRangeInRangeInRangeInRangeInRangeInRange = maxDistanceInRangeInRangeInRangeInRangeInRangeInRange\
    \ - maxDistanceInRangeInRangeInRangeInRangeInRangeInRange\n        val maxIndexInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = maxIndexInRangeInRangeInRangeIn", "        val minDistance = math.abs(numbers.min()\
    \ - numbers.max())\n        val minIndex = 0\n        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        numbers.zipWithIndex.foreach { case\
    \ (number, index) =>\n            val distance = Math.abs(number - minValue)\n\
    \            if (distance < minDistance) {\n                minDistance = distance\n\
    \                minIndex = index\n                minValue = number\n       \
    \     }\n            if (distance == minDistance) {\n                val newValue\
    \ = number + minDistance\n                if (newValue < minValue) {\n       \
    \             minValue = newValue\n                    minIndex = index\n    \
    \            }\n            }\n            if (distance == minDistance) {\n  \
    \              val newValue = number - minDistance\n                if (newValue\
    \ > maxValue) {\n                    maxValue = newValue\n                   \
    \ maxIndex = index\n                }\n            }\n        }\n        (minValue,\
    \ maxValue)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ smallestDifference = sortedNumbers.head - sortedNumbers.last\n        val largestDifference\
    \ = sortedNumbers.last - sortedNumbers.head\n        (smallestDifference, largestDifference)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val largestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex),\
    \ sortedNumbers(largestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestToLeft = sortedNumbers.head\n        val closestToRight\
    \ = sortedNumbers.last\n        (closestToLeft, closestToRight)", "        val\
    \ min1 = numbers.min\n        val max1 = numbers.max\n        val min2 = numbers.min\n\
    \        val max2 = numbers.max\n        val minDiff = math.abs(min1 - min2)\n\
    \        val maxDiff = math.abs(max1 - max2)\n        if (minDiff < maxDiff) {\n\
    \            (min1, min2)\n        } else {\n            (max1, max2)\n      \
    \  }", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo\
    \ = sortedNumbers.zipWithIndex.filter(_._2 < sortedNumbers.length/2)\n       \
    \ closestTo.head._1.toFloat, closestTo.last._1.toFloat", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val min1 = numbers.min\n        val max1 = numbers.max\n        val min2\
    \ = numbers.min\n        val max2 = numbers.max\n        if (min1 == max1) (min1,\
    \ max1)\n        else if (min2 == max2) (min2, max2)\n        else (min1, max1)\
    \ -> (max1, min2)", "        val sortedNumbers = numbers.sortBy(math.abs)\n  \
    \      val smallestIndex = sortedNumbers.indexWhere(x => x < sortedNumbers(0))\n\
    \        val largestIndex = sortedNumbers.indexWhere(x => x > sortedNumbers(0))\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber =\
    \ sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n       \
    \ (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ min1 = numbers.min\n        val min2 = numbers.min\n        val min3 = numbers.min\n\
    \        val min4 = numbers.min\n        val min5 = numbers.min\n        val min6\
    \ = numbers.min\n        val min7 = numbers.min\n        val min8 = numbers.min\n\
    \        val min9 = numbers.min\n        val min10 = numbers.min\n        val\
    \ min11 = numbers.min\n        val min12 = numbers.min\n        val min13 = numbers.min\n\
    \        val min14 = numbers.min\n        val min15 = numbers.min\n        val\
    \ min16 = numbers.min\n        val min17 = numbers.min\n        val min18 = numbers.min\n\
    \        val min19 = numbers.min\n        val min20 = numbers.min\n        val\
    \ min21 = numbers.min\n        val min22 = numbers.min\n        val min23 = numbers.min\n\
    \        val min24 = numbers.min\n        val min25 = numbers.min\n        val\
    \ min26 = numbers.min\n        val min27 = numbers.min\n        val min28 = numbers.min\n\
    \        val min29 = numbers.min\n        val min30 = numbers.min\n        val\
    \ min31 = numbers.min\n        val min32 = numbers.min\n        val min33 = numbers.min\n\
    \        val min34 = numbers.min\n        val min35 = numbers.min\n        val\
    \ min36 = numbers.min\n        val min37 = numbers.min\n        val min38 = numbers.min\n\
    \        val min39 = numbers.min\n        val min40 = numbers.min\n        val\
    \ min41 = numbers.min\n        val min42 = numbers.min\n        val min43 = numbers.min\n\
    \        val min44 = numbers.min\n        val min45 = numbers.min\n        val\
    \ min46 = numbers.min\n        val min47 = numbers.min\n        val min48 = numbers.min\n\
    \        val min49 = numbers.min\n        val min50 = numbers.min\n        val\
    \ min51 = numbers.min\n        val min52 = numbers.min\n        val min53 = numbers.min\n\
    \        val min54 = numbers.min\n        val min55 = numbers.min\n        val\
    \ min56 = numbers.min\n        val min57 = numbers.min\n        val min58 = numbers.min\n\
    \        val min59 = numbers.min\n        val min60 = numbers.min\n        val\
    \ min61 = numbers.min\n        val min62 = numbers.min\n        val min63 = numbers.min\n\
    \        val min64 = numbers.min\n        val min65 = numbers.min\n        val\
    \ min66", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val minDistance = math.abs(numbers(0)\
    \ - numbers(1))\n        val minIndex = 0\n        val minValue = numbers(0)\n\
    \        numbers.foreach { number =>\n            val distance = Math.abs(number\
    \ - numbers(1))\n            if (distance < minDistance) {\n                minDistance\
    \ = distance\n                minIndex = numbers.indexOf(number)\n           \
    \     minValue = number\n            }\n        }\n        (minValue, minDistance)",
  "        val smallest = (numbers(0), numbers(0))\n        val largest = (numbers(0),\
    \ numbers(0))\n        numbers.foreach { n =>\n            val current = (smallest._1,\
    \ largest._1)\n            val newSmallest = (current._1 + n, current._2)\n  \
    \          val newLargest = (current._2, current._1 + n)\n            if (newSmallest._1\
    \ < newLargest._1) {\n                smallest = newSmallest\n            } else\
    \ {\n                largest = newLargest\n            }\n        }\n        (smallest._1,\
    \ largest._1)", "        val sortedNumbers = numbers.sortWith(_ < _)\n       \
    \ val smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val secondClosest\
    \ = sortedNumbers.last\n        (closestTo, secondClosest)", "        val smallest\
    \ = numbers(0)\n        val largest = numbers(0)\n        numbers.foreach { number\
    \ =>\n            if (number < smallest) {\n                smallest = number\n\
    \            } else if (number > largest) {\n                largest = number\n\
    \            }\n        }\n        (smallest, largest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val min1 = numbers.min\n        val max1 = numbers.max\n        val min2\
    \ = numbers.min\n        val max2 = numbers.max\n        if (min1 == max1) (min1,\
    \ max1)\n        else if (min2 == max2) (min2, max2)\n        else (min1, max2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallestDifference = math.abs(numbers.min()\
    \ - numbers.max())\n        val smallestElement = numbers.min\n        val largestElement\
    \ = numbers.max\n        val smallestElementIndex = numbers.indexWhere(x => x\
    \ == smallestElement)\n        val largestElementIndex = numbers.indexWhere(x\
    \ => x == largestElement)\n        (smallestElement, largestElement)", "     \
    \   val minDistance = math.abs(numbers.min() - numbers.max())\n        val minIndex\
    \ = 0\n        val minElement = numbers(minIndex)\n        val minDistance2 =\
    \ math.abs(minElement - numbers.max())\n        val minIndex2 = 0\n        val\
    \ minElement2 = numbers(minIndex2)\n        val minDistance3 = math.abs(minElement2\
    \ - numbers.max())\n        val minIndex3 = 0\n        val minElement3 = numbers(minIndex3)\n\
    \        val minDistance4 = math.abs(minElement3 - numbers.max())\n        val\
    \ minIndex4 = 0\n        val minElement4 = numbers(minIndex4)\n        val minDistance5\
    \ = math.abs(minElement4 - numbers.max())\n        val minIndex5 = 0\n       \
    \ val minElement5 = numbers(minIndex5)\n        val minDistance6 = math.abs(minElement5\
    \ - numbers.max())\n        val minIndex6 = 0\n        val minElement6 = numbers(minIndex6)\n\
    \        val minDistance7 = math.abs(minElement6 - numbers.max())\n        val\
    \ minIndex7 = 0\n        val minElement7 = numbers(minIndex7)\n        val minDistance8\
    \ = math.abs(minElement7 - numbers.max())\n        val minIndex8 = 0\n       \
    \ val minElement8 = numbers(minIndex8)\n        val minDistance9 = math.abs(minElement8\
    \ - numbers.max())\n        val minIndex9 = 0\n        val minElement9 = numbers(minIndex9)\n\
    \        val minDistance10 = math.abs(minElement9 - numbers.max())\n        val\
    \ minIndex10 = 0\n        val minElement10 = numbers(minIndex10)\n        val\
    \ minDistance11 = math.abs(minElement10 - numbers.max())\n        val minIndex11\
    \ = 0\n        val minElement11 = numbers(minIndex11)\n        val minDistance12\
    \ = math.abs(minElement11 - numbers.max())\n        val minIndex12 = 0\n     \
    \   val minElement12 = numbers(minIndex12)\n        val minDistance13 = math.abs(minElement12\
    \ - numbers.max())\n        val minIndex13 = 0\n        val minElement13 = numbers(minIndex13)\n\
    \        val minDistance14 = math.abs(minElement13 - numbers.max())\n        val\
    \ minIndex14 = 0\n        val minElement14 = numbers(minIndex14)\n        val\
    \ minDistance15 = math.abs(minElement14 - numbers.max())\n        val minIndex15\
    \ = 0\n        val minElement15 = numbers(minIndex15)\n        val minDistance16\
    \ = math.abs(minElement15 - numbers.max())\n        val ", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOfSlice(closestTo)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val smallest = numbers.min\n\
    \        val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = numbers.minBy(_.abs)\n        val maxDistance = numbers.maxBy(_.abs)\n\
    \        (minDistance, maxDistance)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val smallest = numbers.min\n\
    \        val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val minDistance = math.abs(numbers.min() - numbers.max())\n        val\
    \ minIndex = (numbers, minDistance).minBy(_._2)\n        val maxIndex = (numbers,\
    \ minDistance).maxBy(_._2)\n        (minIndex._1, maxIndex._1)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo2 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo3 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo4 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo5 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo6 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo7 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo8 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo9 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo10 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo11 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo12 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo13 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo14 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo15 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo16 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo17 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo18 = sortedNumbers.zip(sortedNumbers.tail).map\
    \ { case (a, b) => math.abs(a - b) }.min\n        val closestTo19 = sorted", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexWhere(_ == closestTo._1)\n  \
    \      val closestToValue = closestTo._2\n        val secondClosestTo = sortedNumbers.takeRight(2)\n\
    \        val secondClosestToIndex = sortedNumbers.indexWhere(_ == secondClosestTo._1)\n\
    \        val secondClosestToValue = secondClosestTo._2\n        (closestToValue,\
    \ secondClosestToValue)", "        val smallest = math.min(numbers)\n        val\
    \ largest = math.max(numbers)\n        val middle = smallest + largest/2\n   \
    \     val middleIndex = numbers.indexWhere(x => x == middle)\n        (smallest,\
    \ largest)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n    \
    \    closestPair.getOrElse(sortedNumbers.last, sortedNumbers.head)", "       \
    \ val smallestDiff = math.abs(numbers.min() - numbers.max())\n        val smallestIndex\
    \ = numbers.indexWhere(x => math.abs(x - numbers.min()) < smallestDiff)\n    \
    \    val largestIndex = numbers.indexWhere(x => math.abs(x - numbers.max()) <\
    \ smallestDiff)\n        (numbers(smallestIndex), numbers(largestIndex))", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val smallest: Float = numbers.min\n        val largest: Float = numbers.max\n\
    \        val smallestIndex: Int = numbers.indexWhere(x => x == smallest)\n   \
    \     val largestIndex: Int = numbers.indexWhere(x => x == largest)\n        (smallest,\
    \ largest)", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val\
    \ closestTo = sortedNumbers.take(2)\n        val closestTo2 = sortedNumbers.drop(2).take(2)\n\
    \        (closestTo, closestTo2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n        (closestPair._1,\
    \ closestPair._2)", "        val mins = numbers.minBy(_.toFloat)\n        val\
    \ maxs = numbers.maxBy(_.toFloat)\n        (mins, maxs)", "        val minDistance\
    \ = numbers.minBy(x => math.abs(x - numbers.last))\n        val maxDistance =\
    \ numbers.maxBy(x => math.abs(x - numbers.last))\n        (minDistance, maxDistance)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val largestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex),\
    \ sortedNumbers(largestIndex))", "        val minDistance = numbers.minBy(x =>\
    \ Math.abs(x - numbers.last))\n        val maxDistance = numbers.maxBy(x => Math.abs(x\
    \ - numbers.last))\n        (minDistance, maxDistance)", "        val minDistance\
    \ = math.abs(numbers.min() - numbers.max())\n        val minIndex = numbers.indexWhere(x\
    \ => math.abs(x - numbers.min()) < minDistance)\n        (numbers(minIndex), numbers(minIndex\
    \ + 1))", "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n    \
    \    val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortBy(math.abs)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestDifference = sortedNumbers.head - sortedNumbers.last\n\
    \        val smallestElement = sortedNumbers.head\n        val largestElement\
    \ = sortedNumbers.last\n        (smallestElement, largestElement)", "        val\
    \ minDistance = numbers.minBy(_.abs) - numbers.minBy(_.abs)\n        val maxDistance\
    \ = numbers.maxBy(_.abs) - numbers.minBy(_.abs)\n        (numbers.minBy(_.abs),\
    \ numbers.maxBy(_.abs))", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1 < _._1)\n\
    \        closestPair.getOrElse(sortedNumbers.head,sortedNumbers.last)", "    \
    \    val sortedNumbers = numbers.sortBy(math.abs)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallest = numbers.min\n  \
    \      val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortBy(math.abs)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val minDistance\
    \ = math.abs(numbers.min() - numbers.max())\n        val minIndex = 0\n      \
    \  val minElement = numbers(minIndex)\n        val minElementIndex = numbers.indexOf(minElement)\n\
    \        val minElementDistance = math.abs(minElement - numbers.min())\n     \
    \   val minElementDistanceIndex = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex2 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex3 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex4 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex5 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex6 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex7 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex8 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex9 = numbers.indexOf(minElementDistance)\n      \
    \  val minElementDistanceIndex10 = numbers.indexOf(minElementDistance)\n     \
    \   val minElementDistanceIndex11 = numbers.indexOf(minElementDistance)\n    \
    \    val minElementDistanceIndex12 = numbers.indexOf(minElementDistance)\n   \
    \     val minElementDistanceIndex13 = numbers.indexOf(minElementDistance)\n  \
    \      val minElementDistanceIndex14 = numbers.indexOf(minElementDistance)\n \
    \       val minElementDistanceIndex15 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex16 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex17 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex18 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex19 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex20 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex21 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex22 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex23 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex24 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex25 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex26 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex27 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex28 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex29 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex30 = numbers.indexOf(minElementDistance)\n\
    \        val minElementDistanceIndex31 = numbers.indexOf(minElementDistance)\n\
    \        val minElement", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair.getOrElse(sortedNumbers.head, sortedNumbers.last)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestToIndex = sortedNumbers.indexWhere(_ == closestTo._1)\n  \
    \      (closestTo._1, closestTo._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosest = sortedNumbers.head\n \
    \       val secondClosest = sortedNumbers.last\n        (firstClosest, secondClosest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val secondClosestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex),\
    \ sortedNumbers(secondClosestIndex))", "        val smallestDifference = math.abs(numbers.head()\
    \ - numbers.last())\n        val smallestElement = numbers.head\n        val largestElement\
    \ = numbers.last\n        val largestDifference = math.abs(numbers.head() - numbers.last())\n\
    \        val largestElementIndex = numbers.lastIndex\n        val smallestElementIndex\
    \ = numbers.indexWhere(x => math.abs(x - numbers.head()) < smallestDifference)\n\
    \        val largestElementIndex = numbers.indexWhere(x => math.abs(x - numbers.last())\
    \ < largestDifference)\n        (smallestElement, largestElement)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestPair.getOrElse(sortedNumbers.head, (sortedNumbers.last,\
    \ sortedNumbers.head))", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val minDistance = math.abs(numbers.min() -\
    \ numbers.max())\n        val minIndex = numbers.indexWhere(x => math.abs(x -\
    \ numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x =>\
    \ math.abs(x - numbers.max()) < minDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val first = sortedNumbers.head\n\
    \        val second = sortedNumbers.last\n        (first, second)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        (smallestDifference, largestDifference)", "        val minDistance =\
    \ math.abs(numbers(0) - numbers(1))\n        val minIndex = -1\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            if (math.abs(number - numbers(index))\
    \ < minDistance) {\n                minDistance = math.abs(number - numbers(index))\n\
    \                minIndex = index\n            }\n        }\n        (numbers(minIndex),\
    \ numbers(minIndex + 1))", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val firstClosest = sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n\
    \        (firstClosest, secondClosest)", "        val minDistance = numbers.minBy(x\
    \ => math.abs(x - numbers.last))\n        val maxDistance = numbers.maxBy(x =>\
    \ math.abs(x - numbers.last))\n        (minDistance, maxDistance)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n        val largestIndex\
    \ = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex),\
    \ sortedNumbers(largestIndex))", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val minDistance\
    \ = math.abs(numbers.min() - numbers.max())\n        val minIndex = 0\n      \
    \  val minValue = numbers.min\n        val maxValue = numbers.max\n        val\
    \ minDistanceIndex = numbers.indexWhere(x => math.abs(x - minValue) < minDistance)\n\
    \        val maxDistanceIndex = numbers.indexWhere(x => math.abs(x - maxValue)\
    \ < minDistance)\n        (minValue, maxValue)", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ smallest = math.min(numbers)\n        val largest = math.max(numbers)\n    \
    \    (smallest, largest)", "        val minDistance = math.abs(numbers.min() -\
    \ numbers.max())\n        val minIndex = numbers.indexWhere(x => math.abs(x -\
    \ numbers.min()) < minDistance)\n        val maxIndex = numbers.indexWhere(x =>\
    \ math.abs(x - numbers.max()) < minDistance)\n        (numbers(minIndex), numbers(maxIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val min1 = numbers.min\n        val max1 =\
    \ numbers.max\n        val min2 = numbers.min\n        val max2 = numbers.max\n\
    \        val diff1 = max1 - min1\n        val diff2 = max2 - min2\n        val\
    \ diff1Squared = diff1 * diff1\n        val diff2Squared = diff2 * diff2\n   \
    \     val diffSum = diff1Squared + diff2Squared\n        val diffSumSquared =\
    \ diffSum * diffSum\n        val diffSumSquareRoot = math.sqrt(diffSumSquared)\n\
    \        val diff1SquaredRoot = diff1Squared * diffSumSquareRoot\n        val\
    \ diff2SquaredRoot = diff2Squared * diffSumSquareRoot\n        val diff1Root =\
    \ diff1Squared * diffSumSquareRoot\n        val diff2Root = diff2Squared * diffSumSquareRoot\n\
    \        val diff1RootSquared = diff1Root * diff1\n        val diff2RootSquared\
    \ = diff2Root * diff2\n        val diff1RootSquaredRoot = diff1RootSquared * diffSumSquareRoot\n\
    \        val diff2RootSquaredRoot = diff2RootSquared * diffSumSquareRoot\n   \
    \     val diff1RootRoot = diff1RootSquared * diffSumSquareRoot\n        val diff2RootRoot\
    \ = diff2RootSquared * diffSumSquareRoot\n        val diff1RootRootSquared = diff1RootRoot\
    \ * diff1\n        val diff2RootRootSquared = diff2RootRoot * diff2\n        val\
    \ diff1RootRootSquaredRoot = diff1RootRootSquared * diffSumSquareRoot\n      \
    \  val diff2RootRootSquaredRoot = diff2RootRootSquared * diffSumSquareRoot\n \
    \       val diff1RootRootRoot = diff1RootRootSquared * diffSumSquareRoot\n   \
    \     val diff2RootRootRoot = diff2RootRootSquared * diffSumSquareRoot\n     \
    \   val diff1RootRootRootSquared = diff1RootRootRoot * diff1\n        val diff2RootRootRootSquared\
    \ = diff2RootRootRoot * diff2\n        val diff1RootRootRootSquaredRoot = diff1RootRootRootSquared\
    \ * diffSumSquareRoot\n        val diff2RootRootRootSquaredRoot = diff2RootRootRootSquared\
    \ * diffSumSquareRoot\n        val diff1RootRootRootRoot = diff1RootRootRootSquared\
    \ * diffSumSquareRoot\n        val diff2RootRootRootRoot = diff2RootRootRootSquare",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPairs =\
    \ sortedNumbers.zip(sortedNumbers.tail)\n        closestPairs.find(_._1 < _._1).getOrElse(closestPairs.find(_._1\
    \ > _._1).get)", "        val sortedNumbers = numbers.sortWith(_ < _)\n      \
    \  val closestTo = sortedNumbers.head\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        (closestTo, closestToIndex)", "        val minDistance = numbers.minBy(x\
    \ => math.abs(x - numbers.last))\n        val maxDistance = numbers.maxBy(x =>\
    \ math.abs(x - numbers.last))\n        (minDistance, maxDistance)", "        val\
    \ smallest = numbers.min\n        val largest = numbers.max\n        val smallestIndex\
    \ = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        if (smallestIndex == largestIndex) {\n            (smallest, largest)\n\
    \        } else {\n            (smallest, largest)\n        }", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        val closestPairIndex = sortedNumbers.indexOf(closestPair._1)\n      \
    \  (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ min1 = numbers.min\n        val max1 = numbers.max\n        val min2 = numbers.min\n\
    \        val max2 = numbers.max\n        val diff1 = max1 - min1\n        val\
    \ diff2 = max2 - min2\n        if (diff1 < diff2) {\n            (min1, max1)\n\
    \        } else {\n            (min2, max2)\n        }", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2)\n        closestTo.zip(closestTo2).map\
    \ { case (a, b) => a -> b }", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val smallest = math.min(numbers)\n   \
    \     val largest = math.max(numbers)\n        (smallest, largest)", "       \
    \ val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        (closestPair._1, closestPair._2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1)\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortBy(math.abs)\n  \
    \      val smallestNumber = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n\
    \        (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.head\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.take(2)\n\
    \        val closestTo2 = sortedNumbers.drop(2)\n        (closestTo, closestTo2)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n        (closestPair._1,\
    \ closestPair._2)", "        val sortedNumbers = numbers.sortWith(_ < _)\n   \
    \     val smallestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.head)\n\
    \        val largestIndex = sortedNumbers.indexWhere(_ == sortedNumbers.last)\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))", "     \
    \   val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val largestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestPair =\
    \ sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).getOrElse((sortedNumbers.head,\
    \ sortedNumbers.last))\n        (closestPair._1, closestPair._2)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val firstClosest = sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n\
    \        (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val first = sortedNumbers.head\n        val second = sortedNumbers.last\n\
    \        (first, second)", "        val sortedNumbers = numbers.sortWith(_ < _)\n\
    \        val closestPair = sortedNumbers.zip(sortedNumbers.tail).minBy(_._1).get\n\
    \        (closestPair._1, closestPair._2)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val smallest = numbers.min\n  \
    \      val largest = numbers.max\n        val smallestIndex = numbers.indexOf(smallest)\n\
    \        val largestIndex = numbers.indexOf(largest)\n        (smallest, largest)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val minDistance = numbers.minBy(x =>\
    \ Math.abs(x - numbers.last))\n        val maxDistance = numbers.maxBy(x => Math.abs(x\
    \ - numbers.last))\n        (minDistance, maxDistance)", "        val smallest\
    \ = numbers.min\n        val largest = numbers.max\n        val middle = smallest\
    \ + largest/2\n        val index = numbers.indexWhere(x => x == middle)\n    \
    \    (numbers.take(index), numbers.drop(index))", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n      \
    \  val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex =\
    \ sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = sortedNumbers.indexOf(0)\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(0)\n        val closestToIndex = ", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallest = sortedNumbers.head\n\
    \        val largest = sortedNumbers.last\n        (smallest, largest)", "   \
    \     val smallest = (numbers(0), numbers(0))\n        val largest = (numbers(0),\
    \ numbers(0))\n        numbers.foreach(n => {\n            if (smallest._2 < n)\
    \ smallest = (n, smallest._2)\n            if (largest._2 > n) largest = (n, largest._2)\n\
    \        })\n        (smallest._1, largest._1)", "        val sortedNumbers =\
    \ numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n \
    \       val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val firstClosest = sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n\
    \        (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestTo2\
    \ = sortedNumbers.drop(2)\n        (closestTo, closestTo2)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val firstClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.head)\n        val secondClosestIndex = sortedNumbers.indexWhere(_\
    \ == sortedNumbers.last)\n        (sortedNumbers(firstClosestIndex), sortedNumbers(secondClosestIndex))",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestTo = sortedNumbers.take(2)\n        val closestToIndex\
    \ = sortedNumbers.indexOf(closestTo)\n        (closestTo, closestToIndex)", " \
    \       val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOf(0)\n        (closestTo, closestToIndex)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.head\n\
    \        val closestToIndex = sortedNumbers.indexOfSlice(closestTo)\n        (closestTo,\
    \ closestToIndex)", "        val sortedNumbers = numbers.sortBy(math.abs)\n  \
    \      val smallestIndex = sortedNumbers.indexWhere(math.abs(_) < smallest(_))\n\
    \        val largestIndex = sortedNumbers.indexWhere(math.abs(_) > largest(_))\n\
    \        (sortedNumbers(smallestIndex), sortedNumbers(largestIndex))"]
stop_tokens:
- "\n    }\n"
