name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    //\
  \ ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n\
  \    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        val minDistance = math.abs(numbers(0) - numbers(1))\n     \
    \   val minIndex = 0\n        val minValue = numbers(0)\n        numbers.zipWithIndex.foreach\
    \ { case (number, index) =>\n            val distance = Math.abs(number - numbers(index))\n\
    \            if (distance < minDistance) {\n                minDistance = distance\n\
    \                minIndex = index\n                minValue = number\n       \
    \     }\n        }\n        (minValue, numbers(minIndex))", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestDifference = sortedNumbers.head\
    \ - sortedNumbers.last\n        val largestDifference = sortedNumbers.last - sortedNumbers.head\n\
    \        (smallestDifference, largestDifference)", "        val sortedNumbers\
    \ = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val firstClosest = sortedNumbers.head\n        val secondClosest\
    \ = sortedNumbers.last\n        (firstClosest, secondClosest)", "        val minDistance\
    \ = math.min(numbers.map(math.abs))\n        val minIndex = numbers.indexWhere(x\
    \ => math.abs(x - minDistance) < math.abs(x - numbers.last))\n        (numbers.take(minIndex),\
    \ numbers.drop(minIndex))", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val smallestNumber = sortedNumbers.head\n        val largestNumber =\
    \ sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val minDistance\
    \ = numbers.minBy(x => math.abs(x - numbers.last))\n        val maxDistance =\
    \ numbers.maxBy(x => math.abs(x - numbers.last))\n        (minDistance, maxDistance)",
  "        val smallest = numbers.min\n        val largest = numbers.max\n       \
    \ val smallestIndex = numbers.indexOf(smallest)\n        val largestIndex = numbers.indexOf(largest)\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortBy(math.abs)\n\
    \        val smallest = sortedNumbers.head\n        val largest = sortedNumbers.last\n\
    \        (smallest, largest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val closestPairs = sortedNumbers.zip(sortedNumbers.tail).filter(_._1\
    \ < _._1).map(_._2)\n        closestPairs.headOption.toTuple2(closestPairs.lastOption)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber\
    \ = sortedNumbers.head\n        val largestNumber = sortedNumbers.last\n     \
    \   (smallestNumber, largestNumber)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zip(sortedNumbers.tail).find(_._1\
    \ < _._1)\n        closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo.getOrElse(closestTo",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val firstClosest =\
    \ sortedNumbers.head\n        val secondClosest = sortedNumbers.last\n       \
    \ (firstClosest, secondClosest)", "        val sortedNumbers = numbers.sortWith(_\
    \ < _)\n        val smallestNumber = sortedNumbers.head\n        val largestNumber\
    \ = sortedNumbers.last\n        (smallestNumber, largestNumber)", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val closestTo = sortedNumbers.zipWithIndex.filter(_._2\
    \ < sortedNumbers.length/2)\n        closestTo.map(_._1).reverse", "        val\
    \ sortedNumbers = numbers.sortWith(_ < _)\n        val smallestNumber = sortedNumbers.head\n\
    \        val largestNumber = sortedNumbers.last\n        (smallestNumber, largestNumber)",
  "        val sortedNumbers = numbers.sortWith(_ < _)\n        val closestToFirst\
    \ = sortedNumbers.head\n        val closestToSecond = sortedNumbers.last\n   \
    \     (closestToFirst, closestToSecond)", "        val minDistance = numbers.minBy(_.abs)\
    \ - numbers.minBy(_.abs)\n        val maxDistance = numbers.maxBy(_.abs) - numbers.maxBy(_.abs)\n\
    \        (minDistance, maxDistance)"]
stop_tokens:
- "\n    }\n"
