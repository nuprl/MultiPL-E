name: HumanEval_31_is_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true if a given number is prime, and false otherwise.\n    // >>>\
  \ isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n   \
  \ // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n\
  \    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n\
  \    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
  \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
  \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) ==\
  \ (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) ==\
  \ (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val isPrime = (2l) until n map (x => if (n % x == 0) false\
    \ else true) reduceLeft (_ || _)\n        isPrime", "        val i = 2l\n    \
    \    val s = 2l\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                s = 2l\n            } else {\n                s = s * i\n   \
    \         }\n            i += 1\n        }\n        if (s == n) true\n       \
    \ else false", "        val isPrime = (2l) until n map (x => if (n % x == 0) false\
    \ else true) reduceLeft (_ || _)\n        isPrime", "        val isPrime = (2l)\
    \ until (n) contains n\n        val isNotPrime = (2l) until (n) contains n + 1\n\
    \        val isNotPrime2 = (n) until (n) contains n + 1\n        val isNotPrime3\
    \ = (n) until (n) contains n + 1\n        val isNotPrime4 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime5 = (n) until (n) contains n + 1\n        val isNotPrime6\
    \ = (n) until (n) contains n + 1\n        val isNotPrime7 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime8 = (n) until (n) contains n + 1\n        val isNotPrime9\
    \ = (n) until (n) contains n + 1\n        val isNotPrime10 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime11 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime12 = (n) until (n) contains n + 1\n        val isNotPrime13 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime14 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime15 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime16 = (n) until (n) contains n + 1\n        val isNotPrime17 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime18 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime19 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime20 = (n) until (n) contains n + 1\n        val isNotPrime21 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime22 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime23 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime24 = (n) until (n) contains n + 1\n        val isNotPrime25 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime26 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime27 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime28 = (n) until", "        val isPrime = n <= 1l\n        if(isPrime)\n\
    \            return true\n        val sqrtN = math.sqrt(n)\n        for(i <- 2l\
    \ to sqrtN) {\n            if(n % i == 0)\n                return false\n    \
    \    }\n        return true", "        val isPrime = (2l) until (n) contains n\n\
    \        val isPrime2 = isPrime filter (_ % 2l == 0l)\n        val isPrime3 =\
    \ isPrime filter (_ % 3l == 0l)\n        val isPrime4 = isPrime filter (_ % 4l\
    \ == 0l)\n        val isPrime5 = isPrime filter (_ % 5l == 0l)\n        val isPrime6\
    \ = isPrime filter (_ % 6l == 0l)\n        val isPrime7 = isPrime filter (_ %\
    \ 7l == 0l)\n        val isPrime8 = isPrime filter (_ % 8l == 0l)\n        val\
    \ isPrime9 = isPrime filter (_ % 9l == 0l)\n        val isPrime10 = isPrime filter\
    \ (_ % 10l == 0l)\n        val isPrime11 = isPrime filter (_ % 11l == 0l)\n  \
    \      val isPrime12 = isPrime filter (_ % 12l == 0l)\n        val isPrime13 =\
    \ isPrime filter (_ % 13l == 0l)\n        val isPrime14 = isPrime filter (_ %\
    \ 14l == 0l)\n        val isPrime15 = isPrime filter (_ % 15l == 0l)\n       \
    \ val isPrime16 = isPrime filter (_ % 16l == 0l)\n        val isPrime17 = isPrime\
    \ filter (_ % 17l == 0l)\n        val isPrime18 = isPrime filter (_ % 18l == 0l)\n\
    \        val isPrime19 = isPrime filter (_ % 19l == 0l)\n        val isPrime20\
    \ = isPrime filter (_ % 20l == 0l)\n        val isPrime21 = isPrime filter (_\
    \ % 21l == 0l)\n        val isPrime22 = isPrime filter (_ % 22l == 0l)\n     \
    \   val isPrime23 = isPrime filter (_ % 23l == 0l)\n        val isPrime24 = isPrime\
    \ filter (_ % 24l == 0l)\n        val isPrime25 = isPrime filter (_ % 25l == 0l)\n\
    \        val isPrime26 = isPrime filter (_ % 26l == 0l)\n        val isPrime27\
    \ = isPrime filter (_ % 27l == 0l)\n        ", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        val isPrime =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeAndDivisor = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeAndDivisorAndNotDivisor = mutable.ArrayBuffer.empty[Boolean]\n      \
    \  val isPrimeAndDivisorAndNotDivisorAndNotDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNot",
  "        val isPrime = n <= 1l\n        val isPrime2 = isPrime && (n % 2l) == 0l\n\
    \        val isPrime3 = isPrime2 && (n % 3l) == 0l\n        val isPrime4 = isPrime3\
    \ && (n % 4l) == 0l\n        val isPrime5 = isPrime4 && (n % 5l) == 0l\n     \
    \   val isPrime6 = isPrime5 && (n % 6l) == 0l\n        val isPrime7 = isPrime6\
    \ && (n % 7l) == 0l\n        val isPrime8 = isPrime7 && (n % 8l) == 0l\n     \
    \   val isPrime9 = isPrime8 && (n % 9l) == 0l\n        val isPrime10 = isPrime9\
    \ && (n % 10l) == 0l\n        val isPrime11 = isPrime10 && (n % 11l) == 0l\n \
    \       val isPrime12 = isPrime11 && (n % 12l) == 0l\n        val isPrime13 =\
    \ isPrime12 && (n % 13l) == 0l\n        val isPrime14 = isPrime13 && (n % 14l)\
    \ == 0l\n        val isPrime15 = isPrime14 && (n % 15l) == 0l\n        val isPrime16\
    \ = isPrime15 && (n % 16l) == 0l\n        val isPrime17 = isPrime16 && (n % 17l)\
    \ == 0l\n        val isPrime18 = isPrime17 && (n % 18l) == 0l\n        val isPrime19\
    \ = isPrime18 && (n % 19l) == 0l\n        val isPrime20 = isPrime19 && (n % 20l)\
    \ == 0l\n        val isPrime21 = isPrime20 && (n % 21l) == 0l\n        val isPrime22\
    \ = isPrime21 && (n % 22l) == 0l\n        val isPrime23 = isPrime22 && (n % 23l)\
    \ == 0l\n        val isPrime24 = isPrime23 && (n % 24l) == 0l\n        val isPrime25\
    \ = isPrime24 && (n % 25l) == 0l\n        val isPrime26 = isPrime25 && (n % 26l)\
    \ == 0l\n        val isPrime27 = isPrime26 && (n % 27l) == 0l\n        val isPrime28\
    \ = isPrime27 && (n % 28l) == 0l\n        val isPrime29 = isPrime28 && (n % 29l)\
    \ == 0l\n        val isPrime30 = isPrime29 && (n % 30l) == 0l\n        val isPrime31\
    \ = is", "        val primes = mutable.ArrayBuffer(2l)\n        val isPrime =\
    \ mutable.ArrayBuffer(true)\n        val isNotPrime = mutable.ArrayBuffer(false)\n\
    \        for (i <- 2l until n by 2l) {\n            if (n % i == 0) {\n      \
    \          primes += i\n                isPrime += false\n            } else {\n\
    \                isNotPrime += true\n            }\n        }\n        isPrime\
    \ == primes", "        val sqrt = (1l*Math.sqrt(n).toInt).toLong\n        val\
    \ primes = mutable.ArrayBuffer.empty[Long]\n        val primesCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquare = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeSquareCount = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeSquareRoot = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSquareRootCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainder = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRootRemainderCount = mutable.ArrayBuffer.", "      \
    \  val primes = mutable.ListBuffer[Long]()\n        val divisors = mutable.ListBuffer[Long]()\n\
    \        divisors += 2l\n        divisors += 3l\n        divisors += 5l\n    \
    \    divisors += 7l\n        divisors += 11l\n        divisors += 13l\n      \
    \  divisors += 17l\n        divisors += 19l\n        divisors += 23l\n       \
    \ divisors += 29l\n        divisors += 31l\n        divisors += 37l\n        divisors\
    \ += 41l\n        divisors += 43l\n        divisors += 47l\n        divisors +=\
    \ 53l\n        divisors += 59l\n        divisors += 61l\n        divisors += 67l\n\
    \        divisors += 71l\n        divisors += 73l\n        divisors += 79l\n \
    \       divisors += 83l\n        divisors += 89l\n        divisors += 97l\n  \
    \      divisors += 101l\n        divisors += 103l\n        divisors += 107l\n\
    \        divisors += 109l\n        divisors += 113l\n        divisors += 127l\n\
    \        divisors += 131l\n        divisors += 137l\n        divisors += 139l\n\
    \        divisors += 147l\n        divisors += 151l\n        divisors += 157l\n\
    \        divisors += 163l\n        divisors += 167l\n        divisors += 173l\n\
    \        divisors += 179l\n        divisors += 181l\n        divisors += 191l\n\
    \        divisors += 197l\n        divisors += 199l\n        divisors += 211l\n\
    \        divisors += 223l\n        divisors += 229l\n        divisors += 233l\n\
    \        divisors += 239l\n        divisors += 241l\n        divisors += 247l\n\
    \        divisors += 251l\n        divisors += 257l\n        divisors += 263l\n\
    \        divisors += 269l\n        divisors += 271l\n        divisors += 277l\n\
    \        divisors += 281l\n        divisors += 283l\n        divisors += 293l\n\
    \        divisors += 307l\n        divisors += 311l\n        divisors += 313l\n\
    \        divisors += 317l\n        divisors += 323l\n        divisors += 329l\n\
    \        divisors += 331l\n        divisors += 337l\n        divisors += 347l\n\
    \        divisors += 351l\n        divisors += 359l\n        divisors += 367l\n\
    \        divisors += 373l\n        divisors += 379l\n        divisors += 383l\n\
    \        divisors += 389l\n        divisors += 397l", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= Math.sqrt(n)) {\n            if (n % i\
    \ == 0) {\n                primes += i\n            }\n            i += 1\n  \
    \      }\n        primes.contains(n)", "        val isPrime = (2l) until n forall\
    \ { x =>\n            val y = math.floor(x * Math.sqrt(x).toLong)\n          \
    \  x % y == 0\n        }\n        n <= 2l", "        val primes = mutable.Set[Long]()\n\
    \        val i = 2l\n        while (i <= n / i) {\n            if (n % i == 0l)\
    \ {\n                primes += i\n            }\n            i += 1\n        }\n\
    \        primes.size == n", "        val primes = mutable.Set[Long]()\n      \
    \  val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeSet = mutable.Set[Boolean]()\n        val isPrimeSet2 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet3 = mutable.Set[Boolean]()\n        val isPrimeSet4 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet5 = mutable.Set[Boolean]()\n        val isPrimeSet6 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet7 = mutable.Set[Boolean]()\n        val isPrimeSet8 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet9 = mutable.Set[Boolean]()\n        val isPrimeSet10 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet11 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet12 = mutable.Set[Boolean]()\n        val isPrimeSet13 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet14 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet15 = mutable.Set[Boolean]()\n        val isPrimeSet16 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet17 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet18 = mutable.Set[Boolean]()\n        val isPrimeSet19 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet20 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet21 = mutable.Set[Boolean]()\n        val isPrimeSet22 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet23 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet24 = mutable.Set[Boolean]()\n        val isPrimeSet25 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet26 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet27 = mutable.Set[Boolean]()\n        val isPrimeSet28 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet29 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet30 = mutable.Set[Boolean]()\n        val isPri", "    \
    \    val isPrime = (2l) until (n) contains n\n        n match {\n            case\
    \ 0 => true\n            case _ => isPrime\n        }", "        val isPrime =\
    \ (2l) until (n) contains n\n        val isNotPrime = (2l) until (n) contains\
    \ !n\n        val isPrimeAndNotPrime = n match {\n            case n if isPrime\
    \ && isNotPrime => true\n            case n if isNotPrime && isPrime => false\n\
    \            case _ => false\n        }\n        isPrimeAndNotPrime", "      \
    \  val isPrime = n <= 1l\n        if (isPrime) {\n            val sqrt = (1l to\
    \ n).map(n => math.pow(n, 0.5l))\n            val primes = mutable.Set[Long]()\n\
    \            val isPrime = sqrt.toList.forall(n => primes.contains(n))\n     \
    \       primes += n\n            isPrime\n        } else {\n            false\n\
    \        }", "        val isPrime = (2l) until (n) contains n\n        n match\
    \ {\n            case 0 => false\n            case 1 => true\n            case\
    \ _ => isPrime\n        }", "        val i = 2l\n        while (i <= n / i) {\n\
    \            if (n % i == 0l) false\n            else i = i + 1l\n        }\n\
    \        true"]
stop_tokens:
- "\n    }\n"
