name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  \    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
  \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n\
  \    def minSubArraySum(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val numsArray = nums.toArray\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArraySum = numsArray.sum\n        val numsArraySumLength\
    \ = numsArraySum.length\n        val numsArraySumMinusOne = numsArraySum - numsArraySumLength\n\
    \        val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n      \
    \  val numsArraySumMinusOneArray = numsArraySumMinusOne.toArray\n        val numsArraySumMinusOneArrayLength\
    \ = numsArraySumMinusOneArray.length\n        val numsArraySumMinusOneArraySum\
    \ = numsArraySumMinusOneArray.sum\n        val numsArraySumMinusOneArraySumLength\
    \ = numsArraySumMinusOneArraySum.length\n        val numsArraySumMinusOneArraySumMinusOne\
    \ = numsArraySumMinusOneArraySum - numsArraySumMinusOneArraySumLength\n      \
    \  val numsArraySumMinusOneArraySumMinusOneLength = numsArraySumMinusOneArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArray = numsArraySumMinusOneArraySumMinusOne.toArray\n\
    \        val numsArraySumMinusOneArraySumMinusOneArrayLength = numsArraySumMinusOneArraySumMinusOneArray.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySum = numsArraySumMinusOneArraySumMinusOneArray.sum\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumLength = numsArraySumMinusOneArraySumMinusOneArraySum.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOne = numsArraySumMinusOneArraySumMinusOneArraySum\
    \ - numsArraySumMinusOneArraySumMinusOneArraySumLength\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneLength\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.length\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArray\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.toArray\n        val\
    \ numsArraySumMinusOneArraySumMinusOneArray", "        val numsSet = nums.toSet\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext", "        val\
    \ numsSet = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (numsSet.contains(newSum))\
    \ {\n                newSum\n            } else {\n                sum\n     \
    \       }\n        }\n        minSum", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (num\
    \ > sum) num\n            else sum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n\
    \        val sums = numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < 0l) {\n                newSum\n      \
    \      } else {\n                newSum\n            }\n        }\n        sums",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        var minSum = numsCopy(0)\n\
    \        var minSumIndex = 0\n        var minSumIndex2 = 0\n        var minSumIndex3\
    \ = 0\n        var minSumIndex4 = 0\n        var minSumIndex5 = 0\n        var\
    \ minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var minSumIndex8 = 0\n\
    \        var minSumIndex9 = 0\n        var minSumIndex10 = 0\n        var minSumIndex11\
    \ = 0\n        var minSumIndex12 = 0\n        var minSumIndex13 = 0\n        var\
    \ minSumIndex14 = 0\n        var minSumIndex15 = 0\n        var minSumIndex16\
    \ = 0\n        var minSumIndex17 = 0\n        var minSumIndex18 = 0\n        var\
    \ minSumIndex19 = 0\n        var minSumIndex20 = 0\n        var minSumIndex21\
    \ = 0\n        var minSumIndex22 = 0\n        var minSumIndex23 = 0\n        var\
    \ minSumIndex24 = 0\n        var minSumIndex25 = 0\n        var minSumIndex26\
    \ = 0\n        var minSumIndex27 = 0\n        var minSumIndex28 = 0\n        var\
    \ minSumIndex29 = 0\n        var minSumIndex30 = 0\n        var minSumIndex31\
    \ = 0\n        var minSumIndex32 = 0\n        var minSumIndex33 = 0\n        var\
    \ minSumIndex34 = 0\n        var minSumIndex35 = 0\n        var minSumIndex36\
    \ = 0\n        var minSumIndex37 = 0\n        var minSumIndex38 = 0\n        var\
    \ minSumIndex39 = 0\n        var minSumIndex40 = 0\n        var minSumIndex41\
    \ = 0\n        var minSumIndex42 = 0\n        var minSumIndex43 = 0\n        var\
    \ minSumIndex44 = 0\n        var minSumIndex45 = 0\n        var minSumIndex46\
    \ = 0\n        var minSumIndex47 = 0\n        var minSumIndex48 = 0\n        var\
    \ minSumIndex49 = 0\n        var minSumIndex50 = 0\n        var minSumIndex51\
    \ = 0\n        var minSumIndex52 = 0\n        var minSumIndex53 = 0\n        var\
    \ minSumIndex54 = 0\n        var minSumIndex55 = 0\n        var minSumIndex56\
    \ = 0\n        var minSumIndex57 = 0\n        var minSumIndex58 = 0\n        var\
    \ minSumIndex59 = 0\n        var minSumIndex60 = 0\n        var minSumIndex61\
    \ = 0\n        var minSumIndex62 = 0\n        var minSumIndex63 = 0\n        var\
    \ minSumIndex64 = 0\n        var minSumIndex65 = 0\n        var minSumIndex66\
    \ = 0\n        var minSumIndex67 = 0\n        var minSumIndex68 = 0\n        var\
    \ minSumIndex69 = 0\n        var minSumIndex70 = 0\n        var minSum", "   \
    \     val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n     \
    \   val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSet = nums.toSet\n   \
    \     val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n        val\
    \ numsSortedLength = numsSorted.length\n        val numsSortedSum = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumLength = numsSortedSum.length\n\
    \        val numsSortedSumMinusOne = numsSortedSum.dropRight(1)\n        val numsSortedSumMinusOneLength\
    \ = numsSortedSumMinusOne.length\n        val numsSortedSumMinusOneSum = numsSortedSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumLength = numsSortedSumMinusOneSum.length\n\
    \        val numsSortedSumMinusOneSumMinusOne = numsSortedSumMinusOneSum.dropRight(1)\n\
    \        val numsSortedSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumMinusOneSumLength\
    \ = numsSortedSumMinusOneSumMinusOneSum.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ = numsSortedSumMinusOneSumMinusOneSum.dropRight(1)\n        val numsSortedSumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsSortedSumMinusOneSumMinusOneSumMinusOne.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsSortedSumMinusOneSumMinusOneSumMinusOne.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum > 0l) {\n        \
    \        newSum\n            } else {\n                0l\n            }\n   \
    \     }\n", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ minSum = Long.MaxValue\n        var minSumIndex = -1\n        var sum = 0\n\
    \        var index = 0\n        while (index < numsCopy.size) {\n            val\
    \ currentSum = numsCopy(index) + sum\n            if (currentSum < minSum) {\n\
    \                minSum = currentSum\n                minSumIndex = index\n  \
    \          }\n            sums += currentSum\n            index += 1\n       \
    \ }\n        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n      \
    \  val minSum = numsSorted.head\n        val minSumIndex = 0\n        val minSumSubArray\
    \ = numsSorted.take(minSumIndex + 1)\n        val minSumSubArraySum = minSumSubArray.reduce((a,\
    \ b) => a + b)\n        val minSumSubArraySumIndex = 0\n        val minSumSubArraySumSubArray\
    \ = minSumSubArray.take(minSumSubArraySumIndex + 1)\n        minSumSubArraySumSubArray.reduce((a,\
    \ b) => a + b)", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsLen = nums.size\n        val numsLenSet = numsLen.toSet\n\
    \        val numsLenSetSet = numsLenSet.toSet\n        val numsLenSetSetSet =\
    \ numsLenSetSet.toSet\n        val numsLenSetSetSetSet = numsLenSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSet = numsLenSetSetSetSet.toSet\n        val numsLenSetSetSetSetSetSet\
    \ = numsLenSetSetSetSetSet.toSet\n        val numsLenSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet"]
stop_tokens:
- "\n    }\n"
