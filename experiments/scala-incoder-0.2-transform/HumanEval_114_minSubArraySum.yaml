name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  \    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
  \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n\
  \    def minSubArraySum(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val numsArray = nums.toArray\n        val numsArrayLength =\
    \ numsArray.length\n        val numsArraySum = numsArray.sum\n        val numsArraySumLength\
    \ = numsArraySum.length\n        val numsArraySumMinusOne = numsArraySum - numsArraySumLength\n\
    \        val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n      \
    \  val numsArraySumMinusOneArray = numsArraySumMinusOne.toArray\n        val numsArraySumMinusOneArrayLength\
    \ = numsArraySumMinusOneArray.length\n        val numsArraySumMinusOneArraySum\
    \ = numsArraySumMinusOneArray.sum\n        val numsArraySumMinusOneArraySumLength\
    \ = numsArraySumMinusOneArraySum.length\n        val numsArraySumMinusOneArraySumMinusOne\
    \ = numsArraySumMinusOneArraySum - numsArraySumMinusOneArraySumLength\n      \
    \  val numsArraySumMinusOneArraySumMinusOneLength = numsArraySumMinusOneArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArray = numsArraySumMinusOneArraySumMinusOne.toArray\n\
    \        val numsArraySumMinusOneArraySumMinusOneArrayLength = numsArraySumMinusOneArraySumMinusOneArray.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySum = numsArraySumMinusOneArraySumMinusOneArray.sum\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumLength = numsArraySumMinusOneArraySumMinusOneArraySum.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOne = numsArraySumMinusOneArraySumMinusOneArraySum\
    \ - numsArraySumMinusOneArraySumMinusOneArraySumLength\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneLength\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.length\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArray\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.toArray\n        val\
    \ numsArraySumMinusOneArraySumMinusOneArray", "        val numsSet = nums.toSet\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext", "        val\
    \ numsSet = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (numsSet.contains(newSum))\
    \ {\n                newSum\n            } else {\n                sum\n     \
    \       }\n        }\n        minSum", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (num\
    \ > sum) num\n            else sum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n\
    \        val sums = numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < 0l) {\n                newSum\n      \
    \      } else {\n                newSum\n            }\n        }\n        sums",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        var minSum = numsCopy(0)\n\
    \        var minSumIndex = 0\n        var minSumIndex2 = 0\n        var minSumIndex3\
    \ = 0\n        var minSumIndex4 = 0\n        var minSumIndex5 = 0\n        var\
    \ minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var minSumIndex8 = 0\n\
    \        var minSumIndex9 = 0\n        var minSumIndex10 = 0\n        var minSumIndex11\
    \ = 0\n        var minSumIndex12 = 0\n        var minSumIndex13 = 0\n        var\
    \ minSumIndex14 = 0\n        var minSumIndex15 = 0\n        var minSumIndex16\
    \ = 0\n        var minSumIndex17 = 0\n        var minSumIndex18 = 0\n        var\
    \ minSumIndex19 = 0\n        var minSumIndex20 = 0\n        var minSumIndex21\
    \ = 0\n        var minSumIndex22 = 0\n        var minSumIndex23 = 0\n        var\
    \ minSumIndex24 = 0\n        var minSumIndex25 = 0\n        var minSumIndex26\
    \ = 0\n        var minSumIndex27 = 0\n        var minSumIndex28 = 0\n        var\
    \ minSumIndex29 = 0\n        var minSumIndex30 = 0\n        var minSumIndex31\
    \ = 0\n        var minSumIndex32 = 0\n        var minSumIndex33 = 0\n        var\
    \ minSumIndex34 = 0\n        var minSumIndex35 = 0\n        var minSumIndex36\
    \ = 0\n        var minSumIndex37 = 0\n        var minSumIndex38 = 0\n        var\
    \ minSumIndex39 = 0\n        var minSumIndex40 = 0\n        var minSumIndex41\
    \ = 0\n        var minSumIndex42 = 0\n        var minSumIndex43 = 0\n        var\
    \ minSumIndex44 = 0\n        var minSumIndex45 = 0\n        var minSumIndex46\
    \ = 0\n        var minSumIndex47 = 0\n        var minSumIndex48 = 0\n        var\
    \ minSumIndex49 = 0\n        var minSumIndex50 = 0\n        var minSumIndex51\
    \ = 0\n        var minSumIndex52 = 0\n        var minSumIndex53 = 0\n        var\
    \ minSumIndex54 = 0\n        var minSumIndex55 = 0\n        var minSumIndex56\
    \ = 0\n        var minSumIndex57 = 0\n        var minSumIndex58 = 0\n        var\
    \ minSumIndex59 = 0\n        var minSumIndex60 = 0\n        var minSumIndex61\
    \ = 0\n        var minSumIndex62 = 0\n        var minSumIndex63 = 0\n        var\
    \ minSumIndex64 = 0\n        var minSumIndex65 = 0\n        var minSumIndex66\
    \ = 0\n        var minSumIndex67 = 0\n        var minSumIndex68 = 0\n        var\
    \ minSumIndex69 = 0\n        var minSumIndex70 = 0\n        var minSum", "   \
    \     val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n     \
    \   val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSet = nums.toSet\n   \
    \     val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n        val\
    \ numsSortedLength = numsSorted.length\n        val numsSortedSum = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumLength = numsSortedSum.length\n\
    \        val numsSortedSumMinusOne = numsSortedSum.dropRight(1)\n        val numsSortedSumMinusOneLength\
    \ = numsSortedSumMinusOne.length\n        val numsSortedSumMinusOneSum = numsSortedSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumLength = numsSortedSumMinusOneSum.length\n\
    \        val numsSortedSumMinusOneSumMinusOne = numsSortedSumMinusOneSum.dropRight(1)\n\
    \        val numsSortedSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumMinusOneSumLength\
    \ = numsSortedSumMinusOneSumMinusOneSum.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ = numsSortedSumMinusOneSumMinusOneSum.dropRight(1)\n        val numsSortedSumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsSortedSumMinusOneSumMinusOneSumMinusOne.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsSortedSumMinusOneSumMinusOneSumMinusOne.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum > 0l) {\n        \
    \        newSum\n            } else {\n                0l\n            }\n   \
    \     }\n", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ minSum = Long.MaxValue\n        var minSumIndex = -1\n        var sum = 0\n\
    \        var index = 0\n        while (index < numsCopy.size) {\n            val\
    \ currentSum = numsCopy(index) + sum\n            if (currentSum < minSum) {\n\
    \                minSum = currentSum\n                minSumIndex = index\n  \
    \          }\n            sums += currentSum\n            index += 1\n       \
    \ }\n        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n      \
    \  val minSum = numsSorted.head\n        val minSumIndex = 0\n        val minSumSubArray\
    \ = numsSorted.take(minSumIndex + 1)\n        val minSumSubArraySum = minSumSubArray.reduce((a,\
    \ b) => a + b)\n        val minSumSubArraySumIndex = 0\n        val minSumSubArraySumSubArray\
    \ = minSumSubArray.take(minSumSubArraySumIndex + 1)\n        minSumSubArraySumSubArray.reduce((a,\
    \ b) => a + b)", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsLen = nums.size\n        val numsLenSet = numsLen.toSet\n\
    \        val numsLenSetSet = numsLenSet.toSet\n        val numsLenSetSetSet =\
    \ numsLenSetSet.toSet\n        val numsLenSetSetSetSet = numsLenSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSet = numsLenSetSetSetSet.toSet\n        val numsLenSetSetSetSetSetSet\
    \ = numsLenSetSetSetSetSet.toSet\n        val numsLenSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n     \
    \   val subArray = numsCopy.filter(num => sum >= num)\n        minSum + minSubArraySum(subArray)",
  "        val minSum = nums.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ numsSortedSet = numsSorted.toSet\n        val numsSortedSetIterator = numsSortedSet.iterator\n\
    \        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        var minSum = Long.MaxValue\n        var minSumIndex =\
    \ 0\n        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val numsSum = numsSorted.foldLeft(0L) { (sum, num) =>\n      \
    \      val newSum = sum + num\n            if (newSum > 0L) newSum else num\n\
    \        }\n        numsSum", "        val numsSorted = nums.sortWith(_ < _)\n\
    \        val numsSum = numsSorted.foldLeft(0l) { (sum, num) =>\n            val\
    \ newSum = sum + num\n            if (newSum > 0l) {\n                newSum\n\
    \            } else {\n                0l\n            }\n        }\n        numsSum",
  "        val numsSorted = nums.sortWith(_ < _)\n        val minSum = numsSorted.head\n\
    \        val minSumIndex = numsSorted.indexOf(minSum)\n        val minSumSize\
    \ = numsSorted.take(minSumIndex).size\n        val minSumSubArray = numsSorted.take(minSumIndex).drop(minSumIndex\
    \ + 1)\n        minSumSubArray.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) {\n                minSum = newSum\n\
    \                minSumIndex = numsSorted.indexOf(newSum)\n                minSumSize\
    \ = numsSorted.take(minSumIndex).size\n                minSumSubArray = numsSorted.take(minSumIndex).drop(minSumIndex\
    \ + 1)\n            }\n            newSum\n        }", "        val numsSet =\
    \ nums.toSet\n        val numsArray = nums.toArray\n        val numsArraySet =\
    \ numsArray.toSet\n        val numsArrayArray = numsArray.toArray\n        val\
    \ numsArraySetArray = numsArraySet.toArray\n        val numsArrayArraySet = numsArrayArray.toSet\n\
    \        val numsArrayArrayArray = numsArrayArray.toArray\n        val numsArraySetArrayArraySet\
    \ = numsArraySetArray.toSet\n        val numsArrayArrayArraySet = numsArrayArrayArray.toArray\n\
    \        val numsArraySetArrayArrayArraySet = numsArraySetArrayArray.toSet\n \
    \       val numsArrayArrayArraySetArrayArray = numsArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArray = numsArraySetArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArraySet = numsArraySetArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArraySet = numsArraySetArrayArrayArraySetArray.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArraySet = numsArraySetArrayArrayArraySetArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArraySet = numsArraySetArrayArrayArraySetArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArraySet = numsArraySetArrayArrayArraySetArrayArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet =\
    \ numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet.toArray\n  \
    \      val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArray",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val subArray = numsCopy.filter(_ > minSum)\n\
    \        minSubArraySum(subArray)", "        val numsSet = nums.toSet\n      \
    \  val minSum = nums.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (numsSet.contains(newSum))\n                newSum\n \
    \           else\n                sum\n        }\n        minSum", "        val\
    \ numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ {\n                    minSum = newSum\n                }\n            }\n \
    \           sum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val numsSortedLength = numsSorted.length\n        val numsSortedLength\
    \ = numsSortedLength - 1\n        val numsSortedLast = numsSorted.last\n     \
    \   val numsSortedLastIndex = numsSorted.lastIndex\n        val numsSortedLastIndex\
    \ = numsSortedLastIndex - 1\n        val numsSortedLastElement = numsSortedLast\n\
    \        val numsSortedLastElementIndex = numsSortedLastIndex\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLast", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsCopy = nums.toList\n        val sums = numsCopy.map(x => x.toLong).foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val minSum = sums.min\n        val maxSum\
    \ = sums.max\n        val minSumIndex = numsCopy.zipWithIndex.filter(x => x._1\
    \ == minSum).map(x => x._2).max\n        val maxSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == maxSum).map(x => x._2).min\n        val minSumSum = numsCopy.slice(minSumIndex).map(x\
    \ => x.toLong).sum\n        val maxSumSum = numsCopy.slice(maxSumIndex).map(x\
    \ => x.toLong).sum\n        val minSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == minSumSum).map(x => x._2).max\n        val maxSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == maxSumSum).map(x => x._2).min\n        val minSumSumSum = numsCopy.slice(minSumSumIndex).map(x\
    \ => x.toLong).sum\n        val maxSumSumSum = numsCopy.slice(maxSumSumIndex).map(x\
    \ => x.toLong).sum\n        val minSumSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == minSumSumSum).map(x => x._2).max\n        val maxSumSumSumIndex =\
    \ numsCopy.zipWithIndex.filter(x => x._1 == maxSumSumSum).map(x => x._2).min\n\
    \        val minSumSumSumSum = numsCopy.slice(minSumSumSumIndex).map(x => x.toLong).sum\n\
    \        val maxSumSumSumSum = numsCopy.slice(maxSumSumSumIndex).map(x => x.toLong).sum\n\
    \        val minSumSumSumSumIndex = numsCopy.zipWithIndex.filter(x => x._1 ==\
    \ minSumSumSumSum).map(x => x._2).max\n        val maxSumSumSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == maxSumSumSumSum).map(x => x._2).min\n        val minSumSumSumSumSum\
    \ = numsCopy.slice(minSumSumSumSumIndex).map(x => x.toLong).sum\n        val ",
  "        val minSum = nums.foldLeft(0l) { (sum, num) =>\n            if (sum > num)\
    \ sum\n            else sum + num\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < 0) newSum\n\
    \            else newSum\n        }\n        sums", "        val numsCopy = nums.toList\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        for (i <- 0 until numsCopy.size) {\n   \
    \         val curSum = numsCopy(i) + sums(minSumIndex)\n            if (curSum\
    \ < minSum) {\n                minSum = curSum\n                minSumIndex =\
    \ i\n            }\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num) =>\n         \
    \   val newSum = sum + num\n            if (newSum > 0l) {\n                newSum\n\
    \            } else {\n                0l\n            }\n        }\n        sums.min",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsSorted = nums.sortWith(_ < _)\n\
    \        val sum = 0\n        var minSum = Long.MaxValue\n        var minSumIndex\
    \ = 0\n        var minSumIndex2 = -1\n        var minSumIndex3 = -1\n        var\
    \ minSumIndex4 = -1\n        var minSumIndex5 = -1\n        var minSumIndex6 =\
    \ -1\n        var minSumIndex7 = -1\n        var minSumIndex8 = -1\n        var\
    \ minSumIndex9 = -1\n        var minSumIndex10 = -1\n        var minSumIndex11\
    \ = -1\n        var minSumIndex12 = -1\n        var minSumIndex13 = -1\n     \
    \   var minSumIndex14 = -1\n        var minSumIndex15 = -1\n        var minSumIndex16\
    \ = -1\n        var minSumIndex17 = -1\n        var minSumIndex18 = -1\n     \
    \   var minSumIndex19 = -1\n        var minSumIndex20 = -1\n        var minSumIndex21\
    \ = -1\n        var minSumIndex22 = -1\n        var minSumIndex23 = -1\n     \
    \   var minSumIndex24 = -1\n        var minSumIndex25 = -1\n        var minSumIndex26\
    \ = -1\n        var minSumIndex27 = -1\n        var minSumIndex28 = -1\n     \
    \   var minSumIndex29 = -1\n        var minSumIndex30 = -1\n        var minSumIndex31\
    \ = -1\n        var minSumIndex32 = -1\n        var minSumIndex33 = -1\n     \
    \   var minSumIndex34 = -1\n        var minSumIndex35 = -1\n        var minSumIndex36\
    \ = -1\n        var minSumIndex37 = -1\n        var minSumIndex38 = -1\n     \
    \   var minSumIndex39 = -1\n        var minSumIndex40 = -1\n        var minSumIndex41\
    \ = -1\n        var minSumIndex42 = -1\n        var minSumIndex43 = -1\n     \
    \   var minSumIndex44 = -1\n        var minSumIndex45 = -1\n        var minSumIndex46\
    \ = -1\n        var minSumIndex47 = -1\n        var minSumIndex48 = -1\n     \
    \   var minSumIndex49 = -1\n        var minSumIndex50 = -1\n        var minSumIndex51\
    \ = -1\n        var minSumIndex52 = -1\n        var minSumIndex53 = -1\n     \
    \   var minSumIndex54 = -1\n        var minSumIndex55 = -1\n        var minSumIndex56\
    \ = -1\n        var minSumIndex57 = -1\n        var minSumIndex58 = -1\n     \
    \   var minSumIndex59 = -1\n        var minSumIndex60 = -1\n        var minSumIndex61\
    \ = -1\n        var minSumIndex62 = -1\n        var minSumIndex63 = -1\n     \
    \   var minSumIndex64 = -1\n        var minSumIndex65 = -1\n        var minSumIndex66\
    \ = -1\n        var minSumIndex67 = -1\n        var min", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val minSumList = numsCopy.foldLeft(List[Long](0l)) { (sum,\
    \ num) => sum + num }\n        val minSumList2 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList3 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList4 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList5 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList6 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList7 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList8 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList9 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList10 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList11 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList12 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList13 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList14 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList15 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList16 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, ", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextNext = numsSetIteratorNext.next\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNext", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n    \
    \    val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSet = nums.toSet\n   \
    \     val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsSet = nums.toSet\n        val\
    \ numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSet = nums.toSet\n   \
    \     val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum, num) =>\n      \
    \      val newSum = sum + num\n            if (newSum > sum) newSum else sum\n\
    \        }\n        numsSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (num > 0) sum + num\n            else sum\n        }\n       \
    \ minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val numsCopySize = numsCopy.size\n        val numsCopyIterator\
    \ = numsCopy.iterator\n        val numsCopyIteratorSize = numsCopyIterator.size\n\
    \        val numsCopyIteratorIterator = numsCopyIterator.iterator\n        val\
    \ numsCopyIteratorIteratorSize = numsCopyIteratorIterator.size\n        val numsCopyIteratorIteratorIterator\
    \ = numsCopyIteratorIterator.iterator\n        val numsCopyIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIterator.size\n        val numsCopyIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIterator.iterator\n        val numsCopyIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIterator.size\n        val numsCopyIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIterator.iterator\n        val numsCopyIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIterator.size\n        val numsCopyIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize =\
    \ numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n    \
    \    val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val num", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ sums = numsSorted.scanLeft(0L)(_ + _)\n        val minSum = sums.min\n     \
    \   val minSumIndex = sums.indexOf(minSum)\n        sums(minSumIndex)", "    \
    \    val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) {\
    \ (sum, num) =>\n            val newSum = sum + num\n            if (newSum <\
    \ minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ newSum else minSum\n            } else {\n                sum\n            }\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsSorted = nums.sortBy(_.toLong)\n        val sums\
    \ = numsSorted.scanLeft(0L)(_ + _)\n        val min = sums.min\n        val index\
    \ = sums.indexWhere(_ == min)\n        sums(index)", "        val numsCopy = nums.toList\n\
    \        var minSum = numsCopy(0)\n        var minSumIndex = 0\n        var minSumIndex2\
    \ = numsCopy.size - 1\n        var minSumIndex3 = numsCopy.size - 2\n        var\
    \ minSumIndex4 = numsCopy.size - 3\n        var minSumIndex5 = numsCopy.size -\
    \ 4\n        var minSumIndex6 = numsCopy.size - 5\n        var minSumIndex7 =\
    \ numsCopy.size - 6\n        var minSumIndex8 = numsCopy.size - 7\n        var\
    \ minSumIndex9 = numsCopy.size - 8\n        var minSumIndex10 = numsCopy.size\
    \ - 9\n        var minSumIndex11 = numsCopy.size - 10\n        var minSumIndex12\
    \ = numsCopy.size - 11\n        var minSumIndex13 = numsCopy.size - 12\n     \
    \   var minSumIndex14 = numsCopy.size - 13\n        var minSumIndex15 = numsCopy.size\
    \ - 14\n        var minSumIndex16 = numsCopy.size - 15\n        var minSumIndex17\
    \ = numsCopy.size - 16\n        var minSumIndex18 = numsCopy.size - 17\n     \
    \   var minSumIndex19 = numsCopy.size - 18\n        var minSumIndex20 = numsCopy.size\
    \ - 19\n        var minSumIndex21 = numsCopy.size - 20\n        var minSumIndex22\
    \ = numsCopy.size - 21\n        var minSumIndex23 = numsCopy.size - 22\n     \
    \   var minSumIndex24 = numsCopy.size - 23\n        var minSumIndex25 = numsCopy.size\
    \ - 24\n        var minSumIndex26 = numsCopy.size - 25\n        var minSumIndex27\
    \ = numsCopy.size - 26\n        var minSumIndex28 = numsCopy.size - 27\n     \
    \   var minSumIndex29 = numsCopy.size - 28\n        var minSumIndex30 = numsCopy.size\
    \ - 29\n        var minSumIndex31 = numsCopy.size - 30\n        var minSumIndex32\
    \ = numsCopy.size - 31\n        var minSumIndex33 = numsCopy.size - 32\n     \
    \   var minSumIndex34 = numsCopy.size - 33\n        var minSumIndex35 = numsCopy.size\
    \ - 34\n        var minSumIndex36 = numsCopy.size - 35\n        var minSumIndex37\
    \ = numsCopy.size - 36\n        var minSumIndex38 = numsCopy.size - 37\n     \
    \   var minSumIndex39 = numsCopy.size - 38\n        var minSum", "        val\
    \ numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        sums.min", "        val numsCopy = nums.toList\n        var minSum =\
    \ numsCopy(0)\n        var minSumIndex = 0\n        var minSumIndex2 = 0\n   \
    \     var minSumIndex3 = 0\n        var minSumIndex4 = 0\n        var minSumIndex5\
    \ = 0\n        var minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var\
    \ minSumIndex8 = 0\n        var minSumIndex9 = 0\n        var minSumIndex10 =\
    \ 0\n        var minSumIndex11 = 0\n        var minSumIndex12 = 0\n        var\
    \ minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var minSumIndex15\
    \ = 0\n        var minSumIndex16 = 0\n        var minSumIndex17 = 0\n        var\
    \ minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var minSumIndex20\
    \ = 0\n        var minSumIndex21 = 0\n        var minSumIndex22 = 0\n        var\
    \ minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var minSumIndex25\
    \ = 0\n        var minSumIndex26 = 0\n        var minSumIndex27 = 0\n        var\
    \ minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var minSumIndex30\
    \ = 0\n        var minSumIndex31 = 0\n        var minSumIndex32 = 0\n        var\
    \ minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var minSumIndex35\
    \ = 0\n        var minSumIndex36 = 0\n        var minSumIndex37 = 0\n        var\
    \ minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var minSumIndex40\
    \ = 0\n        var minSumIndex41 = 0\n        var minSumIndex42 = 0\n        var\
    \ minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var minSumIndex45\
    \ = 0\n        var minSumIndex46 = 0\n        var minSumIndex47 = 0\n        var\
    \ minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var minSumIndex50\
    \ = 0\n        var minSumIndex51 = 0\n        var minSumIndex52 = 0\n        var\
    \ minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var minSumIndex55\
    \ = 0\n        var minSumIndex56 = 0\n        var minSumIndex57 = 0\n        var\
    \ minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var minSumIndex60\
    \ = 0\n        var minSumIndex61 = 0\n        var minSumIndex62 = 0\n        var\
    \ minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var minSumIndex65\
    \ = 0\n        var minSumIndex66 = 0\n        var minSumIndex67 = 0\n        var\
    \ minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var minSumIndex70\
    \ = 0\n        var minSum", "        val numsCopy = nums.toList\n        var minSum\
    \ = numsCopy.head\n        var minSumIndex = 0\n        var minSumIndex2 = 0\n\
    \        var minSumIndex3 = 0\n        var minSumIndex4 = 0\n        var minSumIndex5\
    \ = 0\n        var minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var\
    \ minSumIndex8 = 0\n        var minSumIndex9 = 0\n        var minSumIndex10 =\
    \ 0\n        var minSumIndex11 = 0\n        var minSumIndex12 = 0\n        var\
    \ minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var minSumIndex15\
    \ = 0\n        var minSumIndex16 = 0\n        var minSumIndex17 = 0\n        var\
    \ minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var minSumIndex20\
    \ = 0\n        var minSumIndex21 = 0\n        var minSumIndex22 = 0\n        var\
    \ minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var minSumIndex25\
    \ = 0\n        var minSumIndex26 = 0\n        var minSumIndex27 = 0\n        var\
    \ minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var minSumIndex30\
    \ = 0\n        var minSumIndex31 = 0\n        var minSumIndex32 = 0\n        var\
    \ minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var minSumIndex35\
    \ = 0\n        var minSumIndex36 = 0\n        var minSumIndex37 = 0\n        var\
    \ minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var minSumIndex40\
    \ = 0\n        var minSumIndex41 = 0\n        var minSumIndex42 = 0\n        var\
    \ minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var minSumIndex45\
    \ = 0\n        var minSumIndex46 = 0\n        var minSumIndex47 = 0\n        var\
    \ minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var minSumIndex50\
    \ = 0\n        var minSumIndex51 = 0\n        var minSumIndex52 = 0\n        var\
    \ minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var minSumIndex55\
    \ = 0\n        var minSumIndex56 = 0\n        var minSumIndex57 = 0\n        var\
    \ minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var minSumIndex60\
    \ = 0\n        var minSumIndex61 = 0\n        var minSumIndex62 = 0\n        var\
    \ minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var minSumIndex65\
    \ = 0\n        var minSumIndex66 = 0\n        var minSumIndex67 = 0\n        var\
    \ minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var minSumIndex70\
    \ = 0\n        var min", "        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex)", "        val minSum = nums.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = ", "  \
    \      val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_\
    \ + _)\n        val minSum = sums.min\n        val minSumIndex = sums.indexWhere(_\
    \ == minSum)\n        val minSumSubArray = numsSorted.take(minSumIndex + 1)\n\
    \        minSumSubArray.sum", "        val numsSet = nums.toSet\n        val numsLen\
    \ = nums.size\n        val numsLenSet = numsLen.toSet\n        val numsLenSetLen\
    \ = numsLenSet.size\n        val numsLenSetLenSet = numsLenSetLen.toSet\n    \
    \    val numsLenSetLenSetLen = numsLenSetLenSet.size\n        val numsLenSetLenSetLenSet\
    \ = numsLenSetLenSetLen.toSet\n        val numsLenSetLenSetLenSetLen = numsLenSetLenSetLenSet.size\n\
    \        val numsLenSetLenSetLenSetLenSet = numsLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSet = numsLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSet = numsLenSetLenSetLenSetLenSetLenSet.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen", "        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val sum = 0\n        var minSum =\
    \ Long.MaxValue\n        var minSumIndex = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            val currentSum = numsSorted(i) + sum\n            if (currentSum\
    \ < minSum) {\n                minSum = currentSum\n                minSumIndex\
    \ = i\n            }\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ newSum else minSum\n            } else {\n                sum\n            }\n\
    \        }\n        minSum", "        val minSum = nums.reduce((a, b) => math.min(math.min(a,\
    \ b), math.max(a, b)))\n        minSum", "        val minSum = nums.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val maxSum = nums.foldRight(0l) { (sum,\
    \ num) => sum + num }\n        minSum - maxSum", "        val minSum = nums.reduceLeft(_\
    \ + _)\n        val maxSum = nums.reduceRight(_ + _)\n        if (minSum < 0 ||\
    \ maxSum < 0) {\n            throw new IllegalArgumentException(\"Invalid input\"\
    )\n        }\n        minSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num) =>\n         \
    \   val newSum = sum + num\n            if (newSum > sum) newSum else sum\n  \
    \      }\n        sums.min", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val minSums\
    \ = numsCopy.foldLeft(List[Long]()) { (sums, num) => sums.map(_ + num).min }\n\
    \        minSums.min match {\n            case Some(minSum) => minSum\n      \
    \      case None => 0l\n        }", "        val numsCopy = nums.toList\n    \
    \    var min = Long.MaxValue\n        var minIndex = 0\n        var sum = 0\n\
    \        var index = 0\n        for (i <- 0 until numsCopy.size) {\n         \
    \   sum += numsCopy(i)\n            if (sum < min) {\n                min = sum\n\
    \                minIndex = index\n            }\n            index += 1\n   \
    \     }\n        min", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_\
    \ + _)\n        sums.min", "        val numsArray = nums.toArray\n        val\
    \ numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val numsArraySumLength = numsArraySum.length\n\
    \        val numsArraySumMinusOne = numsArraySum.foldLeft((0l, 0l)) { (sum, num)\
    \ =>\n            if (numsArrayLength - numsArraySumLength < numsArraySumMinusOne._1)\
    \ {\n                (numsArraySumMinusOne._2, numsArraySumMinusOne._1)\n    \
    \        } else {\n                (numsArraySumMinusOne._1 + num, numsArraySumMinusOne._2)\n\
    \            }\n        }\n        numsArraySumMinusOne._1", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) => sum + num }\n        val numsSum2 = numsSorted.foldLeft(0l) { (sum,\
    \ num) => sum + num * num }\n        val numsSum3 = numsSorted.foldLeft(0l) {\
    \ (sum, num) => sum + num * num * num }\n        val numsSum4 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num }\n        val numsSum5 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num * num }\n        val numsSum6 =\
    \ numsSorted.foldLeft(0l) { (sum, num) => sum + num * num * num * num * num *\
    \ num }\n        val numsSum7 = numsSorted.foldLeft(0l) { (sum, num) => sum +\
    \ num * num * num * num * num * num * num }\n        val numsSum8 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num * num * num * num * num }\n    \
    \    val numsSum9 = numsSorted.foldLeft(0l) { (sum, num) => sum + num * num *\
    \ num * num * num * num * num * num * num }\n        val numsSum10 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num * num * num * num * num * num *\
    \ num }\n        val numsSum11 = numsSorted.foldLeft(0l) { (sum, num) => sum +\
    \ num * num * num * num * num * num * num * num * num * num * num }\n        val\
    \ numsSum12 = numsSorted.foldLeft(0l) { (sum, num) => sum + num * num * num *\
    \ num * num * num * num * num * num * num * num * num }\n        val numsSum13\
    \ = numsSorted.foldLeft(0l) { (sum, num) => sum + num * num * num * num * num\
    \ * num * num * num * num * num * num * num * num * num }\n", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val subArray = numsCopy.filter(_ < minSum)\n        minSubArraySum(subArray)",
  "        val numsSet = nums.toSet\n        val minSum = nums.reduceLeft(_ + _)\n\
    \        val subArray = nums.filterNot(numsSet)\n        minSum + minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        var minSum = numsCopy.head\n      \
    \  var minSumIndex = 0\n        var minSumIndex2 = 0\n        var minSumIndex3\
    \ = 0\n        var minSumIndex4 = 0\n        var minSumIndex5 = 0\n        var\
    \ minSumIndex6 = 0\n        var minSumIndex7 = 0\n        var minSumIndex8 = 0\n\
    \        var minSumIndex9 = 0\n        var minSumIndex10 = 0\n        var minSumIndex11\
    \ = 0\n        var minSumIndex12 = 0\n        var minSumIndex13 = 0\n        var\
    \ minSumIndex14 = 0\n        var minSumIndex15 = 0\n        var minSumIndex16\
    \ = 0\n        var minSumIndex17 = 0\n        var minSumIndex18 = 0\n        var\
    \ minSumIndex19 = 0\n        var minSumIndex20 = 0\n        var minSumIndex21\
    \ = 0\n        var minSumIndex22 = 0\n        var minSumIndex23 = 0\n        var\
    \ minSumIndex24 = 0\n        var minSumIndex25 = 0\n        var minSumIndex26\
    \ = 0\n        var minSumIndex27 = 0\n        var minSumIndex28 = 0\n        var\
    \ minSumIndex29 = 0\n        var minSumIndex30 = 0\n        var minSumIndex31\
    \ = 0\n        var minSumIndex32 = 0\n        var minSumIndex33 = 0\n        var\
    \ minSumIndex34 = 0\n        var minSumIndex35 = 0\n        var minSumIndex36\
    \ = 0\n        var minSumIndex37 = 0\n        var minSumIndex38 = 0\n        var\
    \ minSumIndex39 = 0\n        var minSumIndex40 = 0\n        var minSumIndex41\
    \ = 0\n        var minSumIndex42 = 0\n        var minSumIndex43 = 0\n        var\
    \ minSumIndex44 = 0\n        var minSumIndex45 = 0\n        var minSumIndex46\
    \ = 0\n        var minSumIndex47 = 0\n        var minSumIndex48 = 0\n        var\
    \ minSumIndex49 = 0\n        var minSumIndex50 = 0\n        var minSumIndex51\
    \ = 0\n        var minSumIndex52 = 0\n        var minSumIndex53 = 0\n        var\
    \ minSumIndex54 = 0\n        var minSumIndex55 = 0\n        var minSumIndex56\
    \ = 0\n        var minSumIndex57 = 0\n        var minSumIndex58 = 0\n        var\
    \ minSumIndex59 = 0\n        var minSumIndex60 = 0\n        var minSumIndex61\
    \ = 0\n        var minSumIndex62 = 0\n        var minSumIndex63 = 0\n        var\
    \ minSumIndex64 = 0\n        var minSumIndex65 = 0\n        var minSumIndex66\
    \ = 0\n        var minSumIndex67 = 0\n        var minSumIndex68 = 0\n        var\
    \ minSumIndex69 = 0\n        var minSumIndex70 = 0\n        var min", "      \
    \  val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n\
    \        val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSet", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) {\n                minSum = newSum\n            }\n            newSum\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        var\
    \ minSum = numsCopy(0)\n        var minSumIndex = 0\n        var minSumIndex2\
    \ = 0\n        var minSumIndex3 = 0\n        var minSumIndex4 = 0\n        var\
    \ minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var minSumIndex7 = 0\n\
    \        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n        var minSumIndex10\
    \ = 0\n        var minSumIndex11 = 0\n        var minSumIndex12 = 0\n        var\
    \ minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var minSumIndex15\
    \ = 0\n        var minSumIndex16 = 0\n        var minSumIndex17 = 0\n        var\
    \ minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var minSumIndex20\
    \ = 0\n        var minSumIndex21 = 0\n        var minSumIndex22 = 0\n        var\
    \ minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var minSumIndex25\
    \ = 0\n        var minSumIndex26 = 0\n        var minSumIndex27 = 0\n        var\
    \ minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var minSumIndex30\
    \ = 0\n        var minSumIndex31 = 0\n        var minSumIndex32 = 0\n        var\
    \ minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var minSumIndex35\
    \ = 0\n        var minSumIndex36 = 0\n        var minSumIndex37 = 0\n        var\
    \ minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var minSumIndex40\
    \ = 0\n        var minSumIndex41 = 0\n        var minSumIndex42 = 0\n        var\
    \ minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var minSumIndex45\
    \ = 0\n        var minSumIndex46 = 0\n        var minSumIndex47 = 0\n        var\
    \ minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var minSumIndex50\
    \ = 0\n        var minSumIndex51 = 0\n        var minSumIndex52 = 0\n        var\
    \ minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var minSumIndex55\
    \ = 0\n        var minSumIndex56 = 0\n        var minSumIndex57 = 0\n        var\
    \ minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var minSumIndex60\
    \ = 0\n        var minSumIndex61 = 0\n        var minSumIndex62 = 0\n        var\
    \ minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var minSumIndex65\
    \ = 0\n        var minSumIndex66 = 0\n        var minSumIndex67 = 0\n        var\
    \ minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var minSumIndex70\
    \ = 0\n        var minSum", "        val numsCopy = nums.toList\n        val sums\
    \ = mutable.ArrayBuffer.empty[Long]\n        var minSum = Long.MaxValue\n    \
    \    var minSumIndex = 0\n        var i = 0\n        while (i < numsCopy.size)\
    \ {\n            val currentSum = numsCopy(i) + numsCopy(i + 1)\n            if\
    \ (currentSum < minSum) {\n                minSum = currentSum\n             \
    \   minSumIndex = i\n            }\n            i += 2\n        }\n        minSum",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSorted = nums.sortBy(_.toLong)\n\
    \        val numsSortedSet = numsSorted.toSet\n        val numsSortedSetIterator\
    \ = numsSortedSet.iterator\n        val minSum = numsSortedSortedSet.head\n  \
    \      val minSumIterator = numsSortedSortedSet.iterator.next\n        val minSumIterator2\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator3 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator4 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator5 = numsSortedSortedSet.iterator.next\n        val minSumIterator6\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator7 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator8 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator9 = numsSortedSortedSet.iterator.next\n        val minSumIterator10\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator11 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator12 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator13 = numsSortedSortedSet.iterator.next\n        val minSumIterator14\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator15 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator16 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator17 = numsSortedSortedSet.iterator.next\n        val minSumIterator18\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator19 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator20 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator21 = numsSortedSortedSet.iterator.next\n        val minSumIterator22\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator23 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator24 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator25 = numsSortedSortedSet.iterator.next\n        val minSumIterator26\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator27 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator28 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator29 = numsSortedSortedSet.iterator.next\n        val minSumIterator30\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator31 = numsSortedSortedSet.iterator.next\n\
    \        val minSum", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSortedSet\
    \ = nums.sortBy(_.toLong)\n        val numsSortedSetSet = numsSortedSet.toSet\n\
    \        val numsSortedSetSetSize = numsSortedSetSet.size\n        val numsSortedSetSetIterator\
    \ = numsSortedSetSet.iterator\n        val numsSortedSetSetIteratorSize = numsSortedSetSetIterator.size\n\
    \        val numsSortedSetSetIteratorIterator = numsSortedSetSetIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorSize = numsSortedSetSetIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIterator = numsSortedSetSetIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSorted", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num > sum) num else sum\n        }\n      \
    \  minSum", "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsArray = nums.toArray\n\
    \        val numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.sum\n\
    \        val numsArrayMin = numsArray.min\n        val numsArrayMax = numsArray.max\n\
    \        val numsArraySumMin = numsArraySum.min\n        val numsArraySumMax =\
    \ numsArraySum.max\n        val numsArraySumMinMax = numsArraySumMin + numsArraySumMax\n\
    \        val numsArraySumMinMaxArray = numsArraySumMinMax.toArray\n        val\
    \ numsArraySumMinMaxArrayLength = numsArraySumMinMaxArray.length\n        val\
    \ numsArraySumMinMaxArraySum = numsArraySumMinMaxArray.sum\n        val numsArraySumMinMaxArraySumMin\
    \ = numsArraySumMinMaxArraySum.min\n        val numsArraySumMinMaxArraySumMax\
    \ = numsArraySumMinMaxArraySum.max\n        val numsArraySumMinMaxArraySumMinMax\
    \ = numsArraySumMinMaxArraySumMin.min + numsArraySumMinMaxArraySumMin.max\n  \
    \      val numsArraySumMinMaxArraySumMinMaxArray = numsArraySumMinMaxArraySumMinMax.toArray\n\
    \        val numsArraySumMinMaxArraySumMinMaxArrayLength = numsArraySumMinMaxArraySumMinMaxArray.length\n\
    \        val numsArraySumMinMaxArraySumMinMaxArraySum = numsArraySumMinMaxArraySumMinMaxArray.sum\n\
    \        val numsArraySumMinMaxArraySumMinMaxArraySumMin = numsArraySumMinMaxArraySumMinMaxArraySum.min\n\
    \        val numsArraySumMinMaxArraySumMinMaxArraySumMax = numsArraySumMinMaxArraySumMinMaxArraySum.max\n\
    \        val numsArraySumMinMaxArraySumMinMaxArraySumMinMax = numsArraySumMinMaxArraySumMinMaxArraySumMinMax.min\
    \ + numsArraySumMinMaxArraySumMinMaxArraySumMinMax.max\n        val numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray\
    \ = numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray.toArray\n        val numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArrayLength\
    \ = numsArraySumMinMaxArraySumMinMaxArraySumMin", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsCopy.contains(num)) {\n               \
    \ val newSum = sum + num\n                if (newSum < minSum) newSum else minSum\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val sums =\
    \ numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < sum) newSum else sum\n        }\n        sums", "  \
    \      val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_\
    \ + _)\n        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex - 1)", "        val numsSet = nums.toSet\n        val\
    \ numsLen = nums.size\n        val numsSetLen = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorLen = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorLen\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorLen\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorLen\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorLen\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorLen\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val num", "        val numsSet = nums.toSet\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorNext = numsSetIterator.next\n\
    \        val numsSetIteratorNextValue = numsSetIteratorNext.get\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.get\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext",
  "        val numsArray = nums.toArray\n        val numsArrayLength = numsArray.length\n\
    \        val numsArraySum = numsArray.reduceLeft(_ + _)\n        val numsArraySumLength\
    \ = numsArraySum.length\n        val numsArraySumArray = numsArraySum.toArray\n\
    \        val numsArraySumArrayLength = numsArraySumArray.length\n        val numsArraySumArraySum\
    \ = numsArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumLength\
    \ = numsArraySumArraySum.length\n        val numsArraySumArraySumArray = numsArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArrayLength = numsArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySum = numsArraySumArraySumArray.reduceLeft(_\
    \ + _)\n        val numsArraySumArraySumArraySumLength = numsArraySumArraySumArraySum.length\n\
    \        val numsArraySumArraySumArraySumArray = numsArraySumArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySum = numsArraySumArraySumArraySumArray.reduceLeft(_\
    \ + _)\n        val numsArraySumArraySumArraySumArraySumLength = numsArraySumArraySumArraySumArraySum.length\n\
    \        val numsArraySumArraySumArraySumArraySumArray = numsArraySumArraySumArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySum = numsArraySumArraySumArraySumArraySumArray.reduceLeft(_\
    \ + _)\n        val numsArraySumArraySumArraySumArraySumArraySumLength = numsArraySumArraySumArraySumArraySumArraySum.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySumArray = numsArraySumArraySumArraySumArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySumArray", "        val\
    \ numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n\
    \        val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       val numsCopyCopy = numsCopy.toList\n        var minSum = numsCopy(0)\n\
    \        var minSumIndex = 0\n        for (i <- 0 until numsCopy.size) {\n   \
    \         val curSum = numsCopy(i) + numsCopyCopy(i)\n            if (curSum <\
    \ minSum) {\n                minSum = curSum\n                minSumIndex = i\n\
    \            }\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val minSum = numsSorted.head\n        val minSumIndex = 0\n  \
    \      var minSumIndexInner = numsSorted.length\n        var minSumIndexOuter\
    \ = 0\n        var minSumIndexOuterInner = numsSorted.length\n        var minSumIndexOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterInner = numsSorted.length\n        var\
    \ minSumIndexOuterOuterOuter = 0\n        var minSumIndexOuterOuterOuterInner\
    \ = numsSorted.length\n        var minSumIndexOuterOuterOuterOuter = 0\n     \
    \   var minSumIndexOuterOuterOuterInner = numsSorted.length\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var ", "        val numsSet = nums.toSet\n        val numsLen =\
    \ nums.size\n        val numsLenMinusOne = numsLen - 1\n        val numsLenMinusTwo\
    \ = numsLen - 2\n        val numsLenMinusThree = numsLen - 3\n        val numsLenMinusFour\
    \ = numsLen - 4\n        val numsLenMinusFive = numsLen - 5\n        val numsLenMinusSix\
    \ = numsLen - 6\n        val numsLenMinusSeven = numsLen - 7\n        val numsLenMinusEight\
    \ = numsLen - 8\n        val numsLenMinusNine = numsLen - 9\n        val numsLenMinusTen\
    \ = numsLen - 10\n        val numsLenMinusEleven = numsLen - 11\n        val numsLenMinusTwelve\
    \ = numsLen - 12\n        val numsLenMinusThirteen = numsLen - 13\n        val\
    \ numsLenMinusFourteen = numsLen - 14\n        val numsLenMinusFifteen = numsLen\
    \ - 15\n        val numsLenMinusSixteen = numsLen - 16\n        val numsLenMinusSeventeen\
    \ = numsLen - 17\n        val numsLenMinusEighteen = numsLen - 18\n        val\
    \ numsLenMinusNineteen = numsLen - 19\n        val numsLenMinusTwenty = numsLen\
    \ - 20\n        val numsLenMinusThirty = numsLen - 30\n        val numsLenMinusFourty\
    \ = numsLen - 40\n        val numsLenMinusFifty = numsLen - 50\n        val numsLenMinusSixty\
    \ = numsLen - 60\n        val numsLenMinusSeventy = numsLen - 70\n        val\
    \ numsLenMinusEighty = numsLen - 80\n        val numsLenMinusNinety = numsLen\
    \ - 90\n        val numsLenMinusEleventy = numsLen - 100\n        val numsLenMinusTwentyOne\
    \ = numsLen - 101\n        val numsLenMinusTwentyTwo = numsLen - 102\n       \
    \ val nums", "        val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsSet.contains(num)) {\n                sum\
    \ + num\n            } else {\n                sum\n            }\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n    \
    \    val minSum = nums.foldLeft(0l) { (sum, num) =>\n            val newSum =\
    \ sum + num\n            if (numsSet.contains(newSum)) {\n                newSum\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val subArray = numsCopy.filter(num => num\
    \ < minSum)\n        minSubArraySum(subArray)", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ newSum else minSum\n            } else {\n                sum\n            }\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n        val maxSum\
    \ = numsCopy.foldRight(0l) { (sum, num) => sum + num }\n        val minSumInRange\
    \ = minSum - maxSum\n        val minSumInRangeInRange = minSumInRange / 2\n  \
    \      val minSumInRangeInRangeInRange = minSumInRangeInRange / 2\n        val\
    \ minSumInRangeInRangeInRangeInRange = minSumInRangeInRangeInRange / 2\n     \
    \   val minSumInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n     \
    \   val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n\
    \        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange", "      \
    \  val numsSorted = nums.sortBy(_.toLong)\n        val minSum = numsSorted.head\n\
    \        val minSumIndex = numsSorted.indexOf(minSum)\n        val minSumIndex2\
    \ = numsSorted.indexOf(minSum, minSumIndex + 1)\n        val minSumIndex3 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1)\n        val minSumIndex4 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1)\n        val minSumIndex5\
    \ = numsSorted.indexOf(minSum, minSumIndex + 1, minSumIndex2 + 1, minSumIndex3\
    \ + 1, minSumIndex4 + 1)\n        val minSumIndex6 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5\
    \ + 1)\n        val minSumIndex7 = numsSorted.indexOf(minSum, minSumIndex + 1,\
    \ minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5 + 1, minSumIndex6\
    \ + 1)\n        val minSumIndex8 = numsSorted.indexOf(minSum, minSumIndex + 1,\
    \ minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5 + 1, minSumIndex6\
    \ + 1, minSumIndex7 + 1)\n        val minSumIndex9 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5\
    \ + 1, minSumIndex6 + 1, minSumIndex7 + 1, minSumIndex8 + 1)\n        val minSumIndex10\
    \ = numsSorted.indexOf(minSum, minSumIndex + 1, minSumIndex2 + 1, minSumIndex3\
    \ + 1, minSumIndex4 + 1, minSumIndex5 + 1, minSumIndex6 + 1, minSumIndex7 + 1,\
    \ minSumIndex8 + 1, minSumIndex9 + 1)\n        val minSumIndex11 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5\
    \ + 1, minSumIndex6 + 1, minSumIndex7 + 1, minSumIndex8 + 1, minSumIndex9 + 1,\
    \ minSumIndex10 + 1)\n        val minSumIndex12 = numsSorted.indexOf(minSum, minSumIndex\
    \ + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5 + 1,\
    \ minSumIndex6 + 1, minSumIndex7 + 1, minSumIndex8 + 1, minSumIndex9", "     \
    \   val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        }\n        minSum", "        val numsArray = nums.toArray\n\
    \        val minSum = numsArray.foldLeft(0l) { (sum, elem) => sum + elem }\n \
    \       val maxSum = numsArray.foldRight(0l) { (sum, elem) => sum + elem }\n \
    \       val minSumIndex = numsArray.indexOf(minSum)\n        val maxSumIndex =\
    \ numsArray.indexOf(maxSum)\n        if (minSumIndex < 0 || maxSumIndex < 0 ||\
    \ minSumIndex > maxSumIndex) {\n            throw new IllegalArgumentException(\"\
    Invalid input\")\n        }\n        numsArray.slice(minSumIndex, maxSumIndex\
    \ + 1).sum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsCopy.contains(num)) {\n               \
    \ val newSum = sum + num\n                if (newSum < minSum)\n             \
    \       minSum = newSum\n            }\n            else\n                sum\n\
    \        }\n        minSum", "        val numsSet = nums.toSet\n        val numsSetSize\
    \ = numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val\
    \ numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsCopy = nums.toList\n \
    \       var minSum : Long = numsCopy(0)\n        var minIndex = 0\n        var\
    \ minSumIndex = 0\n        var sum = 0\n        var index = 0\n        var sumIndex\
    \ = 0\n        while(index < numsCopy.size) {\n            sum = numsCopy(index)\
    \ + sum\n            sumIndex = index\n            index = index + 1\n       \
    \     if(sum < minSum) {\n                minSum = sum\n                minIndex\
    \ = sumIndex\n            }\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextNext = numsSetIteratorNext.next\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        ", "        val numsSorted = nums.sortWith(_ < _)\n        val sum =\
    \ 0\n        var minSum = Long.MaxValue\n        var minSumIndex = 0\n       \
    \ var i = 0\n        while (i < numsSorted.length) {\n            val currentSum\
    \ = numsSorted(i) + sum\n            if (currentSum < minSum) {\n            \
    \    minSum = currentSum\n                minSumIndex = i\n            }\n   \
    \         i += 1\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        var minSum = numsSorted.head\n        var minSumIndex = 0\n  \
    \      var currentSum = 0\n        var currentSumIndex = 0\n        var currentSumIndex2\
    \ = 0\n        var currentSumIndex3 = 0\n        var currentSumIndex4 = 0\n  \
    \      var currentSumIndex5 = 0\n        var currentSumIndex6 = 0\n        var\
    \ currentSumIndex7 = 0\n        var currentSumIndex8 = 0\n        var currentSumIndex9\
    \ = 0\n        var currentSumIndex10 = 0\n        var currentSumIndex11 = 0\n\
    \        var currentSumIndex12 = 0\n        var currentSumIndex13 = 0\n      \
    \  var currentSumIndex14 = 0\n        var currentSumIndex15 = 0\n        var currentSumIndex16\
    \ = 0\n        var currentSumIndex17 = 0\n        var currentSumIndex18 = 0\n\
    \        var currentSumIndex19 = 0\n        var currentSumIndex20 = 0\n      \
    \  var currentSumIndex21 = 0\n        var currentSumIndex22 = 0\n        var currentSumIndex23\
    \ = 0\n        var currentSumIndex24 = 0\n        var currentSumIndex25 = 0\n\
    \        var currentSumIndex26 = 0\n        var currentSumIndex27 = 0\n      \
    \  var currentSumIndex28 = 0\n        var currentSumIndex29 = 0\n        var currentSumIndex30\
    \ = 0\n        var currentSumIndex31 = 0\n        var currentSumIndex32 = 0\n\
    \        var currentSumIndex33 = 0\n        var currentSumIndex34 = 0\n      \
    \  var currentSumIndex35 = 0\n        var currentSumIndex36 = 0\n        var currentSumIndex37\
    \ = 0\n        var currentSumIndex38 = 0\n        var currentSumIndex39 = 0\n\
    \        var currentSumIndex40 = 0\n        var currentSumIndex41 = 0\n      \
    \  var currentSumIndex42 = 0\n        var currentSumIndex43 = 0\n        var currentSumIndex44\
    \ = 0\n        var currentSumIndex45 = 0\n        var currentSumIndex46 = 0\n\
    \        var currentSumIndex47 = 0\n        var currentSumIndex48 = 0\n      \
    \  var currentSumIndex49 = 0\n        var currentSumIndex50 = 0\n        var currentSumIndex51\
    \ = 0\n        var currentSumIndex52 = 0\n        var currentSumIndex53 = 0\n\
    \        var currentSumIndex54 = 0\n        var currentSumIndex55 = 0\n      \
    \  var currentSumIndex56 = 0\n        var currentSumIndex57 = 0\n        var currentSumIndex58\
    \ = 0\n        var currentSumIndex59 = 0\n        var currentSumIndex60 = 0\n\
    \        var currentSumIndex61 = 0\n        var currentSumIndex62 = 0\n      \
    \  var currentSumIndex63 = 0\n        var currentSumIndex64 = 0\n        var currentSumIndex65\
    \ = 0\n        var currentSumIndex66 = 0\n        var currentSumIndex67 = 0\n\
    \        var currentSumIndex68 = 0\n        var ", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val minSumList = numsCopy.foldLeft(List[Long](0l)\
    \ { (sum, num) => sum + num }) { (sum, num) => sum + num }\n        minSumList.foldLeft(0l)\
    \ { (sum, num) => sum + num }", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            if (numsCopy.contains(num)) {\n               \
    \ val newSum = sum + num\n                if (newSum < minSum) newSum else minSum\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val numsCopy = nums.toList\n        var minSum = numsCopy(0)\n\
    \        var minIndex = -1\n        var minSumIndex = 0\n        var i = 0\n \
    \       while (i < numsCopy.size) {\n            val sum = numsCopy(i) + minSum\n\
    \            if (sum < minSum) {\n                minSum = sum\n             \
    \   minIndex = i\n                minSumIndex = i\n            } else if (sum\
    \ == minSum) {\n                minSumIndex = i\n            }\n            i\
    \ += 1\n        }\n        minSum", "        val numsCopy = nums.toList\n    \
    \    var minSum = numsCopy(0)\n        var minSumIndex = 0\n        for (i <-\
    \ 0 until numsCopy.size) {\n            val curSum = numsCopy(i) + minSum\n  \
    \          if (curSum < minSum) {\n                minSum = curSum\n         \
    \       minSumIndex = i\n            }\n        }\n        minSum", "        val\
    \ numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSet = nums.toSet\n        val numsSetSize =\
    \ numsSet.size\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator", "        val numsSet = nums.toSet\n   \
    \     val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsSorted = nums.sortBy(_.toLong)\n\
    \        val min = numsSorted.head\n        val max = numsSorted.last\n      \
    \  val minSum = numsSorted.foldLeft(0l) { (sum, num) => sum + num }\n        val\
    \ maxSum = numsSorted.foldRight(0l) { (sum, num) => sum + num }\n        val maxSumDiff\
    \ = maxSum - minSum\n        val minDiff = max - min\n        val minSumDiff =\
    \ minSum - min\n        val minDiffDiff = minDiff - max\n        val minSumDiffDiff\
    \ = minSumDiff - max\n        val minSumDiffDiffDiff = minSumDiffDiff - minDiff\n\
    \        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSumDiff\n        val\
    \ minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - min\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - ", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val numsSortedLength = numsSorted.length\n\
    \        val numsSortedSum = numsSorted.foldLeft(0l) { (sum, num) =>\n       \
    \     val newSum = sum + num\n            if (newSum < 0l) {\n               \
    \ newSum\n            } else {\n                newSum\n            }\n      \
    \  }\n        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n", "        val numsSet = nums.toSet\n\
    \        val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsSorted = nums.sortBy(_.toLong)\n        val numsSortedLength\
    \ = numsSorted.length\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val nums", "        val numsCopy = nums.toList\n        val minSum =\
    \ numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSorted = nums.sortWith(_ < _)\n        val numsSortedLength = numsSorted.length\n\
    \        val numsSortedLastIndex = numsSortedLength - 1\n        val numsSortedLastValue\
    \ = numsSorted(numsSortedLastIndex)\n        val numsSortedLastIndexSum = numsSortedLastIndex\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum2 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum3 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum4 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum5 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum6 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum7 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum8 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum9 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum10 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum11 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum12 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum13 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum14 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum15 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum16 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum17 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum18 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum19 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum20 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.foldLeft(0l) { (sum, num) =>\n         \
    \   val newSum = sum + num\n            if (newSum < 0l) newSum\n            else\
    \ newSum\n        }\n        sums.min", "        val numsSet = nums.toSet\n  \
    \      val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum\
    \ + num\n            if (newSum < minSum) newSum else minSum\n        }\n    \
    \    minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n      \
    \  val numsCopy = numsCopy.filter(_ > 0l)\n        val numsCopy2 = numsCopy.filter(_\
    \ < 0l)\n        val numsCopy3 = numsCopy.filter(_ > 0l)\n        val numsCopy4\
    \ = numsCopy.filter(_ < 0l)\n        val numsCopy5 = numsCopy.filter(_ > 0l)\n\
    \        val numsCopy6 = numsCopy.filter(_ < 0l)\n        val numsCopy7 = numsCopy.filter(_\
    \ > 0l)\n        val numsCopy8 = numsCopy.filter(_ < 0l)\n        val numsCopy9\
    \ = numsCopy.filter(_ > 0l)\n        val numsCopy10 = numsCopy.filter(_ < 0l)\n\
    \        val numsCopy11 = numsCopy.filter(_ > 0l)\n        val numsCopy12 = numsCopy.filter(_\
    \ < 0l)\n        val numsCopy13 = numsCopy.filter(_ > 0l)\n        val numsCopy14\
    \ = numsCopy.filter(_ < 0l)\n        val numsCopy15 = numsCopy.filter(_ > 0l)\n\
    \        val numsCopy16 = numsCopy.filter(_ < 0l)\n        val numsCopy17 = numsCopy.filter(_\
    \ > 0l)\n        val numsCopy18 = numsCopy.filter(_ < 0l)\n        val numsCopy19\
    \ = numsCopy.filter(_ > 0l)\n        val numsCopy20 = numsCopy.filter(_ < 0l)\n\
    \        val numsCopy21 = numsCopy.filter(_ > 0l)\n        val numsCopy22 = numsCopy.filter(_\
    \ < 0l)\n        val numsCopy23 = numsCopy.filter(_ > 0l)\n        val numsCopy24\
    \ = numsCopy.filter(_ < 0l)\n        val numsCopy25 = numsCopy.filter(_ > 0l)\n\
    \        val numsCopy26 = numsCopy.filter(_ < 0l)\n        val numsCopy27 = numsCopy.filter(_\
    \ > 0l)\n        val numsCopy28 = numsCopy.filter(_ < 0l)\n        val numsCopy29\
    \ = numsCopy.filter", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSet = nums.toSet\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorNext = numsSetIterator.next\n        val numsSetIteratorNextValue\
    \ = numsSetIteratorNext.asInstanceOf[Long]\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue = numsSetIteratorNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext", "        val\
    \ numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num)\
    \ => sum + num }\n        val minSums = numsCopy.filter(num => num < minSum).map(num\
    \ => num - minSum)\n        minSums.foldLeft(0l) { (sum, num) => sum + num }",
  "        val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (numsSet.contains(newSum))\
    \ {\n                newSum\n            } else {\n                sum\n     \
    \       }\n        }\n        minSum", "        val numsCopy = nums.toList\n \
    \       val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n\
    \                newSum\n            } else {\n                sum\n         \
    \   }\n        }\n        minSum", "        val numsSorted = nums.sortBy(_.toLong)\n\
    \        val numsSortedLength = numsSorted.length\n        val numsSortedSum =\
    \ numsSorted.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum > 0l) {\n                newSum\n            } else {\n\
    \                0l\n            }\n        }\n        val numsSortedSumLength\
    \ = numsSortedSum.length\n        val numsSortedSumMinusOne = numsSortedSum -\
    \ numsSortedSumLength\n        val numsSortedSumMinusOneLength = numsSortedSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSum = numsSortedSumMinusOne.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumMinusOneSumLength = numsSortedSumMinusOneSum.length\n\
    \        val numsSortedSumMinusOneSumMinusOne = numsSortedSumMinusOneSum - numsSortedSumMinusOneLength\n\
    \        val numsSortedSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumMinusOneSumLength\
    \ = numsSortedSumMinusOneSumMinusOneSum.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ = numsSortedSumMinusOneSumMinusOneSum - numsSortedSumMinusOneSumMinusOneLength\n\
    \        val numsSortedSumMinusOneSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ - numsSortedSumMinusOneSumMinusOneSumLength\n        val numsSortedSumMinusOneSumMinus",
  "        val numsSorted = nums.sortWith(_ < _)\n        val minSum = numsSorted.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSortedLength = numsSorted.length\n \
    \       val numsSortedHead = numsSorted.head\n        val numsSortedTail = numsSorted.tail\n\
    \        val numsSortedHeadLength = numsSortedHead - numsSortedTail\n        val\
    \ numsSortedTailLength = numsSortedTail.length - numsSortedHeadLength\n      \
    \  val numsSortedHeadHead = numsSortedHeadHead\n        val numsSortedTailTail\
    \ = numsSortedTailTail\n        val numsSortedHeadTail = numsSortedHeadTail\n\
    \        val numsSortedTailHead = numsSortedTailHead\n        val numsSortedHeadHeadHead\
    \ = numsSortedHeadHeadHead\n        val numsSortedTailTailTail = numsSortedTailTailTail\n\
    \        val numsSortedHeadTailTail = numsSortedHeadTailTail\n        val numsSortedTailHeadTail\
    \ = numsSortedTailHeadTail\n        val numsSortedHeadHeadHead = numsSortedHeadHeadHead\n\
    \        val numsSortedTailTailTailTail = numsSortedTailTailTailTail\n       \
    \ val numsSortedHeadTailTailTail = numsSortedHeadTailTailTail\n        val numsSortedTailHeadTailTail\
    \ = numsSortedTailHeadTailTail\n        val numsSortedHeadHeadHeadHead = numsSortedHeadHeadHeadHead\n\
    \        val numsSortedTailTailTailTailTail = numsSortedTailTailTailTailTail\n\
    \        val numsSortedHeadTailTailTailTail = numsSortedHeadTailTailTailTail\n\
    \        val numsSortedTailHeadTailTailTail = numsSortedTailHeadTailTailTail\n\
    \        val numsSortedHeadHeadHeadHeadHead = numsSortedHeadHeadHeadHeadHead\n\
    \        val numsSortedTailTailTailTailTail = numsSortedTailTailTailTailTail\n\
    \        val numsSortedHeadTailTailTailTailTail = numsSortedHeadTailTailTailTailTail\n\
    \        val numsSortedTailHeadTailTailTailTail = numsSortedTailHeadTailTailTailTail\n\
    \        val numsSortedHeadHeadHeadHeadHeadHead = numsSortedHeadHeadHeadHeadHeadHead\n\
    \        val numsSortedTailTailTailTailTailTail = numsSortedTailTailTailTailTailTail\n\
    \        val numsSortedHeadTailTailTailTailTailTail = numsSortedHeadTailTailTailTailTailTail\n\
    \        val num", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0l)((sum,\
    \ num) => sum + num)\n        val subArray = nums.filter(num => num > 0)\n   \
    \     minSum - subArray.foldLeft(0l)((sum, num) => sum + num)", "        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.sum\n        val numsArraySumLength = numsArraySum.length\n\
    \        val numsArraySumMinusOne = numsArraySum - numsArraySumLength\n      \
    \  val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n        val numsArraySumMinusOneSum\
    \ = numsArraySumMinusOne.sum\n        val numsArraySumMinusOneSumLength = numsArraySumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOne = numsArraySumMinusOneSum - numsArraySumMinusOneSumLength\n\
    \        val numsArraySumMinusOneSumMinusOneLength = numsArraySumMinusOneSumMinusOne.length\n\
    \        val numsArraySumMinusOneSumMinusOneSum = numsArraySumMinusOneSumMinusOne.sum\n\
    \        val numsArraySumMinusOneSumMinusOneSumLength = numsArraySumMinusOneSumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOne = numsArraySumMinusOneSumMinusOneSum\
    \ - numsArraySumMinusOneSumMinusOneSumLength\n        val numsArraySumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.length\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.sum\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSumLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOneSum.length\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOne\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOneSum - numsArraySumMinusOneSumMinusOneSumMinusOneSumLength\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength = numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\n\
    \        val numsArraySumMinusOneSumMin", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum + num }\n    \
    \    val minSums = numsCopy.filter(num => num < minSum).map(num => num - minSum)\n\
    \        minSums.foldLeft(0l) { (sum, num) => sum + num }", "        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.reduceLeft(_ + _)\n        val numsArraySumLength =\
    \ numsArraySum.length\n        val numsArraySumMinusOne = numsArraySum - numsArrayLength\n\
    \        val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n      \
    \  val numsArraySumMinusOneSum = numsArraySumMinusOne.reduceLeft(_ + _)\n    \
    \    val numsArraySumMinusOneSumLength = numsArraySumMinusOneSum.length\n    \
    \    val numsArraySumMinusOneSumMinusOne = numsArraySumMinusOneSum - numsArraySumLength\n\
    \        val numsArraySumMinusOneSumMinusOneLength = numsArraySumMinusOneSumMinusOne.length\n\
    \        val numsArraySumMinusOneSumMinusOneSum = numsArraySumMinusOneSumMinusOne.reduceLeft(_\
    \ + _)\n        val numsArraySumMinusOneSumMinusOneSumLength = numsArraySumMinusOneSumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOne = numsArraySumMinusOneSumMinusOneSum\
    \ - numsArraySumMinusOneSumLength\n        val numsArraySumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.length\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.reduceLeft(_ + _)\n        val\
    \ numsArraySumMinusOneSumMinusOneSumMinusOneSumLength = numsArraySumMinusOneSumMinusOneSumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOne = numsArraySumMinusOneSumMinusOneSumMinusOneSum\
    \ - numsArraySumMinusOneSumMinusOneSumLength\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOneSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n        val subArray = numsCopy.filter(num => num\
    \ > minSum)\n        minSubArraySum(subArray)", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num) =>\n         \
    \   if (num > 0) sum + num\n            else sum\n        }\n        val min =\
    \ sums.min\n        val max = sums.max\n        val sum = sums.sum\n        if\
    \ (sum < min || sum > max) 0l\n        else sum", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 0).toList\n        val numsCopy3\
    \ = numsCopy2.filter(_ > 0).toList\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 0).toList\n        val numsCopy5 = numsCopy4.filter(_ > 0).toList\n      \
    \  val numsCopy6 = numsCopy5.filter(_ > 0).toList\n        val numsCopy7 = numsCopy6.filter(_\
    \ > 0).toList\n        val numsCopy8 = numsCopy7.filter(_ > 0).toList\n      \
    \  val numsCopy9 = numsCopy8.filter(_ > 0).toList\n        val numsCopy10 = numsCopy9.filter(_\
    \ > 0).toList\n        val numsCopy11 = numsCopy10.filter(_ > 0).toList\n    \
    \    val numsCopy12 = numsCopy11.filter(_ > 0).toList\n        val numsCopy13\
    \ = numsCopy12.filter(_ > 0).toList\n        val numsCopy14 = numsCopy13.filter(_\
    \ > 0).toList\n        val numsCopy15 = numsCopy14.filter(_ > 0).toList\n    \
    \    val numsCopy16 = numsCopy15.filter(_ > 0).toList\n        val numsCopy17\
    \ = numsCopy16.filter(_ > 0).toList\n        val numsCopy18 = numsCopy17.filter(_\
    \ > 0).toList\n        val numsCopy19 = numsCopy18.filter(_ > 0).toList\n    \
    \    val numsCopy20 = numsCopy19.filter(_ > 0).toList\n        val numsCopy21\
    \ = numsCopy20.filter(_ > 0).toList\n        val numsCopy22 = numsCopy21.filter(_\
    \ > 0).toList\n        val numsCopy23 = numsCopy22.filter(_ > 0).toList\n    \
    \    val numsCopy24 = numsCopy23.filter(_ > 0).toList\n        val numsCopy25\
    \ = numsCopy24.filter(_ > 0).toList\n        val numsCopy26 = numsCopy25.filter(_\
    \ > 0).toList\n        val numsCopy27 = numsCopy26.filter(_ > 0).toList\n    \
    \    val numsCopy28 = numsCopy27.filter(_ > 0).toList\n        val numsCopy29\
    \ = numsCopy28.filter(_ > 0).toList\n        val numsCopy30 = num", "        val\
    \ numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n        val minSum\
    \ = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n        sums(minSumIndex)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum"]
stop_tokens:
- "\n    }\n"
