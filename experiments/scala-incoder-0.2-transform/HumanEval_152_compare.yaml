name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two arrays of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return an array of the same length denoting how\
  \ far off each guess was. If they have guessed correctly,\n    // the value is 0,\
  \ and if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong,\
  \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
  \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesCorrect\
    \ = guessesScores.filter(_._1 == gameScores.values.toSet.size).map(_._2)\n   \
    \     val guessesIncorrect = guessesScores.filter(_._1 != gameScores.values.toSet.size).map(_._2)\n\
    \        val guessesDiff = guessesIncorrect diff guessesCorrect\n        val guessesDiffWithIndex\
    \ = guessesDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val guessesDiffWithIndexSortedByIndex = guessesDiffWithIndex.sortBy(_._1)\n\
    \        val guessesDiffWithIndexSortedByIndexWithCorrect = guessesDiffWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrect.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n     \
    \   val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWith",
  "        val gameScores = game.zipWithIndex.map(_.swap)\n        val guessesScores\
    \ = guess.zipWithIndex.map(_.swap)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreKeys\
    \ = gameScoreMap.keySet\n        val guessesScoreKeys = guessesScoreMap.keySet\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeys.toSet\n        val gameScoreKeysSetSet = gameScoreKeysSet.intersect(guessesScoreKeysSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSet", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n \
    \       val guessScoreListSize = guessScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = game", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        ", "        val gameScores\
    \ = game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n   \
    \     val guessesScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ - game(index) }\n        gameScores.zip(guessesScores).map{ case (gameScore,\
    \ guessesScore) => gameScore - guessesScore }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - gameScoreCount\n        val guessScoreDiff = guessScoreSum - guessScoreCount\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray = Array.ofDim[Long](gameScoreCount)\n\
    \        val guessScoreDiffAbsArray = Array.ofDim[Long](guessScoreCount)\n   \
    \     var i = 0\n        while (i < gameScoreCount) {\n            gameScoreDiffAbsArray(i)\
    \ = gameScoreDiffAbs\n            guessScoreDiffAbsArray(i) = guessScoreDiffAbs\n\
    \            i += 1\n        }\n        val gameScoreDiffArray = Array.ofDim[Long](gameScoreCount)\n\
    \        val guessScoreDiffArray = Array.ofDim[Long](guessScoreCount)\n      \
    \  var j = 0\n        while (j < guessScoreCount) {\n            gameScoreDiffArray(j)\
    \ = gameScoreDiff\n            guessScoreDiffArray(j) = guessScoreDiff\n     \
    \       j += 1\n        }\n        val gameScoreDiffArrayAbs = gameScoreDiffArray.zip(gameScoreDiffArray).map\
    \ { case (gameScoreDiff, gameScoreDiffAbs) => gameScoreDiff }\n        val guessScoreDiffArrayAbs\
    \ = guessScoreDiffArray.zip(guessScoreDiffArray).map { case (guessScoreDiff, guessScoreDiffAbs)\
    \ => guessScoreDiff }\n        val gameScoreDiffArrayAbsArray = gameScoreDiffArrayAbs.zip(gameScoreDiffArrayAbs).map\
    \ { case (gameScoreDiffAbs, gameScoreDiffAbsArray) => gameScoreDiffAbs }\n   \
    \     val guessScoreDiffArrayAbsArray = guessScoreDiffArrayAbs.zip(guessScoreDiffArrayAbs).map\
    \ { case (guessScoreDiffAbs, guessScoreDiffArrayAbsArray) => guessScoreDiffAbs\
    \ }\n        val gameScoreDiffArrayAbsArraySum = gameScoreDiffArrayAbsArray.sum\n\
    \        val guessScoreDiffArrayAbsArraySum = guessScoreDiffArrayAbsArray.sum\n\
    \        val gameScoreDiffArray", "        val gameScores = game.map(_.toLong)\n\
    \        val guessScores = guess.map(_.toLong)\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiff", "        val guessesCount = guess.size\n       \
    \ val gameCount = game.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gameScore = game.foldLeft(0L) { (sum, score) => sum + score }\n \
    \       val guessScore = guess.foldLeft(0L) { (sum, guess) => sum + guess }\n\
    \        var gameGuess = 0\n        var guessGuess = 0\n        var gameDiff =\
    \ 0\n        var guessDiff = 0\n        var gameDiffCount = 0\n        var guessDiffCount\
    \ = 0\n        var gameDiffCountMax = 0\n        var guessDiffCountMax = 0\n \
    \       var gameDiffCountMin = 0\n        var guessDiffCountMin = 0\n        var\
    \ gameDiffCountMaxMax = 0\n        var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMin\
    \ = 0\n        var guessDiffCountMinMin = 0\n        var gameDiffCountMaxMin =\
    \ 0\n        var guessDiffCountMaxMin = 0\n        var gameDiffCountMinMax = 0\n\
    \        var guessDiffCountMinMax = 0\n        var gameDiffCountMaxMax = 0\n \
    \       var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMinMax = 0\n\
    \        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax =\
    \ 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMax\
    \ = 0\n        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax\
    \ = 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var game", "      \
    \  val gameScores = game.zipWithIndex.map { case (score, index) => score -> index\
    \ }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> index }.toMap\n  \
    \      val guessesWithIndexesWithScores = guessesWithIndexes.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexes\
    \ = guessesWithIndexesWithScores.map { case (score, index) => index -> index }.toMap\n\
    \        val guessesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexes.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWith",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList: List[Long] = gameScoreMap.keySet.toList.sortBy(_._1).reverse.map(x\
    \ => gameScoreMap.get(x))\n        val guessScoreList: List[Long] = guessScoreMap.keySet.toList.sortBy(_._1).reverse.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map(x\
    \ => Math.abs(x(0) - x(1)))\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val gameScoreDiffListMap = gameScoreDiffList.groupBy(x => x).toMap\n\
    \        val gameScoreDiffListMapKeys = gameScoreDiffListMap.keys\n        val\
    \ gameScoreDiffListMapValues = gameScoreDiffListMap.values\n        val gameScoreDiffListMapValuesList\
    \ = gameScoreDiffListMapValues.map(x => x.toList)\n        val gameScoreDiffListMapValuesListSorted\
    \ = gameScoreDiffListMapValuesList.toList.sortBy(_._1).reverse\n        val gameScoreDiffListMapValuesListSortedMap\
    \ = gameScoreDiffListMapValuesListSorted.groupBy(x => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMap.keys\n        val gameScoreDiffListMapValuesListSortedMapValues\
    \ = gameScoreDiffListMapValuesListSortedMap.values\n        val gameScoreDiffListMapValuesListSortedMapValuesList\
    \ = gameScoreDiffListMapValuesListSortedMapValues.map(x => x.toList)\n       \
    \ val gameScoreDiffListMapValuesListSortedMapValuesListSorted = gameScoreDiffListMapValuesListSortedMapValuesList.toList.sortBy(_._1).reverse\n\
    \        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMap = gameScoreDiffListMapValuesListSortedMapValuesListSorted.groupBy(x\
    \ => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys.keys\n    \
    \    val gameScoreDiffListMapValuesList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score - game(index) }\n    \
    \    gameScores.zip(guessesScores).map { case (gameScore, guessesScore) => if\
    \ (gameScore == 0) 0 else abs(gameScore - guessesScore) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ gameScoreArray = gameScores.map { case (score, index) => index -> score }.toArray\n\
    \        val guessScoreArray = guessScores.map { case (score, index) => index\
    \ -> score }.toArray\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessesScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessesWithIndex = guessesScores.zipWithIndex.map{case\
    \ (score, index) => index}.toList\n        val gameWithIndex = gameScores.zipWithIndex.map{case\
    \ (score, index) => index}.toList\n        val gameWithIndexAndScores = gameWithIndex.zip(gameScores).toList\n\
    \        val guessesWithIndexAndScores = guessesWithIndex.zip(guessesScores).toList\n\
    \        val gameWithIndexAndScoreAndIndex = gameWithIndexAndScores.zip(guessesWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => gameScores(index)\
    \ -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n        val guessesWithIndexesSortedSortedByScore\
    \ = guessesWithIndexesSorted.toSeq.sortBy(_._2).reverse\n        val guessesWithIndexesSortedSortedByScoreAndGuess\
    \ = guessesWithIndexesSortedSortedByScore.map { case (index, score) => (index,\
    \ score, guessesWithIndexesSortedSortedByScoreAndGuess(index)) }\n        val\
    \ guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly = guessesWithIndexesSortedSortedByScoreAndGuess.map\
    \ { case (index, score, guess) => (index, score, guess, guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly(index))\
    \ }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuess\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore.map\
    \ { case (index, score, guess, guessSortedByScoreAndGuess) => (index, score, guess,\
    \ guessSortedByScoreAndGuess(index)) }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuessAndGuessedCorrectly\
    \ = guessesWithIndexesSortedSortedByScoreAndGue", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val ", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }.toList\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).map { case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => Math.abs(score - gameScore)\
    \ }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map { case (score,\
    \ index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map\
    \ { case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScore",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}\n\
    \        val guessesScores = guess.zipWithIndex.map{case (score, index) => score}\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val guessesToGameScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGues", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val guesses = guess.zipWithIndex.map { case (guess, index) => guess -\
    \ game(index) }\n        val guesses = guesses.sum\n        val differences =\
    \ guesses.zip(gameScores).map { case (guess, score) => guess - score }\n     \
    \   val differences = differences.sum\n        differences.toList.sortBy(-_)",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesCorrect = guessesScores.filter(_._2\
    \ == gameScores(_._1)).map { case (index, score) => (index, 0) }.toMap\n     \
    \   val guessesIncorrect = guessesScores.filter(_._2 != gameScores(_._1)).map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesDiff = guessesCorrect\
    \ ++ guessesIncorrect\n        guessesDiff.map { case (index, score) => (index,\
    \ Math.abs(score - gameScores(index)))}", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreDiff =\
    \ gameScoreCount - guessScoreCount\n        val guessScoreDiff = guessScoreCount\
    \ - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffSum = guessScoreDiffs.sum\n        val gameScoreDiffDiff\
    \ = gameScoreDiffSum - guessScoreDiffSum\n        val guessScoreDiffDiff = guessScoreDiffSum\
    \ - gameScoreDiffSum\n        val gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n\
    \        val guessScoreDiffDiffSum = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff\
    \ = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs\
    \ = gameScoreDiffDiffDiff.zipWithIndex.map { case (diff, index) => diff }\n  \
    \      val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map {\
    \ case (diff, index) => diff }\n        val gameScoreDiffDiffDiffSum = gameScoreDiffDiffDiffs.sum\n\
    \        val guessScoreDiffDiffSum = guessScoreDiffDiffSum.sum\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiffSum\
    \ = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiffDiffSum.sum\n        val guessScoreDiffDiffSum = guessScoreDiffDiffSum.sum\n\
    \        val gameScoreDiffDiffDiffSum = gameScoreDiffDiffDiffSum.sum\n       \
    \ val guessScore", "        val gameSet = game.distinct\n        val guessSet\
    \ = guess.distinct\n        val gameSetSize = gameSet.size\n        val guessSetSize\
    \ = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n        val guessSetSize\
    \ = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n      \
    \  val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithIndexes = guess.zipWithIndex.map { case (guess, index) =>\
    \ guess -> index }.toMap\n        val guessesWithIndexesWithScores = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score }.toMap\n        val guessesWithIndexesWithScoresWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScores = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWith", "        val guesses = gues\n        val scores = game\n\
    \        val guesses_count = guesses.size\n        val scores_count = scores.size\n\
    \        val guesses_sum = guesses.sum\n        val scores_sum = scores.sum\n\
    \        val guesses_sum_abs = guesses_sum.abs\n        val scores_sum_abs = scores_sum.abs\n\
    \        val guesses_sum_diff = guesses_sum - scores_sum\n        val guesses_sum_diff_abs\
    \ = guesses_sum_diff.abs\n        val guesses_diff_sum = guesses_sum_diff + guesses_sum_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_abs = guesses_diff_sum.abs\n\
    \        val guesses_diff_sum_diff_abs = guesses_diff_sum_abs + guesses_sum_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_abs = guesses_diff_sum_diff_abs\
    \ + guesses_sum_diff_diff_abs - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_abs + guesses_sum_diff_diff_diff_abs - scores_sum_abs\n\
    \        val guesses_diff_sum_diff_diff_diff_abs = guesses_diff_sum_diff_diff_diff_abs\
    \ + guesses_sum_diff_diff_diff_diff_abs - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_abs = guesses_diff_sum_diff_diff_diff_diff_abs\
    \ + guesses_sum_diff_diff_diff_diff_diff_abs - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_diff_diff_diff_ab", "        val\
    \ gameScores = game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n\
    \        val gameScoreDiff = gameScores.zip(guessScores).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) 0\n            else\
    \ Math.abs(gameScore - guessScore)\n        }\n        gameScoreDiff.toList",
  "        val gameScores = game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n\
    \        val gameScoreDiffs = gameScores.zip(guessScores).map {\n            case\
    \ (gameScore, guessScore) => Math.abs(gameScore - guessScore)\n        }\n   \
    \     gameScoreDiffs.toList", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreAndIndex = guess.zip(game).map(x\
    \ => (x._2, x._1, x._0)).toMap\n        val guessesWithScoreAndIndexAndGuess =\
    \ guess.zip(game).map(x => (x._2, x._1, x._0, x._1)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2)).toMap\n        val\
    \ guessesWithScoreAndIndexAndGuessAndGuessAndGuess = guess.zip(game).map(x =>\
    \ (x._2, x._1, x._0, x._1, x._2, x._3)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4)).toMap\n\
    \        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4, x._5)).toMap\n\
    \        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4, x._5,\
    \ x._6)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4, x._5,\
    \ x._6, x._7)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._", "        val guesses = gues\n        val scores\
    \ = game\n        val guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSorted\
    \ = guessesWithScores.sortBy(_._1)\n        val guessesWithScoresSortedWithCorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0)\n        val guessesWithScoresSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrect.sortBy(_._1)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSorted.filter(_._2 == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n       \
    \ val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrect = guessesWithScoresSortedWithCorrectSortedWithCorrectSorted.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSorted", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScore", "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSet.size\n", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScoreSum =\
    \ gameScores.sum\n        val gameScoreDiff = gameScores.map(x => if (x == 0)\
    \ 0 else x).sum\n        val gameScoreDiffAbs = gameScoreDiff.abs\n        val\
    \ guessesDiff = guess.zip(gameScores).map(x => if (x._1 == 0) 0 else x._1 - x._2).sum\n\
    \        val guessesDiffAbs = guessesDiff.abs\n        val gameScoreDiffAbsSum\
    \ = gameScoreDiffAbs.sum\n        val guessesDiffAbsSum = guessesDiffAbs.sum\n\
    \        val gameScoreDiffAbsSumAbs = gameScoreDiffAbsSum.abs\n        val guessesDiffAbsSumAbs\
    \ = guessesDiffAbsSum.abs\n        val gameScoreDiffAbsSumAbsAbs = gameScoreDiffAbsSumAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbs = guessesDiffAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsAbsAbs\
    \ = gameScoreDiffAbsSumAbsAbs.abs\n        val guessesDiffAbsSumAbsAbsAbs = guessesDiffAbsSumAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAb",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffCount = gameScoreDiff / gameScoreCount\n        val guessScoreDiffCount\
    \ = guessScoreDiff / guessScoreCount\n        val gameScoreDiffCounts = gameScoreDiffCount.toList.zipWithIndex.map\
    \ { case (count, index) => count }\n        val guessScoreDiffCounts = guessScoreDiffCount.toList.zipWithIndex.map\
    \ { case (count, index) => count }\n        val gameScoreDiffCountSum = gameScoreDiffCounts.sum\n\
    \        val guessScoreDiffCountSum = guessScoreDiffCounts.sum\n        val gameScoreDiffCountDiff\
    \ = gameScoreDiffCountSum - guessScoreDiffCountSum\n        val guessScoreDiffCountDiff\
    \ = guessScoreDiffCountSum - gameScoreDiffCountSum\n        val gameScoreDiffCountDiffCount\
    \ = gameScoreDiffCountDiff / gameScoreCount\n        val guessScoreDiffCountDiffCount\
    \ = guessScoreDiffCountDiff / guessScoreCount\n        val gameScoreDiffCountDiffCounts\
    \ = gameScoreDiffCountDiffCount.toList.zipWithIndex.map { case (count, index)\
    \ => count }\n        val guessScoreDiffCountDiffCounts = guessScoreDiffCountDiffCount.toList.zipWithIndex.map\
    \ { case (count, index) => count }\n        val gameScoreDiffCountDiffCountSum\
    \ = gameScoreDiffCountDiffCounts.sum\n        val guessScoreDiffCountDiffCountSum\
    \ = guessScoreDiffCountDiffCounts.sum\n        val gameScoreDiffCountDiffCountDiff\
    \ = gameScoreDiffCountDiffCountSum - guessScoreDiffCountDiffCountSum\n       \
    \ val guessScoreDiffCountDiffCountDiff = guessScoreDiffCountDiffCountSum - gameScoreDiffCountDiffCountSum\n\
    \        val gameScoreDiffCountDiffCountDiffCount = gameScoreDiffCountDiffCountDiff\
    \ / gameScoreCount\n        val guessScoreDiffCountDiffCountDiffCount = guessScoreDiffCountDiffCountDiff\
    \ / guessScoreCount\n        val gameScoreDiffCountDiff", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map ",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toList\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).map\
    \ { case (index, scores) => (index, scores.map(_._2).toList) }.toMap\n       \
    \ val guessScoreMap = guessScores.groupBy(_._1).map { case (index, scores) =>\
    \ (index, scores.map(_._2).toList) }.toMap\n        val gameScoreList: List[Long]\
    \ = gameScoreMap.values.flatten.toList\n        val guessScoreList: List[Long]\
    \ = guessScoreMap.values.flatten.toList\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScore == guessScore)\
    \ 0\n            else Math.abs(gameScore - guessScore)\n        }\n        gameScoreDiff",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score -\
    \ guess(index) }\n        val gameScore = gameScores.sum\n        val guesses\
    \ = gameScores.zipWithIndex.map { case (score, index) => index }\n        val\
    \ guessesWithScore = guesses.zipWithIndex.map { case (index, guess) => guess -\
    \ gameScore(index) }\n        guessesWithScore.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesCorrect\
    \ = guessesScores.zipWithIndex.map { case (score, index) => if (index == 0) 0\
    \ else abs(score - guessesScores(index-1)) }\n        val guessesDiff = guessesCorrect\
    \ zip gameScores\n        guessesDiff.map { case (guess, score) => if (guess ==\
    \ 0) 0 else abs(guess - score) }", "        val guesses = gues\n        val scores\
    \ = game\n        val guessesCount = guesses.length\n        val scoresCount =\
    \ scores.length\n        val result = new mutable.ListBuffer[Long]()\n       \
    \ var i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val diff = Math.abs(guess - score)\n\
    \            if (diff == 0) {\n                result.add(i)\n            } else\
    \ {\n                result.add(diff)\n            }\n            i += 1\n   \
    \     }\n        result.toList", "        val gameScores = game.map(_.toLong)\n\
    \        val guessesScores = guess.map(_.toLong)\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, score) => (guess - score) }\n        guessesDiff.map(_.abs).filter(_\
    \ > 0).map(_.toLong)", "        val gameScores = game.map(x => Math.abs(x - guess(x)))\n\
    \        val guessesWithScores = guess.zip(gameScores)\n        val guessesWithScore\
    \ = guessesWithScores.toList\n        val guessesWithScoreSorted = guessesWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversed = guessesWithScoreSorted.reverse\n\
    \        val guessesWithScoreSortedReversedSorted = guessesWithScoreSortedReversed.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndex = guessesWithScoreSortedReversedSorted.zipWithIndex\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversed = guessesWithScoreSortedReversedSortedWithIndex.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSorted = guessesWithScoreSortedReversedSortedWithIndexReversed.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndex\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val difference = abs(guess - score)\n            if (difference <\
    \ 0)\n                difference = difference * -1\n            result(i) = difference\n\
    \            i += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff + guessesDiff(index) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(x\
    \ => Math.abs(x)).sum\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreSum\
    \ * 100\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercent.toString\n\
    \        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercent\
    \ = gameScoreDiffPercent / 100\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercent.toString\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiff", "    \
    \    val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffs = gameScoreDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val game", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScoreSum =\
    \ gameScores.sum\n        val gameScoreDiff = gameScores.map { case score => Math.abs(score)\
    \ }\n        val gameScoreDiffSum = gameScoreDiff.sum\n        val gameScoreDiffDiff\
    \ = gameScoreDiff.map { case diff => Math.abs(diff) }\n        gameScoreDiffSum.zip(gameScoreDiffDiff).map\
    \ { case (diff, diffDiff) => diff + diffDiff }", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesWithScores = guesses.zip(scores)\n\
    \        val guessesWithScoresSortedByScore = guessesWithScores.sortBy(_._1)\n\
    \        val guessesWithScoresSortedByScoreWithCorrect = guessesWithScoresSortedByScore.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedByScoreWithIncorrect = guessesWithScoresSortedByScore.filter(_._2\
    \ != 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrect = guessesWithScoresSortedByScoreWithCorrect\
    \ ++ guessesWithScoresSortedByScoreWithIncorrect\n        val guessesWithScoresSortedByScoreWithCorrectAndCorrect\
    \ = guessesWithScoresSortedByScoreWithCorrect ++ guessesWithScoresSortedByScoreWithCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrect =\
    \ guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndCorrectAndIncorrect =\
    \ guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndCorrectAndCorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithCorrectAndCorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrectAndCorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSorted",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        val guessesRemaining = guessesCount -\
    \ 1\n        val scoresRemaining = scoresCount - 1\n        var i = 0\n      \
    \  while (i < guessesRemaining && i < scoresRemaining) {\n            if (scoresRemaining\
    \ == 0) {\n                result(i) = guesses(i)\n                guessesRemaining\
    \ -= 1\n                scoresRemaining -= 1\n                i += 1\n       \
    \     } else if (guessesRemaining == 0) {\n                result(i) = scores(i)\n\
    \                guessesRemaining -= 1\n                scoresRemaining -= 1\n\
    \                i += 1\n            } else if (guesses(i) < scores(i)) {\n  \
    \              result(i) = guesses(i) - scores(i)\n                guessesRemaining\
    \ -= 1\n                scoresRemaining -= 1\n                i += 1\n       \
    \     } else {\n                result(i) = scores(i) - guesses(i)\n         \
    \       guessesRemaining -= 1\n                scoresRemaining -= 1\n        \
    \        i += 1\n            }\n        }\n        result", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesCorrect\
    \ = guessesScores.filter(_._2 == gameScores.size)\n        val guessesWrong =\
    \ guessesScores.filter(_._2 != gameScores.size)\n        val guessesDiff = guessesWrong.map\
    \ { case (score, index) => (gameScores(score) - guessesScores(score)) }\n    \
    \    guessesDiff.map { case diff => if (diff < 0) diff else diff }.toList", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ - guess(index) }\n        val gameScores = gameScores.toList\n        val gameScores\
    \ = gameScores.sortWith(_.compareTo(_) < 0)\n        val gameScores = gameScores.reverse\n\
    \        val gameScores = gameScores.map { score => if (score < 0) score else\
    \ -score }\n        gameScores", "        val guesses = guess.toSet\n        val\
    \ scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until game.size) {\n            val score = scores(i)\n  \
    \          val guess = guesses(i)\n            val diff = Math.abs(guess - score)\n\
    \            if(guess == score) {\n                results.add(i)\n          \
    \  }\n            else {\n                results.add(diff)\n            }\n \
    \       }\n        results.toList", "        val guesses = guess.length\n    \
    \    val scores = game.length\n        val results = new mutable.ArrayList[Long](guesses)\n\
    \        val differences = new mutable.ArrayList[Long](guesses)\n        val difference\
    \ = 0l\n        var i = 0\n        while (i < guesses) {\n            val guess\
    \ = guess(i)\n            val score = game(i)\n            if (guess == score)\
    \ {\n                results.add(score)\n                differences.set(i, 0l)\n\
    \            } else {\n                val difference = abs(guess - score)\n \
    \               differences.set(i, difference)\n            }\n            i +=\
    \ 1\n        }\n        results", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessesScoreSetIterator\
    \ = guessesScoreSet.iterator\n        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n\
    \        val guessesScoreSetIteratorSize = guessesScoreSetIterator.size\n    \
    \    val gameScoreSetIteratorNext = gameScoreSetIterator.next\n        val guessesScoreSetIteratorNext\
    \ = guessesScoreSetIterator.next\n        val gameScoreSetIteratorNextValue =\
    \ gameScoreSetIteratorNext._1\n        val guessesScoreSetIteratorNextValue =\
    \ guessesScoreSetIteratorNext._1\n        val gameScoreSetIteratorNextScore =\
    \ gameScoreSetIteratorNext._2\n        val guessesScoreSetIteratorNextScore =\
    \ guessesScoreSetIteratorNext._2\n        val gameScoreSetIteratorNextScoreValue\
    \ = gameScoreSetIteratorNextScore.toLong\n        val guessesScoreSetIteratorNextScoreValue\
    \ = guessesScoreSetIteratorNextScore.toLong\n        val gameScoreSetIteratorNextScoreValueAbs\
    \ = Math.abs(gameScoreSetIteratorNextScoreValue)\n        val guessesScoreSetIteratorNextScoreValueAbs\
    \ = Math.abs(guessesScoreSetIteratorNextScoreValue)\n        val gameScoreSetIteratorNextScoreValueAbsValue\
    \ = gameScoreSetIteratorNextScoreValueAbs.toLong\n        val guessesScoreSetIteratorNextScoreValueAbsValue\
    \ = guessesScoreSetIteratorNextScoreValueAbs.toLong\n        val gameScoreSetIteratorNextScoreValueAbsValueAbs\
    \ = Math.abs(gameScoreSetIteratorNextScoreValueAbsValue)\n        val guessesScoreSetIteratorNextScoreValueAbsValueAbs\
    \ = Math.abs(guessesScoreSetIteratorNextScoreValueAbsValue)\n        val gameScoreSetIteratorNextScoreValueAbsValueAbsValue\
    \ = gameScoreSetIteratorNextScoreValueAbsValueAbs.toLong\n        val guessesScoreSetIteratorNextScoreValueAbsValueAbsValue\
    \ = guessesScoreSetIteratorNextScoreValueAbsValueAbs.toLong\n        val gameScoreSetIteratorNextScore",
  "        val gameScores = game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n\
    \        val gameScoreMap = gameScores.groupBy(_).mapValues(_.size)\n        val\
    \ guessScoreMap = guessScores.groupBy(_).mapValues(_.size)\n        val gameScoreList\
    \ = gameScoreMap.mapValues(_._2).toList\n        val guessScoreList = guessScoreMap.mapValues(_._2).toList\n\
    \        val gameScores = gameScoreList.zip(guessScoreList).map{case (gameScore,\
    \ guessScore) => Math.abs(gameScore - guessScore)}\n        gameScores.toList.map(_.toLong)",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score -\
    \ guess(index) }\n        val gameScoreSum = gameScores.sum\n        val gameScoreDiff\
    \ = gameScores.map(x => if (x == 0) 0 else x).sum\n        val gameScoreDiffAbs\
    \ = gameScoreDiff.abs\n        val gameScoreDiffAbsSum = gameScoreDiffAbs.sum\n\
    \        val gameScoreDiffAbsSumAbs = gameScoreDiffAbsSum.abs\n        val gameScoreDiffAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbs.sum\n        val gameScoreDiffAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbs",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score -\
    \ game(index) }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score - guess(index) }\n        val differences = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => guess - game }\n        differences.toList", "     \
    \   val guesses = gues\n        val scores = game\n        val guessesCount =\
    \ guesses.length\n        val scoresCount = scores.length\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            var j = 0\n            while (j < scoresCount) {\n          \
    \      if (scores(j) == guesses(i)) {\n                    result.add(i)\n   \
    \                 result.add(j)\n                    j++\n                }\n\
    \                else {\n                    j++\n                }\n        \
    \    }\n            i++\n        }\n        result.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }\n        val guessScore = guessScores.map { case (score, index) =>\
    \ score }\n        val gameScoreDiff = gameScore diff guessScore\n        val\
    \ gameScoreDiff2 = gameScoreDiff.map { case (score, index) => Math.abs(score -\
    \ guessScore(index)) }\n        val gameScoreDiff3 = gameScoreDiff2.map { case\
    \ (score, index) => Math.abs(score - gameScore(index)) }\n        gameScoreDiff3.toList",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => (index, score)}.toMap\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => (index,\
    \ score)}.toMap\n        val gameScore = gameScores.foldLeft(0L){case (acc, (index,\
    \ score)) => acc + (score - gameScores.get(index))}\n        val guessScore =\
    \ guessScores.foldLeft(0L){case (acc, (index, score)) => acc + (score - guessScores.get(index))}\n\
    \        val difference = guessScore - gameScore\n        val differences = guessScores.map{case\
    \ (index, score) => if (score == gameScore) 0 else difference}\n        differences.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score -\
    \ guess(index) }\n        val gameScores = gameScores.toList\n        val guessesCorrect\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score == 0) 0 else\
    \ abs(score - guess(index)) }\n        val guessesCorrect = guessesCorrect.toList\n\
    \        guessesCorrect.zipWithIndex.map { case (guess, index) => if (guess ==\
    \ 0) 0 else abs(guess - game(index)) }", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScores = guessesScores.map(x\
    \ => x._1 -> x._2)\n        val guessesWithoutScores = guessesScores.map(x =>\
    \ x._1 -> 0)\n        val guessesWithoutScores = guessesWithoutScores.map(x =>\
    \ x._1 -> x._2)\n        val guessesWithScoreAndScore = guessesWithScores ++ guessesWithoutScores\n\
    \        val guessesWithScoreAndScoreAndScore = guessesWithScoreAndScore ++ guessesWithScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScore = guessesWithScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScore\n        val guessesWithScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScore ++ guessesWithScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScore = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n      \
    \  val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        val guessesRemaining = guessesCount\
    \ - 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingInScore\
    \ = guessesRemaining / scoresCount\n        val scoresRemainingInScore = scoresRemaining\
    \ / guessesCount\n        val guessesRemainingInScore2 = guessesRemainingInScore\
    \ * scoresCount\n        val scoresRemainingInScore2 = scoresRemainingInScore\
    \ * guessesCount\n        val guessesRemainingInScore3 = guessesRemainingInScore2\
    \ * scoresCount\n        val scoresRemainingInScore3 = scoresRemainingInScore2\
    \ * guessesCount\n        val guessesRemainingInScore4 = guessesRemainingInScore3\
    \ * scoresCount\n        val scoresRemainingInScore4 = scoresRemainingInScore3\
    \ * guessesCount\n        val guessesRemainingInScore5 = guessesRemainingInScore4\
    \ * scoresCount\n        val scoresRemainingInScore5 = scoresRemainingInScore4\
    \ * guessesCount\n        val guessesRemainingInScore6 = guessesRemainingInScore5\
    \ * scoresCount\n        val scoresRemainingInScore6 = scoresRemainingInScore5\
    \ * guessesCount\n        val guessesRemainingInScore7 = guessesRemainingInScore6\
    \ * scoresCount\n        val scoresRemainingInScore7 = scoresRemainingInScore6\
    \ * guessesCount\n        val guessesRemainingInScore8 = guessesRemainingInScore7\
    \ * scoresCount\n        val scoresRemainingInScore8 = scoresRemainingInScore7\
    \ * guessesCount\n        val guessesRemainingInScore9 = guessesRemainingInScore8\
    \ * scoresCount\n        val scoresRemainingInScore9 = scoresRemainingInScore8\
    \ * guessesCount\n        val guessesRemainingInScore10 = guessesRemainingInScore9\
    \ * scoresCount\n        val scoresRemainingInScore10 = scoresRemainingInScore9\
    \ * guessesCount\n        val guessesRemainingInScore11 = guessesRemainingInScore10\
    \ * scoresCount\n        val scoresRemainingInScore11 = scoresRemainingInScore10\
    \ * guessesCount\n        val guessesRemainingInScore12 = guessesRemainingInScore11\
    \ * scoresCount\n        val scoresRemainingInScore12 = scoresRemainingInScore11\
    \ * guessesCount\n        val gues", "        val guesses = gues\n        val\
    \ scores = game\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new mutable.ListBuffer[Long]()\n       \
    \ val scoreDiff = new mutable.ListBuffer[Long]()\n        val guessesDiff = new\
    \ mutable.ListBuffer[Long]()\n        val guessesDiffCount = guessesCount - guesses.size\n\
    \        val scoresDiffCount = scoresCount - scores.size\n        val scoreDiffCount\
    \ = scoreDiffCount - scoreDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guesses", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess -\
    \ game) }\n        guessesDiff.zipWithIndex.map { case (diff, index) => diff }",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score -\
    \ guess(index) }\n        val gameScoreSum = gameScores.sum\n        val gameScoreDiff\
    \ = gameScores.map(_.abs).sum\n        val gameScoreDiffAbs = gameScoreDiff.abs\n\
    \        val gameScoreDiffAbsSum = gameScoreDiffAbs.sum\n        val gameScoreDiffAbsSumAbs\
    \ = gameScoreDiffAbsSum.abs\n        val gameScoreDiffAbsSumAbsSum = gameScoreDiffAbsSumAbs.sum\n\
    \        val gameScoreDiffAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSum.abs\n  \
    \      val gameScoreDiffAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAb",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSet", "      \
    \  val gameScores = game.map(x => Math.abs(x))\n        val guessesScores = guess.map(x\
    \ => Math.abs(x))\n        val guessesDiff = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else x._1 - x._2)\n        guessesDiff", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ListBuffer[Long]()\n        for(score <- scores) {\n \
    \           val guess = guesses.find(_ == score)\n            if(guess == None)\
    \ results += score\n            else results += guess - score\n        }\n   \
    \     results.toList", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreIndexes = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessScoreIndexes = guessScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndex", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score == 0) 0 else abs(score - gameScore) }\n        gameScores.toList",
  "        val guesses = gues\n        val scores = game\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val diff = abs(guess - score)\n            if (diff < result(i)) {\n\
    \                result(i) = diff\n            } else {\n                result(i)\
    \ = result(i) - diff\n            }\n            i += 1\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n     \
    \   val guessesScoreKeys = guessesScoreMap.keys\n        val gameScoreValues =\
    \ gameScoreMap.values\n        val guessesScoreValues = guessesScoreMap.values\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessesScoreKeySet\
    \ = guessesScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValues.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessesScoreKeysSet = guessesScoreKeySet.toSet\n\
    \        val gameScoreValueSet = gameScoreValueSet.toSet\n        val guessesScoreValueSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeysSet.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n        val gameScoreValueSet\
    \ = gameScoreValueSet.toSet\n        val guessesScoreValueSet = guessesScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeysSet.toSet\n        val gameScoreValueSet = gameScoreValueSet.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValueSet.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n\
    \        val gameScoreValueSet = gameScoreValueSet.toSet\n        val guessesScoreValueSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeysSet.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n        val gameScoreValueSet\
    \ = gameScoreValueSet.toSet\n        val guessesScoreValueSet = guessesScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKey",
  "        val gameScores = game.zipWithIndex.map(x => (x._2, x._1)).toMap\n     \
    \   val guessesScores = guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n    \
    \    val guessesScoreKeys = guessesScores.keySet\n        val gameScoreKeys =\
    \ gameScores.keySet\n        val guessesScoreKeysSet = guessesScoreKeys.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val game",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (index, score) => (index, score) }.toMap\n  \
    \      val guessesWithIndexesWithScores = guessesWithIndexes.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScores.map { case (index, score) => (index, score) }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScores = guessesWithIndexesWithScoresWithIndexes.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScoresWithIndexesWithScores.map { case (index, score)\
    \ => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexes.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap", "        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (index, score) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScores.map { case (index, score) => index -> index\
    \ }.toMap\n        val guessesWithIndexesSortedWithIndexesSorted = guessesWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithScores = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { case (index, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (index, index)\
    \ => index -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (index, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (index, index) => index -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSorted", "        val gameScores\
    \ = game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n   \
    \     val gameScore = gameScores.sum\n        val guesses = guess.zipWithIndex.map{\
    \ case (guess, index) => guess - game(index) }\n        val guessesWithCorrect\
    \ = guesses.filter{ case (guess, index) => guess == 0 }\n        val guessesWithWrong\
    \ = guesses.filter{ case (guess, index) => guess != 0 }\n        guessesWithCorrect\
    \ ++ guessesWithWrong.map{ case (guess, index) => guess - gameScore(index) }",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n  \
    \      val guessesScoreSet = guessesScores.toSet\n        val gameScoreList =\
    \ gameScores.toList\n        val guessesScoreList = guessesScores.toList\n   \
    \     val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = ", "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n\
    \        val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSetSize = guessSetSize.toLong\n\
    \        val gameSetSize = gameSetSize.toLong\n        val guessSet", "      \
    \  val gameScores = game.zipWithIndex.map{ case (score, index) => score - guess(index)\
    \ }\n        val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map{\
    \ case (score, index) => index }\n        val guessesScore = guesses.sum\n   \
    \     val guessesDiff = guessesScore - gameScore\n        guesses.map(guess =>\
    \ if (guess == 0) 0 else abs(guess - gameScore))", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score == 0) 0 else abs(score - gameScore) }\n        gameScores.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoreAndIndexWithScore = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> score }.toMap\n        val\
    \ guessesWithIndexesWithScoreAndIndexWithScoreAndIndex = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScore = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val guesses = gameScores.zipWithIndex.map { case (score, index) => index\
    \ }\n        val guessesWithScores = guesses.zipWithIndex.map { case (index, score)\
    \ => score - guess(index) }\n        guessesWithScores.map { case (guess, score)\
    \ => if (guess == 0) 0 else abs(guess) }", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).map(x =>\
    \ (x._2, x._1))\n        val guessesWithScoreAndIndex = guessesWithScores.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScores = guessesWithScoreAndIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndex =\
    \ guessesWithScoreAndIndexWithScores.zipWithIndex.map(x => (x._2, x._1))\n   \
    \     val guessesWithScoreAndIndexWithScoresWithIndexWithScores = guessesWithScoreAndIndexWithScoresWithIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScores.zipWithIndex.map(x =>\
    \ (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWith",
  "        val guesses = guess.length\n        val scores = game.length\n        val\
    \ result = new mutable.ArrayList[Long](guesses)\n        val guessesSoFar = 0\n\
    \        val scoresSoFar = 0\n        val guessesLeftToCompare = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare = scores - scoresSoFar\n        val guessesLeftToCompare2\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare2 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare3 = guesses - guessesSoFar\n        val scoresLeftToCompare3\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare4 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare4 = scores - scoresSoFar\n        val guessesLeftToCompare5\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare5 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare6 = guesses - guessesSoFar\n        val scoresLeftToCompare6\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare7 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare7 = scores - scoresSoFar\n        val guessesLeftToCompare8\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare8 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare9 = guesses - guessesSoFar\n        val scoresLeftToCompare9\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare10 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare10 = scores - scoresSoFar\n        val guessesLeftToCompare11\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare11 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare12 = guesses - guessesSoFar\n        val scoresLeftToCompare12\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare13 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare13 = scores - scoresSoFar\n        val guessesLeftToCompare14\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare14 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare15 = guesses - guessesSoFar\n        val scoresLeftToCompare15\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare16 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare16 = scores - scores", "        val gameScores\
    \ = game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesCorrect\
    \ = guessesScores.zip(gameScores).filter{case (guess, score) => guess == score}\n\
    \        val guessesWrong = guessesScores.zip(gameScores).filter{case (guess,\
    \ score) => guess != score}\n        guessesCorrect.map{case (guess, score) =>\
    \ guess - score}.toList ++ guessesWrong.map{case (guess, score) => abs(guess -\
    \ score)} ++ List(guessesWrong.size)", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => score\
    \ -> gameScores(index) }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n        val guessesWithIndexesSortedSortedByScore\
    \ = guessesWithIndexesSorted.toSeq.sortBy(_._2).reverse\n        val guessesWithIndexesSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScore.map { case (score, index) => index ->\
    \ score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSorted\
    \ = guessesWithIndexesSortedSortedByScoreWithIndex.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSorted\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSorted",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoresWithIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScore = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> guess -> score }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuess = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> guess -> score -> guess\
    \ }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index -> score }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAndScoreAndGuess\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index -> score -> guess }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAndScoreAndGuessAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index -> score -> guess -> index }.toMap\n      \
    \  val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAnd", "  \
    \      val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndex\
    \ = guesses.zipWithIndex.map { case (guess, score) => (guess, score) }.toMap\n\
    \        val guessesWithScoreAndIndexWithScores = guesses.zip(game).map { case\
    \ (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScores = guesses.zip(game).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAnd", "        val guesses = guess.toSet\n        val\
    \ scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n \
    \       for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) result += score\n            else result += guess\
    \ - score\n        }\n        result.toList", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values\n        val guessScoreValues = guessScoreMap.values\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScore", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val guessesScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            val guessesScore\
    \ = guessesScoreMap.get(index)\n            val gameScore = gameScoreMap.get(index)\n\
    \            if (guessesScore == gameScore) {\n                gameScoreList.add(gameScore)\n\
    \                guessesScoreList.add(guessesScore)\n            } else {\n  \
    \              val diff = abs(guessesScore - gameScore)\n                gameScoreList.add(gameScore)\n\
    \                guessesScoreList.add(guessesScore)\n                guessesScoreList.add(diff)\n\
    \            }\n        }\n        gameScoreList.map(_.toLong)", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> guess }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (score, index) => index -> gameScores(index)\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScores = guessesWithIndexesWithScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess }.toMap\n      \
    \  val guessesWithIndexesWithScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess - guess\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores.map { case (score,\
    \ index) => index -> gameScores(index) - guess - guess - guess - guess }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess - guess\
    \ - guess - guess }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess - guess\
    \ - guess - guess - guess }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScore", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val guessesScoreKeys\
    \ = guessesScoreMap.keys\n        val gameScoreKeys = gameScoreMap.keys\n    \
    \    val guessesScoreKeysSet = guessesScoreKeys.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeys.toSet\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n", "        val gameScores\
    \ = game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n      \
    \  val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetList = gameScores.toSet.toList\n        val guessScoreSetList\
    \ = guessScores.toSet.toList\n        val gameScoreSetSet = gameScoreSet.toSet\n\
    \        val guessScoreSetSet = guessScoreSet.toSet\n        val gameScoreSetList\
    \ = gameScoreSet.toList\n        val guessScoreSetList = guessScoreSet.toList\n\
    \        val gameScoreSetSetList = gameScoreSet.toSet.toList\n        val guessScoreSetSetList\
    \ = guessScoreSet.toSet.toList\n        val gameScoreSetSetSet = gameScoreSetSet.toSet\n\
    \        val guessScoreSetSetList = guessScoreSetSet.toList\n        val guessScoreSetSetSet\
    \ = guessScoreSetSet.toSet\n        val gameScoreSetSetSetList = gameScoreSetSet.toList\n\
    \        val guessScoreSetSetSet = guessScoreSetSet.toSet.toList\n        val\
    \ gameScoreSetSetSetSet = gameScoreSetSetSet.toSet.toList\n        val guessScoreSetSetSetSet\
    \ = guessScoreSetSetSet.toSet.toList\n        val gameScoreSetSetSetSetSet = gameScoreSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSet = guessScoreSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSetSet = guessScoreSetSet", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessScoreKeysSet\
    \ = guessScoreKeySet.toSet\n        val gameScoreValuesSet = gameScoreValueSet.toSet\n\
    \        val guessScoreValuesSet = guessScoreValueSet.toSet\n        val gameScoreKeysSetSet\
    \ = gameScoreKeysSet.toSet\n        val guessScoreKeysSetSet = guessScoreKeysSet.toSet\n\
    \        val gameScoreValuesSetSet = gameScoreValuesSet.toSet\n        val guessScoreValuesSetSet\
    \ = guessScoreValuesSet.toSet\n        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.toSet\n\
    \        val guessScoreKeysSetSetSet = guessScoreKeysSetSet.toSet\n        val\
    \ gameScoreValuesSetSetSet = gameScoreValuesSetSet.toSet\n        val guessScoreValuesSetSetSet\
    \ = guessScoreValuesSetSet.toSet\n        val gameScoreKeysSetSetSetSet = gameScoreKeysSetSetSet.toSet\n\
    \        val guessScoreKeysSetSetSetSet = guessScoreKeysSetSetSet.toSet\n    \
    \    val gameScoreValuesSetSetSetSet = gameScoreValuesSetSetSet.toSet\n      \
    \  val guessScoreValuesSetSetSetSet = guessScoreValuesSetSetSet.toSet\n      \
    \  val gameScoreKeysSetSetSetSetSet = gameScoreKeysSetSetSetSet.toSet\n      \
    \  val guessScoreKeysSetSetSetSetSet = guessScoreKeysSetSetSetSet.toSet\n    \
    \    val gameScoreValuesSetSetSetSetSet = gameScoreValuesSetSetSetSet.toSet\n\
    \        val guessScore", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessesScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessesCorrect = guessesScores.zipWithIndex.filter{case\
    \ (score, index) => gameScores(index) == score}\n        val guessesWrong = guessesScores.zipWithIndex.filter{case\
    \ (score, index) => gameScores(index) != score}\n        guessesCorrect.map{case\
    \ (score, index) => Math.abs(gameScores(index) - score)}.zipWithIndex.map{case\
    \ (score, index) => Math.abs(gameScores(index) - score)}.filter(_ > 0).map(_ +\
    \ gameScores(index)).toList", "        val guesses = gues\n        val scores\
    \ = game\n        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < guessesCount) {\n            val guess = guesses(i)\n        \
    \    val score = scores(i)\n            val difference = guess - score\n     \
    \       if (difference < 0l) {\n                result.add(difference)\n     \
    \       } else {\n                result.add(0l)\n            }\n            i\
    \ += 1\n        }\n        result.toList", "        val gameScores = game.map(x\
    \ => x.toLong)\n        val guessScores = guess.map(x => x.toLong)\n        val\
    \ gameScoreMap = gameScores.groupBy(x => x).mapValues(_.size)\n        val guessScoreMap\
    \ = guessScores.groupBy(x => x).mapValues(_.size)\n        val gameScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach {\n            case (k, v) => gameScoreList += k\n\
    \        }\n        guessScoreMap.foreach {\n            case (k, v) => guessScoreList\
    \ += k\n        }\n        gameScoreList.zip(guessScoreList).map {\n         \
    \   case (gameScore, guessScore) => Math.abs(gameScore - guessScore)\n       \
    \ }", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map {\
    \ case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(gameScores).map { case (guess, score) => (guess, score) }.toMap\n\
    \        val guessesWithScoreAndIndex = guesses.zipWithIndex.map { case (guess,\
    \ score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndexWithScores\
    \ = guesses.zip(gameScores).map { case (guess, score) => (guess, score) }.toMap\n\
    \        val guessesWithScoreAndIndexWithScoresWithIndex = guesses.zip(gameScores).zip(guessesScores).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).map { case\
    \ (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).zip(guessesWithScoresWithIndex).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).zip(guessesWithScoresWithIndex).zip(guessesWithScoresWithIndexWithScores).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).zip(guessesWithScoresWithIndex).zip(guessesWithScoresWithIndexWithScores).zip(guessesWithScoresWithIndexWithScoresWithIndex).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWith",
  "        val gameScores = game.zipWithIndex.map(x => x._1 + x._2)\n        val guessesScores\
    \ = guess.zipWithIndex.map(x => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScores = gameScoreList.map(x => gameScoreMap.getOrElse(x, 0l))\n\
    \        val guessesScores = guessesScoreList.map(x => guessesScoreMap.getOrElse(x,\
    \ 0l))\n        val gameScores = gameScores.toList\n        val guessesScores\
    \ = guessesScores.toList\n        val gameScores = gameScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessesScores = guessesScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScores = gameScores.toList\n        val guessesScores\
    \ = guessesScores.toList\n        val gameScores = gameScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessesScores = guessesScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScores = gameScores.toList\n        val guessesScores\
    \ = guessesScores.toList\n        val gameScores = gameScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessesScores = guessesScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScores = gameScores.toList\n        val guessesScores\
    \ = guessesScores.toList\n        val gameScores = gameScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessesScores = guessesScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScores = gameScores.toList\n        val guessesScores\
    \ = guessesScores.toList\n        val gameScores = gameScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val guessesScores = guessesScores.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScores = gameScores.toList\n        val guessesScores\
    \ = guessesScores.toList\n        ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessedCorrectly\
    \ = guess.zip(game).forall { case (guess, score) => gameScores(score) == guess\
    \ }\n        val guessesDiff = guess.zip(game).map { case (guess, score) => guess\
    \ - score }\n        val guessesDiffAbsolute = guessesDiff.map(math.abs)\n   \
    \     val guessesDiffAbsoluteCorrectly = guessesDiffAbsolute.zip(guessedCorrectly).map\
    \ { case (guess, correct) => if (correct) 0 else guess }\n        guessesDiffAbsoluteCorrectly",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScore\
    \ - gameScore)\n        gameScoreDiffAbs.zip(guessScoreDiffAbs).toList", "   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val diffs = guessScores.zip(gameScores).map { case (guess, game) => math.abs(guess\
    \ - game) }\n        diffs.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val game", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val guesses = gameScores.zipWithIndex.map { case (score, index) => index\
    \ }\n        val guessesWithScores = guesses.zipWithIndex.map { case (index, guess)\
    \ => guess + score }\n        guessesWithScores.map { case (guess, score) => if\
    \ (guess == gameScore) 0 else abs(guess - gameScore) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.map(_.toSet)\n        val guessesScoreSet = guessesScoreList.map(_.toSet)\n\
    \        val gameScoreSetSet = gameScoreSet.union(guessesScoreSet)\n        val\
    \ gameScoreSetList = gameScoreSetSet.toList\n        val gameScoreSetSetList =\
    \ gameScoreSetSetList.map(_.toList)\n        val gameScoreSetSetListSet = gameScoreSetSetList.map(_.toSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.map(_.toList)\n\
    \        val gameScoreSetSetListSetList = gameScoreSetSetListSet.map(_.toList)\n\
    \        val gameScoreSetSetListSetListSet = gameScoreSetSetListSetList.map(_.toList)\n\
    \        val gameScoreSetSetListSetListSetList = gameScoreSetSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSet = gameScoreSetSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSet = gameScoreSetSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSet = gameScoreSetSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSetListSet = gameScoreSetSetListSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSetListSetListSet\
    \ = gameScoreSetSetListSetListSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSetListSetListSetListSet\
    \ = gameScoreSetSetListSetListSetListSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val guessesWithScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val guessesScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            val guessesScore\
    \ = guessesScoreMap.get(score)\n            if (guessesScore == None) {\n    \
    \            gameScoreList += score\n                guessesScoreList += score\n\
    \            } else {\n                val diff = guessesScore.get.toLong - score\n\
    \                if (diff < 0) {\n                    gameScoreList += score\n\
    \                    guessesScoreList += diff\n                } else {\n    \
    \                gameScoreList += diff\n                    guessesScoreList +=\
    \ score\n                }\n            }\n        }\n        gameScoreList.map\
    \ { score => Math.abs(score) }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guess.zipWithIndex.map { case (score, index) =>\
    \ index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guess.zipWithIndex.map { case (score,\
    \ index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes\
    \ = guess.zipWithIndex.map { case (score, index) => index }.toMap\n        val\
    \ guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndex", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, score) => math.abs(guess\
    \ - score) }\n        guessesDiff.zip(guessesScores).map { case (guess, score)\
    \ => math.abs(guess - score) }", "        val gameScores = game.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).map(x =>\
    \ (x._2, x._1)).toMap\n        val guessesWithScore = guessesWithScores.toSeq.sortBy(x\
    \ => x._1).reverse\n        val guessesWithScoreWithIndex = guessesWithScore.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScore = guessesWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScore.map(x => (x._2, x._1)).toMap\n        val\
    \ guessesWithScoreWithIndexWithScoreWithIndexWithScore = guessesWithScoreWithIndexWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScore.map(x => (x._2, x._1)).toMap\n\
    \        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWith",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score -\
    \ guess(index) }\n        val gameScoreSum = gameScores.sum\n        val gameScoreDiff\
    \ = gameScoreSum - gameScores.last\n        gameScores.map(gameScoreDiff)", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ - guess(index) }\n        val gameScoreSum = gameScores.sum\n        val gameScoreDiff\
    \ = gameScores.sum\n        val gameScoreDiffAbs = gameScoreDiff.abs\n       \
    \ val gameScoreDiffAbsSum = gameScoreDiffAbs.sum\n        val gameScoreDiffAbsSumAbs\
    \ = gameScoreDiffAbsSum.abs\n        val gameScoreDiffAbsSumAbsSum = gameScoreDiffAbsSumAbs.sum\n\
    \        val gameScoreDiffAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSum.abs\n  \
    \      val gameScoreDiffAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs",
  "        val gameScores = game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetList = gameScores.toList.toSet\n        val guessScoreSetList\
    \ = guessScores.toList.toSet\n        val gameScoreSetSet = gameScoreSet.toSet\n\
    \        val guessScoreSetSet = guessScoreSet.toSet\n        val gameScoreSetList\
    \ = gameScoreSet.toList\n        val guessScoreSetList = guessScoreSet.toList\n\
    \        val gameScoreSetSetList = gameScoreSet.toList.toSet\n        val guessScoreSetSetList\
    \ = guessScoreSet.toList.toSet\n        val gameScoreSetSetSet = gameScoreSetSet.toSet\n\
    \        val guessScoreSetSetList = guessScoreSetSet.toList.toSet\n        val\
    \ gameScoreSetSetSet = gameScoreSetSet.toSet\n        val guessScoreSetSetSet\
    \ = guessScoreSetSet.toSet\n        val gameScoreSetSetSetList = gameScoreSetSet.toList.toSet\n\
    \        val guessScoreSetSetSetList = guessScoreSetSet.toList.toSet\n       \
    \ val gameScoreSetSetSetSet = gameScoreSetSet.toSet.toSet\n        val guessScoreSetSetSetSet\
    \ = guessScoreSetSet.toSet.toSet\n        val gameScoreSetSetSetSetList = gameScoreSetSet.toList.toSet.toSet\n\
    \        val guessScoreSetSetSetSetList = guessScoreSetSet.toList.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSet = gameScoreSetSet.toSet.toSet.toSet\n  \
    \      val guessScoreSetSetSetSetSet = guessScoreSetSet.toSet.toSet.toSet\n  \
    \      val gameScoreSetSetSetSetSetList = gameScoreSetSet.toList.toSet.toSet.toSet\n\
    \        val guessScoreSetSetSetSetSetList = guessScoreSetSet.toList.toSet.toSet.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetList = gameScoreSetSet.toList.toSet.to",
  "        val gameScores = game.zipWithIndex.map(x => x._2).toList\n        val guessesScores\
    \ = guess.zipWithIndex.map(x => x._2).toList\n        val guessesDiff = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        guessesDiff.map(x =>\
    \ if (x == 0) 0 else x)", "        val guesses = gues\n        val scores = game\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val maxScore = scores.max\n\
    \        val minScore = scores.min\n        val maxGuess = guesses.max\n     \
    \   val minGuess = guesses.min\n        val maxDiff = maxScore - minScore\n  \
    \      val minDiff = minScore - maxScore\n        val maxGuessesCount = guesses.size\
    \ - 1\n        val minGuessesCount = guesses.size - 1\n        val maxScoresCount\
    \ = scores.size - 1\n        val minScoresCount = scores.size - 1\n        val\
    \ maxDiffCount = maxDiff - 1\n        val minDiffCount = minDiff - 1\n       \
    \ val maxGuessesCountCount = maxGuessesCount - 1\n        val minGuessesCountCount\
    \ = minGuessesCount - 1\n        val maxScoresCountCount = maxScoresCount - 1\n\
    \        val minScoresCountCount = minScoresCount - 1\n        val maxDiffCountCount\
    \ = maxDiffCount - 1\n        val minDiffCountCount = minDiffCount - 1\n     \
    \   val maxGuessesCountCountCount = maxGuessesCountCount - 1\n        val minGuessesCountCountCount\
    \ = minGuessesCountCount - 1\n        val maxScoresCountCountCount = maxScoresCountCountCount\
    \ - 1\n        val minScoresCountCountCount = minScoresCountCountCount - 1\n \
    \       val maxDiffCountCountCount = maxDiffCountCountCount - 1\n        val minDiffCountCountCount\
    \ = minDiffCountCountCount - 1\n        val maxGuessesCountCountCountCount = maxGuessesCountCountCount\
    \ - 1\n        val minGuessesCountCountCountCount = minGuessesCountCountCount\
    \ - 1\n        val maxScoresCountCountCountCount = maxScoresCountCountCountCount\
    \ - 1\n        val minScoresCountCountCountCount = minScoresCountCountCountCount\
    \ - 1\n        val maxDiffCountCountCountCount = maxDiffCountCountCountCount -\
    \ 1\n        val minDiffCountCountCountCount = minDiffCountCountCountCount - 1\n\
    \        val maxGuessesCountCountCountCountCount = maxGuessesCountCountCountCount\
    \ - 1\n        val minGuessesCountCountCountCountCount = minGuessesCountCountCountCount\
    \ - 1\n        val maxScoresCountCountCountCountCount = maxScoresCountCountCountCountCount\
    \ - 1\n        val minScores", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val gameScoreDiff = gameScore\
    \ - guessScore\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbs.diff\n        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSumAbsDiffsSum =\
    \ gameScoreDiffsSumAbsDiffsSum.sum\n        val gameScoreDiffsSumAbsDiffsSumAbs\
    \ = gameScoreDiffsSumAbsDiffsSum.abs\n        val gameScoreDiffsSumAbsDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbsDiffsSumAbs.diff\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiffsSumAbsDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffsSumAbsDiffsSum.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiff.diff\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiffsSum.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiffsSum\
    \ = gameScoreDiffsSumAbsDiff", "        val guesses = gues\n        val scores\
    \ = game\n        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while (i < guessesCount) {\n            val guess = guesses(i)\n        \
    \    val score = scores(i)\n            val difference = guess - score\n     \
    \       if (difference < 0)\n                result.add(difference)\n        \
    \    else\n                result.add(-difference)\n            i += 1\n     \
    \   }\n        result.toList", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x => x._1\
    \ + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2 - x._1).toList\n        val guessScores = guess.zipWithIndex.map(x =>\
    \ x._2 - x._1).toList\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val gameScoreDiff = gameScore - guessScore\n    \
    \    val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScore - gameScore)\n        val gameScoreDiffAbsDiff = gameScoreDiffAbs\
    \ - guessScoreDiffAbs\n        val gameScoreDiffAbsDiffList = gameScoreDiffAbsDiff.map(x\
    \ => Math.abs(x)).toList\n        val gameScoreDiffAbsDiffListSum = gameScoreDiffAbsDiffList.sum\n\
    \        val gameScoreDiffAbsDiffListSumAbs = Math.abs(gameScoreDiffAbsDiffListSum)\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiff = gameScoreDiffAbsDiffListSumAbs\
    \ - guessScoreDiffAbsDiffListSumAbs\n        val gameScoreDiffAbsDiffListSumAbsDiffList\
    \ = gameScoreDiffAbsDiffListSumAbsDiff.map(x => Math.abs(x)).toList\n        val\
    \ gameScoreDiffAbsDiffListSumAbsDiffListSum = gameScoreDiffAbsDiffListSumAbsDiffListSum.sum\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbs = Math.abs(gameScoreDiffAbsDiffListSumAbsDiffListSum)\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiff = gameScoreDiffAbsDiffListSumAbsDiffListSumAbs\
    \ - guessScoreDiffAbsDiffListSumAbsDiffListSumAbs\n        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffList\
    \ = gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiff.map(x => Math.abs(x)).toList\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum = gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum.sum\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSumAbs = Math.abs(gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum)\n\
    \        val gameScoreDiffAbs", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScore = gameScores.sum\n\
    \        val guessesWithScores = guess.zipWithIndex.map { case (score, index)\
    \ => score - gameScore(index) }\n        val guessesWithScore = guessesWithScores.sum\n\
    \        guessesWithScores.map { case (guess, score) => if (guess == 0) 0 else\
    \ abs(guess - score) }", "        val gameScores = game.map(_.toLong)\n      \
    \  val guessScores = guess.map(_.toLong)\n        val gameScoreDiff = gameScores.zip(guessScores).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScore == guessScore)\
    \ 0\n            else Math.abs(gameScore - guessScore)\n        }\n        gameScoreDiff.toList",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex.map{ case (diff, index) => diff }\n        val\
    \ guessScoreDiffs = guessScoreDiff.zipWithIndex.map{ case (diff, index) => diff\
    \ }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n        val guessScoreDiffsSum\
    \ = guessScoreDiffs.sum\n        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbs - guessScoreDiffsSumAbs\n        val guessScoreDiffsSumAbsDiff\
    \ = guessScoreDiffsSumAbs - gameScoreDiffsSumAbs\n        val gameScoreDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiff.zipWithIndex.map{ case (diff, index) => diff }\n\
    \        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map{\
    \ case (diff, index) => diff }\n        val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n\
    \        val guessScoreDiffsSumAbsDiffsSum = guessScoreDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbs = guessScoreDiffsSumAbsDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbs\
    \ - guessScoreDiffsSumAbsDiffsSumAbs\n        val guessScoreDiffsSumAbsDiffsSumAbsDiff\
    \ = guessScoreDiffsSumAbsDiffsSumAbs - gameScoreDiffsSumAbsDiffsSumAbs\n     \
    \   val gameScoreDiff", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }.toList\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }.toList\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zip(guessesScores).map\
    \ { case (guess, game) => math.abs(guess - game) }", "        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case score => score - gameScoreSum }\n        gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        ", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score -> index }.toMap\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val result = guess.zipWithIndex.map\
    \ { case (score, index) =>\n            val gameScore = gameScores(score)\n  \
    \          val guessScore = guessScores(score)\n            if (gameScore == guessScore)\
    \ {\n                0\n            } else {\n                Math.abs(guessScore\
    \ - gameScore)\n            }\n        }.toList\n        result", "        val\
    \ guesses = gues\n        val scores = game\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guesses_count = guesses.length\n        val scores_count = scores.length\n\
    \        val guesses_range = guesses.toRange\n        val scores_range = scores.toRange\n\
    \        val guesses_count = guesses_range.length\n        val scores_count =\
    \ scores_range.length\n        val guesses_range = guesses.toRange\n        val\
    \ scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toMap\n        val gameScore = gameScores.values.toList\n\
    \        val guessScore = guessScores.values.toList\n        val gameScores =\
    \ gameScores.map { case (index, score) => (index, score - guessScore(index)) }\n\
    \        val gameScore = gameScore.max\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }\n        gameScores.toList", "   \
    \     val gameSet = game.distinct\n        val guessSet = guess.distinct\n   \
    \     val gameSetSize = gameSet.size\n        val guessSetSize = guessSet.size\n\
    \        val result = new mutable.ArrayList[Long](guessSetSize)\n        val gameSetIterator\
    \ = gameSet.iterator\n        val guessSetIterator = guessSet.iterator\n     \
    \   var gameSetIndex = 0\n        var guessSetIndex = 0\n        while(gameSetIndex\
    \ < gameSetSize && guessSetIndex < guessSetSize) {\n            val gameSetValue\
    \ = gameSetIterator.next()\n            val guessSetValue = guessSetIterator.next()\n\
    \            val gameSetDifference = gameSetValue - guessSetValue\n          \
    \  val guessSetDifference = guessSetValue - gameSetValue\n            if(gameSetDifference\
    \ < 0 && guessSetDifference < 0) {\n                result.add(gameSetValue)\n\
    \                gameSetIndex += 1\n            } else if(gameSetDifference >\
    \ 0 && guessSetDifference > 0) {\n                result.add(guessSetValue)\n\
    \                guessSetIndex += 1\n            } else {\n                result.add(gameSetValue)\n\
    \                result.add(guessSetValue)\n                gameSetIndex += 1\n\
    \                guessSetIndex += 1\n            }\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n       \
    \ val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSet = gameScoreKeySet.toSet\n\
    \        val guessScoreKeySetSet = guessScoreKeySet.toSet\n        val gameScoreValueSetSet\
    \ = gameScoreValueSet.toSet\n        val guessScoreValueSetSet = guessScoreValueSet.toSet\n\
    \        val gameScoreKeySetSetSet = gameScoreKeySetSet.toSet\n        val guessScoreKeySetSetSet\
    \ = guessScoreKeySetSet.toSet\n        val gameScoreValueSetSetSet = gameScoreValueSetSet.toSet\n\
    \        val guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n        val\
    \ gameScoreKeySetSetSetSet = gameScoreKeySetSetSet.toSet\n        val guessScoreKeySetSetSetSet\
    \ = guessScoreKeySetSetSet.toSet\n        val gameScoreValueSetSetSetSet = gameScoreValueSetSetSet.toSet\n\
    \        val guessScoreValueSetSetSetSet = guessScoreValueSetSetSet.toSet\n  \
    \      val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSetSet.toSet\n    \
    \    val guessScoreKeySetSetSetSetSet = guessScoreKeySetSetSetSet.toSet\n    \
    \    val gameScoreValueSetSetSetSetSet = gameScoreValueSetSetSetSet.toSet\n  \
    \      val guessScoreValueSetSetSetSetSet = guessScoreValueSetSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSetSet = gameScoreKeySetSetSetSetSet.toSet\n\
    \        val guessScoreKeySetSetSetSetSetSet = guessScoreKeySetSetSetSetSet.toSet\n\
    \        val gameScoreValueSetSetSetSet", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScores = gameScores.toList\n\
    \        val gameScores = gameScores.sortWith(_ < _)\n        val gameScores =\
    \ gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        ", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesCorrect\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => if (guess == game)\
    \ 0 else Math.abs(guess - game) }\n        guessesCorrect.toList", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedReversed = guessesWithIndexesSorted.reverse\n \
    \       val guessesWithIndexesSortedReversedSorted = guessesWithIndexesSortedReversed.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedWithIndex = guessesWithIndexesSortedReversedSorted.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndex.sortBy(_._1)\n     \
    \   val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex =\
    \ guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex.map { case\
    \ (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val guessesPerScore = guessesCount / scoresCount\n        val guessesPerScoreAbs\
    \ = guessesPerScore.abs\n        val guessesPerScoreAbsDiff = guessesPerScoreAbs.diff\n\
    \        val guessesPerScoreAbsDiffDiff = guessesPerScoreAbsDiff.diff\n      \
    \  val guessesPerScoreAbsDiffDiffDiff = guessesPerScoreAbsDiffDiff.diff\n    \
    \    val guessesPerScoreAbsDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score - guess(index) }\n        val gameScore = gameScores.sum\n        val\
    \ gameScoreDiff = gameScores.map { case (score, index) => score - gameScore(index)\
    \ }\n        gameScoreDiff.zipWithIndex.map { case (score, index) => abs(score)\
    \ }", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score - guess(index) }\n        val gameScoreSum = gameScores.sum\n        val\
    \ gameScoreDiff = gameScores.map { case score => if (score > 0) score else -score\
    \ }\n        gameScoreDiff.zip(gameScoreSum).map { case (diff, sum) => if (sum\
    \ == 0) 0 else diff }", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }.toList\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }.toList\n        val gameScoreMap = gameScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score }.toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(x => x).map { case (score, index) => index -> score }.toMap\n\
    \        val gameScoreList = gameScores.map { case (score, index) => index }.toList\n\
    \        val guessScoreList = guessScores.map { case (score, index) => index }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score }.toMap\n        val gameScoreList\
    \ = gameScores.map { case (score, index) => index }.toList\n        val guessScoreList\
    \ = guessScores.map { case (score, index) => index }.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(x => x).map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreMap = guessScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score }.toMap\n        val gameScoreList = gameScores.map { case\
    \ (score, index) => index }.toList\n        val guessScoreList = guessScores.map\
    \ { case (score, index) => index }.toList\n        val gameScoreMap = gameScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score }.toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(x => x).map { case (score, index) => index -> score }.toMap\n\
    \        val gameScoreList = gameScores.map { case (score, index) => index }.toList\n\
    \        val guessScoreList = guessScores.map { case (score, index) => index }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score }.toMap\n        val gameScoreList\
    \ = gameScores.map { case (score, index) => index }.toList\n        val guessScoreList\
    \ = guessScores.map { case (score, index) => index }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score - guess(index) }\n  \
    \      val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessesWithScore = guesses.zipWithIndex.map\
    \ { case (index, score) => score - gameScore(index) }\n        guessesWithScore.zipWithIndex.map\
    \ { case (guess, index) => guess + gameScore(index) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => (score, index) }.toMap\n  \
    \      val guessScores = guess.zipWithIndex.map { case (score, index) => (score,\
    \ index) }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => (score, gameScores.get(index).getOrElse(0l)) }.toMap\n        val guessScore\
    \ = guessScores.map { case (score, index) => (score, guessScores.get(index).getOrElse(0l))\
    \ }.toMap\n        val gameScores = gameScores.map { case (score, index) => (score,\
    \ gameScores.get(index).getOrElse(0l) - guessScore.get(index).getOrElse(0l)) }.toMap\n\
    \        val guessScores = guessScores.map { case (score, index) => (score, guessScores.get(index).getOrElse(0l)\
    \ - gameScore.get(index).getOrElse(0l)) }.toMap\n        gameScores.map { case\
    \ (score, index) => (score, gameScores.get(index).getOrElse(0l)) }.toList", " \
    \       val gameScores = game.map(x => Math.abs(x - guess(x)))\n        val guessesWithScores\
    \ = guess.zip(gameScores)\n        val guessesWithScoreAndScore = guessesWithScores.map(x\
    \ => if (x._2 == 0) 0 else x._1 - x._2)\n        guessesWithScoreAndScore", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithScoreAndIndex = guess.zip(game).map { case (guess, score)\
    \ => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes =\
    \ guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes2 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes3\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes4 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes5\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes6 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes7\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes8 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes9\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes10 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes11\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes12 = guess.zip(game).map ", " \
    \       val gameScores = game.zipWithIndex.map{ case (score, index) => score -\
    \ guess(index) }\n        val gameScore = gameScores.sum\n        val gameScores\
    \ = gameScores.zipWithIndex.map{ case (score, index) => if (score == 0) 0 else\
    \ abs(score - gameScore) }\n        gameScores.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n  \
    \      val gameScoreList = gameScoreList.filter(_ != 0l)\n        val guessScoreList\
    \ = guessScoreList.filter(_ != 0l)\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessScoreSet = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreSet.filter(_ != 0l)\n        val guessScoreSet = guessScoreSet.filter(_\
    \ != 0l)\n        val gameScoreSet = gameScoreSet.map { case score => score ->\
    \ gameScoreList.indexOf(score) }.toMap\n        val guessScoreSet = guessScoreSet.map\
    \ { case score => score -> guessScoreList.indexOf(score) }.toMap\n        val\
    \ gameScoreSet = gameScoreSet.filter(_._2 != 0l)\n        val guessScoreSet =\
    \ guessScoreSet.filter(_._2 != 0l)\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> gameScoreList.indexOf(score) }.toMap\n   \
    \     val guessScoreSet = guessScoreSet.map { case (score, index) => score ->\
    \ guessScoreList.indexOf(score) }.toMap\n        val gameScoreSet = gameScoreSet.filter(_._2\
    \ != 0l)\n        val guessScoreSet = guessScoreSet.filter(_._2 != 0l)\n     \
    \   val gameScoreSet = gameScoreSet.map { case (score, index) => score -> gameScoreList.indexOf(score)\
    \ }.toMap\n        val guessScoreSet = guessScoreSet.map { case (score, index)\
    \ => score -> guessScoreList.indexOf(score) }.toMap\n        val gameScoreSet\
    \ = gameScoreSet.filter(_._2 != 0l)\n        val guessScoreSet = guessScoreSet.filter(_._2\
    \ != 0l)\n        val gameScoreSet = gameScoreSet.map { case (score, index) =>\
    \ score -> gameScoreList.indexOf(score) }.toMap\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreKeys\
    \ = gameScoreMap.keys\n        val guessesScoreKeys = guessesScoreMap.keys\n \
    \       val gameScoreValues = gameScoreMap.values\n        val guessesScoreValues\
    \ = guessesScoreMap.values\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessesScoreKeySet = guessesScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessesScoreValueSet = guessesScoreValues.toSet\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScore", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score - guess(index) }\n        val gameScoreSum = gameScores.sum\n     \
    \   val gameScoreDiff = gameScores.map { case score => score - gameScoreSum }\n\
    \        gameScoreDiff.map { diff => if (diff < 0) diff else diff }", "      \
    \  val gameScores = game.zipWithIndex.map { case (score, index) => score }\n \
    \       val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex.map { case (diff, index) => diff }\n        val\
    \ guessScoreDiffs = guessScoreDiff.zipWithIndex.map { case (diff, index) => diff\
    \ }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n        val guessScoreDiffsSum\
    \ = guessScoreDiffs.sum\n        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbs - guessScoreDiffsSumAbs\n        val guessScoreDiffsSumAbsDiff\
    \ = guessScoreDiffsSumAbs - gameScoreDiffsSumAbs\n        val gameScoreDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiff.zipWithIndex.map { case (diff, index) => diff }\n\
    \        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n\
    \        val guessScoreDiffsSumAbsDiffsSum = guessScoreDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbs = guessScoreDiffsSumAbsDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbs\
    \ - guessScoreDiffsSumAbsDiffsSumAbs\n        val guessScoreDiffsSumAbsDiffsSumAbsDiff\
    \ = guessScoreDiffsSumAbsDiffsSumAbs - gameScoreDiffsSumAbsDiffsSumAbs\n     \
    \   val gameScoreDiff", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val guessScore = guessScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val difference = guessScore - gameScore\n\
    \        val differences = guessScores.zip(gameScores).map { case (guessScore,\
    \ gameScore) => (guessScore - gameScore) }\n        differences.map { difference\
    \ => if (difference < 0) difference else difference }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ != guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ != gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ != guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ != gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val game", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessesScores = guess.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val gameScoreSum =\
    \ gameScores.sum\n        val gameScoreDiff = gameScores.map(x => if (x == 0)\
    \ 0 else x).sum\n        val gameScoreDiffAbs = gameScoreDiff - gameScoreSum\n\
    \        gameScoreDiffAbs.toList.map(x => if (x == 0) 0 else x).toList", "   \
    \     val gameScores = game.map(_.toLong)\n        val guessesScores = guess.map(_.toLong)\n\
    \        val guessesDiff = guessesScores.zip(gameScores).map { case (guess, score)\
    \ => (guess - score) }\n        guessesDiff.map(_.abs).distinct", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score -> index }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1).reverse\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (score, index) => index -> score }\n \
    \       val guessesWithIndexesSortedWithScoresSorted = guessesWithIndexesSortedWithScores.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndex = guessesWithIndexesSortedWithScoresSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndex.sortBy(_._1).reverse\n \
    \       val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore =\
    \ guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore.map { case\
    \ (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndex\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSorted.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSortedWithScore\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSortedWithScoreSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWith",
  "        val gameScores = game.map(_.toLong)\n        val guessesScores = guess.map(_.toLong)\n\
    \        val guessesDiff = guessesScores.zip(gameScores).map { case (guess, score)\
    \ => (guess - score) }\n        guessesDiff.map(_.abs).distinct", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score - guess(index)\
    \ }\n        val gameScore = gameScores.sum\n        val guessesCorrect = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       guessesCorrect.zipWithIndex.map { case (score, index) => guess(index)\
    \ }", "        val guesses = guess.toSet\n        val scores = game.toSet\n  \
    \      val diffs = scores.map(score => Math.abs(score - guess(guesses.indexOf(score))))\n\
    \        diffs.toList", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => (index, score) }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = ", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score - guess(index) }\n        val gameScoreSum = gameScores.sum\n        val\
    \ gameScoreDiff = gameScores.map { case score => if (score < 0) -score else score\
    \ }.sum\n        val gameScoreDiffAbs = gameScoreDiff.abs\n        val gameScoreDiffAbsSum\
    \ = gameScoreDiffAbs.sum\n        val gameScoreDiffAbsDiff = gameScoreDiffAbs.map\
    \ { case score => if (score < 0) -score else score }.sum\n        val gameScoreDiffAbsDiffAbs\
    \ = gameScoreDiffAbsDiff - gameScoreSum\n        val gameScoreDiffAbsDiffAbsSum\
    \ = gameScoreDiffAbsDiffAbs.sum\n        val gameScoreDiffAbsDiffAbsDiff = gameScoreDiffAbsDiffAbs.map\
    \ { case score => if (score < 0) -score else score }.sum\n        val gameScoreDiffAbsDiffAbsDiffAbs\
    \ = gameScoreDiffAbsDiffAbsDiff - gameScoreSum\n        val gameScoreDiffAbsDiffAbsDiffAbsSum\
    \ = gameScoreDiffAbsDiffAbsDiffAbs.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiff\
    \ = gameScoreDiffAbsDiffAbsDiffAbs.map { case score => if (score < 0) -score else\
    \ score }.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbs = gameScoreDiffAbsDiffAbsDiffAbsDiff\
    \ - gameScoreSum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsSum = gameScoreDiffAbsDiffAbsDiffAbsDiffAbs.sum\n\
    \        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiff = gameScoreDiffAbsDiffAbsDiffAbsDiffAbs.map\
    \ { case score => if (score < 0) -score else score }.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiff - gameScoreSum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsSum\
    \ = gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = gameScoreDiffAbsDiff", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \        val gameScoreList = gameScoreMap.keys.toList\n        val guessScoreList\
    \ = guessScoreMap.keys.toList\n        val gameScores = gameScoreList.map{case\
    \ score => gameScoreMap.get(score)}\n        val guessScores = guessScoreList.map{case\
    \ score => guessScoreMap.get(score)}\n        val gameScoreDiffs = gameScores.map{case\
    \ score => Math.abs(score - guessScores(0))}\n        val guessScoreDiffs = guessScores.map{case\
    \ score => Math.abs(score - gameScores(0))}\n        gameScoreDiffs.zip(guessScoreDiffs)",
  "        val guessesCount = guess.size\n        val gamesCount = game.size\n   \
    \     val guessesCount = guess.size\n        val gamesCount = game.size\n    \
    \    val guessesCount = guess.size\n        val gamesCount = game.size\n     \
    \   val guessesCount = guess.size\n        val gamesCount = game.size\n      \
    \  val guessesCount = guess.size\n        val gamesCount = game.size\n       \
    \ val guessesCount = guess.size\n        val gamesCount = game.size\n        val\
    \ guessesCount = guess.size\n        val gamesCount = game.size\n        val guessesCount\
    \ = guess.size\n        val gamesCount = game.size\n        val guessesCount =\
    \ guess.size\n        val gamesCount = game.size\n        val guessesCount = guess.size\n\
    \        val gamesCount = game.size\n        val guessesCount = guess.size\n \
    \       val gamesCount = game.size\n        val guessesCount = guess.size\n  \
    \      val gamesCount = game.size\n        val guessesCount = guess.size\n   \
    \     val gamesCount = game.size\n        val guessesCount = guess.size\n    \
    \    val gamesCount = game.size\n        val guessesCount = guess.size\n     \
    \   val gamesCount = game.size\n        val guessesCount = guess.size\n      \
    \  val gamesCount = game.size\n        val guessesCount = guess.size\n       \
    \ val gamesCount = game.size\n        val guessesCount = guess.size\n        val\
    \ gamesCount = game.size\n        val guessesCount = guess.size\n        val gamesCount\
    \ = game.size\n        val guessesCount = guess.size\n        val gamesCount =\
    \ game.size\n        val guessesCount = guess.size\n        val gamesCount = game.size\n\
    \        val guessesCount = guess.size\n        val gamesCount = game.size\n \
    \       val guessesCount = guess.size\n        val gamesCount = game.size\n  \
    \      val guessesCount = guess.size\n        val gamesCount = game.size\n   \
    \     val guessesCount = guess.size\n        val gamesCount = game.size\n    \
    \    val guessesCount = guess.size\n        val gamesCount = game.size\n     \
    \   val guessesCount = guess.size\n        val gamesCount = game.size\n      \
    \  val guessesCount = guess.size\n        val gamesCount = game.size\n       \
    \ val guessesCount = guess.size\n        val gamesCount = game.size\n        val\
    \ guessesCount = guess.size\n        val gamesCount = game.size\n        val ",
  "        val gameScores = game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n\
    \        val guessesWithScores = guessScores.zip(gameScores)\n        val guessesWithScores\
    \ = guessesWithScores.toList\n        val guessesWithScores = guessesWithScores.sortBy(_._1)\n\
    \        val guessesWithScores = guessesWithScores.reverse\n        val guessesWithScores\
    \ = guessesWithScores.map(x => x._2 - x._1)\n        val guessesWithScores = guessesWithScores.map(x\
    \ => if (x == 0) 0 else x)\n        guessesWithScores", "        val guesses =\
    \ guess.toSet\n        val scores = game.toSet\n        val results = new mutable.HashSet[Long]()\n\
    \        val guessesWithScores = guess.zip(game)\n        guessesWithScores.foreach\
    \ { case (guess, score) =>\n            if (guesses.contains(guess)) {\n     \
    \           results.add(score)\n            }\n        }\n        results.toList.map(_.abs)",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ guessesWithScore = guesses.map(x => (x, scores(x)))\n        val guessesWithScoreSortedByScore\
    \ = guessesWithScore.sortBy(_._2)\n        val guessesWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScore.map(x => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScore.sortBy(_._1)\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScore.map(x => (x._1, x._2))\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedBy",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toList\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => (index, score) }.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreKeys\
    \ = gameScoreMap.keySet\n        val guessesScoreKeys = guessesScoreMap.keySet\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessesScoreValues\
    \ = guessesScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessesScoreKeySet = guessesScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessesScoreValueSet = guessesScoreValues.toSet\n\
    \        val gameScoreKeySetSet = gameScoreKeySet.toSet\n        val guessesScoreKeySetSet\
    \ = guessesScoreKeySet.toSet\n        val gameScoreValueSetSet = gameScoreValueSet.toSet\n\
    \        val guessesScoreValueSetSet = guessesScoreValueSet.toSet\n        val\
    \ gameScoreKeySetSetSet = gameScoreKeySetSet.toSet\n        val guessesScoreKeySetSetSet\
    \ = guessesScoreKeySetSet.toSet\n        val gameScoreValueSetSetSet = gameScoreValueSetSet.toSet\n\
    \        val guessesScoreValueSetSetSet = guessesScoreValueSetSet.toSet\n    \
    \    val gameScoreKeySetSetSetSet = gameScoreKeySetSetSet.toSet\n        val guessesScoreKeySetSetSetSet\
    \ = guessesScoreKeySetSetSet.toSet\n        val gameScoreValueSetSetSetSet = gameScoreValueSetSetSet.toSet\n\
    \        val guessesScoreValueSetSetSetSet = guessesScoreValueSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSetSet.toSet\n  \
    \      val guessesScoreKeySetSetSetSetSet = guessesScoreKeySetSetSetSet.toSet\n\
    \        val gameScoreValueSetSetSetSetSet = gameScoreValueSetSetSetSet.toSet\n\
    \        val guessesScoreValueSetSetSetSetSet = guessesScoreValueSetSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSetSet = gameScoreKeySetSetSet", "      \
    \  val guessesWithScore = game.zip(guess)\n        val guessesWithScoreSortedByScore\
    \ = guessesWithScore.sortBy(_._1)\n        val guessesWithScoreSortedByScoreReversed\
    \ = guessesWithScoreSortedByScore.reverse\n        val guessesWithScoreSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversed.sortBy(_._2)\n        val guessesWithScoreSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScore.reverse\n        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversed.sortBy(_._3)\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReverse", "   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScore = guess.zip(game).map { case (guess,\
    \ score) => (guess, score) -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score -> index -> score -> index }.toMap\n   \
    \     val guessesWithScoreAnd", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map {\
    \ case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index ", "        val gameScores = game.zipWithIndex.map{case (score,\
    \ index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessScoreList\
    \ = guessScoreMap.values.toList\n        val gameScoreDiffs = gameScoreList.zip(guessScoreList).map{case\
    \ (gameScore, guessScore) => Math.abs(gameScore - guessScore)}.toList\n      \
    \  val gameScoreDiffsMap = gameScoreDiffs.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n \
    \       val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n  \
    \      val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n   \
    \     val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n    \
    \    val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n     \
    \   val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n      \
    \  val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n       \
    \ val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val\
    \ gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap\
    \ = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap =\
    \ gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2\
    \ != 0).toMap\n        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 !=\
    \ 0).toMap\n        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n\
    \        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n \
    \       val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex.map { case (diff, index) => diff }\n        val\
    \ guessScoreDiffs = guessScoreDiff.zipWithIndex.map { case (diff, index) => diff\
    \ }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n        val guessScoreDiffsSum\
    \ = guessScoreDiffs.sum\n        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbs.diff\n        val guessScoreDiffsSumAbsDiff = guessScoreDiffsSumAbs.diff\n\
    \        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n\
    \        val guessScoreDiffsSumAbsDiffsSum = guessScoreDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbs = guessScoreDiffsSumAbsDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbs.diff\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbsDiff = guessScoreDiffsSumAbsDiffsSumAbs.diff\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexes = guess.zipWithIndex.map { case (score, index)\
    \ => index }.toMap\n        val guessesWithScoreAndIndex = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithIndexesAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesAndScoreAndScore = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score -> score }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index -> index -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }.toList\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScoreMap =\
    \ guessScores.groupBy(_._1).map { case (score, index) => index -> score }.toMap\n\
    \        val gameScores = gameScoreMap.map { case (index, score) => (index, gameScoreMap.get(index)\
    \ - score) }.toList\n        val guessScores = guessScoreMap.map { case (index,\
    \ score) => (index, guessScoreMap.get(index) - score) }.toList\n        val gameScores\
    \ = gameScores.sortBy(_._2).reverse\n        val guessScores = guessScores.sortBy(_._2).reverse\n\
    \        val gameScores = gameScores.map { case (index, score) => Math.abs(score)\
    \ }\n        val guessScores = guessScores.map { case (index, score) => Math.abs(score)\
    \ }\n        gameScores ++ guessScores", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val guessesScore = guessesScores.foldLeft(0L)\
    \ { (sum, score) => sum + score }\n        val diffs = guessesScores.map { case\
    \ (score, index) => Math.abs(score - gameScore) }\n        diffs.zipWithIndex.map\
    \ { case (diff, index) => diff + gameScores.get(index) }", "        val guesses\
    \ = guess.toSet\n        val scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val scoreDiff = scores.toList.zip(guess.toList).map { case (score, guess)\
    \ => abs(score - guess) }\n        val guesseDiff = guesses.toList.zip(scores.toList).map\
    \ { case (guess, score) => abs(guess - score) }\n        guesseDiff.foreach {\
    \ diff =>\n            if (diff == 0) {\n                result ++= scoreDiff\n\
    \            } else {\n                result ++= diff\n            }\n      \
    \  }\n        result.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map {\
    \ case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndIndex = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score ", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithIndexes = guess.zipWithIndex.map { case (guess, index) =>\
    \ guess -> index }.toMap\n        val guessesWithIndexesWithScores = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guesses", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffDiff\
    \ = gameScoreDiffCount - guessScoreDiffCount\n        val guessScoreDiffDiff =\
    \ guessScoreDiffCount - gameScoreDiffCount\n        val gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffDiff = gameScoreDiffDiffCount - guessScoreDiffDiffCount\n \
    \       val guessScoreDiffDiffDiff = guessScoreDiffDiffCount - gameScoreDiffDiffCount\n\
    \        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map {\
    \ case (score, index) => score }\n        val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffDiffCount = guessScoreDiffDiffDiffs.count\n   \
    \     val gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiffCount - guessScoreDiffDiffDiffCount\n\
    \        val guessScoreDiffDiffDiffDiff = guessScoreDiffDiffDiffCount - gameScoreDiffDiffDiffCount\n\
    \        val gameScoreDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffDiffDiffs =\
    \ guessScoreDiffDiffDiff.zipWithIndex.map { case (score, index) => score }\n \
    \       val gameScore", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreList = gameScoreList.map { case\
    \ (score, index) => score }\n        val guessesScoreList = guessesScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList\
    \ = gameScoreList.map { case score => score }\n        val guessesScoreList =\
    \ guessesScoreList.map { score => score }\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList\
    \ = gameScoreList.map { case score => score }\n        val guessesScoreList =\
    \ guessesScoreList.map { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList\
    \ = gameScoreList.map { case score => score }\n        val guessesScoreList =\
    \ guessesScoreList.map { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList\
    \ = gameScoreList.map { case score => score }\n        val guessesScoreList =\
    \ guessesScoreList.map { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList\
    \ = gameScoreList.map { case score => score }\n        val guessesScoreList =\
    \ guessesScoreList.map { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList\
    \ = gameScoreList.map { case score => score }\n        val guessesScoreList =\
    \ guessesScore", "        val guesses = gues\n        val scores = game\n    \
    \    val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new Array[Long](guessesCount)\n        var i = 0\n     \
    \   while (i < guessesCount) {\n            val guess = guesses(i)\n         \
    \   val score = scores(i)\n            val difference = abs(guess - score)\n \
    \           result(i) = difference\n            i += 1\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreSum = gameScores.sum\n        val\
    \ guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum -\
    \ guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n \
    \       val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        ", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val guessesScores = guess.zipWithIndex.map(x => x._1\
    \ + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n     \
    \   val guessesScoreKeys = guessesScoreMap.keys\n        val gameScoreValues =\
    \ gameScoreMap.values\n        val guessesScoreValues = guessesScoreMap.values\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessesScoreKeySet\
    \ = guessesScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValues.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessesScoreKeysSet = guessesScoreKeySet.toSet\n\
    \        val gameScoreValuesSet = gameScoreValueSet.toSet\n        val guessesScoreValuesSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeysSet.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValuesSet.toSet\n        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeysSet.toSet\n        val gameScoreValuesSet = gameScoreValuesSet.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n        val\
    \ gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet =\
    \ guessesScoreKeysSet.toSet\n        val gameScoreValuesSet = gameScoreValuesSet.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n        val\
    \ gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet =\
    \ guessesScoreKeysSet.toSet\n        val gameScoreValuesSet = gameScoreValuesSet.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n        val\
    \ gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKey", " \
    \       val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ results = new mutable.ListBuffer[Long]()\n        val correct = scores.toSet.subsetOf(guesses)\n\
    \        val wrong = guesses.subsetOf(scores)\n        val correctCount = correct.size\n\
    \        val wrongCount = wrong.size\n        val correctPercentage = correctCount\
    \ * 100 / scores.size\n        val wrongPercentage = wrongCount * 100 / guesses.size\n\
    \        val correctPercentageInt = correctPercentage.toInt\n        val wrongPercentageInt\
    \ = wrongPercentage.toInt\n        val correctPercentagePercentage = correctPercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentage = wrongPercentageInt * 100\
    \ / 100\n        val correctPercentagePercentageInt = correctPercentagePercentage.toInt\n\
    \        val wrongPercentagePercentageInt = wrongPercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentage = correctPercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentageInt = wrongPercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentage = correctPercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentage = wrongPercentagePercentageInt\
    \ * 100 / 100\n        val correctPercentagePercentagePercentageInt = correctPercentagePercentagePercentage.toInt\n\
    \        val wrongPercentagePercentagePercentageInt = wrongPercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentage = correctPercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentageInt = wrongPercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentage = correctPercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentagePercentage = wrongPercentagePercentagePercentageInt\
    \ * 100 / 100\n        val correctPercentagePercentagePercentagePercentageInt\
    \ = correctPercentagePercentagePercentagePercentage.toInt\n        val wrongPercentagePercentagePercentagePercentageInt\
    \ = wrongPercentagePercentagePercentagePercentage.toInt\n        val correctPercentagePercentagePercentagePercentagePercentage\
    \ = correctPercentagePercentagePercentagePercentageInt * 100 / 100\n        val\
    \ wrongPercentagePercentagePercentagePercentageInt = wrongPercentagePercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentagePercentage = correctPercentagePercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentagePercentageInt =\
    \ wrongPercentagePercentagePercentagePercentage.toInt\n        val correctPercentagePercentagePercentagePercentagePercentage\
    \ = correctPercentagePercentagePercentagePercentageInt * 100 / 100\n        val\
    \ wrongPercentagePercentagePercentagePercentagePercentageInt = wrongPercentagePercentagePercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentagePercentage = correctPercentagePercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentagePercentageInt =\
    \ wrongPercentagePercentagePercentage", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap2 = gameScoreMap.map{case (score, index) => score.toLong}.toList\n\
    \        val guessScoreMap2 = guessScoreMap.map{case (score, index) => score.toLong}.toList\n\
    \        val gameScoreMap3 = gameScoreMap2.zipWithIndex.map{case (score, index)\
    \ => score}.toList\n        val guessScoreMap3 = guessScoreMap2.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap4 = gameScoreMap3.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap4 = guessScoreMap3.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap5 = gameScoreMap4.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap5 = guessScoreMap4.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap6 = gameScoreMap5.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap6 = guessScoreMap5.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap7 = gameScoreMap6.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap7 = guessScoreMap6.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap8 = gameScoreMap7.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap8 = guessScoreMap7.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap9 = gameScoreMap8.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap9 = guessScoreMap8.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap10 = gameScoreMap9.zipWithIndex.map",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessesScore = guessesScores.sum\n\
    \        val diffs = guessesScores.map { case (score, index) => Math.abs(score\
    \ - gameScore) }\n        diffs.zipWithIndex.map { case (diff, index) => diff\
    \ }", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScore = gameScores.sum\n        val guessScore =\
    \ guessScores.sum\n        val diffs = guessScores.zip(gameScores).map { case\
    \ (guess, game) => math.abs(guess - game) }\n        diffs.toList.zipWithIndex.map\
    \ { case (diff, index) => diff * gameScores.apply(index) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val difference\
    \ = guessScore - gameScore\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) =>\n            if (guessScore == gameScore)\
    \ 0\n            else Math.abs(guessScore - gameScore)\n        }\n        differences.toList",
  "        val guesses = guess.length\n        val scores = game.length\n        val\
    \ result = new mutable.ArrayList[Long](guesses)\n        val guessesSoFar = 0\n\
    \        var i = 0\n        while (i < guesses) {\n            val guess = guess(i)\n\
    \            val score = game(i)\n            val diff = Math.abs(guess - score)\n\
    \            if (diff < 0)\n                result.add(diff)\n            else\n\
    \                result.add(i)\n            guessesSoFar += 1\n            i +=\
    \ 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }.toList\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScoreMap =\
    \ guessScores.groupBy(_._1).map { case (score, index) => index -> score }.toMap\n\
    \        val gameScoreArray = gameScores.map { case (score, index) => index ->\
    \ score }.toArray\n        val guessScoreArray = guessScores.map { case (score,\
    \ index) => index -> score }.toArray\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guess", "       \
    \ val gameScores = game.zipWithIndex.map { case (score, index) => score - guess(index)\
    \ }\n        val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScoreKeys\
    \ = guessesScores.keys.toList\n        val gameScoreKeys = gameScores.keys.toList\n\
    \        val guessesScoreKeysSet = guessesScoreKeys.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeys.toSet\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val gameScoreDiff = gameScore\
    \ - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n     \
    \   val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(x => x.toLong)\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArray.length\n    \
    \    val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScore", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreCount = gameScores.count\n        val\
    \ guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = gameScoreDiffPercent + guessScoreDiffPercent\n\
    \        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiff", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score - guess(index) }\n        val gameScore = gameScores.sum\n \
    \       val guessesWithScore = gameScores.zipWithIndex.map { case (score, index)\
    \ => guess(index) }\n        val guessesWithScoreWithCorrect = guessesWithScore.zipWithIndex.map\
    \ { case (score, index) =>\n            if (score == gameScore) 0\n          \
    \  else abs(score - gameScore)\n        }\n        guessesWithScoreWithCorrect.map\
    \ { case (score, index) => guess(index) }", "        val guesses = gues\n    \
    \    val scores = game\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new Array[Long](guessesCount)\n        var\
    \ i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val diff = abs(guess - score)\n\
    \            if (diff > 0) {\n                result(i) = diff\n            }\
    \ else {\n                result(i) = -diff\n            }\n            i += 1\n\
    \        }\n        result", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess"]
stop_tokens:
- "\n    }\n"
