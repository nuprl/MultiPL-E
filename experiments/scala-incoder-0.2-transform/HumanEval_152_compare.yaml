name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two arrays of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return an array of the same length denoting how\
  \ far off each guess was. If they have guessed correctly,\n    // the value is 0,\
  \ and if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong,\
  \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
  \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesCorrect\
    \ = guessesScores.filter(_._1 == gameScores.values.toSet.size).map(_._2)\n   \
    \     val guessesIncorrect = guessesScores.filter(_._1 != gameScores.values.toSet.size).map(_._2)\n\
    \        val guessesDiff = guessesIncorrect diff guessesCorrect\n        val guessesDiffWithIndex\
    \ = guessesDiff.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val guessesDiffWithIndexSortedByIndex = guessesDiffWithIndex.sortBy(_._1)\n\
    \        val guessesDiffWithIndexSortedByIndexWithCorrect = guessesDiffWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrect.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n     \
    \   val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWith",
  "        val gameScores = game.zipWithIndex.map(_.swap)\n        val guessesScores\
    \ = guess.zipWithIndex.map(_.swap)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreKeys\
    \ = gameScoreMap.keySet\n        val guessesScoreKeys = guessesScoreMap.keySet\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeys.toSet\n        val gameScoreKeysSetSet = gameScoreKeysSet.intersect(guessesScoreKeysSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\
    \        val gameScoreKeysSetSetSet = gameScoreKeysSet", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n \
    \       val guessScoreListSize = guessScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = game", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        ", "        val gameScores\
    \ = game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n   \
    \     val guessesScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ - game(index) }\n        gameScores.zip(guessesScores).map{ case (gameScore,\
    \ guessesScore) => gameScore - guessesScore }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - gameScoreCount\n        val guessScoreDiff = guessScoreSum - guessScoreCount\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray = Array.ofDim[Long](gameScoreCount)\n\
    \        val guessScoreDiffAbsArray = Array.ofDim[Long](guessScoreCount)\n   \
    \     var i = 0\n        while (i < gameScoreCount) {\n            gameScoreDiffAbsArray(i)\
    \ = gameScoreDiffAbs\n            guessScoreDiffAbsArray(i) = guessScoreDiffAbs\n\
    \            i += 1\n        }\n        val gameScoreDiffArray = Array.ofDim[Long](gameScoreCount)\n\
    \        val guessScoreDiffArray = Array.ofDim[Long](guessScoreCount)\n      \
    \  var j = 0\n        while (j < guessScoreCount) {\n            gameScoreDiffArray(j)\
    \ = gameScoreDiff\n            guessScoreDiffArray(j) = guessScoreDiff\n     \
    \       j += 1\n        }\n        val gameScoreDiffArrayAbs = gameScoreDiffArray.zip(gameScoreDiffArray).map\
    \ { case (gameScoreDiff, gameScoreDiffAbs) => gameScoreDiff }\n        val guessScoreDiffArrayAbs\
    \ = guessScoreDiffArray.zip(guessScoreDiffArray).map { case (guessScoreDiff, guessScoreDiffAbs)\
    \ => guessScoreDiff }\n        val gameScoreDiffArrayAbsArray = gameScoreDiffArrayAbs.zip(gameScoreDiffArrayAbs).map\
    \ { case (gameScoreDiffAbs, gameScoreDiffAbsArray) => gameScoreDiffAbs }\n   \
    \     val guessScoreDiffArrayAbsArray = guessScoreDiffArrayAbs.zip(guessScoreDiffArrayAbs).map\
    \ { case (guessScoreDiffAbs, guessScoreDiffArrayAbsArray) => guessScoreDiffAbs\
    \ }\n        val gameScoreDiffArrayAbsArraySum = gameScoreDiffArrayAbsArray.sum\n\
    \        val guessScoreDiffArrayAbsArraySum = guessScoreDiffArrayAbsArray.sum\n\
    \        val gameScoreDiffArray", "        val gameScores = game.map(_.toLong)\n\
    \        val guessScores = guess.map(_.toLong)\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiff", "        val guessesCount = guess.size\n       \
    \ val gameCount = game.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gameScore = game.foldLeft(0L) { (sum, score) => sum + score }\n \
    \       val guessScore = guess.foldLeft(0L) { (sum, guess) => sum + guess }\n\
    \        var gameGuess = 0\n        var guessGuess = 0\n        var gameDiff =\
    \ 0\n        var guessDiff = 0\n        var gameDiffCount = 0\n        var guessDiffCount\
    \ = 0\n        var gameDiffCountMax = 0\n        var guessDiffCountMax = 0\n \
    \       var gameDiffCountMin = 0\n        var guessDiffCountMin = 0\n        var\
    \ gameDiffCountMaxMax = 0\n        var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMin\
    \ = 0\n        var guessDiffCountMinMin = 0\n        var gameDiffCountMaxMin =\
    \ 0\n        var guessDiffCountMaxMin = 0\n        var gameDiffCountMinMax = 0\n\
    \        var guessDiffCountMinMax = 0\n        var gameDiffCountMaxMax = 0\n \
    \       var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMinMax = 0\n\
    \        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax =\
    \ 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMax\
    \ = 0\n        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax\
    \ = 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var game", "      \
    \  val gameScores = game.zipWithIndex.map { case (score, index) => score -> index\
    \ }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> index }.toMap\n  \
    \      val guessesWithIndexesWithScores = guessesWithIndexes.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexes\
    \ = guessesWithIndexesWithScores.map { case (score, index) => index -> index }.toMap\n\
    \        val guessesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexes.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWith",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList: List[Long] = gameScoreMap.keySet.toList.sortBy(_._1).reverse.map(x\
    \ => gameScoreMap.get(x))\n        val guessScoreList: List[Long] = guessScoreMap.keySet.toList.sortBy(_._1).reverse.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map(x\
    \ => Math.abs(x(0) - x(1)))\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val gameScoreDiffListMap = gameScoreDiffList.groupBy(x => x).toMap\n\
    \        val gameScoreDiffListMapKeys = gameScoreDiffListMap.keys\n        val\
    \ gameScoreDiffListMapValues = gameScoreDiffListMap.values\n        val gameScoreDiffListMapValuesList\
    \ = gameScoreDiffListMapValues.map(x => x.toList)\n        val gameScoreDiffListMapValuesListSorted\
    \ = gameScoreDiffListMapValuesList.toList.sortBy(_._1).reverse\n        val gameScoreDiffListMapValuesListSortedMap\
    \ = gameScoreDiffListMapValuesListSorted.groupBy(x => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMap.keys\n        val gameScoreDiffListMapValuesListSortedMapValues\
    \ = gameScoreDiffListMapValuesListSortedMap.values\n        val gameScoreDiffListMapValuesListSortedMapValuesList\
    \ = gameScoreDiffListMapValuesListSortedMapValues.map(x => x.toList)\n       \
    \ val gameScoreDiffListMapValuesListSortedMapValuesListSorted = gameScoreDiffListMapValuesListSortedMapValuesList.toList.sortBy(_._1).reverse\n\
    \        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMap = gameScoreDiffListMapValuesListSortedMapValuesListSorted.groupBy(x\
    \ => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys.keys\n    \
    \    val gameScoreDiffListMapValuesList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score - guess(index) }\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score - game(index) }\n    \
    \    gameScores.zip(guessesScores).map { case (gameScore, guessesScore) => if\
    \ (gameScore == 0) 0 else abs(gameScore - guessesScore) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ gameScoreArray = gameScores.map { case (score, index) => index -> score }.toArray\n\
    \        val guessScoreArray = guessScores.map { case (score, index) => index\
    \ -> score }.toArray\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case (score, index) => index -> score.size }.toMap\n        val\
    \ guessScoreArrayMap = guessScoreArray.groupBy(x => x).map { case (score, index)\
    \ => index -> score.size }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x\
    \ => x).map { case ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessesScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessesWithIndex = guessesScores.zipWithIndex.map{case\
    \ (score, index) => index}.toList\n        val gameWithIndex = gameScores.zipWithIndex.map{case\
    \ (score, index) => index}.toList\n        val gameWithIndexAndScores = gameWithIndex.zip(gameScores).toList\n\
    \        val guessesWithIndexAndScores = guessesWithIndex.zip(guessesScores).toList\n\
    \        val gameWithIndexAndScoreAndIndex = gameWithIndexAndScores.zip(guessesWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => gameScores(index)\
    \ -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n        val guessesWithIndexesSortedSortedByScore\
    \ = guessesWithIndexesSorted.toSeq.sortBy(_._2).reverse\n        val guessesWithIndexesSortedSortedByScoreAndGuess\
    \ = guessesWithIndexesSortedSortedByScore.map { case (index, score) => (index,\
    \ score, guessesWithIndexesSortedSortedByScoreAndGuess(index)) }\n        val\
    \ guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly = guessesWithIndexesSortedSortedByScoreAndGuess.map\
    \ { case (index, score, guess) => (index, score, guess, guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly(index))\
    \ }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuess\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore.map\
    \ { case (index, score, guess, guessSortedByScoreAndGuess) => (index, score, guess,\
    \ guessSortedByScoreAndGuess(index)) }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuessAndGuessedCorrectly\
    \ = guessesWithIndexesSortedSortedByScoreAndGue", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val ", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }.toList\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).map { case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val gameScoreDiff = gameScore - guessScore\n        val gameScoreDiffs\
    \ = gameScoreDiff.zipWithIndex.map { case (score, index) => Math.abs(score - gameScore)\
    \ }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map { case (score,\
    \ index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map\
    \ { case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScore"]
stop_tokens:
- "\n    }\n"
