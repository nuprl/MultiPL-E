name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
  name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
  name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        val chars = words.map(_.toCharArray).flatten.toSet\n      \
    \  val maxChars = chars.max\n        val maxWord = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.toCharArray.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed.reverse\n   \
    \     val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed",
  "        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxKey\
    \ = counts.maxBy(_._1)._1\n        val maxValue = counts.maxBy(_._1)._2\n    \
    \    val maxWord = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCount = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue))\n        val maxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount))\n        val maxWordWithMaxCountWithMaxValueWithMaxKey\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWord = words.filter(x\
    \ => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord))\n        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord) && x.toCharArray.map(_.toInt).contains(maxCount))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && ", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                uniqueChars += char\n            })\n        })\n    \
    \    uniqueChars.foreach(char => {\n            maxChars += char -> uniqueChars.count(_\
    \ == char)\n        })\n        val maxKey = maxChars.keys.max\n        val maxValue\
    \ = maxChars(maxKey)\n        val maxWord = words.filter(word => maxChars(word)\
    \ == maxValue).head\n        val maxWordWithMaxChars = words.filter(word => maxChars(word)\
    \ == maxValue).sortWith(_.compareToIgnoreCase(maxWord))\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(word\
    \ => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))",
  "        val counts = words.map(x => x.toCharArray.map(x => x.toInt).count(_ ==\
    \ 1))\n        val maxCount = counts.max\n        val maxChars = counts.filter(x\
    \ => x == maxCount).max\n        val maxWord = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount).min\n        val maxWords = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount)\n        val maxWordsSorted = maxWords.sortWith((x,\
    \ y) => x.toCharArray.count(_ == y.toCharArray.max) - y.toCharArray.count(_ ==\
    \ x.toCharArray.max))\n        val maxWordsSortedFirst = maxWordsSorted.head\n\
    \        val maxWordsSortedFirstChars = maxWordsSortedFirst.toCharArray.max\n\
    \        val maxWordsSortedFirstCharsCount = maxWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWord = maxWordsSortedFirstCharsCount.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSorted = maxWordsSortedFirstCharsCountInWords.sortWith((x,\
    \ y) => x - y)\n        val maxWordsSortedFirstCharsCountInWordsSortedFirst =\
    \ maxWordsSortedFirstCharsCountInWordsSorted.head\n        val maxWordsSortedFirstCharsCountInWordsSortedFirstChars\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirst.toCharArray.max\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount = maxWordsSortedFirstCharsCountInWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord =\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount.toInt\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted.sortWith((x,\
    \ y) => x - y)\n        ", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n       \
    \ val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n \
    \       val maxWordWithMaxCount = words.filter(w => w.toCharArray.forall(c =>\
    \ c == maxChar) && w.count(_ == maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(_._2)._2 ==\
    \ maxWordWithMaxCount.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(", "      \
    \  val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueChars = maxWord.sortWith((a, b) => a.compareTo(b)\
    \ > 0).head\n        val maxWordWithMaxUniqueCharsLexicographicalOrder = maxWordWithMaxUniqueChars.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        maxWordWithMaxUniqueCharsLexicographicalOrder",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2\
    \ < _._2)\n        val maxCharsSorted = maxCharsSorted.toSeq.sortWith(_._1 < _._1)\n\
    \        maxCharsSorted.head._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max)\n  \
    \      val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head ==\
    \ words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLex = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head\
    \ == words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLexInLexInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString ", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _ == maxWord(0))\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxChars(0))\n      \
    \  val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(_.length\
    \ == maxChars && _ == maxWordWithMaxCharsFirst(1))\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrder(1))\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder(1))\n\
    \        maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWords\
    \ = words.filter(_.toCharArray.contains(maxChars))\n        val maxWord = maxWords.head\n\
    \        val maxCharCount = maxWords.map(_.toCharArray).map(_.length).max\n  \
    \      val maxCharCountWord = words.filter(_.toCharArray.contains(maxCharCount)).head\n\
    \        val maxCharCountWordLength = maxCharCountWord.toCharArray.map(_.length).max\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxChar",
  "        val counts = words.map(word => word.count(_ == 'a')).toList\n        val\
    \ maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_\
    \ == 'a') == maxCount).head\n        val maxWordCount = maxWord.count(_ == 'a')\n\
    \        if (maxWordCount == maxCount) {\n            maxWord\n        } else\
    \ {\n            words.filter(word => word.count(_ == 'a') == maxWordCount).head\n\
    \        }", "        val uniqueChars = words.map(_.length).distinct\n       \
    \ val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length ==\
    \ maxChars && w.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(w => w.length\
    \ == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.head\n        val\
    \ maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.head\n      \
    \  val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail", "    \
    \    val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        unique.find(_ == maxCount) match {\n            case Some(count) => maxWord\n\
    \            case None => words.head\n        }", "        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).reverse.mkString(\"\")", "        val unique\
    \ = mutable.HashSet[String]()\n        val maxCount = 0\n        val maxWord =\
    \ word(0)\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxCount) {\n                maxCount = count\n\
    \                maxWord = word\n            }\n            unique += word\n \
    \       })\n        maxWord", "        val unique = words.map(x => x.toSet).reduce(_\
    \ ++ _)\n        val maxCount = unique.max\n        val maxWord = words.filter(x\
    \ => x.toSet.size == maxCount).sortBy(x => x.toSet).head\n        maxWord", " \
    \       val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n        val maxWordWithMaxCharsAndFirstChar\
    \ = maxWordWithMaxChars.map(_.charAt(0))\n        val maxWordWithMaxCharsAndFirstCharAndFirstWord\
    \ = maxWordWithMaxCharsAndFirstChar.zip(maxWordWithMaxCharsAndFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstChar).map(_._2)\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWord.sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord.zip(maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).map(_._2)\n   \
    \     val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                maxChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars -= c\n                } else {\n        \
    \            uniqueChars += c\n                }\n            })\n        })\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (maxChars.contains(c)) {\n                    maxChars -= c\n      \
    \          } else {\n                    maxChars += c\n                }\n  \
    \          })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                if (uniqueChars.contains(c)) {\n                    if\
    \ (maxChars.contains(c)) {\n                        maxWord = word :: maxWord\n\
    \                    } else {\n                        maxWord = word :: maxWord\n\
    \                    }\n                } else {\n                    if (maxChars.contains(c))\
    \ {\n                        maxWord = word :: maxWord\n                    }\
    \ else {\n                        maxWord = word :: maxWord\n                \
    \    }\n                }\n            })\n        })\n        maxWord.head"]
stop_tokens:
- "\n    }\n"
