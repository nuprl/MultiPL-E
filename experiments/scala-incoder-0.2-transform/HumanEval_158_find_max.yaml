name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
  name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
  name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        val chars = words.map(_.toCharArray).flatten.toSet\n      \
    \  val maxChars = chars.max\n        val maxWord = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.toCharArray.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed.reverse\n   \
    \     val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed",
  "        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxKey\
    \ = counts.maxBy(_._1)._1\n        val maxValue = counts.maxBy(_._1)._2\n    \
    \    val maxWord = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCount = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue))\n        val maxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount))\n        val maxWordWithMaxCountWithMaxValueWithMaxKey\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWord = words.filter(x\
    \ => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord))\n        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord) && x.toCharArray.map(_.toInt).contains(maxCount))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && ", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                uniqueChars += char\n            })\n        })\n    \
    \    uniqueChars.foreach(char => {\n            maxChars += char -> uniqueChars.count(_\
    \ == char)\n        })\n        val maxKey = maxChars.keys.max\n        val maxValue\
    \ = maxChars(maxKey)\n        val maxWord = words.filter(word => maxChars(word)\
    \ == maxValue).head\n        val maxWordWithMaxChars = words.filter(word => maxChars(word)\
    \ == maxValue).sortWith(_.compareToIgnoreCase(maxWord))\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(word\
    \ => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))",
  "        val counts = words.map(x => x.toCharArray.map(x => x.toInt).count(_ ==\
    \ 1))\n        val maxCount = counts.max\n        val maxChars = counts.filter(x\
    \ => x == maxCount).max\n        val maxWord = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount).min\n        val maxWords = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount)\n        val maxWordsSorted = maxWords.sortWith((x,\
    \ y) => x.toCharArray.count(_ == y.toCharArray.max) - y.toCharArray.count(_ ==\
    \ x.toCharArray.max))\n        val maxWordsSortedFirst = maxWordsSorted.head\n\
    \        val maxWordsSortedFirstChars = maxWordsSortedFirst.toCharArray.max\n\
    \        val maxWordsSortedFirstCharsCount = maxWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWord = maxWordsSortedFirstCharsCount.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSorted = maxWordsSortedFirstCharsCountInWords.sortWith((x,\
    \ y) => x - y)\n        val maxWordsSortedFirstCharsCountInWordsSortedFirst =\
    \ maxWordsSortedFirstCharsCountInWordsSorted.head\n        val maxWordsSortedFirstCharsCountInWordsSortedFirstChars\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirst.toCharArray.max\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount = maxWordsSortedFirstCharsCountInWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord =\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount.toInt\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted.sortWith((x,\
    \ y) => x - y)\n        ", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n       \
    \ val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n \
    \       val maxWordWithMaxCount = words.filter(w => w.toCharArray.forall(c =>\
    \ c == maxChar) && w.count(_ == maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(_._2)._2 ==\
    \ maxWordWithMaxCount.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(", "      \
    \  val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueChars = maxWord.sortWith((a, b) => a.compareTo(b)\
    \ > 0).head\n        val maxWordWithMaxUniqueCharsLexicographicalOrder = maxWordWithMaxUniqueChars.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        maxWordWithMaxUniqueCharsLexicographicalOrder",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2\
    \ < _._2)\n        val maxCharsSorted = maxCharsSorted.toSeq.sortWith(_._1 < _._1)\n\
    \        maxCharsSorted.head._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max)\n  \
    \      val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head ==\
    \ words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLex = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head\
    \ == words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLexInLexInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString ", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _ == maxWord(0))\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxChars(0))\n      \
    \  val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(_.length\
    \ == maxChars && _ == maxWordWithMaxCharsFirst(1))\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrder(1))\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder(1))\n\
    \        maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWords\
    \ = words.filter(_.toCharArray.contains(maxChars))\n        val maxWord = maxWords.head\n\
    \        val maxCharCount = maxWords.map(_.toCharArray).map(_.length).max\n  \
    \      val maxCharCountWord = words.filter(_.toCharArray.contains(maxCharCount)).head\n\
    \        val maxCharCountWordLength = maxCharCountWord.toCharArray.map(_.length).max\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxChar",
  "        val counts = words.map(word => word.count(_ == 'a')).toList\n        val\
    \ maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_\
    \ == 'a') == maxCount).head\n        val maxWordCount = maxWord.count(_ == 'a')\n\
    \        if (maxWordCount == maxCount) {\n            maxWord\n        } else\
    \ {\n            words.filter(word => word.count(_ == 'a') == maxWordCount).head\n\
    \        }", "        val uniqueChars = words.map(_.length).distinct\n       \
    \ val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length ==\
    \ maxChars && w.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(w => w.length\
    \ == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversed = words.sortBy(_.length).reverse.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed = words.sortBy(_.length).reverse.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.head\n        val\
    \ maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.head\n      \
    \  val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail", "    \
    \    val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        unique.find(_ == maxCount) match {\n            case Some(count) => maxWord\n\
    \            case None => words.head\n        }", "        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).reverse.mkString(\"\")", "        val unique\
    \ = mutable.HashSet[String]()\n        val maxCount = 0\n        val maxWord =\
    \ word(0)\n        words.foreach(word => {\n            val count = unique.count(_\
    \ == word)\n            if (count > maxCount) {\n                maxCount = count\n\
    \                maxWord = word\n            }\n            unique += word\n \
    \       })\n        maxWord", "        val unique = words.map(x => x.toSet).reduce(_\
    \ ++ _)\n        val maxCount = unique.max\n        val maxWord = words.filter(x\
    \ => x.toSet.size == maxCount).sortBy(x => x.toSet).head\n        maxWord", " \
    \       val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n        val maxWordWithMaxCharsAndFirstChar\
    \ = maxWordWithMaxChars.map(_.charAt(0))\n        val maxWordWithMaxCharsAndFirstCharAndFirstWord\
    \ = maxWordWithMaxCharsAndFirstChar.zip(maxWordWithMaxCharsAndFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstChar).map(_._2)\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWord.sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord.zip(maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).map(_._2)\n   \
    \     val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                maxChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars -= c\n                } else {\n        \
    \            uniqueChars += c\n                }\n            })\n        })\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (maxChars.contains(c)) {\n                    maxChars -= c\n      \
    \          } else {\n                    maxChars += c\n                }\n  \
    \          })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                if (uniqueChars.contains(c)) {\n                    if\
    \ (maxChars.contains(c)) {\n                        maxWord = word :: maxWord\n\
    \                    } else {\n                        maxWord = word :: maxWord\n\
    \                    }\n                } else {\n                    if (maxChars.contains(c))\
    \ {\n                        maxWord = word :: maxWord\n                    }\
    \ else {\n                        maxWord = word :: maxWord\n                \
    \    }\n                }\n            })\n        })\n        maxWord.head",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortBy(_.length)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstIndex = maxWordWithMaxChars.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.charAt(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val max", "        val uniqueChars = words.map(_.length).distinct\n \
    \       val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b._2 - a._2).head._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last\n      \
    \  val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last +\n        \
    \    words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.", "        val uniqueChars = mutable.Map[Char, Int]()\n  \
    \      val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(char => {\n                uniqueChars += (char -> 1)\n\
    \            })\n        })\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                val count = uniqueChars(char).asInstanceOf[Int]\n    \
    \            if (count > maxChar(char).asInstanceOf[Int]) {\n                \
    \    maxChar(char) = count\n                }\n            })\n        })\n  \
    \      maxChar.keys.toList.sortWith(_ < _).head", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        words.foreach(word => {\n       \
    \     word.foreach(char => {\n                val count = uniqueChars(char)\n\
    \                if (count > maxChar(char)) {\n                    maxChar(char)\
    \ = count\n                }\n            })\n        })\n        val maxCharCount\
    \ = maxChar.maxBy(_._2)\n        words.find(word => uniqueChars(word.charAt(0))\
    \ == maxCharCount(0))", "        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val uniqueChars = chars.toList\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        val maxWord = maxWords.head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordChars = maxWord.map(_.toChar).count(_ == maxChars)\n     \
    \   if (maxWordChars > maxWordLength) {\n            findMax(maxWords)\n     \
    \   } else {\n            maxWord\n        }", "        val unique = words.map(_.length).distinct\n\
    \        val maxUnique = unique.max\n        val maxIndex = unique.indexOf(maxUnique)\n\
    \        val maxWord = words(maxIndex)\n        val maxChar = maxWord.distinct\n\
    \        val maxCharIndex = unique.indexOf(maxChar)\n        val maxCharWord =\
    \ words(maxCharIndex)\n        if (maxCharWord.length > maxWord.length) maxWord\n\
    \        else maxCharWord", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars += c -> (maxChars.getOrElse(c, 0) + 1)\n            })\n\
    \        })\n        uniqueChars.maxBy(maxChars)", "        val counts = words.map(word\
    \ => word.distinct.length).distinct\n        val maxCount = counts.max\n     \
    \   val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\"\
    \ \")", "        val unique = words.map(_.length).distinct\n        val maxCount\
    \ = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        words.take(maxWordIndex).mkString(\"\
    \ \")", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n          \
    \  word.foreach(c => {\n                uniqueChars += c\n                maxChars(c)\
    \ = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n        val maxCharsSorted\
    \ = maxChars.toSeq.sortWith(_._2 > _._2)\n        val maxCharsSortedWithCount\
    \ = maxCharsSorted.map(_._1)\n        val maxCharsSortedWithCountReversed = maxCharsSortedWithCount.reverse\n\
    \        val maxCharsSortedWithCountReversedWithMax = maxCharsSortedWithCountReversed.filter(_._2\
    \ == maxCharsSortedWithCountReversed.max)\n        val maxCharsSortedWithCountReversedWithMaxWithFirst\
    \ = maxCharsSortedWithCountReversedWithMax.head\n        val maxCharsSortedWithCountReversedWithMaxWithFirstIndex\
    \ = maxCharsSortedWithCountReversedWithMaxWithFirst.indexOf(_._1)\n        val\
    \ maxCharsSortedWithCountReversedWithMaxWithFirstChar = maxCharsSortedWithCountReversedWithMaxWithFirst.charAt(maxCharsSortedWithCountReversedWithMaxWithFirstIndex)\n\
    \        val maxCharsSortedWithCountReversedWithMaxWithFirstCharAsString = maxCharsSortedWithCountReversedWithMaxWithFirstChar.toString\n\
    \        maxCharsSortedWithCountReversedWithMaxWithFirstCharAsString", "     \
    \   val chars = words.map(_.toChar).distinct\n        val maxChars = chars.max\n\
    \        val maxWord = words.filter(_.toChar == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.toChar == maxChars)\n        val maxWordWithMaxCharsSortedByLex\
    \ = maxWordWithMaxChars.sortBy(_.toString.toLowerCase)\n        val maxWordWithMaxCharsSortedByLexFirst\
    \ = maxWordWithMaxCharsSortedByLex.head\n        val maxWordWithMaxCharsSortedByLexLast\
    \ = maxWordWithMaxCharsSortedByLex.last\n        val maxWordWithMaxCharsSortedByLexFirstChar\
    \ = maxWordWithMaxCharsSortedByLexFirst.toString.charAt(0)\n        val maxWordWithMaxCharsSortedByLexLastChar\
    \ = maxWordWithMaxCharsSortedByLexLast.toString.charAt(0)\n        if (maxWordWithMaxCharsSortedByLexFirstChar\
    \ > maxWordWithMaxCharsSortedByLexLastChar) {\n            maxWordWithMaxCharsSortedByLexFirstChar\n\
    \        } else {\n            maxWordWithMaxCharsSortedByLexLastChar\n      \
    \  }", "        val uniqueChars = words.map(_.length).distinct\n        val maxChars\
    \ = uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(words.indexOf(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
  "        val counts = words.map(word => word.distinct).map(_.size).toList\n    \
    \    val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.size\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n\
    \        val maxWordCharsIndex = maxWord.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordChar", "      \
    \  val unique = words.foldLeft(Map[Char, Int]())((map, word) => {\n          \
    \  val chars = word.map(c => c.toInt)\n            val count = chars.foldLeft(0)((count,\
    \ c) => count + c)\n            map + (chars.maxBy(_ == 0) -> (count + 1))\n \
    \       })\n        val max = unique.maxBy(_._2)._1\n        words.find(w => w.toInt\
    \ == max).getOrElse(\"\")", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars += c -> 1\n            })\n        })\n        val maxKey\
    \ = maxChars.keys.max\n        val maxValue = maxChars(maxKey)\n        words.find(word\
    \ => uniqueChars.size == word.length && uniqueChars.forall(c => word.contains(c))).getOrElse(maxKey)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n\
    \        words.find(word => word.contains(maxKey))", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                uniqueChars(char) match {\n                    case Some(count)\
    \ => uniqueChars(char) match {\n                        case Some(count) => count\
    \ + 1\n                        case None => 1\n                    }\n       \
    \             case None => uniqueChars(char) = uniqueChars(char) + 1\n       \
    \         }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars += c -> 1\n       \
    \     })\n        })\n        val maxKey = maxChars.keys.max\n        val maxValue\
    \ = maxChars(maxKey)\n        words.find(word => uniqueChars.size == word.length\
    \ && uniqueChars.forall(c => word.contains(c))).getOrElse(maxKey)", "        val\
    \ chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(_._2\
    \ == maxCount).map(_._1).mkString(\"\")\n        val maxWord = words.find(_.toString.toCharArray.mkString(\"\
    \") == maxChars)\n        if (maxWord.isEmpty) \"\" else maxWord.get", "     \
    \   val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueChars = maxWord.head\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = maxWordWithMaxUniqueChars.charAt(0)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = maxWordWithMaxUniqueCharsFirstCharIndex + 1\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = maxWordWithMaxUniqueCharsFirstCharIndex + 1\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = maxWordWithMaxUniqueCharsFirstCharIndex + 1\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = maxWordWithMaxUniqueCharsFirstCharIndex + 1\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n        val maxWordWithMaxUniqueCharsFirstChar\
    \ = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n        val maxWordWithMaxUniqueCharsFirstCharIndex\
    \ = maxWordWithMaxUnique", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n  \
    \      })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => uniqueChars.count(_ == word(0)) == maxChars(maxChar))", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val max",
  "        val counts = words.map(word => word.distinct.length).distinct\n       \
    \ val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(word => word.distinct.length\
    \ == maxCount).sortBy(word => word.distinct).head\n        val maxWordWithCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.distinct.length\
    \ == maxCount).sortBy(word => word.distinct).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWith",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(w => w.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWord", "        val unique = words.map(x => x.distinct).flatten\n\
    \        val maxCount = unique.map(x => x.size).max\n        val maxWord = unique.filter(x\
    \ => x.size == maxCount).head\n        unique.filter(x => x.size == maxCount).sortWith(_\
    \ < _).head", "        val uniqueChars = words.map(_.length).distinct\n      \
    \  val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChars = counts.filter(c => c._2 == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChars)).head\n\
    \        val maxWordWithCount = words.filter(w => w.toCharArray.forall(c => c\
    \ == maxChars && w.count(_ == c) == maxCount)).head\n        val maxWordWithCountWithMaxChars\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max)).head\n        val maxWordWithCountWithMaxCharsAndMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max)).head\n        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max && w.max == w.max)).head\n\
    \        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord = words.filter(w\
    \ => w.toCharArray.forall(c => c == maxChars && w.count(_ == c) == maxCount &&\
    \ w.max == w.max && w.head == w.max && w.max == w.max && w.max == w.max)).head\n\
    \        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max && w.max == w.max && w.max\
    \ == w.max && w.max == w.max)).head\n        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max && w.max == w.max && w.max\
    \ == w.max && w.max == w.max && w.max == w.max)).head\n        val maxWord", " \
    \       val counts = words.map(word => word.distinct.length).distinct\n      \
    \  val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordString = words.filter(word => word.distinct.length == maxCount).map(word\
    \ => word + \",\").mkString(\"\")\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        words.filter(word => word.distinct.length == maxCount).map(word => word\
    \ + \",\").mkString(\"\")", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w =>\
    \ w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(w => w.length == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w > maxWord && w < maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(w => w.length\
    \ == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst && w < maxWordWithMaxCharsFirstWithMaxChars)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst && w\
    \ < maxWordWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = words.filter(w\
    \ => w.length == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst && w\
    \ < maxWordWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ && w < maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst\
    \ && w < maxWordWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ && w < maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w > maxWord && w < maxWordWithMaxChars",
  "        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = ", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n  \
    \          word.foreach(c => {\n                uniqueChars(c) match {\n     \
    \               case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n   \
    \                 case None => uniqueChars(c) = 1\n                }\n       \
    \     })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0)\
    \ + 1\n            })\n        })\n        val maxCharsCount = maxChars.values.max\n\
    \        val maxCharsKey = maxChars.keys.max\n        val maxCharsValue = maxChars(maxCharsKey)\n\
    \        val maxCharsKeyString = maxCharsKey.toString\n        val maxCharsValueString\
    \ = maxCharsValue.toString\n        val maxCharsKeyInt = maxCharsKey.toInt\n \
    \       val maxCharsValueInt = maxCharsValue.toInt\n        val maxCharsKeyLong\
    \ = maxCharsKey.toLong\n        val maxCharsValueLong = maxCharsValue.toLong\n\
    \        val maxCharsKeyFloat = maxCharsKey.toFloat\n        val maxCharsValueFloat\
    \ = maxCharsValue.toFloat\n        val maxCharsKeyDouble = maxCharsKey.toDouble\n\
    \        val maxCharsValueDouble = maxCharsValue.toDouble\n        val maxCharsKeyChar\
    \ = maxCharsKey.toChar\n        val maxCharsValueChar = maxCharsValue.toChar\n\
    \        val maxCharsKeyString = maxCharsKey.toString\n        val maxCharsValueString\
    \ = maxCharsValue.toString\n        val maxCharsKeyInt = maxCharsKey.toInt\n \
    \       val maxCharsValueInt = maxCharsValue.toInt\n        val maxCharsKeyLong\
    \ = maxCharsKey.toLong\n        val maxCharsValueLong = maxCharsValue.toLong\n\
    \        val maxCharsKeyFloat = maxCharsKey.toFloat\n        val maxCharsValueFloat\
    \ = maxCharsValue.toFloat\n        val maxCharsKeyDouble = maxCharsKey.toDouble\n\
    \        val maxCharsValueDouble = maxCharsValue.toDouble\n        val maxCharsKeyChar\
    \ = maxCharsKey.toChar\n        val maxCharsValueChar = maxCharsValue.toChar\n\
    \        val maxCharsKeyString = maxCharsKey.toString\n        val maxCharsValueString\
    \ = maxCharsValue.toString\n        val maxCharsKeyInt = maxCharsKey.toInt\n \
    \       val maxCharsValueInt = maxCharsValue", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxChars.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = ", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars += char\n        })\n        maxChars.foreach(char\
    \ => {\n            val word = words.filter(w => w.contains(char))\n         \
    \   if (word.length > maxWord.size) {\n                maxWord = word\n      \
    \      }\n        })\n        maxWord.head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars = words.map(word\
    \ => word.distinct).reduceLeft(_ ++ _)\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.head", "        val counts\
    \ = words.map(word => word.count(_ == 'a')).toList\n        val maxCount = counts.max\n\
    \        val maxWord = counts.find(_ == maxCount).map(_ => words.find(_ == _)).get\n\
    \        val maxWordWithCount = words.find(_ == maxWord).get\n        val maxWordWithCountWithMaxCount\
    \ = words.find(_ == maxWordWithCount).get\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCount).get\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCount).get\n        val\
    \ maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.find(_\
    \ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n \
    \       val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWith", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWords = words.filter(_.length == maxChars)\n        val maxWord =\
    \ maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWords\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last\n      \
    \  val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords =\
    \ words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAnd",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(w => w.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxChars", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1 \n            maxChars += c -> count\n      \
    \  })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value > _.value).last\n\
    \        val maxCharsSortedKey = maxCharsSorted._1 \n        val maxCharsSortedValue\
    \ = maxCharsSorted._2 \n        words.find(word => word.toSet.size == uniqueChars.size).map(word\
    \ => word.toSet.contains(maxCharsSortedKey)).getOrElse(false)", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWords = words.filter(w => w.length == maxChars)\n        val maxWord\
    \ = maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsWithMaxChars\
    \ = maxWordWithMaxChars.sortBy(_.length).head\n        val maxWordWithMaxCharsWithMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxChars.sortBy(_.length).head\n        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxChars.sortBy(_.length).head\n       \
    \ val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxChars = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMax", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    uniqueChars.toList.sortWith(_ < _).head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n    \
    \    val maxWords = words.filter(_ != maxWord)\n        val maxWordsIndex = words.indexOf(maxWords)\n\
    \        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n", "   \
    \     val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc, word)\
    \ =>\n                val chars = word.map(c => c.toInt)\n                val\
    \ count = chars.foldLeft(0)(_ + _)\n                (chars.toMap, count)\n   \
    \     }\n        val maxCount = counts.max\n        val maxChars = counts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxWord = words.filter(_._2.toInt == maxCount).map(_._1)\n\
    \        val maxWords = if (maxWord.size == 1) maxWord else maxWord.sortWith((a,\
    \ b) => a.compareTo(b) < 0)\n        val maxWordString = maxWords.mkString(\"\"\
    )\n        val maxWordChars = maxChars.mkString(\"\")\n        val maxWordString\
    \ = if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWordChars else maxWordString + maxWordChars\n        val maxWordString =\
    \ if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWordChars else maxWordString + maxWordChars\n        val maxWordString =\
    \ if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWordChars else maxWordString + maxWordChars\n        val maxWordString =\
    \ if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWord",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ counts = words.map(word => word.distinct).groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_._2 ==\
    \ maxCount).get._1\n        val maxWords = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxWordsSorted = maxWords.sortWith(_ < _)\n        if (maxWordsSorted.length\
    \ == 1) maxWordsSorted.head else maxWordsSorted.head", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a,\
    \ b) => a._2 < b._2)\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n\
    \        val maxCharsSortedLast = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirst)\n        val maxCharsSortedLastIndex =\
    \ words.indexOf(maxCharsSortedLast)\n        val maxCharsSortedFirstChar = maxCharsSortedFirst.charAt(0)\n\
    \        val maxCharsSortedLastChar = maxCharsSortedLast.charAt(0)\n        if\
    \ (maxCharsSortedFirstIndex < maxCharsSortedLastIndex) {\n            words.take(maxCharsSortedFirstIndex\
    \ + 1)\n        } else if (maxCharsSortedFirstIndex > maxCharsSortedLastIndex)\
    \ {\n            words.drop(maxCharsSortedLastIndex + 1)\n        } else {\n \
    \           words\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars(c) = maxChars(c).max(uniqueChars(c))\n            })\n\
    \        })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars.length)", "        val unique = words.map(x\
    \ => x.distinct).flatten\n        val maxCount = unique.map(x => x.size).max\n\
    \        val maxWord = unique.filter(x => x.size == maxCount).head\n        unique.filter(x\
    \ => x.size == maxCount).sortBy(x => x.head).head", "        val uniqueChars =\
    \ words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n     \
    \   val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n       \
    \ val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.last\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,max",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ counts = words.map(word => word.distinct.length).distinct\n        val maxCount\
    \ = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = ", " \
    \       val unique = words.map(x => x.toSet).reduce(_ ++ _)\n        val maxCount\
    \ = words.map(x => x.toSet).reduce(_.size)\n        val maxWord = words.filter(x\
    \ => x.toSet.size == unique).sortBy(x => x.toSet.size).head\n        val maxWordCount\
    \ = words.filter(x => x.toSet.size == unique).map(x => x.toSet.size).max\n   \
    \     val maxWordCountIndex = words.filter(x => x.toSet.size == unique).map(x\
    \ => x.toSet.size).indexOf(maxWordCount)\n        val maxWordCountIndexInWords\
    \ = words.indexOf(maxWord, maxWordCountIndex)\n        val maxWordInWords = words.indexOf(maxWord,\
    \ maxWordCountIndexInWords)\n        val maxWordInWordsIndex = words.indexOf(maxWordInWords)\n\
    \        val maxWordInWordsIndexInWords = words.indexOf(maxWordInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndex = words.indexOf(maxWordInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWords = words.indexOf(maxWordInWordsIndexInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndex = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWords = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndex = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWords =\
    \ words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndex\
    \ = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWords\
    \ = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val ", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1 \n            maxChars += c -> count\n        })\n        val maxCharsSorted\
    \ = maxChars.toSeq.sortWith(_.value > _.value)\n        val maxCharsSortedFirst\
    \ = maxCharsSorted.head\n        val maxCharsSortedFirstKey = maxCharsSortedFirst._1\n\
    \        val maxCharsSortedFirstValue = maxCharsSortedFirst._2\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirstKey)\n        val maxCharsSortedFirstWord\
    \ = words(maxCharsSortedFirstIndex)\n        if (maxCharsSortedFirstValue == words.size)\
    \ {\n            maxCharsSortedFirstWord\n        } else {\n            findMax(words)\
    \ //recurse\n        }", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val unique = chars.distinct\n        val count = unique.toSet.size\n\
    \        if (count > 1) unique.max\n        else words.min", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    uniqueChars.toList.sortWith(_.compareTo(_) > 0).head", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.toSeq.sortWith(_._2\
    \ > _._2).head._1", "        val uniqueChars = mutable.Map[Char, Int]()\n    \
    \    words.foreach(word => {\n            word.foreach(c => {\n              \
    \  uniqueChars += (c -> uniqueChars(c) + 1)\n            })\n        })\n    \
    \    uniqueChars.maxBy(_._2)._1", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            if (maxChars.contains(c)) {\n                maxWord.clear()\n\
    \                maxWord.add(c)\n            }\n            else {\n         \
    \       maxChars += c\n            }\n        })\n        if (maxWord.size ==\
    \ 1) {\n            maxWord.head\n        }\n        else {\n            maxWord.headOption.getOrElse(\"\
    \")\n        }", "        val unique = words.map(x => x.distinct).distinct\n \
    \       val maxCount = unique.max\n        unique.find(x => x.size == maxCount).head",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWord", "        val counts = words.map(word => word.count(_\
    \ == 'a')).toList\n        val maxCount = counts.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).head\n        val maxWordCount = maxWord.count(_\
    \ == 'a')\n        if (maxWordCount == maxCount) {\n            maxWord\n    \
    \    } else {\n            val maxWordWithCount = words.filter(word => word.count(_\
    \ == 'a') == maxWordCount).head\n            val maxWordWithCountCount = maxWordWithCount.count(_\
    \ == 'a')\n            if (maxWordWithCountCount == maxCount) {\n            \
    \    maxWordWithCount\n            } else {\n                words.filter(word\
    \ => word.count(_ == 'a') == maxWordWithCountCount).head\n            }\n    \
    \    }", "        val unique = words.map(x => x.distinct).flatten.toSet\n    \
    \    val maxCount = words.map(x => x.distinct).flatten.toSet.max\n        val\
    \ maxWord = words.filter(x => x.distinct.size == maxCount).min\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        words(maxWordIndex)", "        val unique\
    \ = mutable.HashSet[Char]()\n        val maxWord = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val uniqueChars = word.distinct\n\
    \            uniqueChars.foreach(unique.add(_))\n            if (uniqueChars.size\
    \ > max.size) {\n                maxWord.append(word)\n            }\n       \
    \ }\n        if (maxWord.size == 1) {\n            maxWord.head\n        } else\
    \ {\n            maxWord.sortWith((x, y) => x.size < y.size)\n               \
    \     .head\n        }", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n   \
    \     val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed =\
    \ words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReverse",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxUniqueChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxUniqueChars)\n\
    \        val maxWordWithMaxUniqueChars = maxWord.sortWith((a, b) => a.compareTo(b)\
    \ > 0).head\n        val maxWordWithMaxUniqueCharsLexicographicallyFirst = maxWordWithMaxUniqueChars.sortWith((a,\
    \ b) => a.compareTo(b) > 0).head\n        maxWordWithMaxUniqueCharsLexicographicallyFirst",
  "        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val max\
    \ = unique.max\n        val index = unique.indexOf(max)\n        words(index)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ = maxChars + (c -> count)\n        })\n        val maxKey = maxChars.maxBy(_._2)\n\
    \        words.find(word => word.toSet.size == uniqueChars.size).map(word => word.toSet.contains(maxKey)).getOrElse(false)",
  "        val counts = words.map(word => word.distinct.length).distinct\n       \
    \ val maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n \
    \       val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val max", "        val unique\
    \ = words.map(x => x.toSet).reduce(_|)\n        val maxUnique = unique.max\n \
    \       val maxIndex = unique.indexOf(maxUnique)\n        words(maxIndex)", " \
    \       val chars = words.map(_.toCharArray).flatten\n        val unique = chars.distinct\n\
    \        val count = unique.length\n        if (count > 1) {\n            val\
    \ maxCount = unique.max\n            val maxIndex = unique.indexOfMax\n      \
    \      unique.take(maxIndex).mkString(\"\")\n        } else {\n            unique.mkString(\"\
    \")\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars.getOrElse(c, 0) + 1 \n            })\n        })\n\
    \        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word => uniqueChars.count(_\
    \ == word(0)) == maxChars(maxChar))", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   maxChars(char) = uniqueChars.count(_ == char)\n        })\n        uniqueChars.toList.sortWith(_.compareTo(_)\
    \ < 0).head", "        val uniqueChars = words.map(_.length).distinct\n      \
    \  val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).min\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).max\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length\
    \ == maxChars).max max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length ==\
    \ maxChars).max max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord max maxWord\n        ", "        val chars\
    \ = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n\
    \        val maxWordCount = words.count(_.toCharArray.contains(maxChars))\n  \
    \      if (maxWordCount == 1) {\n            maxWord\n        } else {\n     \
    \       val maxWords = words.filter(_.toCharArray.contains(maxChars))\n      \
    \      val maxWordsCount = maxWords.count(_.toCharArray.contains(maxChars))\n\
    \            if (maxWordsCount == 1) {\n                maxWords.head\n      \
    \      } else {\n                val maxWordsSortedByCount = maxWords.sortBy(_.toCharArray.count(_.toCharArray.contains(maxChars)))\n\
    \                maxWordsSortedByCount.head\n            }\n        }", "    \
    \    val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        for (word <- words)\
    \ {\n            val uniqueCharsCount = word.count(c => uniqueChars.contains(c))\n\
    \            val maxCharsCount = word.count(c => maxChars.contains(c))\n     \
    \       if (uniqueCharsCount > maxCharsCount) {\n                maxChars ++=\
    \ word.toSet\n                maxWord += word\n            } else if (uniqueCharsCount\
    \ == maxCharsCount) {\n                maxWord += word\n            }\n      \
    \      uniqueChars ++= word.toSet\n        }\n        if (maxWord.size == 1) {\n\
    \            maxWord.head\n        } else {\n            maxWord.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head\n        }", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n    \
    \    val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxChars.map(_.charAt(0))\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMax", "        val uniqueChars = mutable.HashSet[Char]()\n    \
    \    val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \           maxChars += c -> 0\n            })\n        })\n        uniqueChars.maxBy(maxChars)._1",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWords\
    \ = words.filter(w => w.toCharArray.distinct.size == maxChars)\n        val maxWord\
    \ = maxWords.head\n        val maxWordChars = maxWord.map(_.toCharArray).flatten\n\
    \        val maxWordCharsCount = maxWordChars.distinct\n        val maxWordCharsCount\
    \ = maxWordCharsCount.size\n        if (maxWordCharsCount == maxChars) {\n   \
    \         maxWord\n        } else {\n            val maxWordCharsCountDesc = maxWordCharsCount.sortWith(_\
    \ < _)\n            val maxWordCharsCountDesc = maxWordCharsCountDesc.last\n \
    \           maxWord.take(maxWordCharsCountDesc)\n        }", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.lastIndexOf(_))\n        val maxWordWithMaxCharsLast = words.filter(_.length\
    \ == maxChars && words.indexOf(_) > words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_) && words.indexOf(_)\
    \ < words.indexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.indexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.indexOf(_) && words.indexOf(_) > words.indexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxChars = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_) && words.indexOf(_)\
    \ < words.indexOf(_) && words.indexOf(_) > words.indexOf(_) && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndex",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1 \n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n  \
    \      words.find(word => word.toList.contains(maxKey))", "        val uniqueChars\
    \ = words.foldLeft(Set.empty[Char])((acc, word) => acc ++ word.map(c => c.toChar))\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxChars) == w.size)\n        val maxWordWithMaxChars = words.filter(w\
    \ => w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size)\n \
    \       val maxWordWithMaxCharsSortedByFirstChar = words.filter(w => w.count(_\
    \ == maxChars) == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversed = words.filter(w\
    \ => w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size && w.count(_\
    \ == maxChars) == w.size && w.count(_ == maxChars) == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstChar\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size\
    \ && w.count(_ == maxChars) == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size\
    \ && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size)\n \
    \       val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size\
    \ && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size && w.count(_\
    \ == maxChars) == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && ", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstIndex = words.indexOf(maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstString = words.take(maxWordWithMaxCharsFirstIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsFirstStringLength = maxWordWithMaxCharsFirstString.length\n\
    \        if (maxWordWithMaxCharsFirstStringLength > maxChars) {\n            maxWordWithMaxCharsFirstString\n\
    \        } else {\n            maxWordWithMaxCharsFirst\n        }", "       \
    \ val maxCount = words.foldLeft(0) { (maxCount, word) =>\n            val count\
    \ = word.count('a')\n            if (count > maxCount) count else maxCount\n \
    \       }\n        val maxWord = words.filter(word => word.count(_ == 'a') ===\
    \ maxCount).minBy(_.length)\n        words.filter(word => word.count(_ == 'a')\
    \ === maxCount).minBy(_.length).head", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 1)\n \
    \       val maxWordWithMaxChars = maxWord.filter(word => word.count(_ == maxChars)\
    \ == 1)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n   \
    \     val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.toCharArray).flatten.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsCount = maxWordWithMaxCharsFirstChars.count(_\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstCharsIndex = maxWordWithMaxCharsFirstChars.indexOfMax\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstChars", "        val unique = words.foldLeft(Map[Char,\
    \ Int]())((map, word) => {\n            val uniqueChars = word.distinct\n    \
    \        uniqueChars.foreach(c => map += ((c, map.getOrElse(c, 0) + 1)));\n  \
    \          map\n        })\n        val maxKey = unique.maxBy(_._2)._1\n     \
    \   words.find(word => word.count(_ == maxKey) == unique.count(_ == maxKey))",
  "        val uniqueChars = words.map(word => word.distinct).reduceLeft(_ ++ _)\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxChars = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_\
    \ == maxChars))\n        val maxWordWithMaxCharsFirst = words.filter(word => word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_ == maxChars)).sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirstWithMaxChars = words.filter(word =>\
    \ word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_\
    \ == maxChars)).sortWith(_ < _).take(1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _)\n    \
    \    val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_\
    \ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _).take(1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _).take(1).sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _).take(1).sortWith(_\
    \ < _).take(1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < ", "    \
    \    val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n     \
    \   words.find(word => word.toSet.size == uniqueChars.size).head", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n\
    \        words.find(word => word.contains(maxChar))", "        val unique = words.map(x\
    \ => x.distinct).flatten.toSet\n        val maxCount = unique.max\n        val\
    \ maxWord = words.filter(x => x.distinct.size == maxCount).head\n        val maxWordWithCount\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).head\n\
    \        val maxWordWithCountWithMax = words.filter(x => x.distinct.size == maxCount).sortBy(x\
    \ => x.distinct).last\n        val maxWordWithCountWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last\n        val\
    \ maxWordWithCountWithMaxWithMaxWithMax = words.filter(x => x.distinct.size ==\
    \ maxCount).sortBy(x => x.distinct).last.last.last\n        val maxWordWithCountWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last.last",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && _ == maxWord.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirst.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirst.last.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSorted", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> (uniqueChars(c) match {\n               \
    \     case Some(x) => x + 1\n                    case None => 1\n            \
    \    }))\n            })\n        })\n        uniqueChars.maxBy(_._2)._1", " \
    \       val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLength = words.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversed = words.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLength = words.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversed =\
    \ words.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedBy",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxCount = words.foldLeft(0)\
    \ { (max, word) =>\n            val uniqueCharsCount = word.map(c => c to uniqueChars(c)).foldLeft(0)\
    \ { (max, count) =>\n                if (count > max) count else max\n       \
    \     }\n            if (uniqueCharsCount > max) uniqueCharsCount else max\n \
    \       }\n        words.find(word => uniqueChars.size == word.length).map(word\
    \ => word + uniqueChars.toList.sorted.mkString(\"\"))", "        val chars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            for(c <- word.toCharArray)\
    \ {\n                chars(c) match {\n                    case Some(count) =>\
    \ chars(c) = count + 1\n                    case None => chars(c) = 1\n      \
    \          }\n            }\n        })\n        chars.maxBy(_._2)._1", "    \
    \    val counts = words.map(word => word.count(_ == 'a')).toList\n        val\
    \ maxCount = counts.max\n        val maxWord = words.filter(word => word.count(_\
    \ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).head\n\
    \        val maxWordWithCountWithMaxCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n        val\
    \ maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n        val\
    \ maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMax",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxChar += (c -> 1)\n\
    \            })\n        })\n        val maxKey = maxChar.keys.max\n        val\
    \ maxValue = maxChar.max\n        words.find(word => uniqueChars(word) == maxValue)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c))\n\
    \            })\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a,\
    \ b) => a._2 > b._2)\n        val maxCharsSortedKey = maxCharsSorted.head._1\n\
    \        val maxCharsSortedValue = maxCharsSorted.head._2\n        words.find(word\
    \ => maxCharsSortedValue == uniqueChars(word)).getOrElse(\"\")", "        val\
    \ chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.toCharArray.size == maxChars)\n        val maxWordWithMaxChars = words.filter(w\
    \ => w.toCharArray.size == maxChars && w.toCharArray.sorted == maxWord.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrder = words.filter(w\
    \ => w.toCharArray.sorted == maxWordWithMaxChars.toCharArray.sorted)\n       \
    \ val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar = words.filter(w\
    \ => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxChars.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = max", "        val unique = mutable.HashSet[Char]()\n        val maxCount\
    \ = 0\n        val maxWord = word(0)\n        for(word <- words) {\n         \
    \   for(c <- word) {\n                if(unique.contains(c)) {\n             \
    \       unique.remove(c)\n                } else {\n                    unique.add(c)\n\
    \                }\n            }\n            if(unique.size == maxCount) {\n\
    \                maxCount = unique.size\n                maxWord = word\n    \
    \        }\n        }\n        maxWord", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = uniqueChars.count(_ == char)\n            if (count > maxChars(char))\
    \ {\n                maxChars(char) = count\n            }\n        })\n     \
    \   val maxCharsSorted = maxChars.toSeq.sortWith(_._2 < _._2)\n        val maxCharsSortedKey\
    \ = maxCharsSorted.last._1\n        val maxCharsSortedValue = maxCharsSorted.last._2\n\
    \        val maxCharsSortedKeyIndex = words.indexOf(maxCharsSortedKey)\n     \
    \   val maxCharsSortedValueIndex = words.indexOf(maxCharsSortedValue)\n      \
    \  words(maxCharsSortedKeyIndex)", "        val unique = words.map(x => x.toSet).reduceLeft(_\
    \ ++ _)\n        val maxCount = unique.max\n        val maxWord = unique.filter(x\
    \ => x == maxCount).head\n        val maxWords = unique.filter(x => x == maxCount).sortWith(_\
    \ < _)\n        val maxWordsString = maxWords.mkString(\" \")\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        ", "     \
    \   val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(_.length == maxChars)\n        val maxWord\
    \ = maxWords.head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).head\n        val maxWordWithMaxCharsAndMaxWords = words.filter(_.length\
    \ == maxChars && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords =\
    \ words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWord", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars += c -> 0\n       \
    \     })\n        })\n        uniqueChars.toList.sortWith(_ < _).head", "    \
    \    val uniqueChars = words.foldLeft(Set.empty[Char])((s, word) => s ++ word.map(c\
    \ => c.toChar))\n        val maxChar = uniqueChars.max\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars.length)", "        val unique = words.map(x\
    \ => x.toSet).reduceLeft(_ ++ _)\n        val maxCount = unique.max\n        val\
    \ maxWord = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordString = words.filter(x => x.toSet.size\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        ", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWith", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \        val maxWord = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c)))\n\
    \        val maxWordWithMaxChars = words.filter(w => w.toCharArray.forall(c =>\
    \ maxChars.contains(c) && w.toCharArray.count(_ == c) == maxCount))\n        val\
    \ maxWordWithMaxCharsAndMaxCount = words.filter(w => w.toCharArray.forall(c =>\
    \ maxChars.contains(c) && w.toCharArray.count(_ == c) == maxCount))\n        val\
    \ maxWordWithMaxCharsAndMaxCountAndFirst = words.filter(w => w.toCharArray.forall(c\
    \ => maxChars.contains(c) && w.toCharArray.count(_ == c) == maxCount) && w.toCharArray.takeWhile(_\
    \ == maxChars.head).sorted)\n        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirst\
    \ = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c) && w.toCharArray.count(_\
    \ == c) == maxCount) && w.toCharArray.takeWhile(_ == maxChars.head).sorted &&\
    \ w.toCharArray.takeWhile(_ == maxChars.head).sorted)\n        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirstAndFirst\
    \ = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c) && w.toCharArray.count(_\
    \ == c) == maxCount) && w.toCharArray.takeWhile(_ == maxChars.head).sorted &&\
    \ w.toCharArray.takeWhile(_ == maxChars.head).sorted && w.toCharArray.takeWhile(_\
    \ == maxChars.head).sorted)\n        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c) && w.toCharArray.count(_\
    \ == c) == maxCount) && w.toCharArray.takeWhile(_ == maxChars.head).sorted &&\
    \ w.toCharArray.takeWhile(_ == maxChars.head).sorted && w.toCharArray.takeWhile(_\
    \ == maxChars.head).sorted && w.toCharArray.takeWhile(_ == maxChars.head).sorted)\n\
    \        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirstAndFirst", "      \
    \  val maxCount = words.foldLeft(Map[Char, Int]()){\n            case (acc, word)\
    \ =>\n                val count = acc.getOrElse(word.charAt(0), 0)\n         \
    \       val newCount = count + 1\n                acc.updated(word.charAt(0),\
    \ newCount)\n        }\n        val maxKey = maxCount.keys.max\n        val maxValue\
    \ = maxCount.values.max\n        words.find(word => word.count(_ == maxKey) ==\
    \ maxValue).getOrElse(\"\")", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)\n        words.find(word\
    \ => word.count(_ == maxChar._1))", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \        val maxWord = words.filter(_.toCharArray.forall(maxChars.contains)).head\n\
    \        val maxWordWithCount = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount))\n        val maxWordWithCountSorted = maxWordWithCount.sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountSortedWithMaxCount = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount)).sortBy(_._2).reverse.head\n        val maxWordWithCountSortedWithMaxCountSorted\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCount = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).head\n    \
    \    val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSorted = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).sortBy(_._1).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCount\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).sortBy(_._1).sortBy(_._2).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCountSorted\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).sortBy(_._1).sortBy(_._2).sortBy(_._1).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCount\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars).sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(_.length\
    \ == maxChars).sortWith(_ < _).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWith",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars\
    \ = maxWords.filter(_.length == maxChars)\n        val maxWordWithMaxCharsSortedByLength\
    \ = maxWordWithMaxChars.sortBy(_.length)\n        val maxWordWithMaxCharsSortedByLengthHead\
    \ = maxWordWithMaxCharsSortedByLength.head\n        val maxWordWithMaxCharsSortedByLengthTail\
    \ = maxWordWithMaxCharsSortedByLength.tail\n        val maxWordWithMaxCharsSortedByLengthTailHead\
    \ = maxWordWithMaxCharsSortedByLengthTail.head\n        val maxWordWithMaxCharsSortedByLengthTailTail\
    \ = maxWordWithMaxCharsSortedByLengthTail.tail\n        val maxWordWithMaxCharsSortedByLengthTailTailHead\
    \ = maxWordWithMaxCharsSortedByLengthTailTail.head\n        val maxWordWithMaxCharsSortedByLengthTailTailTail\
    \ = maxWordWithMaxCharsSortedByLengthTailTail.tail\n        val maxWordWithMaxCharsSortedByLengthTailTailTailHead\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTail.head\n        val maxWordWithMaxCharsSortedByLengthTailTailTailTail\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTail.tail\n        val maxWordWithMaxCharsSortedByLengthTailTailTailTailHead\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTailTail.head\n        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTail\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTailTail.tail\n        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailHead\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTailTailTail.head\n        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTail\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTailTailTail.tail\n        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailHead\
    \ = maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailTail.head\n     \
    \   val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailTail = maxWordWith",
  "        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n        val max\
    \ = unique.max\n        val index = unique.indexOf(max)\n        words(index)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = uniqueChars.count(_ == c)\n            if (maxCount.getOrElse(c,\
    \ count) > count) {\n                maxCount.update(c, count)\n            }\n\
    \        })\n        val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n\
    \        words.find(word => word.count(_ == maxKey) == maxValue).head", "    \
    \    val counts = words.foldLeft(Map[Char, Int]()){\n            case (acc, word)\
    \ => word.count(_ == 'a') +: acc ++ word.count(_ == 'a')\n        }\n        val\
    \ maxKey = counts.maxBy(_._2)._1\n        words.find(word => word(maxKey) == maxKey)",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n     \
    \   val maxValue = maxChars(maxKey)\n        val maxWord = words.find(word =>\
    \ word.count(_ == maxKey) == maxValue)\n        maxWord.getOrElse(\"\")", "  \
    \      val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char, uniqueChars(char) + 1)\n            })\n\
    \        })\n        words.foreach(word => {\n            word.foreach(char =>\
    \ {\n                maxChars += (char, maxChars(char) + 1)\n            })\n\
    \        })\n        val maxKey = maxChars.keys.max\n        val maxValue = maxChars.values.max\n\
    \        val maxWord = words.find(word => word.contains(maxKey))\n        if (maxWord.isDefined)\
    \ {\n            val maxWordWithMaxChars = maxWord.get\n            val maxCharsWithMaxValue\
    \ = maxChars.find(_._1 == maxKey).get._2\n            val maxWordWithMaxCharsWithMaxValue\
    \ = maxWordWithMaxChars.find(word => word.contains(maxCharsWithMaxValue))\n  \
    \          if (maxWordWithMaxCharsWithMaxValue.isDefined) {\n                val\
    \ maxWordWithMaxCharsWithMaxValueWithMaxValue = maxWordWithMaxCharsWithMaxValue.get\n\
    \                val maxCharsWithMaxValueWithMaxValue = maxChars.find(_._1 ==\
    \ maxCharsWithMaxValue).get._2\n                val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue\
    \ = maxWordWithMaxCharsWithMaxValueWithMaxValue.find(word => word.contains(maxCharsWithMaxValueWithMaxValue))\n\
    \                if (maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue.isDefined)\
    \ {\n                    val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue\
    \ = maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue.get\n            \
    \        val maxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue = maxChars.find(_._1\
    \ == maxCharsWithMaxValueWithMaxValueWithMaxValue).get._2\n                  \
    \  val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue = maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue.find(word\
    \ => word.contains(maxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue))\n\
    \                    if (maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue.isDefined)\
    \ {\n                        val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValueWithMaxValue\
    \ = maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValueWithMax",
  "        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")",
  "        val chars = words.map(_.toCharArray).flatten.toSet\n        val maxChars\
    \ = chars.max\n        val maxWords = words.filter(_.toCharArray.size == maxChars)\n\
    \        val maxWord = maxWords.head\n        val maxCharCount = maxWords.map(_.toCharArray.size).max\n\
    \        val maxWordWithMaxCharCount = maxWords.find(_.toCharArray.size == maxCharCount)\n\
    \        val maxWordWithMaxCharCountIndex = maxWordWithMaxCharCount.index\n  \
    \      val maxWordWithMaxCharCountValue = maxWordWithMaxCharCount.toList\n   \
    \     val maxWordWithMaxCharCountValueIndex = maxWordWithMaxCharCountValue.index\n\
    \        val maxWordWithMaxCharCountValueValue = maxWordWithMaxCharCountValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueIndex = maxWordWithMaxCharCountValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValue = maxWordWithMaxCharCountValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValueValue = maxWordWithMaxCharCountValueValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValueValue = maxWordWithMaxCharCountValueValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValueValue = maxWordWithMaxCharCountValueValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValueValue = maxWordWithMaxCharCountValueValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValueValue = maxWordWithMaxCharCountValueValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index\n\
    \        val maxWordWithMaxCharCountValueValueValueValue = maxWordWithMaxCharCountValueValueValue.toList\n\
    \        val maxWordWithMaxCharCountValueValueValueIndex = maxWordWithMaxCharCountValueValueValue.index",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.getOrElse(c,\
    \ 0) == 0) uniqueChars += (c -> 1)\n                else uniqueChars(c) += 1\n\
    \            })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.count(_ == maxChar) == uniqueChars(maxChar))",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxCount = uniqueChars.count\n        val maxChar\
    \ = uniqueChars.max\n        val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n\
    \        if (maxCount == uniqueChars.length)\n            maxWord.head\n     \
    \   else\n            words.filter(w => w.toCharArray.contains(maxChar)).sortWith((a,\
    \ b) => a.compareTo(b)).head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last)\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet < _.toSet).head\
    \ < words.toList.sortWith(_.toSet < _.toSet).last)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxWord\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last < words.toList.sortWith(_.toSet < _.toSet).last)\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxWordWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last < words.toList.sortWith(_.toSet < _.toSet).last)\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last ", "        val counts = words.map(word => word.count(_ == 'a')).toArray\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.count(_\
    \ == 'a')\n        val maxWordCharsIndex = maxWordIndex + maxWordLength\n    \
    \    val maxWordCharsLength = maxWordChars\n        if (maxWordCharsIndex < words.length)\
    \ findMax(words.drop(maxWordIndex))\n        else maxWord", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars(c) = maxChars(c).max(uniqueChars(c))\n\
    \            })\n        })\n        uniqueChars.maxBy(maxChars)", "        val\
    \ unique = mutable.HashSet[Char]()\n        val maxCount = 0\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                unique.add(c)\n     \
    \       })\n        })\n        unique.foreach(c => {\n            if (unique.count(_\
    \ == c) > maxCount) {\n                maxCount = unique.count(_ == c)\n     \
    \       }\n        })\n        val maxWord = words.find(word => unique.count(_\
    \ == word(0)) == maxCount)\n        if (maxWord.isEmpty) {\n            \"\"\n\
    \        } else {\n            maxWord(0)\n        }", "        val maxCount =\
    \ words.foldLeft(0) { (max, word) =>\n            val count = word.count(_ ==\
    \ 'a')\n            if (count > max) count else max\n        }\n        val maxWord\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).head\n        val maxWordWithCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).head\n\
    \        val maxWordWithCountWithMaxCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n     \
    \   val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n     \
    \   val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n \
    \       val maxWordWithMaxCharsFirst = maxWordWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars\
    \ && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size\
    \ && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxChars", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLex",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    uniqueChars.toList.sortWith((a, b) => maxChars(a) < maxChars(b)).head", " \
    \       val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n\
    \        val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   maxChars += char\n        })\n        uniqueChars.foreach(char => {\n    \
    \        val count = maxChars.count(_ == char)\n            if (count > maxWord.count(_\
    \ == char)) {\n                maxWord = maxWord.updated(char, char)\n       \
    \     }\n        })\n        maxWord.headOption", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                if (uniqueChars.contains(char))\
    \ {\n                    uniqueChars(char) += 1\n                } else {\n  \
    \                  uniqueChars(char) = uniqueChars(char) + 1\n               \
    \ }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1", "      \
    \  val maxCount = words.map(_.length).max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithUniqueChars = words.filter(_.length == maxWordLength).map(_.toUpperCase).distinct\n\
    \        val maxWordWithUniqueCharsLength = maxWordWithUniqueChars.length\n  \
    \      val maxWordWithUniqueCharsSortedByLength = maxWordWithUniqueChars.sortBy(_.length)\n\
    \        val maxWordWithUniqueCharsSortedByLengthLength = maxWordWithUniqueCharsSortedByLength.length\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirst = maxWordWithUniqueCharsSortedByLength.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstLength = maxWordWithUniqueCharsSortedByLengthFirst.length\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirst = maxWordWithUniqueCharsSortedByLengthFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstLength = maxWordWithUniqueCharsSortedByLengthFirstFirst.length\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirst = maxWordWithUniqueCharsSortedByLengthFirstFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstLength = maxWordWithUniqueCharsSortedByLengthFirstFirstFirst.length\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst = maxWordWithUniqueCharsSortedByLengthFirstFirstFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength =\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.length\n        val\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength =\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.length\n        val\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirstLength\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst.length\n   \
    \     val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirstFirst =\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst.", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n     \
    \   val maxValue = maxChars.find(_._2 == maxChars.maxBy(_._2))._1\n        words.find(word\
    \ => word.contains(maxKey))", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars(char) match {\n                    case Some(count) => uniqueChars(char)\
    \ = count + 1\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxChars\
    \ = counts.filter(x => x._2 == maxCount).keys\n        val maxCharsCount = maxChars.map(_.size).max\n\
    \        val maxCharsIndex = maxChars.zipWithIndex.filter(x => x._2 == maxCharsCount).head._1\n\
    \        val maxCharsIndex = maxCharsIndex.toString.toInt\n        val maxCharsString\
    \ = maxChars(maxCharsIndex)\n        val maxCharsString = maxCharsString.toChar\n\
    \        val maxCharsString = maxCharsString.toUpperCase\n        val maxCharsString\
    \ = maxCharsString.toLower\n        val maxCharsString = maxCharsString.replaceAll(\"\
    [^A-Z]\", \"\")\n        val maxCharsString = maxCharsString.replaceAll(\"[^a-z]\"\
    , \"\")\n        val maxCharsString = maxCharsString.replaceAll(\"[^0-9]\", \"\
    \")\n        val maxCharsString = maxCharsString.replaceAll(\"[^a-zA-Z]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\w]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\s]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\W]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\D]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{L}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{N}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{Z}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{C}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{M}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{P}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{S}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{Z}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{C}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxWord = mutable.ListBuffer[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).foreach(c => {\n            val index = uniqueChars.indexOf(c)\n      \
    \      if (index != -1) {\n                val word = words.filter(w => w.contains(c))\n\
    \                if (word.length > 0) {\n                    val wordWithMaxChars\
    \ = word(0)\n                    val wordWithMaxCharsCount = wordWithMaxChars.count(c\
    \ => uniqueChars.contains(c))\n                    if (wordWithMaxCharsCount >\
    \ maxWord.count(w => w.contains(c))) {\n                        maxWord.clear()\n\
    \                        maxWord.append(wordWithMaxChars)\n                  \
    \  }\n                    maxWord.append(wordWithMaxChars)\n                }\n\
    \            }\n        })\n        if (maxWord.isEmpty) {\n            \"\"\n\
    \        } else {\n            maxWord.sortWith(_ < _).head\n        }", "   \
    \     val unique = words.foldLeft(Set.empty[String])((s, word) => s ++ Set(word))\n\
    \        val maxCount = unique.max\n        val maxWord = unique.find(s => s ==\
    \ maxCount)\n        if (maxCount == 1) maxWord else findMax(words.filter(w =>\
    \ w < maxWord))", "        val uniqueChars = words.map(_.length).distinct\n  \
    \      val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsString", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c)\
    \ = uniqueChars.count(_ == c)\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).head", "        val chars = words.map(_.toCharArray).flatten.toSet\n  \
    \      val count = words.map(_.toCharArray).flatten.toSet.size\n        val maxChar\
    \ = chars.max\n        val maxCount = words.map(_.toCharArray).flatten.toSet.count(maxChar)\n\
    \        val maxWord = if (maxCount > 1) words.filter(_.toCharArray.contains(maxChar)).head\
    \ else words.head\n        val maxWordCount = words.map(_.toCharArray).flatten.toSet.count(maxWord)\n\
    \        val maxWordChar = maxWord.toCharArray\n        val maxWordCharCount =\
    \ words.map(_.toCharArray).flatten.toSet.count(maxWordChar)\n        val maxWordCharCount\
    \ = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount + 1\n   \
    \     val maxWordChar = if (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n\
    \        val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else\
    \ maxWordCharCount + 1\n        val maxWordCharCount = if (maxWordCharCount >\
    \ 1) maxWordCharCount else maxWordCharCount + 1\n        val maxWordChar = if\
    \ (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n        val maxWordCharCount\
    \ = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount + 1\n   \
    \     val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount\
    \ + 1\n        val maxWordChar = if (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n\
    \        val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else\
    \ maxWordCharCount + 1\n        val maxWordCharCount = if (maxWordCharCount >\
    \ 1) maxWordCharCount else maxWordCharCount + 1\n        val maxWordChar = if\
    \ (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n        val maxWordCharCount\
    \ = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount + 1\n   \
    \     val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount\
    \ + 1\n        val maxWordChar = if (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n\
    \        val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else\
    \ maxWordCharCount + 1\n        val maxWordChar", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n     \
    \   val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_ <\
    \ _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_ <\
    \ _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n     \
    \   val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n     \
    \   val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith",
  "        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = if (maxWordIndex == -1)\
    \ words.size else maxWordIndex\n        val maxWord = words.filter(_.length ==\
    \ maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = ", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c)\
    \ = uniqueChars.count(_ == c)\n        })\n        uniqueChars.maxBy(maxChars)",
  "        val unique = words.foldLeft(Map[Char, Int]())((map, word) => {\n      \
    \      val chars = word.map(c => c.toInt)\n            val count = chars.foldLeft(0)((count,\
    \ c) => count + c)\n            val key = chars.max\n            map + (key ->\
    \ (count + 1))\n        })\n        val maxKey = unique.keys.max\n        val\
    \ maxCount = unique(maxKey)\n        val maxWord = words.find(word => unique.keys.contains(word.map(_.toInt).max))\n\
    \        val maxWordString = maxWord.getOrElse(\"\")\n        if (maxCount > unique.keys.max)\
    \ maxWordString\n        else findMax(words.filter(word => unique.keys.contains(word.map(_.toInt).max)))",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex",
  "        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxKey = counts.keys.toList.sortBy(identity).head\n\
    \        val maxValue = counts(maxKey)\n        val maxWord = words.filter(w =>\
    \ w.toCharArray.size == maxValue).sortBy(identity).head\n        val maxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValue = words.filter(w => w.toCharArray.size\
    \ == maxValue).sortBy(identity).head\n        val maxWordWithMaxCountAndMaxValueAndMaxKey\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWord = words.filter(w\
    \ => w.toCharArray.size == maxValue).sortBy(identity).head\n        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValue\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKey\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWord\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKey\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWord",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWord\
    \ = words.filter(_.toCharArray.contains(maxChars)).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordLength = maxWord.length\n     \
    \   val maxWordChars = maxWord.toCharArray\n        val maxWordUniqueChars = uniqueChars.filter(_.toCharArray.contains(maxWordChars)).max\n\
    \        val maxWordMaxChars = maxWordUniqueChars.toCharArray\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxChars)\n        val maxWordMaxCharsLength = maxWordMaxChars.length\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.", "        val chars = words.map(_.toCharArray).flatten\n        val\
    \ counts = chars.groupBy(identity).mapValues(_.size)\n        val maxCount = counts.max\n\
    \        val maxChars = counts.filter(_._2 == maxCount).map(_._1).mkString(\"\"\
    )\n        val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChars)).head\n\
    \        maxWord", "        val unique = words.map(_.length).distinct\n      \
    \  val max = unique.max\n        val index = unique.indexOfMax\n        words(index)",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toLowerCase == maxWord.toLowerCase && words.toLowerCase ==\
    \ maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.toLowerCase\
    \ == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase && words.to",
  "        val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(_.value\
    \ == maxCount).keys.toList\n        val maxWord = words.filter(_.toCharArray.forall(c\
    \ => maxChars.contains(c))).head\n        maxWord", "        val unique = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               unique.getOrElseUpdate(c, 0) + 1\n            })\n        })\n\
    \        unique.maxBy(_._2)._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxLength\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAnd",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars && _ == maxWord)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrder = maxWordWithMaxCharsFirst.sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrder\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars.head\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n    \
    \    uniqueChars.toList.sortWith((a, b) => maxChars(b).compareTo(maxChars(a)))(0)",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordString\
    \ = words.filter(_.length == maxChars).mkString(\"\")\n        if (maxWordIndex\
    \ == 0) maxWordString\n        else words.take(maxWordIndex).mkString(\"\") +\
    \ maxWordString", "        val maxCount = words.foldLeft(0) { (max, word) =>\n\
    \            val count = word.distinct.length\n            if (count > max) count\
    \ else max\n        }\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   words.take(maxWordIndex).mkString(\" \")", "        val unique = words.map(_.length).distinct\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxLength = words.filter(_.length == maxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n      \
    \  val maxWordWithMaxLengthLengthLength = maxWordWithMaxLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLength = maxWordWithMaxLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLengthLength = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthLengthLengthLength", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWords = words.filter(_.length == maxChars)\n        val maxWord =\
    \ maxWords.min\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _ == maxWord)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstIndex = words.indexOf(maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstChars = words.map(_.charAt(maxWordWithMaxCharsFirstIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCount = maxWordWithMaxCharsFirstChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = words.indexOf(maxWordWithMaxCharsFirstChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsChars = words.map(_.charAt(maxWordWithMaxCharsFirstCharsIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCount = maxWordWithMaxCharsFirstCharsChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsCharsIndex = words.indexOf(maxWordWithMaxCharsFirstCharsChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsCharsChars = words.map(_.charAt(maxWordWithMaxCharsFirstCharsCharsIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCount = maxWordWithMaxCharsFirstCharsCharsChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsIndex = words.indexOf(maxWordWithMaxCharsFirstCharsCharsChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsChars = words.map(_.charAt(maxWordWithMaxCharsFirstCharsCharsCharsIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCharsCount = maxWordWithMaxCharsFirstCharsCharsCharsChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCharsIndex = words.indexOf(maxWordWithMaxCharsFirstCharsCharsCharsChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCharsChars = words.map(_.charAt(maxWordWithMaxChars",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    words.foreach(word => {\n            word.foreach(char => {\n           \
    \     val count = uniqueChars(char)\n                if (count > maxChar(char))\
    \ {\n                    maxChar.update(char, count)\n                }\n    \
    \        })\n        })\n        val maxCharList = maxChar.keys.toList.sortWith(_\
    \ < _)\n        val maxCharString = maxCharList.toList.mkString\n        words.find(word\
    \ => maxChar(word.charAt(0)) == maxChar(word.charAt(0))).get", "        val counts\
    \ = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        words.filter(word\
    \ => word.distinct.length == maxCount).take(maxWordIndex).mkString(\" \")", " \
    \       val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n                maxChars += c -> 1\n       \
    \     })\n        })\n        uniqueChars.maxBy(maxChars)._1", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n\
    \        val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n        val maxCharsSortedFirstValue\
    \ = maxCharsSorted.values.toSeq.find(_ == maxCharsSortedFirst._2)\n        val\
    \ maxCharsSortedFirstKeyValue = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1 -> maxCharsSortedFirst._2.toString\n\
    \        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    ,\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    (\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    )\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    [\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    ]\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    {\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    }\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    '\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    \\\"\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    <\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    >\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    ?\", \"\")\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirstKeyValueString.replace(\"\
    !\", \"\")", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ counts = words.map(word => word.distinct).map(_.length).distinct\n        val\
    \ maxCount = counts.max\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordCount = words.filter(word => word.distinct.length\
    \ == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n   \
    \     val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord =\
    \ words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordCount)\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).apply(maxWordIndex)\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordCount)\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).apply(maxWordIndex)\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordCount)\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).apply(maxWordIndex)\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n",
  "        val chars = words.map(_.toCharArray).flatten.toSet\n        val count =\
    \ chars.toSeq.groupBy(identity).mapValues(_.size).toSeq.sortBy(-_._2).head\n \
    \       count.map(_._1).headOption.getOrElse(\"\")", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val max", "        val chars = words.map(_.toCharArray).flatten\n   \
    \     val counts = chars.groupBy(identity).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_.size == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(_.toCharArray.forall(c => c == maxChars)).head\n\
    \        val maxWordWithCount = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w\
    \ => (w, counts.get(w).size))\n        val maxWordWithCountWithMaxCount = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => ", "        val uniqueChars = words.map(word\
    \ => word.distinct).flatten.toSet\n        val maxChars = uniqueChars.max\n  \
    \      val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n  \
    \      val maxWordWithMaxChars = words.filter(word => word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst2\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxCharsFirst3 = words.filter(word => word.count(_ ==\
    \ maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxCharsFirst4 = words.filter(word => word.count(_ ==\
    \ maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst5 = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxCharsFirst6 = words.filter(word => word.count(_ ==\
    \ maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst7 = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == ", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxCount = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordWithCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).head\n        val maxWordWithCountWithUniqueChars\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCount = words.filter(_.length\
    \ == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueChars = words.filter(_.length\
    \ == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueChars\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueChars\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.to",
  "        val unique = words.map(_.length).distinct\n        val maxCount = unique.max\n\
    \        val maxWord = words.filter(_.length == maxCount).min\n        val maxWordLength\
    \ = maxWord.length\n        val maxWordString = maxWord.mkString(\"\")\n     \
    \   val maxWordLength = maxWordLength.toInt\n        val maxWordString = maxWordString.substring(0,\
    \ maxWordLength)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n"]
stop_tokens:
- "\n    }\n"
