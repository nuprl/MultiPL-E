language: scala
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val fruitMap :\
    \ Map[String, Long] = fruits.split(\"\").map(x => (x.toLong, 1)).toMap\n     \
    \   val fruitCount = fruitMap.values.sum\n        val mangoCount = fruitCount\
    \ - apples\n        fruitMap(\"mango\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9h7cs7yy.scala:22:43\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfruitMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = fruits.split(\e[31m\"\
    \"\e[0m).map(\e[36mx\e[0m => (x.toLong, \e[31m1\e[0m)).toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[Long, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").length\n  \
    \      val mangos = fruitsInBasket - oranges\n        val mangoFruits = mangos\
    \ * oranges\n        fruitsInBasket * mangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbxa88e92.scala:24:36 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = fruitsInBasket\
    \ - oranges\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((oranges : String))\n1 error found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges\
    \ - 1\n        val fruits = s.split(\" \")\n        val fruitCount = fruits.length\n\
    \        val appleCount = fruits(0).toInt\n        val orangeCount = fruits(1).toInt\n\
    \        val mangoCount = fruits(2).toInt\n        val totalCount = appleCount\
    \ + orangeCount + mangoCount\n        val appleFruits = appleCount * appleCount\n\
    \        val orangeFruits = orangeCount * orangeCount\n        val mangoFruits\
    \ = mangoCount * mangoCount\n        val totalFruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalMangoFruits = totalFruits - totalCount\n   \
    \     val mangoFruitPercentage = (totalMangoFruits/totalFruits).toInt\n      \
    \  val appleFruitPercentage = (appleFruits/totalFruits).toInt\n        val orangeFruitPercentage\
    \ = (orangeFruits/totalFruits).toInt\n        val totalPercentage = appleFruitPercentage\
    \ + orangeFruitPercentage + mangoFruitPercentage\n        val applePercentage\
    \ = appleFruitPercentage * appleCount\n        val orangePercentage = orangeFruitPercentage\
    \ * orangeCount\n        val mangoPercentage = mangoFruitPercentage * mangoCount\n\
    \        val totalPercentagePercentage = applePercentage + orangePercentage +\
    \ mangoPercentage\n        val totalPercentagePercentagePercentage = totalPercentage/totalCount\n\
    \        val totalPercentagePercentagePercentagePercentage = totalPercentagePercentage/totalFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentage = totalPercentagePercentagePercentage/totalMangoFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentage/totalPercentage\n        val\
    \ totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentage/totalFruits\n    \
    \    val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalMangoFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalPercentage\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage/totalFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentage\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb6_66g6f.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\e\
    [0m = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalPercentage\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpb6_66g6f.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\e\
    [0m = totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage/totalFruits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb6_66g6f.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longe"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = fruits.filter(_\
    \ % 2 == 0).sum\n        val mangoCount = fruits.filter(_ % 2 == 1).sum\n    \
    \    val mangoCount = fruits.filter(_ % 3 == 0).sum\n        val mangoCount =\
    \ fruits.filter(_ % 3 == 1).sum\n        val mangoCount = fruits.filter(_ % 5\
    \ == 0).sum\n        val mangoCount = fruits.filter(_ % 5 == 1).sum\n        val\
    \ mangoCount = fruits.filter(_ % 7 == 0).sum\n        val mangoCount = fruits.filter(_\
    \ % 7 == 1).sum\n        val mangoCount = fruits.filter(_ % 11 == 0).sum\n   \
    \     val mangoCount = fruits.filter(_ % 11 == 1).sum\n        val mangoCount\
    \ = fruits.filter(_ % 13 == 0).sum\n        val mangoCount = fruits.filter(_ %\
    \ 13 == 1).sum\n        val mangoCount = fruits.filter(_ % 17 == 0).sum\n    \
    \    val mangoCount = fruits.filter(_ % 17 == 1).sum\n        val mangoCount =\
    \ fruits.filter(_ % 19 == 0).sum\n        val mangoCount = fruits.filter(_ % 19\
    \ == 1).sum\n        val mangoCount = fruits.filter(_ % 23 == 0).sum\n       \
    \ val mangoCount = fruits.filter(_ % 23 == 1).sum\n        val mangoCount = fruits.filter(_\
    \ % 29 == 0).sum\n        val mangoCount = fruits.filter(_ % 29 == 1).sum\n  \
    \      val mangoCount = fruits.filter(_ % 31 == 0).sum\n        val mangoCount\
    \ = fruits.filter(_ % 31 == 1).sum\n        val mangoCount = fruits.filter(_ %\
    \ 37 == 0).sum\n        val mangoCount = fruits.filter(_ % 37 == 1).sum\n    \
    \    val mangoCount = fruits.filter(_ % 41 == 0).sum\n        val mangoCount =\
    \ fruits.filter(_ % 41 == 1).sum\n        val mangoCount = fruits.filter(_ % 47\
    \ == 0).sum\n        val mangoCount = fruits.filter(_ % 47 == 1).sum\n       \
    \ val mangoCount = fruits.filter(_ % 53 == 0).sum\n        val mangoCount = fruits.filter(_\
    \ % 53 == 1).sum\n        val mangoCount = fruits.filter(_ % 59 == 0).\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsi3c9nsg.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsi3c9nsg.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsi3c9nsg.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ %\
    \ \e[31m3\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsi3c9nsg.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ %\
    \ \e[31m3\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsi3c9nsg.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ %\
    \ \e[31m5\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659794865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples.toLong\n\
    \        val mangos = apples.toLong - oranges.toLong\n        mangos\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpqc12nvxr.scala:19)\n\
    \tat Problem$.main(tmpqc12nvxr.scala:25)\n\tat Problem.main(tmpqc12nvxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").map(_.toInt).sum\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples \"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpz_y68o0g.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpz_y68o0g.scala:20)\n\
    \tat Problem$.main(tmpz_y68o0g.scala:25)\n\tat Problem.main(tmpz_y68o0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \")\n        val\
    \ applesAndOrangesInBasket = applesAndOranges.split(\" \")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val fruitsInBasketCount = fruitsInBasket.length\n\
    \        val mangoFruitsInBasketCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsInBasket = fruitsInBasket.filter(_ == \"mango\")\n   \
    \     val mangoFruitsInBasketCount = mangoFruitsInBasket.length\n        val mangoFruitsInBasketCountInBasket\
    \ = mangoFruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsInBasketInBasket\
    \ = fruitsInBasket.filter(_ == \"mango\").filter(_ == \"mango\")\n        val\
    \ mangoFruitsInBasketCountInBasketInBasket = mangoFruitsInBasketInBasket.length\n\
    \        val mangoFruitsInBasketInBasketCount = mangoFruitsInBasketInBasket.length\n\
    \        val mangoFruitsInBasketInBasketCountInBasket = mangoFruitsInBasketInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val mangoFruitsInBasketInBasketCountInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasket.length\n        val mangoFruitsInBasketInBasketCountInBasketInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasketInBasket.length\n        val mangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasketInBasketInBasket.length\n        val\
    \ mangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasketInBasket = mangoFruitsInBasketInBasketCountIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppuoup23c.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = mangoFruitsInBasket.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppuoup23c.scala:35:104 -----------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketInBasketCountInBasketInBasket\e\
    [0m = mangoFruitsInBasketInBasketCountInBasket.length\n\e[31m\e[31m   |\e[0m \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppuoup23c.scala:38:87\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mmangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasketInBasket\e\
    [0m = mangoFruitsInBasketInBasketCountIn\n\e[31m\e[31m   |\e[0m              \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mangoFruitsInBasketInBasketCountIn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppuoup23c.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \")\n        val\
    \ applesAndOrangesInBasket = applesAndOranges.split(\" \")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val fruitsInBasketCount = fruitsInBasket.length\n\
    \        val mangoFruitsInBasketCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsInBasket = fruitsInBasket.filter(_ == \"mango\")\n   \
    \     val mangoFruitsInBasketCount = mangoFruitsInBasket.length\n        val mangoFruitsInBasketCount\
    \ = mangoFruitsInBasketCount + applesAndOrangesInBasketCount\n        mangoFruitsInBasketCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmjjnsef0.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = mangoFruitsInBasket.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmjjnsef0.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = mangoFruitsInBasketCount + applesAndOrangesInBasketCount\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleAndOranges = fruits.filter(x\
    \ => x >= 0 && x <= n)\n        val mangos = appleAndOranges.filter(x => x % 2\
    \ == 0)\n        mangos.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpky72eud6.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpky72eud6.scala:19)\n\
    \tat Problem$.main(tmpky72eud6.scala:27)\n\tat Problem.main(tmpky72eud6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = new mutable.HashMap[String, Long]()\n      \
    \  basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n\
    \        basket.put(\"mangos\", mangos)\n        basket.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn_o5bfj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.split(\" \").filter(_ != \"\").length\n        val oranges\
    \ = s.split(\" \").filter(_ != \"\").length\n        val mangos = apples - oranges\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj56gvp9s.scala:25)\n\tat Problem.main(tmpj56gvp9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")\n        val oranges = s.split(\"oranges and\
    \ \")\n        val mangos = s.split(\"mango and \")\n        val appleAndOranges\
    \ = apples.zip(oranges).map(x => x._1 + x._2)\n        val mangoAndOranges = mangos.zip(oranges).map(x\
    \ => x._1 + x._2)\n        val appleAndMangos = apples.zip(mangos).map(x => x._1\
    \ + x._2)\n        val orangeAndMangos = oranges.zip(mangos).map(x => x._1 + x._2)\n\
    \        val appleAndOrangesAndMangos = appleAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOranges = appleAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOranges = appleAndOrangesAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangos = appleAndMangosAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangos = appleAndOrangesAndMangosAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangosAndOranges = appleAndMangosAndOrangesAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = appleAndOrangesAndMangosAndOrangesAndMangos.zip(orangeAndMangos).map(x =>\
    \ x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndMangosAndOrangesAndMangosAndOranges.zip(orangeAndMangos).map(x =>\
    \ x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndOrangesAndMangosAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2i1naljl.scala:34:77 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = appleAndOrangesAndMangosAndOrangesAndMangosAnd\n\e[31m\e[31m   |\e[0m  \
    \                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: appleAndOrangesAndMangosAndOrangesAndMangosAnd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2i1naljl.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(0).trim\n        val oranges = s.split(\"\
    oranges and \")(0).trim\n        val mangos = s.split(\"mango and \")(0).trim\n\
    \        val applesAndOranges = apples + oranges\n        val applesAndMangos\
    \ = apples + mangos\n        val orangesAndMangos = oranges + mangos\n       \
    \ val applesAndOrangesAndMangos = applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mang\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmey4q8_.scala:34:145 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\e\
    [0m = applesAndOranges + mang\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                   Not found: mang\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmey4q8_.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val mangos = apples\
    \ - oranges\n        val count = fruits.split(\" \").length\n        val totalFruits\
    \ = apples + oranges + mangos\n        val totalFruitsPerApple = totalFruits /\
    \ apples\n        val totalFruitsPerOrange = totalFruits / oranges\n        val\
    \ totalFruitsPerMango = totalFruits / mangos\n        val totalFruitsPerAppleAndOrange\
    \ = totalFruitsPerApple * oranges\n        val totalFruitsPerAppleAndMango = totalFruitsPerApple\
    \ * mangos\n        val totalFruitsPerOrangeAndMango = totalFruitsPerOrange *\
    \ mangos\n        val totalFruitsPerMangoAndApple = totalFruitsPerMango * apples\n\
    \        val totalFruitsPerMangoAndOrange = totalFruitsPerMango * oranges\n  \
    \      val totalFruitsPerMangoAndMango = totalFruitsPerMango * mangos\n      \
    \  val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange * mangos\n\
    \        val totalFruitsPerAppleAndMangoAndOrange = totalFruitsPerAppleAndMango\
    \ * oranges\n        val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange\
    \ * mangos\n        val totalFruitsPerOrangeAndMangoAndApple = totalFruitsPerOrangeAndMango\
    \ * apples\n        val totalFruitsPerOrangeAndMangoAndOrange = totalFruitsPerOrangeAndMango\
    \ * oranges\n        val totalFruitsPerOrangeAndMangoAndMango = totalFruitsPerOrangeAndMango\
    \ * mangos\n        val totalFruitsPerMangoAndAppleAndOrange = totalFruitsPerMangoAndApple\
    \ * oranges\n        val totalFruitsPerMangoAndAppleAndMango = totalFruitsPerMangoAndApple\
    \ * mangos\n        val totalFruitsPerMangoAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8dezktt.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd8dezktt.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalFruitsPerAppleAndOrangeAndMango\e[0m = totalFruitsPerAppleAndOrange\
    \ * mangos\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitsPerAppleAndOrangeAndMango is already defined as\
    \ \e[33mvalue\e[0m \e[35mtotalFruitsPerAppleAndOrangeAndMango\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd8dezktt.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples + oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpz7qivyzy.scala:19)\n\
    \tat Problem$.main(tmpz7qivyzy.scala:25)\n\tat Problem.main(tmpz7qivyzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpofn40as0.scala:20)\n\
    \tat Problem$.main(tmpofn40as0.scala:25)\n\tat Problem.main(tmpofn40as0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt)\n      \
    \  val fruits = apples + oranges.sum\n        val mangos = fruits.filter(_ % 2\
    \ == 1).length\n        mangos\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp60u49y92.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = fruits.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges\
    \ - 1\n        val fruits = apples + oranges + mangos\n        val basket = s.split(\"\
    \ \")\n        val appleFruits = basket.filter(_.contains(\"apples\")).map(_.toInt)\n\
    \        val orangeFruits = basket.filter(_.contains(\"oranges\")).map(_.toInt)\n\
    \        val mangoFruits = basket.filter(_.contains(\"mango\")).map(_.toInt)\n\
    \        val appleFruitCount = appleFruits.sum\n        val orangeFruitCount =\
    \ orangeFruits.sum\n        val mangoFruitCount = mangoFruits.sum\n        val\
    \ appleFruitPercentage = appleFruitCount / fruits\n        val orangeFruitPercentage\
    \ = orangeFruitCount / fruits\n        val mangoFruitPercentage = mangoFruitCount\
    \ / fruits\n        val mangoFruitPercentage = appleFruitPercentage * orangeFruitPercentage\n\
    \        appleFruitPercentage.toLong + orangeFruitPercentage.toLong + mangoFruitPercentage.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppkc0jm3c.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitPercentage\e[0m\
    \ = appleFruitPercentage * orangeFruitPercentage\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangoFruitPercentage is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitPercentage\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val applesAndOranges =\
    \ apples + oranges\n        val fruitsInBasket = fruits - applesAndOranges\n \
    \       val mangoFruits = fruitsInBasket - oranges\n        mangoFruits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpyttdapjy.scala:20)\n\
    \tat Problem$.main(tmpyttdapjy.scala:28)\n\tat Problem.main(tmpyttdapjy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsAndOranges = fruits + \" \" + oranges\n    \
    \    val fruitsAndApples = fruits + \" \" + apples\n        val applesAndMango\
    \ = apples + \" \" + mango\n        val fruitsAndMango = fruits + \" \" + mango\n\
    \        val fruitsAndMangoAndApples = fruits + \" \" + mango + \" \" + apples\n\
    \        val applesAndMangoAndOranges = apples + \" \" + mango + \" \" + oranges\n\
    \        val fruitsAndMangoAndOranges = fruits + \" \" + mango + \" \" + oranges\n\
    \        val fruitsAndMangoAndOrangesAndApples = fruits + \" \" + mango + \" \"\
    \ + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApplesAndOranges\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples + \" \" + oranges\n\
    \        val fruitsAndMangoAndOrangesAndApplesAndOrangesAndMango = fruits + \"\
    \ \" + mango + \" \" + oranges + \" \" + apples + \" \" + oranges + \" \" + mango\n\
    \        val fruitsAndMangoAndOrangesAndApplesAndOrangesAndMangoAndApples = fruits\
    \ + \" \" + mango + \" \" + oranges + \" \" + apples + \" \" + oranges + \" \"\
    \ + mango + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApplesAndOrangesAndMangoAndApplesAndOranges\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples + \" \" + oranges\
    \ + \" \" + mango + \" \" + apples + \" \" + oranges\n        val fruitsAndMangoAndOrangesAndApplesAndOrangesAndMangoAndApplesAndOrangesAndMango\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples + \" \" + oranges\
    \ + \" \" + mango + \" \" + apples + \" \" + oranges + \" \" + mango\n       \
    \ val fruitsAndMangoAndOrangesAndApplesAndOrangesAndMangoAndApplesAndOrangesAndMangoAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples + \" \" + oranges\
    \ + \" \" + mango + \" \" + apples + \" \" + oranges + \" \" + mango + \" \" +\
    \ apples\n        val fruitsAndMangoAndOrangesAndApplesAndOrangesAndMangoAndApplesAndOrangesAndMangoAndApplesAndOranges\
    \ = fruits + \" \" + mang\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpslr1__.scala:25:44 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mapplesAndMango\e[0m = apples\
    \ + \e[31m\" \"\e[0m + mango\n\e[31m\e[31m   |\e[0m                          \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \             Not found: mango\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprpslr1__.scala:26:44 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mfruitsAndMango\e[0m = fruits + \e[31m\" \"\e[0m\
    \ + mango\n\e[31m\e[31m   |\e[0m                                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: mango\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpslr1__.scala:27:53\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mfruitsAndMangoAndApples\e[0m = fruits + \e[31m\" \"\e[0m + mango + \e[31m\"\
    \ \"\e[0m + apples\n\e[31m\e[31m   |\e[0m                                    \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                     Not found: mango\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprpslr1__.scala:28:54 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mapplesAndMangoAndOranges\e[0m\
    \ = apples + \e[31m\" \"\e[0m + mango + \e[31m\" \"\e[0m + oranges\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                      Not found:\
    \ mango\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpslr1__.scala:29:54\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mfruitsAndMangoAndOranges\e[0m = fruits + \e[31m\" \"\e[0m + mango + \e[31m\"\
    \ \"\e[0m + oranges\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsAndOranges = fruits + \" \" + oranges\n    \
    \    val fruitsAndApples = fruits + \" \" + apples\n        val applesAndMango\
    \ = apples + \" \" + mango\n        val fruitsAndMango = fruits + \" \" + mango\n\
    \        val mangoFruits = fruits.split(\" \").last\n        val applesAndMangoFruits\
    \ = apples + \" \" + mangoFruits\n        val fruitsAndMangoFruits = fruits +\
    \ \" \" + mangoFruits\n        val applesAndMangoFruitsAndOranges = apples + \"\
    \ \" + mangoFruits + \" \" + oranges\n        val fruitsAndMangoFruitsAndOranges\
    \ = fruits + \" \" + mangoFruits + \" \" + oranges\n        val applesAndMangoFruitsAndOrangesAndApples\
    \ = apples + \" \" + mangoFruits + \" \" + oranges + \" \" + apples\n        val\
    \ fruitsAndMangoFruitsAndOrangesAndApples = fruits + \" \" + mangoFruits + \"\
    \ \" + oranges + \" \" + apples\n        val applesAndMangoFruitsAndOrangesAndApplesAndOranges\
    \ = apples + \" \" + mangoFruits + \" \" + oranges + \" \" + apples + \" \" +\
    \ oranges\n        val fruitsAndMangoFruitsAndOrangesAndApplesAndOranges = fruits\
    \ + \" \" + mangoFruits + \" \" + oranges + \" \" + apples + \" \" + oranges\n\
    \        val applesAndMangoFruitsAndOrangesAndApplesAndOrangesAndMango = apples\
    \ + \" \" + mangoFruits + \" \" + oranges + \" \" + apples + \" \" + oranges +\
    \ \" \" + mango\n        val fruitsAndMangoFruitsAndOrangesAndApplesAndOrangesAndMango\
    \ = fruits + \" \" + mangoFruits + \" \" + oranges + \" \" + apples + \" \" +\
    \ oranges + \" \" + mango\n        val applesAndMangoFruitsAndOrangesAndApplesAndOrangesAndMangoFruits\
    \ = apples + \" \" + mangoFruits + \" \" + oranges + \" \" + apples + \" \" +\
    \ oranges + \" \" + mangoFruits\n        val fruitsAndMangoFruitsAndOrangesAndApplesAndOrangesAndMangoFruits\
    \ = fruits + \" \" + \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmoyrrr1x.scala:39:92 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mfruitsAndMangoFruitsAndOrangesAndApplesAndOrangesAndMangoFruits\e\
    [0m = fruits + \e[31m\" \"\e[0m + \n\e[31m\e[31m   |\e[0m                    \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmoyrrr1x.scala:25:44\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndMango\e[0m = apples + \e[31m\" \"\e[0m + mango\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                         Not found: mango\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmoyrrr1x.scala:26:44 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfruitsAndMango\e[0m = fruits\
    \ + \e[31m\" \"\e[0m + mango\n\e[31m\e[31m   |\e[0m                          \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \             Not found: mango\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmoyrrr1x.scala:36:154 -----------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m        \e[33mval\e[0m \e[36mapplesAndMangoFruitsAndOrangesAndApplesAndOrangesAndMango\e\
    [0m = apples + \e[31m\" \"\e[0m + mangoFruits + \e[31m\" \"\e[0m + oranges + \e\
    [31m\" \"\e[0m + apples + \e[31m\" \"\e[0m + oranges + \e[31m\" \"\e[0m + mango\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                             Not found: mango\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compi"
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = fruits.filter(_\
    \ % 2 == 0).sum\n        val mangoFruitCount = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalFruitCount = appleCount + orangeCount + mangoCount\n       \
    \ val totalMangoFruitCount = appleCount + orangeCount + mangoFruitCount\n    \
    \    val totalMangoFruits = totalMangoFruitCount / totalFruitCount\n        val\
    \ totalMangoFruitsPerApple = totalMangoFruitCount / appleCount\n        val totalMangoFruitsPerOrange\
    \ = totalMangoFruitCount / orangeCount\n        val totalMangoFruitsPerMango =\
    \ totalMangoFruitCount / mangoCount\n        val totalMangoFruitsPerAppleAndOrange\
    \ = totalMangoFruitsPerApple + totalMangoFruitsPerOrange\n        val totalMangoFruitsPerAppleAndMango\
    \ = totalMangoFruitsPerApple + totalMangoFruitsPerMango\n        val totalMangoFruitsPerOrangeAndMango\
    \ = totalMangoFruitsPerOrange + totalMangoFruitsPerMango\n        val totalMangoFruitsPerAppleAndOrangeAndMango\
    \ = totalMangoFruitsPerAppleAndOrange + totalMangoFruitsPerMango\n        val\
    \ totalMangoFruitsPerAppleAndOrangeAndMangoAndTotal = totalMangoFruitsPerAppleAndOrangeAndMango\
    \ + totalMangoFruitsPerTotal\n        val totalMangoFruitsPerAppleAndOrangeAndMangoAndTotalPerApple\
    \ = totalMangoFruitsPerAppleAndOrangeAndMangoAndTotal / appleCount\n        val\
    \ totalMangoFruitsPerAppleAndOrangeAndMangoAndTotalPerOrange = totalMangoFruitsPerAppleAndOrangeAndMangoAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzn731m2a.scala:36:108 -----------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruitsPerAppleAndOrangeAndMangoAndTotal\e\
    [0m = totalMangoFruitsPerAppleAndOrangeAndMango + totalMangoFruitsPerTotal\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: totalMangoFruitsPerTotal\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzn731m2a.scala:38:73\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mtotalMangoFruitsPerAppleAndOrangeAndMangoAndTotalPerOrange\e[0m = totalMangoFruitsPerAppleAndOrangeAndMangoAnd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                 Not found: totalMangoFruitsPerAppleAndOrangeAndMangoAnd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzn731m2a.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = apples +\
    \ oranges - fruits\n        mangos\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp5cdghkbc.scala:20)\n\
    \tat Problem$.main(tmp5cdghkbc.scala:26)\n\tat Problem.main(tmp5cdghkbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val mangos = fruits.filter(x\
    \ => x % 2 == 0)\n        val total = mangos.length\n        val count = mangos.count(x\
    \ => x == n)\n        count * total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpz_8o4lyu.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpz_8o4lyu.scala:19)\n\
    \tat Problem$.main(tmpz_8o4lyu.scala:28)\n\tat Problem.main(tmpz_8o4lyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleAndOranges = fruits.filter(f\
    \ => f > 0)\n        val mango = appleAndOranges.filter(f => f == appleAndOranges.size)\n\
    \        val appleAndOrangesAndMango = appleAndOranges.size + mango.size\n   \
    \     appleAndOrangesAndMango\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpviwh19rq.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpviwh19rq.scala:19)\n\
    \tat Problem$.main(tmpviwh19rq.scala:28)\n\tat Problem.main(tmpviwh19rq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val appleFruits = apples.toLong\n        val orangeFruits\
    \ = oranges.toLong\n        val mangoFruits = mangos.toLong\n        val appleFruitCount\
    \ = appleFruits.toLong\n        val orangeFruitCount = orangeFruits.toLong\n \
    \       val mangoFruitCount = mangoFruits.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val appleFruitCount\
    \ = appleFruitCount.toLong\n        val orangeFruitCount = orangeFruitCount.toLong\n\
    \        val mangoFruitCount = mangoFruitCount.toLong\n        val apple\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2u3n0kdc.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2u3n0kdc.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mappleFruitCount\e[0m = appleFruitCount.toLong\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mappleFruitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mappleFruitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2u3n0kdc.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36morangeFruitCount\e[0m = orangeFruitCount.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0morangeFruitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35morangeFruitCount\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2u3n0kdc.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmangoFruitCount\e[0m = mangoFruitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangoFruitCount is already defined as \e[33mvalue\e[0m \e[35mmangoFruitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2u3n0kdc.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mappleFruitCount\e[0m = appleFruitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mappleFruitCount is already defined as \e[33mvalue\e[0m \e[35mappleFruitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.toInt\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.toInt\n        val mangoFruits = fruitsInBasket - applesAndOrangesInBasket\n\
    \        mangoFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpphn_st2_.scala:23)\n\
    \tat Problem$.main(tmpphn_st2_.scala:29)\n\tat Problem.main(tmpphn_st2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val mangos = s.split(\" \")(2).toLong\n        val fruits = apples +\
    \ oranges + mangos\n        val basket = fruits.toLong\n        val applesAndOranges\
    \ = apples + oranges\n        val mangoFruits = applesAndOranges - mangos\n  \
    \      val totalFruits = fruits.toLong\n        val totalApples = apples.toLong\n\
    \        val totalOranges = oranges.toLong\n        val totalMangos = mangos.toLong\n\
    \        val totalBasket = basket.toLong\n        val totalApplesAndOranges =\
    \ applesAndOranges.toLong\n        val totalMangoFruits = mangoFruits.toLong\n\
    \        val totalFruits = fruits.toLong\n        val totalApples = apples.toLong\n\
    \        val totalOranges = oranges.toLong\n        val totalMangos = mangos.toLong\n\
    \        val totalBasket = basket.toLong\n        val totalApplesAndOranges =\
    \ applesAndOranges.toLong\n        val totalMangoFruits = mangoFruits.toLong\n\
    \        val totalFruits = fruits.toLong\n        val totalApples = apples.toLong\n\
    \        val totalOranges = oranges.toLong\n        val totalMangos = mangos.toLong\n\
    \        val totalBasket = basket.toLong\n        val totalApplesAndOranges =\
    \ applesAndOranges.toLong\n        val totalMangoFruits = mangoFruits.toLong\n\
    \        val totalFruits = fruits.toLong\n        val totalApples = apples.toLong\n\
    \        val totalOranges = oranges.toLong\n        val totalMangos = mangos.toLong\n\
    \        val totalBasket = basket.toLong\n        val totalApplesAndOranges =\
    \ applesAndOranges.toLong\n        val totalMangoFruits = mangoFruits.toLong\n\
    \        val totalFruits = fruits.toLong\n        val totalApples = apples.toLong\n\
    \        val totalOranges = oranges.toLong\n        val totalMangos = mangos.toLong\n\
    \        val totalBasket = basket.toLong\n        val totalApplesAndOranges =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpote8umyw.scala:59:35 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mtotalApplesAndOranges\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpote8umyw.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalFruits\e[0m = fruits.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruits is already defined as \e[33mvalue\e[0m \e[35mtotalFruits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpote8umyw.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mtotalApples\e[0m = apples.toLong\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtotalApples is already defined as \e[33mvalue\e[0m \e[35mtotalApples\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpote8umyw.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mtotalOranges\e[0m = oranges.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtotalOranges\
    \ is already defined as \e[33mvalue\e[0m \e[35mtotalOranges\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpote8umyw.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalMangos\e[0m = mangos.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalMangos is already defined as \e[33mvalue\e[0m \e[35mtotalMangos\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659979850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = n - apples\
    \ - oranges - fruits\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxn41skp9.scala:20)\n\
    \tat Problem$.main(tmpxn41skp9.scala:26)\n\tat Problem.main(tmpxn41skp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \")\n        val\
    \ applesAndOrangesInBasket = applesAndOranges.split(\" \")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val fruitsInBasketCount = fruitsInBasket.length\n\
    \        val applesAndOrangesInBasketSum = applesAndOrangesInBasket.sum.toLong\n\
    \        val fruitsInBasketSum = fruitsInBasket.sum.toLong\n        val mangoFruits\
    \ = fruitsInBasketSum - applesAndOrangesInBasketSum\n        val mangoFruitsCount\
    \ = fruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsSum\
    \ = mangoFruits.sum.toLong\n        val mangoFruitsCount = fruitsInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val mangoFruitsSum = mangoFruits.sum.toLong\n\
    \        val mangoFruitsCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsSum = mangoFruits.sum.toLong\n        val mangoFruitsCount\
    \ = fruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsSum\
    \ = mangoFruits.sum.toLong\n        val mangoFruitsCount = fruitsInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val mangoFruitsSum = mangoFruits.sum.toLong\n\
    \        val mangoFruitsCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsSum = mangoFruits.sum.toLong\n        val mangoFruitsCount\
    \ = fruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsSum\
    \ = mangoFruits.sum.toLong\n        val mangoFruitsCount = fruitsInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val mangoFruitsSum = mangoFruits.sum.toLong\n\
    \        val mangoFruitsCount = fruitsInBasketCount - applesAnd\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkt7izur8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ fruitsInBasketCount - applesAndOrangesInBasketCount\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkt7izur8.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsSum\e[0m = mangoFruits.sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangoFruitsSum is already defined as \e[33mvalue\e[0m \e[35mmangoFruitsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkt7izur8.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m = fruitsInBasketCount\
    \ - applesAndOrangesInBasketCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkt7izur8.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsSum\e[0m = mangoFruits.sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmangoFruitsSum is already defined as \e[33mvalue\e[0m \e[35mmangoFruitsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkt7izur8.scala:36:12 -"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong\n        val oranges = s.toLong\n        val mangos = apples\
    \ - oranges\n        val basket = s.split(\" \")\n        val fruits = basket.map(_.toLong)\n\
    \        fruits.sum\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpy88odgsk.scala:20)\n\
    \tat Problem$.main(tmpy88odgsk.scala:27)\n\tat Problem.main(tmpy88odgsk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(1).trim\n        val oranges = s.split(\"\
    oranges and \")(1).trim\n        val mangos = s.split(\"mango and \")(1).trim\n\
    \        val applesAndOranges = apples + oranges\n        val mangoAndApples =\
    \ mangos + apples\n        val applesAndOrangesAndMangos = applesAndOranges +\
    \ mangos\n        val applesAndOrangesAndMangosAndApples = applesAndOrangesAndMangos\
    \ + apples\n        val applesAndOrangesAndMangosAndApplesAndOranges = applesAndOrangesAndMangosAndApples\
    \ + oranges\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOranges + mangos\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ + oranges\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + mangos\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + oranges\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + mangos\n        val\
    \ applesAndOrangesAndMangos\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpirrtcc38.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpirrtcc38.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = apples +\
    \ oranges - fruits\n        mangos\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp5cdghkbc.scala:20)\n\
    \tat Problem$.main(tmp5cdghkbc.scala:26)\n\tat Problem.main(tmp5cdghkbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = fruits.filter(_\
    \ % 2 == 0).sum\n        val mangoCount = fruits.filter(_ % 2 == 1).sum\n    \
    \    val totalCount = appleCount + orangeCount + mangoCount\n        val totalFruits\
    \ = fruits.sum\n        val totalMangoFruits = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalMangoFruits = fruits.filter(_ % 2 == 0).sum\n        val totalMangoFruits\
    \ = fruits.filter(_ % 2 == 1).sum\n        val totalMangoFruits = fruits.filter(_\
    \ % 2 == 0).sum\n        val totalMangoFruits = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalMangoFruits = fruits.filter(_ % 2 == 0).sum\n        val totalMangoFruits\
    \ = fruits.filter(_ % 2 == 1).sum\n        val totalMangoFruits = fruits.filter(_\
    \ % 2 == 0).sum\n        val totalMangoFruits = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalMangoFruits = fruits.filter(_ % 2 == 0).sum\n        val totalMangoFruits\
    \ = fruits.filter(_ % 2 == 1).sum\n        val totalMangoFruits = fruits.filter(_\
    \ % 2 == 0).sum\n        val totalMangoFruits = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalMangoFruits = fruits.filter(_ % 2 == 0).sum\n        val totalMangoFruits\
    \ = fruits.filter(_ % 2 == 1).sum\n        val totalMangoFruits = fruits.filter(_\
    \ % 2 == 0).sum\n        val totalMangoFruits = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalMangoFruits = fruits.filter(_ % 2 == 0).sum\n        val totalMangoFruits\
    \ = fruits.filter(_ % 2 == 1).sum\n        val totalMangoFruits = fruits.filter(_\
    \ % 2 == 0).sum\n        val totalMangoFruits = fruits.filter(_ % 2 == 1).sum\n\
    \        val totalMangoF\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2qd2j2uy.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2qd2j2uy.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoCount\e[0m = fruits.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2qd2j2uy.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruits\e[0m = fruits.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalMangoFruits is already defined as \e[33mvalue\e[0m \e\
    [35mtotalMangoFruits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2qd2j2uy.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruits\e[0m =\
    \ fruits.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtotalMangoFruits is already defined as \e[33mvalue\e[0m \e[35mtotalMangoFruits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2qd2j2uy.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruits\e[0m = fruits.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalMangoFruits is already defined as \e[33mvalue\e[0m \e\
    [35mtotalMan"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").map(_.toInt).sum\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples \"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpz_y68o0g.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpz_y68o0g.scala:20)\n\
    \tat Problem$.main(tmpz_y68o0g.scala:25)\n\tat Problem.main(tmpz_y68o0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt).sum\n        val oranges = s.split(\" \"\
    ).map(_.toInt).sum\n        val mangos = s.split(\" \").map(_.toInt).sum\n   \
    \     val fruits = apples + oranges + mangos\n        val applesAndOranges = apples\
    \ + oranges\n        val applesAndMangos = apples + mangos\n        val orangesAndMangos\
    \ = oranges + mangos\n        val applesAndOrangesAndMangos = applesAndOranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOranges = applesAndOrangesAndMangos\
    \ + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos = applesAndOrangesAndMangosAndOranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + mangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges =\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos + oranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos + mangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ + mangos\n        val applesAndOrange\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxu4efuy3.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxu4efuy3.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\"and\"\
    ).map(_.toInt)\n        val fruits = apples ++ oranges\n        val numOfApples\
    \ = apples.sum\n        val numOfOranges = oranges.sum\n        val numOfFruits\
    \ = fruits.sum\n        val numOfMango = (fruits - apples - oranges).sum\n   \
    \     val numOfMangoFruits = numOfMango - numOfFruits\n        numOfMangoFruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf4h_yeef.scala:25:33 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumOfMango\e[0m = (fruits\
    \ - apples - oranges).sum\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of Array[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val applesAndOrangesInBasket = applesAndOranges.split(\" \").length\n   \
    \     val mangoFruits = fruitsInBasket - applesAndOrangesInBasket\n        mangoFruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplmyvt_ug.scala:29)\n\tat Problem.main(tmplmyvt_ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = mangos.sum\n\
    \        val appleSum = apples.sum\n        val orangeSum = oranges.sum\n    \
    \    val mangoSum = mangos.sum\n        val appleSumOfApples = apples.sum\n  \
    \      val orangeSumOfOranges = oranges.sum\n        val mangoSumOfMangos = mangos.sum\n\
    \        val appleSumOfApples = apples.sum\n        val orangeSumOfOranges = oranges.sum\n\
    \        val mangoSumOfMangos = mangos.sum\n        val appleSumOfApples = apples.sum\n\
    \        val orangeSumOfOranges = oranges.sum\n        val mangoSumOfMangos =\
    \ mangos.sum\n        val appleSumOfApples = apples.sum\n        val orangeSumOfOranges\
    \ = oranges.sum\n        val mangoSumOfMangos = mangos.sum\n        val appleSumOfApples\
    \ = apples.sum\n        val orangeSumOfOranges = oranges.sum\n        val mangoSumOfMangos\
    \ = mangos.sum\n        val appleSumOfApples = apples.sum\n        val orangeSumOfOranges\
    \ = oranges.sum\n        val mangoSumOfMangos = mangos.sum\n        val appleSumOfApples\
    \ = apples.sum\n        val orangeSumOfOranges = oranges.sum\n        val mangoSumOfMangos\
    \ = mangos.sum\n        val appleSumOfApples = apples.sum\n        val orangeSumOfOranges\
    \ = oranges.sum\n        val mangoSumOfMangos = mangos.sum\n        val appleSumOfApples\
    \ = apples.sum\n        val orangeSumOfOranges = oranges.sum\n        val mangoSumOfMangos\
    \ = mangos.sum\n        val appleSumOfApples = apples.sum\n        val orangeSumOfOranges\
    \ = oranges.sum\n        val mangoSumOfMangos = mangos.sum\n        val appleSumOfApples\
    \ = apples.sum\n        val orangeSumOfOranges = oranges.sum\n        val mangoSumOfMangos\
    \ = mangos.sum\n        val appleSumOfApples = apples.sum\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcairs2u1.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mappleSumOfApples\e[0m =\
    \ apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mappleSumOfApples is already defined as \e[33mvalue\e[0m \e\
    [35mappleSumOfApples\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcairs2u1.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36morangeSumOfOranges\e[0m\
    \ = oranges.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morangeSumOfOranges is already defined as \e[33mvalue\e[0m\
    \ \e[35morangeSumOfOranges\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcairs2u1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoSumOfMangos\e[0m =\
    \ mangos.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoSumOfMangos is already defined as \e[33mvalue\e[0m \e\
    [35mmangoSumOfMangos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcairs2u1.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mappleSumOfApples\e[0m =\
    \ apples.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mappleSumOfApples is already defined as \e[33mvalue\e[0m \e\
    [35mappleSumOfApples\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcairs2u1.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36morangeSumOfOranges\e[0m\
    \ = oranges.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong\n        val oranges = s.toLong\n        val mangos = apples\
    \ - oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprg632fhu.scala:20)\n\
    \tat Problem$.main(tmprg632fhu.scala:25)\n\tat Problem.main(tmprg632fhu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\"\
    , oranges.sum)\n        basket.put(\"mangos\", mangos.sum)\n        val totalFruits\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount2 = apples.sum + oranges.sum\
    \ + mangos.sum\n        val totalFruitsCount3 = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount4 = apples.sum + oranges.sum + mangos.sum\n     \
    \   val totalFruitsCount5 = apples.sum + oranges.sum + mangos.sum\n        val\
    \ totalFruitsCount6 = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount7\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount8 = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount9 = apples.sum + oranges.sum\
    \ + mangos.sum\n        val totalFruitsCount10 = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount11 = apples.sum + oranges.sum + mangos.sum\n    \
    \    val totalFruitsCount12 = apples.sum + oranges.sum + mangos.sum\n        val\
    \ totalFruitsCount13 = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount14\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsCount15 = apples.sum\
    \ + oranges.sum + mangos.sum\n        val totalFruitsCount16 = apples.sum + oranges.sum\
    \ + mangos.sum\n        val totalFruitsCount17 = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount18 = apples.sum + oranges.sum + mangos.sum\n    \
    \    val totalFruitsCount19 = apples.sum + oranges.sum + mangos.sum\n        val\
    \ totalFruitsCount20 = apples.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqvwnebzk.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpqvwnebzk.scala:22:25 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqvwnebzk.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = apples +\
    \ oranges - fruits\n        mangos\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp5cdghkbc.scala:20)\n\
    \tat Problem$.main(tmp5cdghkbc.scala:26)\n\tat Problem.main(tmp5cdghkbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val mangos = s.split(\" \")(2).toLong\n        val fruits = apples +\
    \ oranges + mangos\n        val totalFruits = fruits.toLong\n        val appleFruits\
    \ = apples.toLong\n        val orangeFruits = oranges.toLong\n        val mangoFruits\
    \ = mangos.toLong\n        val fruitsInBasket = totalFruits - appleFruits - orangeFruits\
    \ - mangoFruits\n        val applesInBasket = appleFruits * appleFruits.toLong\n\
    \        val orangesInBasket = orangeFruits * orangeFruits.toLong\n        val\
    \ mangosInBasket = mangoFruits * mangoFruits.toLong\n        val fruitsInBasketWithMango\
    \ = fruitsInBasket + mangosInBasket\n        val fruitsInBasketWithApples = fruitsInBasket\
    \ + applesInBasket\n        val fruitsInBasketWithOranges = fruitsInBasket + orangesInBasket\n\
    \        fruitsInBasketWithMango + fruitsInBasketWithApples + fruitsInBasketWithOranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp3vjy71gs.scala:20)\n\
    \tat Problem$.main(tmp3vjy71gs.scala:37)\n\tat Problem.main(tmp3vjy71gs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.toInt\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.toInt\n        val mangos = fruitsInBasket - applesAndOrangesInBasket\n\
    \        mangos.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpozrjgmrv.scala:23)\n\
    \tat Problem$.main(tmpozrjgmrv.scala:29)\n\tat Problem.main(tmpozrjgmrv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").map(_.toInt).sum\n\
    \        val fruits = s.split(\"and\").map(_.toLong).sum\n        val mango =\
    \ fruits - apples - oranges\n        mango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples \"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2dv7yr4p.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp2dv7yr4p.scala:20)\n\
    \tat Problem$.main(tmp2dv7yr4p.scala:26)\n\tat Problem.main(tmp2dv7yr4p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = n - apples\
    \ - oranges - fruits\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxn41skp9.scala:20)\n\
    \tat Problem$.main(tmpxn41skp9.scala:26)\n\tat Problem.main(tmpxn41skp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = fruits -\
    \ apples - oranges\n        fruits - mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxo313dsv.scala:20)\n\
    \tat Problem$.main(tmpxo313dsv.scala:26)\n\tat Problem.main(tmpxo313dsv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val mangos = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val applesAndMangos = apples + \" \" + mangos\n      \
    \  val orangesAndMangos = oranges + \" \" + mangos\n        val applesAndOrangesAndMangos\
    \ = applesAndOranges + \" \" + mangos\n        val applesAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + \" \" + mangos + \" \" + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangos + \" \" + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOranges + \" \" + mangos + \" \" + oranges\n \
    \       val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos =\
    \ applesAndOrangesAndMangosAndOrangesAndMangos + \" \" + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + \" \" + mangos +\
    \ \" \" + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + \" \" + mangos +\
    \ \" \" + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + \" \" + mangos +\
    \ \" \" + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + \" \" + mangos +\
    \ \" \" + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp78cdtii3.scala:34:125 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp78cdtii3.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val applesAndOranges\
    \ = apples ++ oranges\n        val applesAndOrangesAndMangos = apples ++ oranges\
    \ ++ mangos\n        val applesAndOrangesAndMangosCount = applesAndOrangesAndMangos.length\n\
    \        val applesAndOrangesAndMangosCountSum = applesAndOrangesAndMangosCount.reduce((a,\
    \ b) => a + b)\n        val applesAndOrangesAndMangosCountSum2 = applesAndOrangesAndMangosCountSum\
    \ * applesAndOrangesAndMangosCountSum\n        val applesAndOrangesAndMangosCountSum3\
    \ = applesAndOrangesAndMangosCountSum2 * applesAndOrangesAndMangosCountSum\n \
    \       val applesAndOrangesAndMangosCountSum4 = applesAndOrangesAndMangosCountSum3\
    \ * applesAndOrangesAndMangosCountSum\n        val applesAndOrangesAndMangosCountSum5\
    \ = applesAndOrangesAndMangosCountSum4 * applesAndOrangesAndMangosCountSum\n \
    \       val applesAndOrangesAndMangosCountSum6 = applesAndOrangesAndMangosCountSum5\
    \ * applesAndOrangesAndMangosCountSum\n        val applesAndOrangesAndMangosCountSum7\
    \ = applesAndOrangesAndMangosCountSum6 * applesAndOrangesAndMangosCountSum\n \
    \       val applesAndOrangesAndMangosCountSum8 = applesAndOrangesAndMangosCountSum7\
    \ * applesAndOrangesAndMangosCountSum\n        val applesAndOrangesAndMangosCountSum9\
    \ = applesAndOrangesAndMangosCountSum8 * applesAndOrangesAndMangosCountSum\n \
    \       val applesAndOrangesAndMangosCountSum10 = applesAndOrangesAndMangosCountSum9\
    \ * applesAndOrangesAndMangosCountSum\n        val applesAndOrangesAndMangosCountSum11\
    \ = applesAndOrangesAndMangosCountSum10 * applesAndOrangesAndMangosCountSum\n\
    \        val applesAndOrangesAndMangosCountSum12 = applesAndOrangesAndMangosCountSum11\
    \ * applesAndOrangesAndMangosCount\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30yr7s_h.scala:25:79 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosCountSum\e\
    [0m = applesAndOrangesAndMangosCount.reduce((\e[36ma\e[0m, \e[36mb\e[0m) => a\
    \ + b)\n\e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value reduce is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30yr7s_h.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = n - apples - oranges\n        val applesAndOranges = apples\
    \ + oranges\n        val applesAndOrangesAndMangos = applesAndOranges + mangos\n\
    \        applesAndOrangesAndMangos\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpi_9r2sq_.scala:21:23 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = n - apples\
    \ - oranges\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((apples\
    \ : Array[Int]))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_9r2sq_.scala:22:38\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOranges\e[0m = apples + oranges\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ Array[Int], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = apples + oranges\n        val mangos = fruits - apples - oranges\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"oranges\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp2relhmeq.scala:20)\n\
    \tat Problem$.main(tmp2relhmeq.scala:26)\n\tat Problem.main(tmp2relhmeq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val totalFruits = fruits.sum\n\
    \        val mangos = fruits.filter(_ % 2 == 0)\n        val totalMangos = mangos.sum\n\
    \        val result = totalMangos - totalFruits\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpwpbkxqam.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpwpbkxqam.scala:19)\n\
    \tat Problem$.main(tmpwpbkxqam.scala:29)\n\tat Problem.main(tmpwpbkxqam.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples - n.toLong\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpkz6woj_d.scala:19)\n\
    \tat Problem$.main(tmpkz6woj_d.scala:25)\n\tat Problem.main(tmpkz6woj_d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val mangoFruits = fruitsInBasket - fruitsInBasket.toDouble\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\" \").length\n        val applesAndOrangesInBasketInBasket\
    \ = applesAndOrangesInBasket - applesAndOrangesInBasket.toDouble\n        val\
    \ applesAndOrangesInBasketInBasketInBasket = applesAndOrangesInBasketInBasket\
    \ - applesAndOrangesInBasketInBasket.toDouble\n        val applesAndOrangesInBasketInBasketInBasketInBasket\
    \ = applesAndOrangesInBasketInBasketInBasket - applesAndOrangesInBasketInBasketInBasket.toDouble\n\
    \        val applesAndOrangesInBasketInBasketInBasketInBasketInBasket = applesAndOrangesInBasketInBasketInBasketInBasket\
    \ - applesAndOrangesInBasketInBasketInBasketInBasket.toDouble\n        val applesAndOrangesInBasketInBasketInBasketInBasketInBasketInBasket\
    \ = applesAndOrangesInBasketInBasketInBasketInBasketInBasket - applesAndOrangesInBasketInBasketInBasketInBasketInBasket.toDouble\n\
    \        val applesAndOrangesInBasketInBasketInBasketInBasketInBasketInBasketInBasket\
    \ = applesAndOrangesInBasketInBasketInBasketInBasketInBasketInBasket - applesAndOrangesInBasketInBasketInBasketInBasketInBasket.toDouble\n\
    \        val applesAndOrangesInBasketInBasketInBasketInBasketInBasketInBasketInBasketInBasket\
    \ = applesAndOrangesInBasketInBasketInBasketInBasketInBasketInBasketInBasket -\
    \ applesAndOrangesInBasketInBasketInBasketInBasketInBasket.toDouble\n        val\
    \ applesAndOrangesInBasketInBasketInBasketInBasket\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbdw7dn8j.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbdw7dn8j.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \")(1).split(\"and\")(1).split(\"\
    \ \").last.toInt\n        val mango = apples - oranges\n        val fruits = apples\
    \ + oranges + mango\n        fruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.fruitDistribution(tmpk63n_23l.scala:20)\n\tat Problem$.main(tmpk63n_23l.scala:26)\n\
    \tat Problem.main(tmpk63n_23l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val basket = new mutable.HashMap[String,\
    \ Long]()\n        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\"\
    , oranges.sum)\n        basket.put(\"mangos\", mangos.sum)\n        basket.put(\"\
    total\", apples.sum + oranges.sum + mangos.sum)\n        basket.get(\"total\"\
    ).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uhz2mcl.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges ++ mangos\n        val appleCount = apples.sum\n        val orangeCount\
    \ = oranges.sum\n        val mangoCount = mangos.sum\n        val appleFruits\
    \ = apples.filter(_ > 0)\n        val orangeFruits = oranges.filter(_ > 0)\n \
    \       val mangoFruits = mangos.filter(_ > 0)\n        val appleFruitCount =\
    \ appleFruits.sum\n        val orangeFruitCount = orangeFruits.sum\n        val\
    \ mangoFruitCount = mangoFruits.sum\n        val appleFruitPercentage = (appleFruitCount\
    \ * 100) / appleCount\n        val orangeFruitPercentage = (orangeFruitCount *\
    \ 100) / orangeCount\n        val mangoFruitPercentage = (mangoFruitCount * 100)\
    \ / mangoCount\n        val appleFruitPercentagePercentage = (appleFruitPercentage\
    \ * 100) / appleFruitCount\n        val orangeFruitPercentagePercentage = (orangeFruitPercentage\
    \ * 100) / orangeFruitCount\n        val mangoFruitPercentagePercentage = (mangoFruitPercentage\
    \ * 100) / mangoFruitCount\n        val appleFruitPercentagePercentagePercentage\
    \ = (appleFruitPercentagePercentage * 100) / appleFruitFruitCount\n        val\
    \ orangeFruitPercentagePercentagePercentage = (orangeFruitPercentagePercentage\
    \ * 100) / orangeFruitFruitCount\n        val mangoFruitPercentagePercentagePercentage\
    \ = (mangoFruitPercentagePercentage * 100) / mangoFruitFruitCount\n        val\
    \ appleFruitPercentagePercentagePercentagePercentage = (appleFruitPercentagePercentagePercentage\
    \ * 100) / appleFruitFruitFruitCount\n        val orangeFruitPercentagePercentagePercentagePercentage\
    \ = (orangeFruitPercentagePercentagePercentage * 100) / orangeFruitFruitFruitCount\n\
    \        val mangoFruitPercentagePercentagePercentagePercentage = (mangoFruitPercentagePercentagePercentage\
    \ * 100) / mangoFruitFruitFruitCount\n        val appleFruitPercentagePercentagePercentagePercentagePercentage\
    \ = (appleFruit\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjw8ljkfa.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw8ljkfa.scala:38:96\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mappleFruitPercentagePercentagePercentage\e[0m = (appleFruitPercentagePercentage\
    \ * \e[31m100\e[0m) / appleFruitFruitCount\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \               Not found: appleFruitFruitCount\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjw8ljkfa.scala:39:98 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36morangeFruitPercentagePercentagePercentage\e\
    [0m = (orangeFruitPercentagePercentage * \e[31m100\e[0m) / orangeFruitFruitCount\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: orangeFruitFruitCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjw8ljkfa.scala:40:96\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mmangoFruitPercentagePercentagePercentage\e[0m = (mangoFruitPercentagePercentage\
    \ * \e[31m100\e[0m) / mangoFruitFruitCount\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \               Not found: mangoFruitFruitCount\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjw8ljkfa.scala:44:76 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mappleF"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits.toDouble / 2\n        mangos.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwi7j_7fr.scala:20)\n\
    \tat Problem$.main(tmpwi7j_7fr.scala:26)\n\tat Problem.main(tmpwi7j_7fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.replaceAll(\"apples\", \"0\").length\n        val oranges\
    \ = s.replaceAll(\"oranges\", \"0\").length\n        val mangos = s.replaceAll(\"\
    mangos\", \"0\").length\n        val applesAndOranges = apples + oranges\n   \
    \     val applesAndMangos = apples + mangos\n        val orangesAndMangos = oranges\
    \ + mangos\n        val applesAndOrangesAndMangos = applesAndOranges + mangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangos = applesAndOrangesAndMangos\
    \ + orangesAndMangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndO\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbwusavk.scala:27:125 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: orangesAndMangosAndOrangesAndMangos\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbwusavk.scala:28:144\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       Not found: orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkbwusavk.scala:29:163\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: orangesAndMangosAndOranges"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = fruits.filter(_\
    \ > 0).sum\n        val mangoFruits = fruits.filter(_ == 0)\n        val totalFruits\
    \ = fruits.sum\n        val totalMangoFruits = mangoFruits.sum\n        val totalMangoFruitsPerApple\
    \ = totalMangoFruits / appleCount\n        val totalMangoFruitsPerOrange = totalMangoFruits\
    \ / orangeCount\n        val totalMangoFruitsPerMango = totalMangoFruits / mangoCount\n\
    \        val totalMangoFruitsPerTotal = totalMangoFruits / totalFruits\n     \
    \   val totalMangoFruitsPerTotalPerApple = totalMangoFruitsPerTotal / appleCount\n\
    \        val totalMangoFruitsPerTotalPerOrange = totalMangoFruitsPerTotal / orangeCount\n\
    \        val totalMangoFruitsPerTotalPerMango = totalMangoFruitsPerTotal / mangoCount\n\
    \        val totalMangoFruitsPerTotalPerTotal = totalMangoFruitsPerTotal / totalFruits\n\
    \        val totalMangoFruitsPerTotalPerTotalPerApple = totalMangoFruitsPerTotalPerTotal\
    \ / appleCount\n        val totalMangoFruitsPerTotalPerTotalPerOrange = totalMangoFruitsPerTotalPerTotal\
    \ / orangeCount\n        val totalMangoFruitsPerTotalPerTotalPerMango = totalMangoFruitsPerTotalPerTotal\
    \ / mangoCount\n        val totalMangoFruitsPerTotalPerTotalPerTotal = totalMangoFruitsPerTotalPerTotal\
    \ / totalFruits\n        val totalMangoFruitsPerTotalPerTotalPerTotalPerApple\
    \ = totalMangoFruitsPerTotalPerTotalPerTotal / appleCount\n        val totalMangoFruitsPerTotalPerTotalPerTotalPerOrange\
    \ = totalMangoFruitsPerTotalPerTotalPerTotal \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpanzw9_ut.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\")\n        val\
    \ fruitsInBasketCount = fruitsInBasket.length\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\"and\")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val mangoFruits = fruitsInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketCount =\
    \ applesAndOrangesInBasket.length\n        val applesAndOrangesInBas\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq42mmw1e.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq42mmw1e.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mapplesAndOrangesInBasketCount\e[0m = applesAndOrangesInBasket.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq42mmw1e.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesInBasketCount\e\
    [0m = applesAndOrangesInBasket.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq42mmw1e.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesInBasketCount\e\
    [0m = applesAndOrangesInBasket.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq42mmw1e.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesInBasketCount\e\
    [0m = applesAndOrangesInBasket.length\n\e[31m\e[31m   |\e[0m        ^^"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val mangoFruits = fruitsInBasket - applesAndOranges.split(\" \").length\n\
    \        fruitsInBasket - mangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6nvhuz6.scala:28)\n\tat Problem.main(tmpg6nvhuz6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").map(_.toInt).sum\n\
    \        val mango = apples - oranges\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples \"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpw50e0k0l.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpw50e0k0l.scala:20)\n\
    \tat Problem$.main(tmpw50e0k0l.scala:25)\n\tat Problem.main(tmpw50e0k0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val totalFruits = fruits.sum\n\
    \        val appleFruits = apples.sum\n        val orangeFruits = oranges.sum\n\
    \        val mangoFruits = fruits.filter(x => x % 2 == 1).sum\n        val totalMangoFruits\
    \ = mangoFruits - appleFruits - orangeFruits\n        val totalMangoFruitsPercentage\
    \ = totalMangoFruits / totalFruits\n        val totalMangoFruitsPercentageInt\
    \ = totalMangoFruitsPercentage.toInt\n        val totalMangoFruitsPercentageIntInt\
    \ = totalMangoFruitsPercentageInt * n\n        val totalMangoFruitsPercentageIntIntInt\
    \ = totalMangoFruitsPercentageIntInt * n\n        val totalMangoFruitsPercentageIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntInt * n\n        val totalMangoFruitsPercentageIntIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntIntInt * n\n        val totalMangoFruitsPercentageIntIntIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntIntIntInt * n\n        val totalMangoFruitsPercentageIntIntIntIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntIntIntIntInt * n\n        val totalMangoFruitsPercentageIntIntIntIntIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntIntIntIntIntIntInt * n\n        val totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntInt * n\n        val\
    \ totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntInt = totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntInt\
    \ * n\n        val totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntInt\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwjm36_lx.scala:35:65 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruitsPercentageIntIntIntIntIntIntIntInt\e\
    [0m = totalMangoFruitsPercentageIntIntIntIntIntIntIntInt * n\n\e[31m\e[31m   |\e\
    [0m                                                                 ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mtotalMangoFruitsPercentageIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwjm36_lx.scala:36:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntInt\e[0m = totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntInt\
    \ * n\n\e[31m\e[31m   |\e[0m                                                 \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mtotalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwjm36_lx.scala:37:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntInt\e[0m =\
    \ totalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntInt * n\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mtotalMangoFruitsPercentageIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjm36_lx.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val fruits = apples\
    \ + oranges + 1\n        val mangos = fruits - 1\n        fruits.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwpfekph.scala:26)\n\tat Problem.main(tmpxwpfekph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples\")(1).trim\n        val oranges = s.split(\"oranges\"\
    )(1).trim\n        val mangos = s.split(\"mango\")(1).trim\n        val applesAndOranges\
    \ = apples + oranges\n        val applesAndMangos = apples + mangos\n        val\
    \ orangesAndMangos = oranges + mangos\n        val applesAndOrangesAndMangos =\
    \ applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mang\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5f0926d.scala:34:145 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\e\
    [0m = applesAndOranges + mang\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                   Not found: mang\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu5f0926d.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val fruitsInBasketCount = fruitsInBasket.length\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\"and\").map(_.trim).map(_.toInt)\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val applesAndOrangesInBasketSum =\
    \ applesAndOrangesInBasket.sum\n        val applesAndOrangesInBasketSumCount =\
    \ applesAndOrangesInBasketSum.length\n        val applesAndOrangesInBasketSumCount2\
    \ = applesAndOrangesInBasketSumCount * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount3\
    \ = applesAndOrangesInBasketSumCount2 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount4\
    \ = applesAndOrangesInBasketSumCount3 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount5\
    \ = applesAndOrangesInBasketSumCount4 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount6\
    \ = applesAndOrangesInBasketSumCount5 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount7\
    \ = applesAndOrangesInBasketSumCount6 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount8\
    \ = applesAndOrangesInBasketSumCount7 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount9\
    \ = applesAndOrangesInBasketSumCount8 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount10\
    \ = applesAndOrangesInBasketSumCount9 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount11\
    \ = applesAndOrangesInBasketSumCount10 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount12\
    \ = applesAndOrangesInBasketSumCount11 * fruitsInBasketCount\n        val applesAndOrangesInBasketSumCount13\
    \ = applesAndOrangesInBasketSumCount12 * fruitsInBasketCount\n        val applesAndOrangesInBasket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp20hwrtnf.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp20hwrtnf.scala:28:75\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesInBasketSumCount\e[0m = applesAndOrangesInBasketSum.length\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20hwrtnf.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples.toLong\n\
    \        val mangos = apples.toLong - oranges.toLong\n        mangos\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpqc12nvxr.scala:19)\n\
    \tat Problem$.main(tmpqc12nvxr.scala:25)\n\tat Problem.main(tmpqc12nvxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mango = apples + oranges\
    \ - fruits\n        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp3qxilkc3.scala:20)\n\
    \tat Problem$.main(tmp3qxilkc3.scala:26)\n\tat Problem.main(tmp3qxilkc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val fruits = s.split(\" \").map(_.toInt).sum\n        val mango = fruits\
    \ - apples - oranges\n        mango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmphqn19klh.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmphqn19klh.scala:20)\n\
    \tat Problem$.main(tmphqn19klh.scala:26)\n\tat Problem.main(tmphqn19klh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val basket = new mutable.HashMap[String,\
    \ Long]()\n        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\"\
    , oranges.sum)\n        basket.put(\"mangos\", mangos.sum)\n        basket.put(\"\
    total\", apples.sum + oranges.sum + mangos.sum)\n        basket.get(\"total\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70oqyvgb.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \").map(_.toInt)\n        val oranges = s.split(\"\
    oranges and \").map(_.toInt)\n        val fruits = s.split(\"fruits\").map(_.toInt)\n\
    \        val applesAndOranges = apples ++ oranges\n        val applesAndOrangesAndFruits\
    \ = applesAndOranges ++ fruits\n        val applesAndOrangesAndFruitsSum = applesAndOrangesAndFruits.sum\n\
    \        val applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits = applesAndOrangesAndFruitsSum\
    \ - applesAndOrangesAndFruits.sum\n        val applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits\
    \ = applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits - applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits.sum\n\
    \        val applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits\
    \ = applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits\
    \ - applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits.sum\n\
    \        val applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFru\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz682unz5.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz682unz5.scala:26:214\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits\e\
    [0m = applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits - applesAndOrangesAndFruitsSumOfApplesAndOrangesAndFruits.sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value sum is not a\
    \ member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz682unz5.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(0).trim\n        val oranges = s.split(\"\
    oranges and \")(0).trim\n        val mangos = s.split(\"mango and \")(0).trim\n\
    \        val applesAndOranges = apples + oranges\n        val applesAndMangos\
    \ = apples + mangos\n        val orangesAndMangos = oranges + mangos\n       \
    \ val applesAndOrangesAndMangos = applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mang\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmey4q8_.scala:34:145 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\e\
    [0m = applesAndOranges + mang\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                   Not found: mang\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmey4q8_.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val mangoFruits = fruitsInBasket.filter(_ % 2 == 1).length\n        fruitsInBasket.filter(_\
    \ % 2 == 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpohqr0xuc.scala:28)\n\tat Problem.main(tmpohqr0xuc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.split(\" \").map(_.toLong).sum\n        val oranges =\
    \ s.split(\" \").map(_.toLong).sum\n        val mangos = apples - oranges\n  \
    \      mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpzaok6n84.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpzaok6n84.scala:19)\n\
    \tat Problem$.main(tmpzaok6n84.scala:25)\n\tat Problem.main(tmpzaok6n84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpofn40as0.scala:20)\n\
    \tat Problem$.main(tmpofn40as0.scala:25)\n\tat Problem.main(tmpofn40as0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = s.split(\" \").map(_.toInt)\n        val fruits\
    \ = basket.filter(_ > 0)\n        val count = fruits.count(_ == 1)\n        val\
    \ mangoCount = fruits.count(_ == 0)\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpafk1h6jx.scala:20)\n\
    \tat Problem$.main(tmpafk1h6jx.scala:29)\n\tat Problem.main(tmpafk1h6jx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = apples +\
    \ oranges - fruits\n        mangos\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp5cdghkbc.scala:20)\n\
    \tat Problem$.main(tmp5cdghkbc.scala:26)\n\tat Problem.main(tmp5cdghkbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\"\
    , oranges.sum)\n        basket.put(\"mangos\", mangos.sum)\n        val totalFruits\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsPerApple = apples.sum\
    \ / totalFruits\n        val totalFruitsPerOrange = oranges.sum / totalFruits\n\
    \        val totalFruitsPerMango = mangos.sum / totalFruits\n        val totalFruitsPerAppleAndOrange\
    \ = apples.sum + oranges.sum\n        val totalFruitsPerAppleAndOrangeAndMango\
    \ = apples.sum + oranges.sum + mangos.sum\n        val totalFruitsPerAppleAndOrangeAndMangoAndBasket\
    \ = apples.sum + oranges.sum + mangos.sum + basket.size\n        val totalFruitsPerAppleAndOrangeAndMangoAndBasketAndTotalFruits\
    \ = apples.sum + oranges.sum + mangos.sum + basket.size + totalFruits\n      \
    \  val totalFruitsPerAppleAndOrangeAndMangoAndBasketAndTotalFruitsPerApple = apples.sum\
    \ + oranges.sum + mangos.sum + basket.size + totalFruitsPerApple\n        val\
    \ totalFruitsPerAppleAndOrangeAndMangoAndBasketAndTotalFruitsPerOrange = apples.sum\
    \ + oranges.sum + mangos.sum + basket.size + totalFruitsPerOrange\n        val\
    \ totalFruitsPerAppleAndOrangeAndMangoAndBasketAndTotalFruitsPerMango = apples.sum\
    \ + oranges.sum + mangos.sum + basket.size + totalFruitsPerMango\n        val\
    \ totalFruitsPerAppleAndOrangeAndMangoAndBasketAndTotalFruitsPerAppleAndOrange\
    \ = apples.sum + oranges.sum + mangos.sum + basket.size + totalFruitsPerAppleAndOrange\n\
    \        val totalFruitsPerAppleAndO\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr12g8ik3.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr12g8ik3.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbasket\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr12g8ik3.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges ++ mangos\n        val totalFruits = fruits.sum\n        val totalApples\
    \ = apples.sum\n        val totalOranges = oranges.sum\n        val totalMangos\
    \ = mangos.sum\n        val totalFruitsPerApple = fruits.map(x => x/totalApples).sum\n\
    \        val totalFruitsPerOrange = fruits.map(x => x/totalOranges).sum\n    \
    \    val totalFruitsPerMango = fruits.map(x => x/totalMangos).sum\n        val\
    \ totalFruitsPerAppleAndOrange = fruits.map(x => x/totalApples + x/totalOranges).sum\n\
    \        val totalFruitsPerMangoAndOrange = fruits.map(x => x/totalMangos + x/totalOranges).sum\n\
    \        val totalFruitsPerAppleAndOrangeAndMango = fruits.map(x => x/totalApples\
    \ + x/totalOranges + x/totalMangos).sum\n        val totalFruitsPerMangoAndOrangeAndMango\
    \ = fruits.map(x => x/totalMangos + x/totalOranges + x/totalMangos).sum\n    \
    \    val totalFruitsPerAppleAndOrangeAndMangoAndTotal = fruits.map(x => x/totalApples\
    \ + x/totalOranges + x/totalMangos + x/totalFruits).sum\n        val totalFruitsPerMangoAndOrangeAndMangoAndTotal\
    \ = fruits.map(x => x/totalMangos + x/totalOranges + x/totalMangos + x/totalFruits).sum\n\
    \        val totalFruitsPerAppleAndOrangeAndMangoAndTotalAndTotal = fruits.map(x\
    \ => x/totalApples + x/totalOranges + x/totalMangos + x/totalFruits + x/totalFruits).sum\n\
    \        val totalFruitsPerMangoAndOrangeAndMangoAndTotalAndTotal = fruits.map(x\
    \ => x/totalMangos + x/totalOranges + x/totalMangos + x/totalFruits + x/totalFruits).sum\n\
    \        val totalFruitsPerAppleAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1c1lnlhh.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1c1lnlhh.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val applesAndOrangesArray = applesAndOranges.split(\"\
    \ \")\n        val fruitArray = fruits.split(\" \")\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n    \
    \    val fruitArrayLength = fruitArray.length\n        val applesAndOrangesArrayLength\
    \ = applesAndOrangesArray.length\n        val fruitArrayLength = fruitArray.length\n\
    \        val applesAndOrangesArrayLength = apple\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp2yzwr9e.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesArrayLength\e\
    [0m = applesAndOrangesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp2yzwr9e.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfruitArrayLength\e[0m =\
    \ fruitArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mfruitArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp2yzwr9e.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesArrayLength\e\
    [0m = applesAndOrangesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp2yzwr9e.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mfruitArrayLength\e[0m =\
    \ fruitArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mfruitArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp2yzwr9e.scala:31:12 ---------"
  stdout: ''
  timestamp: 1659979872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").map(_.toInt).sum\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples \"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpz_y68o0g.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpz_y68o0g.scala:20)\n\
    \tat Problem$.main(tmpz_y68o0g.scala:25)\n\tat Problem.main(tmpz_y68o0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(1).trim\n        val oranges = s.split(\"\
    oranges and \")(1).trim\n        val mangos = s.split(\"mango and \")(1).trim\n\
    \        val applesAndOranges = apples + oranges\n        val applesAndMangos\
    \ = apples + mangos\n        val orangesAndMangos = oranges + mangos\n       \
    \ val applesAndOrangesAndMangos = applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangos + orangesAndMangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5lg1_xh.scala:27:125 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: orangesAndMangosAndOrangesAndMangos\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5lg1_xh.scala:28:144\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       Not found: orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5lg1_xh.scala:29:163\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: orangesAndMangosAndOranges"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val appleAndOranges = apples + \" \"\
    \ + oranges\n        val fruitAndApples = fruits + \" \" + apples\n        val\
    \ fruitAndOranges = fruits + \" \" + oranges\n        val appleAndOrangesAndMango\
    \ = appleAndOranges + \" and \" + fruitAndApples\n        val fruitAndApplesAndMango\
    \ = fruitAndApples + \" and \" + fruitAndOranges\n        val appleAndOrangesAndMangoAndMango\
    \ = appleAndOrangesAndMango + \" and \" + fruitAndApplesAndMango\n        val\
    \ fruitAndApplesAndMangoAndMango = fruitAndApplesAndMango + \" and \" + fruitAndOrangesAndMango\n\
    \        val appleAndOrangesAndMangoAndMangoAndMango = appleAndOrangesAndMangoAndMango\
    \ + \" and \" + fruitAndApplesAndMangoAndMango\n        val fruitAndApplesAndMangoAndMangoAndMango\
    \ = fruitAndApplesAndMangoAndMango + \" and \" + fruitAndOrangesAndMangoAndMango\n\
    \        val appleAndOrangesAndMangoAndMangoAndMangoAndMango = appleAndOrangesAndMangoAndMangoAndMango\
    \ + \" and \" + fruitAndApplesAndMangoAndMangoAndMango\n        val fruitAndApplesAndMangoAndMangoAndMangoAndMango\
    \ = fruitAndApplesAndMangoAndMangoAndMango + \" and \" + fruitAndOrangesAndMangoAndMangoAndMango\n\
    \        val appleAndOrangesAndMangoAndMangoAndMangoAndMangoAndMango = appleAndOrangesAndMangoAndMangoAndMangoAndMango\
    \ + \" and \" + fruitAndApplesAndMangoAndMangoAndMangoAndMango\n        val fruitAndApplesAndMangoAndMangoAndMangoAndMangoAndMango\
    \ = fruitAndApplesAndMangoAndMangoAndMangoAndMango + \" and \" + fruitAndOrangesAndMangoAndMangoAndMangoAndMango\n\
    \        val apple\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkgsd5dsn.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgsd5dsn.scala:28:80\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mfruitAndApplesAndMangoAndMango\e[0m = fruitAndApplesAndMango + \e[31m\" and\
    \ \"\e[0m + fruitAndOrangesAndMango\n\e[31m\e[31m   |\e[0m                   \
    \                                                             ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: fruitAndOrangesAndMango\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgsd5dsn.scala:30:96\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mfruitAndApplesAndMangoAndMangoAndMango\e[0m = fruitAndApplesAndMangoAndMango\
    \ + \e[31m\" and \"\e[0m + fruitAndOrangesAndMangoAndMango\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: fruitAndOrangesAndMangoAndMango\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgsd5dsn.scala:32:112 -----------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfruitAndApplesAndMangoAndMangoAndMangoAndMango\e\
    [0m = fruitAndApplesAndMangoAndMangoAndMango + \e[31m\" and \"\e[0m + fruitAndOrangesAndMangoAndMangoAndMango\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: fruitAndOrangesAndMangoAndMangoAndMango\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkgsd5dsn.scala:34:128\
    \ -----------------"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = new mutable.HashMap[String, Long]()\n      \
    \  basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n\
    \        basket.put(\"mangos\", mangos)\n        basket.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn_o5bfj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val mangos = apples\
    \ - oranges\n        fruits match {\n            case \"apples\" => apples \n\
    \            case \"oranges\" => oranges\n            case \"mangos\" => mangos\n\
    \            case _ => 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"oranges\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpkk6d6tbf.scala:20)\n\
    \tat Problem$.main(tmpkk6d6tbf.scala:31)\n\tat Problem.main(tmpkk6d6tbf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        mangos\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpofn40as0.scala:20)\n\
    \tat Problem$.main(tmpofn40as0.scala:25)\n\tat Problem.main(tmpofn40as0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = s.split(\" \")\n        val appleFruits = basket.filter(_\
    \ == \"apples\")\n        val orangeFruits = basket.filter(_ == \"oranges\")\n\
    \        val mangoFruits = basket.filter(_ == \"mango\")\n        val appleFruitsCount\
    \ = appleFruits.count\n        val orangeFruitsCount = orangeFruits.count\n  \
    \      val mangoFruitsCount = mangoFruits.count\n        val totalFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n        val mangoFruitsCount\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpplmca4t8.scala:43:30 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpplmca4t8.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitsCount\e[0m = appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpplmca4t8.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpplmca4t8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsCount\e[0m =\
    \ appleFruitsCount + orangeFruitsCount + mangoFruitsCount\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpplmca"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges\
    \ - 1\n        val fruits = s.split(\" \")\n        val appleFruits = fruits.filter(_.contains(\"\
    apple\")).map(_.toInt)\n        val orangeFruits = fruits.filter(_.contains(\"\
    orange\")).map(_.toInt)\n        val mangoFruits = fruits.filter(_.contains(\"\
    mango\")).map(_.toInt)\n        val appleFruitCount = appleFruits.sum\n      \
    \  val orangeFruitCount = orangeFruits.sum\n        val mangoFruitCount = mangoFruits.sum\n\
    \        val totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n\
    \        val mangoFruitCount = mangoFruits.sum\n        val totalFruitCount =\
    \ appleFruitCount + orangeFruitCount + mangoFruitCount\n        val mangoFruitCount\
    \ = mangoFruits.sum\n        val totalFruitCount = appleFruitCount + orangeFruitCount\
    \ + mangoFruitCount\n        val mangoFruitCount = mangoFruits.sum\n        val\
    \ totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n   \
    \     val mangoFruitCount = mangoFruits.sum\n        val totalFruitCount = appleFruitCount\
    \ + orangeFruitCount + mangoFruitCount\n        val mangoFruitCount = mangoFruits.sum\n\
    \        val totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n\
    \        val mangoFruitCount = mangoFruits.sum\n        val totalFruitCount =\
    \ appleFruitCount + orangeFruitCount + mangoFruitCount\n        val mangoFruitCount\
    \ = mangoFruits.sum\n        val totalFruitCount = appleFruitCount + orangeFruitCount\
    \ + mangoFruitCount\n        val mangoFruitCount = mangoFruits.sum\n        val\
    \ totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n   \
    \     val mangoFruit\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxrkahyr.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxrkahyr.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitCount\e[0m = mangoFruits.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoxrkahyr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitCount\e[0m = appleFruitCount\
    \ + orangeFruitCount + mangoFruitCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mtotalFruitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoxrkahyr.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitCount\e[0m = mangoFruits.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmangoFruitCount is already defined as \e[33mvalue\e[0m \e[35mmangoFruitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoxrkahyr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitCount\e[0m = appleFruitCount\
    \ + orangeFruitCount + mangoFruitCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mtotalFruitCount\e[0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val appleAndOranges = apples + oranges\n        val appleAndMangos\
    \ = apples + mangos\n        val appleAndOrangesAndMangos = appleAndOranges +\
    \ mangos\n        val appleAndOrangesAndMangosAndApples = appleAndOrangesAndMangos\
    \ + apples\n        val appleAndOrangesAndMangosAndApplesAndOranges = appleAndOrangesAndMangosAndApples\
    \ + oranges\n        val appleAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndApples + mangos\n        val appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = appleAndOrangesAndMangosAndApples + apples + oranges\n        val appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges\
    \ = appleAndOrangesAndMangosAndApplesAndOranges + mangos\n        val appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples\n        val\
    \ appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = appleAndOrangesAndMangosAndApplesAndOrangesAndMangos + oranges\n        val\
    \ appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges\
    \ = appleAndOrangesAndMangosAndApplesAndOrangesAndMangos + mangos\n        val\
    \ appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples + oranges\n\
    \        val appleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = appleAndOrangesAndMangosAndApplesAndOrangesAndMang\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy7udfdo.scala:34:132 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\e\
    [0m = appleAndOrangesAndMangosAndApplesAndOrangesAndMang\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Not found: appleAndOrangesAndMangosAndApplesAndOrangesAndMang\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgy7udfdo.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.toInt\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.toInt\n        val mangoFruits = fruitsInBasket - applesAndOrangesInBasket\n\
    \        mangoFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpphn_st2_.scala:23)\n\
    \tat Problem$.main(tmpphn_st2_.scala:29)\n\tat Problem.main(tmpphn_st2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = n - apples - oranges\n        val applesAndOranges = apples\
    \ + oranges\n        val applesAndOrangesAndMangos = applesAndOranges + mangos\n\
    \        applesAndOrangesAndMangos\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpi_9r2sq_.scala:21:23 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = n - apples\
    \ - oranges\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((apples\
    \ : Array[Int]))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi_9r2sq_.scala:22:38\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOranges\e[0m = apples + oranges\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ Array[Int], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val fruitsInBasketCount = fruitsInBasket.size\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\"and\").map(_.trim).map(_.toInt)\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.size\n        val mangoFruitsInBasket = fruitsInBasket.filter(_\
    \ % 2 == 0).sum\n        val mangoFruitsInBasketCount = fruitsInBasketCount -\
    \ mangoFruitsInBasket\n        val mangoFruitsInBasketPercentage = (mangoFruitsInBasket\
    \ / fruitsInBasketCount) * 100\n        val mangoFruitsInBasketPercentageInBasket\
    \ = mangoFruitsInBasketPercentage.toInt\n        val mangoFruitsInBasketPercentageInBasketInBasket\
    \ = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasket\n        val mangoFruitsInBasketPercentageInBasketInBasket\
    \ = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasketInBasket\n    \
    \    val mangoFruitsInBasketPercentageInBasketInBasketInBasket = fruitsInBasketCount\
    \ * mangoFruitsInBasketPercentageInBasketInBasketInBasket\n        val mangoFruitsInBasketPercentageInBasketInBasketInBasketInBasket\
    \ = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasketInBasketInBasketInBasket\n\
    \        val mangoFruitsInBasketPercentageInBasketInBasketInBasketInBasketInBasket\
    \ = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasketInBasketInBasketInBasketInBasket\n\
    \        val mangoFruitsInBasketPercentageInBasketInBasketInBasketInBasketInBasketInBasket\
    \ = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasketInBasketInBasket\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzasy29q_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketPercentageInBasketInBasket\e\
    [0m = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasketInBasket\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketPercentageInBasketInBasket is already defined\
    \ as \e[33mvalue\e[0m \e[35mmangoFruitsInBasketPercentageInBasketInBasket\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpzasy29q_.scala:33:90 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketPercentageInBasketInBasketInBasket\e\
    [0m = fruitsInBasketCount * mangoFruitsInBasketPercentageInBasketInBasketInBasket\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketPercentageInBasketInBasketInBasket\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzasy29q_.scala:34:98\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitsInBasketPercentageInBasketInBasketInBasketInBasket\e[0m = fruitsInBasketCount\
    \ * mangoFruitsInBasketPercentageInBasketInBasketInBasketInBasket\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketPercentageInBasketInBasketInBasketInBasket\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzasy29q_.scala:35:106\
    \ --------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitsInBasketPercen"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt)\n      \
    \  val fruits = apples + oranges\n        val mangos = fruits.filter(_ % 2 ==\
    \ 0)\n        fruits.filter(_ % 2 != 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9b9io80t.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mfruits\e[0m = apples + oranges\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\
    \e[31m   |\e[0m match arguments ((oranges : Array[Int]))\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val fruitsInBasketCount = fruitsInBasket.size\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\"and\").map(_.trim).map(_.toInt)\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.size\n        val applesAndOrangesInBasketSum = applesAndOrangesInBasket.sum\n\
    \        val applesAndOrangesInBasketProduct = applesAndOrangesInBasket.product\n\
    \        val applesAndOrangesInBasketProductSum = applesAndOrangesInBasketProduct.sum\n\
    \        val applesAndOrangesInBasketProductProduct = applesAndOrangesInBasketProduct.product\n\
    \        val applesAndOrangesInBasketProductProductSum = applesAndOrangesInBasketProductProduct.sum\n\
    \        val applesAndOrangesInBasketProductProductProduct = applesAndOrangesInBasketProductProduct.product\n\
    \        val applesAndOrangesInBasketProductProductProductSum = applesAndOrangesInBasketProductProductSum.product\n\
    \        val applesAndOrangesInBasketProductProductProductSum = applesAndOrangesInBasketProductProductSum.product\n\
    \        val applesAndOrangesInBasketProductProductProductProduct = applesAndOrangesInBasketProductProductProduct.product\n\
    \        val applesAndOrangesInBasketProductProductProductProductSum = applesAndOrangesInBasketProductProductProductSum.product\n\
    \        val applesAndOrangesInBasketProductProductProductProductProduct = applesAndOrangesInBasketProductProductProductProduct.product\n\
    \        val applesAndOrangesInBasketProductProductProductProductProductSum =\
    \ applesAndOrangesInBasketProductProductProductProduct.product\n        val applesAndOrangesInBasketProductProductProductProductProductProduct\
    \ = applesAndOrangesInBasketProductProductProductProductSum.product\n        val\
    \ applesAndOrangesInBasketProductProductProductProductProductProductSum = applesAndOrangesInBasketProductProductProductProductProduct.product\n\
    \        val applesAndOrangesInBasketProductProductProductProductProductProduct\
    \ = applesAndOrangesInBasketProductProductProductProductProductSum.product\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6nc8rtd7.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesInBasketProductProductProductSum\e\
    [0m = applesAndOrangesInBasketProductProductSum.product\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesInBasketProductProductProductSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mapplesAndOrangesInBasketProductProductProductSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6nc8rtd7.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesInBasketProductProductProductProductProductProduct\e\
    [0m = applesAndOrangesInBasketProductProductProductProductProductSum.product\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesInBasketProductProductProductProductProductProduct\
    \ is already defined as \e[33mvalue\e[0m \e[35mapplesAndOrangesInBasketProductProductProductProductProductProduct\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6nc8rtd7.scala:29:81 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesInBasketProductSum\e\
    [0m = applesAndOrangesInBasketProduct.sum\n\e[31m\e[31m   |\e[0m             \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value sum is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6nc8rtd7.scala:30:85\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesInBasketProductProduct\e[0m = applesAndOrangesInBasketProduct.produ"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsAndOranges = fruits + \" \" + oranges\n    \
    \    val fruitsAndApples = fruits + \" \" + apples\n        val applesAndMango\
    \ = apples + \" \" + mango\n        val fruitsAndMango = fruits + \" \" + mango\n\
    \        val fruitsAndMangoAndApples = fruits + \" \" + mango + \" \" + apples\n\
    \        val applesAndMangoAndOranges = apples + \" \" + mango + \" \" + oranges\n\
    \        val fruitsAndMangoAndOranges = fruits + \" \" + mango + \" \" + oranges\n\
    \        val fruitsAndMangoAndOrangesAndApples = fruits + \" \" + mango + \" \"\
    \ + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples =\
    \ fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAndOrangesAndApples\
    \ = fruits + \" \" + mango + \" \" + oranges + \" \" + apples\n        val fruitsAndMangoAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp959mfn6f.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp959mfn6f.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfruitsAndMangoAndOrangesAndApples\e[0m = fruits + \e[31m\" \"\e[0m + mango\
    \ + \e[31m\" \"\e[0m + oranges + \e[31m\" \"\e[0m + apples\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitsAndMangoAndOrangesAndApples is already defined as \e\
    [33mvalue\e[0m \e[35mfruitsAndMangoAndOrangesAndApples\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp959mfn6f.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfruitsAndMangoAndOrangesAndApples\e[0m = fruits + \e[31m\" \"\e[0m + mango\
    \ + \e[31m\" \"\e[0m + oranges + \e[31m\" \"\e[0m + apples\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitsAndMangoAndOrangesAndApples is already defined as \e\
    [33mvalue\e[0m \e[35mfruitsAndMangoAndOrangesAndApples\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp959mfn6f.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfruitsAndMangoAndOrangesAndApples\e[0m = fruits + \e[31m\" \"\e[0m + mango\
    \ + \e[31m\" \"\e[0m + oranges + \e[31m\" \"\e[0m + apples\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitsAndMangoAndOrangesAndApples is already defined as \e\
    [33mvalue\e[0m \e[35mfruitsAndMangoAndOrangesAndApples\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplev"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val applesAndOranges\
    \ = apples ++ oranges\n        val applesAndMangos = apples ++ mangos\n      \
    \  val orangesAndMangos = oranges ++ mangos\n        val applesAndOrangesAndMangos\
    \ = applesAndOranges ++ applesAndMangos\n        val applesAndOrangesAndMangosCount\
    \ = applesAndOrangesAndMangos.length\n        val applesAndOrangesAndMangosSum\
    \ = applesAndOrangesAndMangos.sum\n        val applesAndOrangesAndMangosAverage\
    \ = applesAndOrangesAndMangosSum / applesAndOrangesAndMangosCount\n        val\
    \ applesAndOrangesAndMangosVariance = applesAndOrangesAndMangosSum / applesAndOrangesAndMangosCount\
    \ * (applesAndOrangesAndMangosSum - applesAndOrangesAndMangosAverage)\n      \
    \  val applesAndOrangesAndMangosStandardDeviation = math.sqrt(applesAndOrangesAndMangosVariance)\n\
    \        val applesAndOrangesAndMangosStandardError = applesAndOrangesAndMangosStandardDeviation\
    \ / math.sqrt(applesAndOrangesAndMangosCount)\n        val applesAndOrangesAndMangosStandardErrorPercentage\
    \ = applesAndOrangesAndMangosStandardError / applesAndOrangesAndMangosAverage\n\
    \        val applesAndOrangesAndMangosStandardErrorPercentageInPercentage = applesAndOrangesAndMangosStandardErrorPercentage\
    \ * 100\n        val applesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentage\
    \ = applesAndOrangesAndMangosStandardErrorPercentageInPercentage * 100\n     \
    \   val applesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentageInPercentage\
    \ = applesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentage *\
    \ 100\n        val applesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentageInPercentageInPercentage\
    \ = applesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentageInPercentage\
    \ * 100\n        val applesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentageInPercentageInPercentageInPercentage\
    \ = applesAndOrangesAndMang\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpctbv0fjk.scala:37:123 -----------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosStandardErrorPercentageInPercentageInPercentageInPercentageInPercentageInPercentage\e\
    [0m = applesAndOrangesAndMang\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             Not found: applesAndOrangesAndMang\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpctbv0fjk.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.split(\" \").filter(_ != \"\").length\n        val oranges\
    \ = s.split(\" \").filter(_ != \"\").length\n        val mango = apples - oranges\n\
    \        val basket = s.split(\" \").filter(_ != \"\").mkString(\"\")\n      \
    \  basket.toLong - mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5applesand6oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp77you0e3.scala:23)\n\
    \tat Problem$.main(tmp77you0e3.scala:26)\n\tat Problem.main(tmp77you0e3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mangos = n - apples\
    \ - oranges - fruits\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxn41skp9.scala:20)\n\
    \tat Problem$.main(tmpxn41skp9.scala:26)\n\tat Problem.main(tmpxn41skp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges ++ mangos\n        val appleCount = apples.sum\n        val orangeCount\
    \ = oranges.sum\n        val mangoCount = mangos.sum\n        val fruitCount =\
    \ fruits.sum\n        val appleSum = apples.sum\n        val orangeSum = oranges.sum\n\
    \        val mangoSum = mangos.sum\n        val fruitSum = fruits.sum\n      \
    \  val appleSum = apples.sum\n        val orangeSum = oranges.sum\n        val\
    \ mangoSum = mangos.sum\n        val fruitSum = fruits.sum\n        val appleSum\
    \ = apples.sum\n        val orangeSum = oranges.sum\n        val mangoSum = mangos.sum\n\
    \        val fruitSum = fruits.sum\n        val appleSum = apples.sum\n      \
    \  val orangeSum = oranges.sum\n        val mangoSum = mangos.sum\n        val\
    \ fruitSum = fruits.sum\n        val appleSum = apples.sum\n        val orangeSum\
    \ = oranges.sum\n        val mangoSum = mangos.sum\n        val fruitSum = fruits.sum\n\
    \        val appleSum = apples.sum\n        val orangeSum = oranges.sum\n    \
    \    val mangoSum = mangos.sum\n        val fruitSum = fruits.sum\n        val\
    \ appleSum = apples.sum\n        val orangeSum = oranges.sum\n        val mangoSum\
    \ = mangos.sum\n        val fruitSum = fruits.sum\n        val appleSum = apples.sum\n\
    \        val orangeSum = oranges.sum\n        val mangoSum = mangos.sum\n    \
    \    val fruitSum = fruits.sum\n        val appleSum = apples.sum\n        val\
    \ orangeSum = oranges.sum\n        val mangoSum = mangos.sum\n        val fruitSum\
    \ = fruits.sum\n        val appleSum = apples.sum\n        val orangeSum = oranges.sum\n\
    \        val mangoSum = mangos.sum\n        val fruitSum = fruits.sum\n      \
    \  val appleSum = apples.sum\n        val orangeSum = oranges.sum\n        val\
    \ mangoSum = mangos.sum\n        val fruitSum = fruits.sum\n        val appleSum\
    \ = apples.sum\n        val orangeSum = oranges.sum\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwms0zxrr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mappleSum\e[0m = apples.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mappleSum\
    \ is already defined as \e[33mvalue\e[0m \e[35mappleSum\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwms0zxrr.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36morangeSum\e[0m = oranges.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morangeSum is already defined as \e[33mvalue\e[0m \e[35morangeSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwms0zxrr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoSum\e[0m = mangos.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangoSum is\
    \ already defined as \e[33mvalue\e[0m \e[35mmangoSum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwms0zxrr.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfruitSum\e[0m = fruits.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitSum is already defined as \e[33mvalue\e[0m \e[35mfruitSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwms0zxrr.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mappleSum\e[0m = apples.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mappleSum is\
    \ already defined as \e[33mvalue\e[0m \e[35mappleSum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the sa"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val fruits = s.split(\"\
    \ \")\n        val appleFruits = fruits.filter(_ == \"apples\")\n        val orangeFruits\
    \ = fruits.filter(_ == \"oranges\")\n        val mangoFruits = fruits.filter(_\
    \ == \"mango\")\n        val appleFruitCount = appleFruits.toSet.size // appleFruits.toSet\
    \ is a Set[String]\n        val orangeFruitCount = orangeFruits.toSet.size //\
    \ orangeFruits.toSet is a Set[String]\n        val mangoFruitCount = mangoFruits.toSet.size\
    \ // mangoFruits.toSet is a Set[String]\n        val appleFruitCount = appleFruits.toSet.size\
    \ // appleFruits.toSet is a Set[String]\n        val orangeFruitCount = orangeFruits.toSet.size\
    \ // orangeFruits.toSet is a Set[String]\n        val mangoFruitCount = mangoFruits.toSet.size\
    \ // mangoFruits.toSet is a Set[String]\n        val appleFruitCount = appleFruits.toSet.size\
    \ // appleFruits.toSet is a Set[String]\n        val orangeFruitCount = orangeFruits.toSet.size\
    \ // orangeFruits.toSet is a Set[String]\n        val mangoFruitCount = mangoFruits.toSet.size\
    \ // mangoFruits.toSet is a Set[String]\n        val appleFruitCount = appleFruits.toSet.size\
    \ // appleFruits.toSet is a Set[String]\n        val orangeFruitCount = orangeFruits.toSet.size\
    \ // orangeFruits.toSet is a Set[String]\n        val mangoFruitCount = mangoFruits.toSet.size\
    \ // mangoFruits.toSet is a Set[String]\n        val appleFruitCount = appleFruits.toSet.size\
    \ // appleFruits.toSet is a Set[String]\n        val orangeFruitCount = orangeFruits.toSet.size\
    \ // orangeFruits.toSet is a Set[String]\n        val mangoFruitCount = mangoFruits.toSet.size\
    \ // mangoFruits.\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphv0ru5yu.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mappleFruitCount\e[0m = appleFruits.toSet.size\
    \ \e[34m// appleFruits.toSet is a Set[String]\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mappleFruitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mappleFruitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphv0ru5yu.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36morangeFruitCount\e[0m = orangeFruits.toSet.size \e[34m// orangeFruits.toSet\
    \ is a Set[String]\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morangeFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35morangeFruitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphv0ru5yu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitCount\e[0m = mangoFruits.toSet.size\
    \ \e[34m// mangoFruits.toSet is a Set[String]\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangoFruitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangoFruitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphv0ru5yu.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mappleFruitCount\e[0m = appleFruits.toSet.size \e[34m// appleFruits.toSet\
    \ is a Set[String]\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mappleFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mappleFruitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplev"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges\
    \ - 1\n        val fruits = s.split(\" \")\n        val appleFruits = fruits.filter(_\
    \ == \"apples\")\n        val orangeFruits = fruits.filter(_ == \"oranges\")\n\
    \        val mangoFruits = fruits.filter(_ == \"mango\")\n        val appleFruitCount\
    \ = appleFruits.toSet.size \n        val orangeFruitCount = orangeFruits.toSet.size\
    \ \n        val mangoFruitCount = mangoFruits.toSet.size \n        val totalFruitCount\
    \ = appleFruitCount + orangeFruitCount + mangoFruitCount\n        val mangoFruitCount\
    \ = mangoFruits.toSet.size \n        val totalFruitCount = appleFruitCount + orangeFruitCount\
    \ + mangoFruitCount\n        val mangoFruitCount = mangoFruits.toSet.size \n \
    \       val totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n\
    \        val mangoFruitCount = mangoFruits.toSet.size \n        val totalFruitCount\
    \ = appleFruitCount + orangeFruitCount + mangoFruitCount\n        val mangoFruitCount\
    \ = mangoFruits.toSet.size \n        val totalFruitCount = appleFruitCount + orangeFruitCount\
    \ + mangoFruitCount\n        val mangoFruitCount = mangoFruits.toSet.size \n \
    \       val totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n\
    \        val mangoFruitCount = mangoFruits.toSet.size \n        val totalFruitCount\
    \ = appleFruitCount + orangeFruitCount + mangoFruitCount\n        val mangoFruitCount\
    \ = mangoFruits.toSet.size \n        val totalFruitCount = appleFruitCount + orangeFruitCount\
    \ + mangoFruitCount\n        val mangoFruitCount = mangoFruits.toSet.size \n \
    \       val totalFruitCount = appleFruitCount + orangeFruitCount + mangoFruitCount\n\
    \        val mangoFru\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hx9lbcp.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hx9lbcp.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitCount\e[0m = mangoFruits.toSet.size \n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmangoFruitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mmangoFruitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hx9lbcp.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalFruitCount\e[0m = appleFruitCount + orangeFruitCount + mangoFruitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mtotalFruitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2hx9lbcp.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitCount\e[0m = mangoFruits.toSet.size\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mmangoFruitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2hx9lbcp.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitCount\e[0m = appleFruitCount\
    \ + orangeFruitCount + mangoFruitCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitCount is already defined as \e[33mvalue\e[0m \e\
    [35mtotal"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val mangos = fruits.filter(x\
    \ => x % 2 == 0)\n        val count = mangos.length\n        val totalMangos =\
    \ mangos.sum\n        val totalFruits = fruits.sum\n        val totalMangoFruits\
    \ = totalMangos * totalFruits\n        val totalMangoFruitsPerApple = totalMangoFruits\
    \ / apples.sum\n        val totalMangoFruitsPerOrange = totalMangoFruits / oranges.sum\n\
    \        val totalMangoFruitsPerMango = totalMangoFruits / mangos.sum\n      \
    \  val totalMangoFruitsPerAppleAndOrange = totalMangoFruitsPerApple * totalMangoFruitsPerOrange\n\
    \        val totalMangoFruitsPerAppleAndMango = totalMangoFruitsPerApple * totalMangoFruitsPerMango\n\
    \        val totalMangoFruitsPerOrangeAndMango = totalMangoFruitsPerOrange * totalMangoFruitsPerMango\n\
    \        val totalMangoFruitsPerAppleAndOrangeAndMango = totalMangoFruitsPerAppleAndOrange\
    \ * totalMangoFruitsPerMango\n        val totalMangoFruitsPerOrangeAndAppleAndMango\
    \ = totalMangoFruitsPerOrangeAndAppleAndMango * totalMangoFruitsPerMango\n   \
    \     val totalMangoFruitsPerAppleAndOrangeAndMangoAndCount = totalMangoFruitsPerAppleAndOrangeAndMango\
    \ * count\n        totalMangoFruitsPerAppleAndOrangeAndMangoAndCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8dxch804.scala:34:56 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruitsPerOrangeAndAppleAndMango\e\
    [0m = totalMangoFruitsPerOrangeAndAppleAndMango * totalMangoFruitsPerMango\n\e\
    [31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mtotalMangoFruitsPerOrangeAndAppleAndMango\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples.toLong\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp3d3fh9bg.scala:19)\n\
    \tat Problem$.main(tmp3d3fh9bg.scala:25)\n\tat Problem.main(tmp3d3fh9bg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val mangoFruits = fruitsInBasket - fruitsInBasket.toLong\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\" \").length\n        val mangoFruitsInBasket = mangoFruits.toLong\n\
    \        val applesAndOrangesInBasketAndFruits = applesAndOrangesInBasket + fruitsInBasket\n\
    \        val mangoFruitsInBasketAndFruits = mangoFruitsInBasket + fruitsInBasket\n\
    \        val applesAndOrangesInBasketAndFruitsAndMangoFruits = applesAndOrangesInBasketAndFruits\
    \ + mangoFruits\n        val mangoFruitsInBasketAndFruitsAndMangoFruits = mangoFruitsInBasketAndFruits\
    \ + mangoFruits\n        val applesAndOrangesInBasketAndFruitsAndMangoFruitsAndMangoFruits\
    \ = applesAndOrangesInBasketAndFruitsAndMangoFruits\n        val mangoFruitsInBasketAndFruitsAndMangoFruitsAndMangoFruits\
    \ = mangoFruitsInBasketAndFruitsAndMangoFruits\n        val mangoFruitsInBasketAndFruitsAndMangoFruitsAndMangoFruitsAndMangoFruits\
    \ = mangoFruitsInBasketAndFruitsAndMangoFruitsAndMangoFruits\n        val mangoFruitsInBasketAndFruitsAndMangoFruitsAndMangoFruitsAndMangoFruitsAndMangoFruits\
    \ = mangoFruitsInBasketAndFruitsAndMangoFruitsAndMangoFruitsAndMangoFruits\n \
    \       val mangoFruitsInBasketAndFruitsAndMangoFruitsAndMangoFruitsAndM\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeidj3rwc.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeidj3rwc.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = mangos.sum\n\
    \        val totalCount = appleCount + orangeCount + mangoCount\n        val applePercentage\
    \ = apples.sum / totalCount * 100\n        val orangePercentage = oranges.sum\
    \ / totalCount * 100\n        val mangoPercentage = mangos.sum / totalCount *\
    \ 100\n        val appleAndOrangePercentage = apples.sum + oranges.sum / totalCount\
    \ * 100\n        val mangoAndApplePercentage = mangos.sum + apples.sum / totalCount\
    \ * 100\n        val appleAndOrangeAndMangoPercentage = appleAndOrangePercentage\
    \ + mangoAndApplePercentage\n        val appleAndOrangeAndMangoPercentagePercentage\
    \ = appleAndOrangeAndMangoPercentage / totalCount * 100\n        val appleAndOrangeAndMangoPercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentage.toDouble\n        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentage.toInt\n        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentage.toLong\n  \
    \      val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage.toFloat\n\
    \        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentage.toDouble\n\
    \        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage.toInt\n\
    \        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage.toLong\n\
    \        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage.toFloat\n\
    \        val appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = appleAndOrangeAndMangoPercentagePercentagePercentagePercentage\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8lkr4o6v.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage\e\
    [0m = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage.toFloat\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mappleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage\
    \ is already defined as \e[33mvalue\e[0m \e[35mappleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8lkr4o6v.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage\e\
    [0m = appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage.toFloat\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mappleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  appleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentage\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp8lkr4o6v.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangeAndMangoPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\e\
    [0m = appleAndOrangeAndMangoPercent"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = s.split(\" \").map(_.toInt).filter(_ % 2 == 0).sum\n     \
    \   val totalFruits = apples + oranges + mangos\n        val totalMangos = apples\
    \ + mangos + oranges\n        val totalApples = apples + mangos + oranges\n  \
    \      val totalOranges = oranges + mangos\n        val totalMangoFruits = mangos\
    \ + oranges\n        val totalAppleFruits = apples + oranges\n        val totalOrangeFruits\
    \ = oranges\n        val totalFruitFruits = apples + oranges + mangos\n      \
    \  val totalFruitMangoFruits = apples + mangos + oranges\n        val totalFruitOrangeFruits\
    \ = oranges + mangos\n        val totalFruitAppleFruits = apples + oranges\n \
    \       val totalFruitOrangeMangoFruits = oranges + mangos\n        val totalFruitAppleMangoFruits\
    \ = apples + mangos + oranges\n        val totalFruitAppleOrangeFruits = apples\
    \ + oranges + mangos\n        val totalFruitAppleOrangeMangoFruits = apples +\
    \ oranges + mangos\n        val totalFruitAppleMangoOrangeFruits = apples + mangos\
    \ + oranges + mangos\n        val totalFruitAppleOrangeMangoOrangeFruits = apples\
    \ + oranges + mangos + oranges + mangos\n        val totalFruitAppleOrangeMangoOrangeMangoFruits\
    \ = apples + oranges + mangos + oranges + mangos + mangos\n        val totalFruitAppleOrangeMangoOrangeMangoOrangeFruits\
    \ = apples + oranges + mangos + oranges + mangos + oranges + mangos + mangos\n\
    \        val totalFruitAppleOrangeMangoOrangeMangoOrangeMangoFruits = apples +\
    \ oranges + mangos + oranges + mangos + oranges + mangos + mangos + mangos\n \
    \       val totalFruitAppleOrangeMangoOrangeMangoOrangeMangoOrangeFruits = apples\
    \ + oranges + mangos + orange\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjmqnepmn.scala:42:103 -----------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitAppleOrangeMangoOrangeMangoOrangeMangoOrangeFruits\e\
    [0m = apples + oranges + mangos + orange\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                    Not found: orange\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjmqnepmn.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \")(1).split(\"and\")(0).toInt\n\
    \        val fruits = s.split(\" \")(2).toInt\n        val mango = fruits - apples\
    \ - oranges\n        mango\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpb181afyu.scala:20)\n\
    \tat Problem$.main(tmpb181afyu.scala:26)\n\tat Problem.main(tmpb181afyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.split(\" \").map(_.toLong).sum\n        val oranges =\
    \ s.split(\" \").map(_.toLong).sum\n        val mangos = apples - oranges\n  \
    \      mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpzaok6n84.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpzaok6n84.scala:19)\n\
    \tat Problem$.main(tmpzaok6n84.scala:25)\n\tat Problem.main(tmpzaok6n84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = apples.filter(_ % 2 == 0).sum\n        val totalFruits =\
    \ apples.sum + oranges.sum + mangos\n        val totalFruitsPerApple = apples.sum\
    \ / totalFruits\n        val totalFruitsPerOrange = oranges.sum / totalFruits\n\
    \        val totalFruitsPerMango = mangos.sum / totalFruits\n        val totalFruitsPerAppleAndOrange\
    \ = totalFruitsPerApple * totalFruitsPerOrange\n        val totalFruitsPerAppleAndMango\
    \ = totalFruitsPerApple * totalFruitsPerMango\n        val totalFruitsPerOrangeAndMango\
    \ = totalFruitsPerOrange * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMango\
    \ = totalFruitsPerAppleAndOrange * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotalFruits\
    \ = totalFruitsPerAppleAndOrangeAndMango * totalFruits\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotalFruitsPerApple\
    \ = totalFruitsPerAppleAndOrangeAndMango * totalFruitsPerApple\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotalFruitsPerOrange\
    \ = totalFruitsPerAppleAndOrangeAndMango * totalFruitsPerOrange\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotalFruitsPerMango\
    \ = totalFruitsPerAppleAndOrangeAndMango * totalFruitsPerMango\n        val totalFruitsPerAppleAndOrangeAndMangoAndTotalFruitsPerAppleAndOrange\
    \ = totalFruitsPerAppleAndOrangeAndMangoAndTotalFruits * totalFruitsPerAppleAndOrange\n\
    \        val totalFruitsPerAppleAndOrangeAndMangoAndTotalFruitsPerAppleAndOrangeAndMango\
    \ = totalFruitsPerAppleAndOrangeAndMangoAndTotalFruits * totalF\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplh8e1hmg.scala:25:41 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mtotalFruitsPerMango\e[0m\
    \ = mangos.sum / totalFruits\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ sum is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplh8e1hmg.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val applesAndOrangesArray = applesAndOranges.split(\"\
    \ \")\n        val applesAndOrangesArrayLength = applesAndOrangesArray.length\n\
    \        val applesAndOrangesArraySum = applesAndOrangesArray.reduceLeft(_ + _)\n\
    \        val applesAndOrangesArraySumInt = applesAndOrangesArraySum.toInt\n  \
    \      val fruitArray = fruits.split(\" \")\n        val fruitArrayLength = fruitArray.length\n\
    \        val fruitArraySum = fruitArray.reduceLeft(_ + _)\n        val fruitArraySumInt\
    \ = fruitArraySum.toInt\n        val applesAndOrangesArraySumInt = applesAndOrangesArraySumInt\
    \ * fruitArrayLength\n        val applesAndOrangesArraySum = applesAndOrangesArraySumInt\
    \ * applesAndOrangesArrayLength\n        val applesAndOrangesArraySum = applesAndOrangesArraySum\
    \ / applesAndOrangesArrayLength\n        val applesAndOrangesArraySumInt = applesAndOrangesArraySum.toInt\n\
    \        val fruitArraySumInt = fruitArraySumInt * fruitArrayLength\n        val\
    \ fruitArraySum = fruitArraySumInt * fruitArrayLength\n        val fruitArraySum\
    \ = fruitArraySum / fruitArrayLength\n        val fruitArraySumInt = fruitArraySum.toInt\n\
    \        val applesAndOrangesArraySumInt = applesAndOrangesArraySumInt * applesAndOrangesArrayLength\n\
    \        val applesAndOrangesArraySum = applesAndOrangesArraySumInt * applesAndOrangesArrayLength\n\
    \        val applesAndOrangesArraySum = applesAndOrangesArraySum / applesAndOrangesArrayLength\n\
    \        val applesAndOrangesArraySumInt = applesAndOrangesArraySum.toInt\n  \
    \      val applesAndOrangesArraySum = applesAndOrangesArraySumInt * applesAndOrangesArrayLength\n\
    \        val applesAndOrangesArraySum = applesAndOrangesArraySum / applesAndOrangesArrayLength\n\
    \        val applesAndOrangesArraySumInt = applesAndOrangesArraySum.toInt\n  \
    \      val applesAndOrangesArraySum = applesAndOrangesArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpesqhx8fm.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesArraySumInt\e\
    [0m = applesAndOrangesArraySumInt * fruitArrayLength\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesArraySumInt is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesArraySumInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpesqhx8fm.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesArraySum\e\
    [0m = applesAndOrangesArraySumInt * applesAndOrangesArrayLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesArraySum is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesArraySum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpesqhx8fm.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesArraySum\e\
    [0m = applesAndOrangesArraySum / applesAndOrangesArrayLength\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesArraySum is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesArraySum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpesqhx8fm.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesArraySumInt\e\
    [0m = applesAndOrangesArraySum.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesArraySumInt is alr"
  stdout: ''
  timestamp: 1659979884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(0).trim\n        val oranges = s.split(\"\
    oranges and \")(0).trim\n        val mangos = s.split(\"mango and \")(0).trim\n\
    \        val appleAndOranges = apples + oranges\n        val appleAndMangos =\
    \ apples + mangos\n        val orangeAndMangos = oranges + mangos\n        val\
    \ appleAndOrangesAndMangos = appleAndOranges + mangos\n        val appleAndOrangesAndMangosAndApples\
    \ = appleAndOrangesAndMangos + apples\n        val appleAndOrangesAndMangosAndOranges\
    \ = appleAndOrangesAndMangos + oranges\n        val appleAndOrangesAndMangosAndOrangesAndApples\
    \ = appleAndOrangesAndMangosAndApples + apples\n        val appleAndOrangesAndMangosAndOrangesAndOranges\
    \ = appleAndOrangesAndMangosAndOranges + oranges\n        val appleAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndOrangesAndMangos + mangos\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndApples\
    \ = appleAndOrangesAndMangosAndOrangesAndMangos + apples\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = appleAndOrangesAndMangosAndOrangesAndMangos + oranges\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndApples\
    \ = appleAndOrangesAndMangosAndOrangesAndMangosAndApples + apples\n        val\
    \ appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndOranges = appleAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ + oranges\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndOrangesAndMangosAndOranges + mangos\n        val\
    \ appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndApples = appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ + apples\n\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgjvumeta.scala:30:58 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = appleAndOrangesAndMangosAndOrangesAndMangos + mangos\n\e[31m\e[31m   |\e\
    [0m                                                          ^\e[0m\n\e[31m  \
    \ |\e[0m  Recursive \e[33mvalue\e[0m \e[35mappleAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgjvumeta.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val mangos = fruits.filter(x\
    \ => x % 2 == 0)\n        val total = mangos.sum\n        val result = mangos.filter(x\
    \ => x % n == 0).sum\n        total * result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4u2aogc3.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp4u2aogc3.scala:19)\n\
    \tat Problem$.main(tmp4u2aogc3.scala:28)\n\tat Problem.main(tmp4u2aogc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = s.split(\" \")\n        val fruits = basket.filter(_\
    \ != \"apples\" && _ != \"oranges\" && _ != \"mango\")\n        fruits.size match\
    \ {\n            case 0 => mangos\n            case 1 => fruits.head.toLong\n\
    \            case _ => fruits.toSet.size match {\n                case 0 => mangos\n\
    \                case 1 => fruits.head.toLong\n                case _ => fruits.toSet.size\
    \ match {\n                    case 0 => mangos\n                    case 1 =>\
    \ fruits.head.toLong\n                    case _ => fruits.toSet.size match {\n\
    \                        case 0 => mangos\n                        case 1 => fruits.head.toLong\n\
    \                        case _ => fruits.toSet.size match {\n               \
    \             case 0 => mangos\n                            case 1 => fruits.head.toLong\n\
    \                            case _ => fruits.toSet.size match {\n           \
    \                     case 0 => mangos\n                                case 1\
    \ => fruits.head.toLong\n                                case _ => fruits.toSet.size\
    \ match {\n                                    case 0 => mangos\n            \
    \                        case 1 => fruits.head.toLong\n                      \
    \              case _ => fruits.toSet.size match {\n                         \
    \               case 0 => mangos\n                                        case\
    \ 1 => fruits.head.toLong\n                                        case _ => fruits.toSet.size\
    \ match {\n                                            case 0 => mangos\n    \
    \                                        case 1 => fruits.head.toLong\n      \
    \                                      case _ => fruits.toSet.size match {\n \
    \                                               case 0 => mangos\n           \
    \                                     case 1 => fruits.head.toLong\n         \
    \                                       case _ => fruits.toSet.size match {\n\
    \                                                    case 0 => mangos\n      \
    \                                              case 1 => fruits.head.toLong\n\
    \                                                    case _ => fruits.toSet.size\
    \ match {\n                                                        case 0 => mangos\n\
    \                                                        case 1 => fruits.head.toLong\n\
    \                                                        case _ => fruits.toSet.size\
    \ match {\n                                                            case 0\
    \ => mangos\n                                                            case\
    \ 1 => fruits.head.toLong\n                                                  \
    \          case _ => fruits.toSet.size match {\n                             \
    \                                   case 0 => mangos\n                       \
    \                                         case 1 => fruits.head.toLong\n     \
    \                                                           case _ => fruits.toSet.size\
    \ match {\n                                                                  \
    \  case 0 => mangos\n                                                        \
    \            case 1 => fruits.head.toLong\n                                  \
    \                                  case _ => fruits.toSet.size match {\n     \
    \                                                                   case 0 =>\
    \ mangos\n                                                                   \
    \     case 1 => fruits.head.toLong\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj554zdys.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpj554zdys.scala:23:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfruits\e[0m = basket.filter(_ != \e[31m\"apples\"\e[0m && _ != \e[31m\"\
    oranges\"\e[0m && _ != \e[31m\"mango\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj554zdys.scala:82:5 ---------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmpj554zdys.scala:74:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong\n        val oranges = s.toLong\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpovue2_3e.scala:20)\n\
    \tat Problem$.main(tmpovue2_3e.scala:26)\n\tat Problem.main(tmpovue2_3e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges ++ mangos\n        val basket = fruits.toSet\n        val count =\
    \ fruits.count(_ == 1)\n        val total = apples.sum + oranges.sum + mangos.sum\n\
    \        val result = if (count == total) mangos.sum\n        else mangos.sum\
    \ - fruits.count(_ == 0)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpgh2toscs.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpgh2toscs.scala:19)\n\
    \tat Problem$.main(tmpgh2toscs.scala:31)\n\tat Problem.main(tmpgh2toscs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mango = apples + oranges\
    \ - fruits\n        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp3qxilkc3.scala:20)\n\
    \tat Problem$.main(tmp3qxilkc3.scala:26)\n\tat Problem.main(tmp3qxilkc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(1).trim\n        val oranges = s.split(\"\
    oranges and \")(1).trim\n        val mangos = s.split(\"mango and \")(1).trim\n\
    \        val applesAndOranges = apples + oranges\n        val mangoAndApples =\
    \ mangos + apples\n        val applesAndOrangesAndMangos = applesAndOranges +\
    \ mangos\n        val applesAndOrangesAndMangosAndApples = applesAndOrangesAndMangos\
    \ + apples\n        val applesAndOrangesAndMangosAndApplesAndOranges = applesAndOrangesAndMangosAndApples\
    \ + oranges\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOranges + mangos\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ + oranges\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + mangos\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + oranges\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + mangos\n        val\
    \ applesAndOrangesAndMangos\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpirrtcc38.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpirrtcc38.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong\n        val oranges = apples.toLong - apples.toLong % 3\n\
    \        val mangos = oranges.toLong - oranges.toLong % 3\n        val fruits\
    \ = apples + oranges + mangos\n        fruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_u8ewdz.scala:26)\n\tat Problem.main(tmpa_u8ewdz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val numberOfApples = fruitsInBasket.sum\n        val numberOfOranges\
    \ = fruitsInBasket.map(_.toInt).sum\n        val numberOfMangos = fruitsInBasket.filter(_.toInt\
    \ > 0).sum\n        val numberOfMangoFruits = numberOfMangos - numberOfApples\
    \ - numberOfOranges\n        numberOfMangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pe89pja.scala:31)\n\tat Problem.main(tmp4pe89pja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mango\
    \ = apples + oranges\n        mango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp6rsd96m8.scala:19)\n\
    \tat Problem$.main(tmp6rsd96m8.scala:25)\n\tat Problem.main(tmp6rsd96m8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.toInt\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.toInt\n        val mangoFruits = fruitsInBasket - applesAndOrangesInBasket\n\
    \        mangoFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpphn_st2_.scala:23)\n\
    \tat Problem$.main(tmpphn_st2_.scala:29)\n\tat Problem.main(tmpphn_st2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val mango = fruits.filter(x =>\
    \ x % 2 == 0)\n        val total = mango.sum\n        total % n == 0 ? total /\
    \ n : -1\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdiex_yxu.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        total % n == \e[31m0\e[0m ? total / n : -\e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m     \
    \                value ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples\")(0).toLong\n        val oranges = s.split(\"oranges\"\
    )(0).toLong\n        val mangos = s.split(\"mango\")(0).toLong\n        val basket\
    \ = new mutable.HashMap[String, Long]()\n        basket.put(\"apples\", apples)\n\
    \        basket.put(\"oranges\", oranges)\n        basket.put(\"mangos\", mangos)\n\
    \        val total = apples + oranges + mangos\n        val numOfFruits = basket.filter(_._2\
    \ > 0).size\n        val numOfMangos = basket.filter(_._2 == 0).size\n       \
    \ val numOfMangoFruits = numOfMangos - numOfFruits\n        val numOfMangoFruitsPerApple\
    \ = numOfMangoFruits / apples\n        val numOfMangoFruitsPerOrange = numOfMangoFruits\
    \ / oranges\n        val numOfMangoFruitsPerMango = numOfMangoFruits / mangos\n\
    \        val numOfMangoFruitsPerAppleAndOrange = numOfMangoFruitsPerApple * numOfMangoFruitsPerOrange\n\
    \        val numOfMangoFruitsPerAppleAndMango = numOfMangoFruitsPerApple * numOfMangoFruitsPerMango\n\
    \        val numOfMangoFruitsPerOrangeAndMango = numOfMangoFruitsPerOrange * numOfMangoFruitsPerMango\n\
    \        val numOfMangoFruitsPerAppleAndOrangeAndMango = numOfMangoFruitsPerAppleAndOrange\
    \ * numOfMangoFruitsPerMango\n        val numOfMangoFruitsPerAppleAndOrangeAndMangoAndTotal\
    \ = numOfMangoFruitsPerAppleAndOrangeAndMango * total\n        val numOfMangoFruitsPerAppleAndOrangeAndMangoAndTotalPerApple\
    \ = numOfMangoFruitsPerAppleAndOrangeAndMangoAndTotal / apples\n        val numOfMangoFruitsPerAppleAndOrangeAndMangoAndTotalPerOrange\
    \ = num\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy9ox923.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsy9ox923.scala:39:73 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m        \e[33mval\e[0m \e[36mnumOfMangoFruitsPerAppleAndOrangeAndMangoAndTotalPerOrange\e\
    [0m = num\n\e[31m\e[31m   |\e[0m                                             \
    \                            ^^^\e[0m\n\e[31m   |\e[0m                       \
    \                                   Not found: num\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpsy9ox923.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples.toLong\n\
    \        val mango = apples + oranges\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmplg9ea1mg.scala:19)\n\
    \tat Problem$.main(tmplg9ea1mg.scala:25)\n\tat Problem.main(tmplg9ea1mg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges\
    \ - 1\n        val fruits = s.split(\" \")\n        val fruitCount = fruits.map(_.toInt).sum\n\
    \        val appleCount = fruitCount(0).toLong\n        val orangeCount = fruitCount(1).toLong\n\
    \        val mangoCount = fruitCount(2).toLong\n        val totalCount = appleCount\
    \ + orangeCount + mangoCount\n        val mangoFruits = mangoCount * mangos\n\
    \        val totalFruits = fruitCount * fruits\n        val totalFruitsCount =\
    \ totalFruits.map(_.toInt).sum\n        val totalMangoFruits = totalFruitsCount\
    \ - mangoFruits\n        totalMangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpi2zbuoop.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mappleCount\e[0m = fruitCount(\e\
    [31m0\e[0m).toLong\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         \e[33mvalue\e[0m \e[35mfruitCount\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpi2zbuoop.scala:25:26 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36morangeCount\e[0m = fruitCount(\e[31m1\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          \e[33mvalue\e[0m \e[35mfruitCount\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpi2zbuoop.scala:26:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mmangoCount\e[0m = fruitCount(\e[31m2\e[0m).toLong\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \        \e[33mvalue\e[0m \e[35mfruitCount\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpi2zbuoop.scala:29:37 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mtotalFruits\e[0m = fruitCount\
    \ * fruits\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((fruits : Array[String]))\n4 errors found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val mangoFruits = fruitsInBasket - applesAndOranges.split(\" \").length\n\
    \        mangoFruits\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmlrea4xz.scala:28)\n\tat Problem.main(tmpmlrea4xz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples.toLong\n\
    \        val mango = apples.toLong - oranges.toLong\n        mango\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpad1ufa43.scala:19)\n\
    \tat Problem$.main(tmpad1ufa43.scala:25)\n\tat Problem.main(tmpad1ufa43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val mangos = fruits.split(\"\
    \").filter(x => x == \"m\").length\n        apples + oranges + mangos\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"oranges\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpy8gvyxp_.scala:20)\n\
    \tat Problem$.main(tmpy8gvyxp_.scala:26)\n\tat Problem.main(tmpy8gvyxp_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits.toDouble / 2\n        fruits - mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeuflehl6.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        fruits - mangos\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Double\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val totalFruits = fruits.sum\n\
    \        val mangoFruits = fruits.filter(f => f > 0)\n        val totalMangoFruits\
    \ = mangoFruits.sum\n        val mangoFruitsPerApple = mangoFruits.filter(f =>\
    \ apples.contains(f)).size\n        val mangoFruitsPerOrange = mangoFruits.filter(f\
    \ => oranges.contains(f)).size\n        val mangoFruitsPerTotal = mangoFruitsPerApple\
    \ + mangoFruitsPerOrange\n        val mangoFruitsPerTotalPerApple = mangoFruitsPerTotal\
    \ / apples.sum\n        val mangoFruitsPerTotalPerOrange = mangoFruitsPerTotal\
    \ / oranges.sum\n        val mangoFruitsPerTotalPerTotal = mangoFruitsPerTotalPerApple\
    \ * mangoFruitsPerTotalPerOrange\n        val mangoFruitsPerTotalPerTotalPerApple\
    \ = mangoFruitsPerTotalPerTotal * mangoFruitsPerApple\n        val mangoFruitsPerTotalPerTotalPerOrange\
    \ = mangoFruitsPerTotalPerTotal * mangoFruitsPerOrange\n        val mangoFruitsPerTotalPerTotalPerTotal\
    \ = mangoFruitsPerTotalPerTotalPerApple + mangoFruitsPerTotalPerTotalPerOrange\n\
    \        mangoFruitsPerTotalPerTotalPerTotal\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmppuj972sq.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmppuj972sq.scala:19)\n\
    \tat Problem$.main(tmppuj972sq.scala:37)\n\tat Problem.main(tmppuj972sq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples\")(1).trim\n        val oranges = s.split(\"oranges\"\
    )(1).trim\n        val mangos = s.split(\"mango\")(1).trim\n        val applesAndOranges\
    \ = apples + oranges\n        val applesAndMangos = apples + mangos\n        val\
    \ orangesAndMangos = oranges + mangos\n        val applesAndOrangesAndMangos =\
    \ applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangos + orangesAndMangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndM\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsth2a7mt.scala:27:125 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: orangesAndMangosAndOrangesAndMangos\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsth2a7mt.scala:28:144\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       Not found: orangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsth2a7mt.scala:29:163\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: orangesAndMangosAndOranges"
  stdout: ''
  timestamp: 1659979894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").last.split(\" \").last.toInt\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"oranges\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpksloqyt9.scala:20)\n\
    \tat Problem$.main(tmpksloqyt9.scala:25)\n\tat Problem.main(tmpksloqyt9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples\")(0).split(\" \").map(_.toInt)\n        val oranges\
    \ = s.split(\"oranges\")(0).split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    mango\")(0).split(\" \").map(_.toInt)\n        val basket = apples ++ oranges\
    \ ++ mangos\n        val totalFruits = apples.sum + oranges.sum + mangos.sum\n\
    \        val totalFruitsCount = basket.sum\n        val fruitsInBasket = totalFruits\
    \ - totalFruitsCount\n        fruitsInBasket.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmphhhmbx2t.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmphhhmbx2t.scala:20)\n\
    \tat Problem$.main(tmphhhmbx2t.scala:29)\n\tat Problem.main(tmphhhmbx2t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt).sum\n        val oranges = s.split(\" \"\
    ).map(_.toInt).sum\n        val fruits = apples + oranges\n        val mangos\
    \ = fruits - n\n        mangos\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprc4wn8a8.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprc4wn8a8.scala:19)\n\
    \tat Problem$.main(tmprc4wn8a8.scala:26)\n\tat Problem.main(tmprc4wn8a8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val fruits = s.split(\" \").map(_.toInt).sum\n        val mangos = apples\
    \ - oranges\n        fruits - mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp1skimf42.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp1skimf42.scala:20)\n\
    \tat Problem$.main(tmp1skimf42.scala:26)\n\tat Problem.main(tmp1skimf42.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples\")(0).toLong\n        val oranges = s.split(\"oranges\"\
    )(0).toLong\n        val mangos = s.split(\"mango\")(0).toLong\n        val fruits\
    \ = apples + oranges + mangos\n        val totalFruits = fruits.toLong\n     \
    \   val basket = n.toLong\n        val fruitsInBasket = basket - totalFruits\n\
    \        fruitsInBasket.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpsj5u2_2l.scala:19)\n\
    \tat Problem$.main(tmpsj5u2_2l.scala:29)\n\tat Problem.main(tmpsj5u2_2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val numberOfApples = applesInBasket.length\n        val numberOfOranges\
    \ = orangesInBasket.length\n        val numberOfFruits = fruitsInBasket.length\n\
    \        val numberOfMangos = fruitsInBasket.filter(x => x % 2 == 1).length\n\
    \        val numberOfMangoFruits = fruitsInBasket.filter(x => x % 2 == 0).length\n\
    \        val numberOfMangoFruitsPerApple = numberOfMangoFruits / numberOfApples\n\
    \        val numberOfMangoFruitsPerOrange = numberOfMangoFruits / numberOfOranges\n\
    \        val numberOfMangoFruitsPerFruit = numberOfMangoFruits / numberOfFruits\n\
    \        val numberOfMangoFruitsPerAppleAndOrange = numberOfMangoFruitsPerApple\
    \ * numberOfMangoFruitsPerOrange\n        val numberOfMangoFruitsPerAppleAndFruit\
    \ = numberOfMangoFruitsPerAppleAndOrange * numberOfMangoFruitsPerFruit\n     \
    \   val numberOfMangoFruitsPerAppleAndOrangeAndFruit = numberOfMangoFruitsPerAppleAndOrange\
    \ * numberOfMangoFruitsPerFruit\n        val numberOfMangoFruitsPerAppleAndOrangeAndFruitPerApple\
    \ = numberOfMangoFruitsPerAppleAndOrange * numberOfMangoFruitsPerFruit * numberOfMangoFruitsPerApple\n\
    \        val numberOfMangoFruitsPerAppleAndOrangeAndFruitPerOrange = numberOfMangoFruitsPerAppleAndOrange\
    \ * numberOfMangoFruitsPerFruit * numberOfMangoFruitsPerOrange\n        val numberOfMangoFruitsPerAppleAndOrangeAndFruitPerFruit\
    \ = numberOfMangoFruitsPerAppleAndOrange * numberOfMangoFruitsPerFruit * numberOfMangoFruitsPerFruit\n\
    \        val numberOfMango\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0tt002f.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx0tt002f.scala:24:29\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnumberOfApples\e[0m = applesInBasket.length\n\e[31m\e[31m   |\e[0m       \
    \                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: applesInBasket\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx0tt002f.scala:25:30 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumberOfOranges\e[0m = orangesInBasket.length\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: orangesInBasket\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0tt002f.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\" \")(1).toLong\n\
    \        val fruits = s.split(\" \")(2).toLong\n        val mango = apples + oranges\
    \ - fruits\n        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp3qxilkc3.scala:20)\n\
    \tat Problem$.main(tmp3qxilkc3.scala:26)\n\tat Problem.main(tmp3qxilkc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = s.split(\" \").map(_.toInt).filter(_ % 2 == 0).sum\n     \
    \   val total = apples + oranges + mangos\n        val applesAndOranges = apples\
    \ + oranges\n        val mangoFruits = applesAndOranges - mangos\n        val\
    \ applesAndOrangesAndMangoFruits = applesAndOranges + mangos\n        val applesAndOrangesAndMangoFruitsAndTotal\
    \ = applesAndOrangesAndMangoFruits + total\n        applesAndOrangesAndMangoFruitsAndTotal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpz0_uiudg.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpz0_uiudg.scala:20)\n\
    \tat Problem$.main(tmpz0_uiudg.scala:30)\n\tat Problem.main(tmpz0_uiudg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \").map(_.toInt)\n        val oranges = s.split(\"\
    oranges and \").map(_.toInt)\n        val fruits = s.split(\"fruits\").map(_.toInt)\n\
    \        val mangos = s.split(\"mango\").map(_.toInt)\n        val basket = fruits.zip(apples).zip(oranges).zip(mangos)\n\
    \        val count = basket.foldLeft(0)((a, b) => a + b)\n        count - n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpb8m9h2db.scala:24:51 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = basket.foldLeft(\e\
    [31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e[31m   |\e[0m    \
    \                                             ^^^\e[0m\n\e[31m   |\e[0m None of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\
    \e[31m   |\e[0m match arguments ((b : (((Int, Int), Int), Int)))\n1 error found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val mangoFruits = fruitsInBasket - fruitsInBasket.toLong * 2\n        val\
    \ applesAndOrangesInBasket = applesAndOranges.split(\" \").length\n        val\
    \ applesAndOrangesInBasketAndMango = applesAndOrangesInBasket + mangoFruits\n\
    \        applesAndOrangesInBasketAndMango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0pjqcyy.scala:30)\n\tat Problem.main(tmpi0pjqcyy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val mangos = fruitsInBasket - applesAndOranges.split(\" \").length\n    \
    \    mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxa0tbfzz.scala:28)\n\tat Problem.main(tmpxa0tbfzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.split(\" \").map(_.toLong).sum\n        val oranges =\
    \ s.split(\" \").map(_.toLong).sum\n        val mangos = apples - oranges\n  \
    \      mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpzaok6n84.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpzaok6n84.scala:19)\n\
    \tat Problem$.main(tmpzaok6n84.scala:25)\n\tat Problem.main(tmpzaok6n84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.replaceAll(\"[^0-9]\", \"\").length\n        val oranges\
    \ = s.replaceAll(\"[^0-9]\", \"\").length\n        val mangos = apples - oranges\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ntwoy0k.scala:25)\n\tat Problem.main(tmp4ntwoy0k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val applesAndOrangesInBasket = applesAndOranges.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val mangos = fruitsInBasket.filter(_ % 2 == 1).sum\n        val mangoInBasket\
    \ = fruitsInBasket.filter(_ % 2 == 1).sum\n        val mangoInBasketAndOranges\
    \ = fruitsInBasket.filter(_ % 2 == 1).filter(_ % 2 == 1).sum\n        val mangoInBasketAndOrangesInBasket\
    \ = fruitsInBasket.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).sum\n\
    \        val mangoInBasketAndOrangesInBasketAndOranges = fruitsInBasket.filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).sum\n   \
    \     val mangoInBasketAndOrangesInBasketAndOrangesInBasket = fruitsInBasket.filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).sum\n        val mangoInBasketAndOrangesInBasketAndOrangesInBasketAndOranges\
    \ = fruitsInBasket.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).sum\n        val mangoInBasketAndOrangesInBasketAndOrangesInBasketAndOrangesInBasket\
    \ = fruitsInBasket.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).sum\n        val mangoInBasketAndOrangesInBasketAndOrangesInBasketAndOrangesInBasketAndOranges\
    \ = fruitsInBasket.filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgg5h75mb.scala:33:250 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmangoInBasketAndOrangesInBasketAndOrangesInBasketAndOrangesInBasketAndOranges\e\
    [0m = fruitsInBasket.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                                                                            \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgg5h75mb.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val totalFruits = fruits.sum\n\
    \        val mangoFruits = fruits.filter(_ % 2 == 1).sum\n        (mangoFruits\
    \ - totalFruits)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp4qtzlg4k.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp4qtzlg4k.scala:19)\n\
    \tat Problem$.main(tmp4qtzlg4k.scala:27)\n\tat Problem.main(tmp4qtzlg4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(1).trim\n        val oranges = s.split(\"\
    oranges and \")(1).trim\n        val mangos = s.split(\"mango and \")(1).trim\n\
    \        val applesAndOranges = apples + oranges\n        val mangoAndApples =\
    \ mangos + apples\n        val applesAndOrangesAndMangos = applesAndOranges +\
    \ mangos\n        val applesAndOrangesAndMangosAndApples = applesAndOrangesAndMangos\
    \ + apples\n        val applesAndOrangesAndMangosAndApplesAndOranges = applesAndOrangesAndMangosAndApples\
    \ + oranges\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOranges + mangos\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangos + apples\n        val\
    \ applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges = applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ + oranges\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples + mangos\n\
    \        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges +\
    \ mangos\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOranges\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ + apples\n        val applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApplesAndOrangesAndMangosAndApples\
    \ + oranges\n        val apple\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp15d__6ek.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp15d__6ek.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").map(_.toInt).sum\n  \
    \      val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpf1pc7kph.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf1pc7kph.scala:20)\n\
    \tat Problem$.main(tmpf1pc7kph.scala:25)\n\tat Problem.main(tmpf1pc7kph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = new mutable.HashMap[String, Long]()\n      \
    \  basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n\
    \        basket.put(\"mangos\", mangos)\n        basket.put(\"basket\", apples\
    \ + oranges + mangos)\n        basket.get(\"basket\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbukobyg.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \")(1).split(\"and\")(1).split(\"\
    oranges\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\")(1).split(\"apples\")(1).split(\"\
    and\")(1).split(\"apples\")(1).split(\"and\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbvhkk4vl.scala:20:1779 ---------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moranges\e[0m = s.split(\e\
    [31m\" \"\e[0m)(\e[31m1\e[0m).split(\e[31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"oranges\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"apples\"\e[0m)(\e[31m1\e[0m).split(\e\
    [31m\"and\"\e[0m)(\e[31m1\e[0m).split(\e[31m\"app"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val mangos = s.split(\" \").map(_.toInt)\n        val basket = new mutable.HashMap[String,\
    \ Long]()\n        basket.put(\"apples\", apples.sum)\n        basket.put(\"oranges\"\
    , oranges.sum)\n        basket.put(\"mangos\", mangos.sum)\n        basket.put(\"\
    total\", apples.sum + oranges.sum + mangos.sum)\n        basket.get(\"total\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70oqyvgb.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsAndOranges = fruits + \" \" + oranges\n    \
    \    val applesAndOrangesAndMangos = apples + \" \" + oranges + \" and \" + fruits\n\
    \        val fruitsAndOrangesAndMangos = fruits + \" \" + oranges + \" and \"\
    \ + fruits\n        val applesAndOrangesAndMangos = apples + \" \" + oranges +\
    \ \" and \" + fruits\n        val fruitsAndOrangesAndMangos = fruits + \" \" +\
    \ oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos = apples\
    \ + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fruits + \" \" + oranges + \" and \" + fruits\n        val applesAndOrangesAndMangos\
    \ = apples + \" \" + oranges + \" and \" + fruits\n        val fruitsAndOrangesAndMangos\
    \ = fru\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe0okcnkp.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangos\e\
    [0m = apples + \e[31m\" \"\e[0m + oranges + \e[31m\" and \"\e[0m + fruits\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesAndMangos is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesAndMangos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe0okcnkp.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfruitsAndOrangesAndMangos\e\
    [0m = fruits + \e[31m\" \"\e[0m + oranges + \e[31m\" and \"\e[0m + fruits\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitsAndOrangesAndMangos is already defined as \e[33mvalue\e\
    [0m \e[35mfruitsAndOrangesAndMangos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe0okcnkp.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangos\e\
    [0m = apples + \e[31m\" \"\e[0m + oranges + \e[31m\" and \"\e[0m + fruits\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mapplesAndOrangesAndMangos is already defined as \e[33mvalue\e\
    [0m \e[35mapplesAndOrangesAndMangos\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe0okcnkp.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mfruitsAndOrangesAndMangos\e\
    [0m = fruits + \e[31m\" \"\e[0m + oranges + \e[31m\" and \"\e[0m + fruits\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfruitsAndOra"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\"and\"\
    ).map(_.toInt)\n        val mangos = s.split(\"and\").map(_.toInt)\n        val\
    \ applesAndOranges = apples ++ oranges\n        val applesAndMangos = apples ++\
    \ mangos\n        val orangesAndMangos = oranges ++ mangos\n        val applesAndOrangesAndMangos\
    \ = applesAndOranges ++ applesAndMangos\n        val applesAndOrangesAndMangosCount\
    \ = applesAndOrangesAndMangos.length\n        val applesAndOrangesAndMangosCount2\
    \ = applesAndOrangesAndMangosCount * 2\n        val applesAndOrangesAndMangosCount3\
    \ = applesAndOrangesAndMangosCount2 * 3\n        val applesAndOrangesAndMangosCount4\
    \ = applesAndOrangesAndMangosCount3 * 4\n        val applesAndOrangesAndMangosCount5\
    \ = applesAndOrangesAndMangosCount4 * 5\n        val applesAndOrangesAndMangosCount6\
    \ = applesAndOrangesAndMangosCount5 * 6\n        val applesAndOrangesAndMangosCount7\
    \ = applesAndOrangesAndMangosCount6 * 7\n        val applesAndOrangesAndMangosCount8\
    \ = applesAndOrangesAndMangosCount7 * 8\n        val applesAndOrangesAndMangosCount9\
    \ = applesAndOrangesAndMangosCount8 * 9\n        val applesAndOrangesAndMangosCount10\
    \ = applesAndOrangesAndMangosCount9 * 10\n        val applesAndOrangesAndMangosCount11\
    \ = applesAndOrangesAndMangosCount10 * 11\n        val applesAndOrangesAndMangosCount12\
    \ = applesAndOrangesAndMangosCount11 * 12\n        val applesAndOrangesAndMangosCount13\
    \ = applesAndOrangesAndMangosCount12 * 13\n        val applesAndOrangesAndMangosCount14\
    \ = applesAndOrangesAndMangosCount13 * 14\n        val applesAndOrangesAndMangosCount15\
    \ = applesAndOrangesAndMangosCount14 * 15\n        val applesAndOrangesAndMangosCount16\
    \ = applesAndOrangesAndMangosCount15 * 16\n        val applesAndOrangesAndMangosCount17\
    \ = apple\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgcjo0m5y.scala:42:47 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosCount17\e\
    [0m = apple\n\e[31m\e[31m   |\e[0m                                           \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \  Not found: apple\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgcjo0m5y.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong\n        val oranges = s.toLong\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpovue2_3e.scala:20)\n\
    \tat Problem$.main(tmpovue2_3e.scala:26)\n\tat Problem.main(tmpovue2_3e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val totalFruits = fruits.sum\n\
    \        val mangoFruits = fruits.filter(x => x % 2 == 0)\n        val totalMangoFruits\
    \ = mangoFruits.sum\n        val result = totalMangoFruits - totalFruits\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmps03sbsd8.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmps03sbsd8.scala:19)\n\
    \tat Problem$.main(tmps03sbsd8.scala:29)\n\tat Problem.main(tmps03sbsd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits.toDouble / 2\n        mangos.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpwi7j_7fr.scala:20)\n\
    \tat Problem$.main(tmpwi7j_7fr.scala:26)\n\tat Problem.main(tmpwi7j_7fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \").length\n    \
    \    val applesAndOrangesInBasket = applesAndOranges.split(\" \").length\n   \
    \     val mangoFruits = fruitsInBasket - applesAndOrangesInBasket\n        fruitsInBasket\
    \ + applesAndOrangesInBasket + mangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhdtcuqx.scala:29)\n\tat Problem.main(tmpvhdtcuqx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(1).trim\n        val oranges = s.split(\"\
    oranges and \")(1).trim\n        val mangos = s.split(\"mango and \")(1).trim\n\
    \        val applesAndOranges = apples + oranges\n        val mangoAndOranges\
    \ = mangos + oranges\n        val applesAndMangos = apples + mangos\n        val\
    \ orangesAndMangos = oranges + mangos\n        val applesAndOrangesAndMangos =\
    \ applesAndOranges + mangoAndOranges\n        val applesAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangos + orangesAndMangos\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOranges + mangoAndOrangesAndMangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOranges = applesAndOrangesAndMangosAndOrangesAndMangos\
    \ + orangesAndMangosAndOranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + mangoAndOrangesAndMangosAndOranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos + orangesAndMangosAndOrangesAndOranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ + mangoAndOrangesAndMangosAndOrangesAndOrangesAndMangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ + orangesAndMangosAndOrangesAndOrangesAndMangosAndO\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpii4nyvqe.scala:28:97 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOranges + mangoAndOrangesAndMangos\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Not found: mangoAndOrangesAndMangos\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpii4nyvqe.scala:29:116\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOranges\e[0m = applesAndOrangesAndMangosAndOrangesAndMangos\
    \ + orangesAndMangosAndOranges\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: orangesAndMangosAndOranges\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpii4nyvqe.scala:30:135 -----------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = applesAndOrangesAndMangosAndOrangesAndMangosAndOranges + mangoAndOrangesAndMangosAndOranges\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \          Not found: mangoAndOrangesAndMangosAndOranges\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpii4nyvqe.scala:31:154 -----------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMango"
  stdout: ''
  timestamp: 1659979900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").map(_.trim).map(_.toInt)\n\
    \        val fruitsInBasketCount = fruitsInBasket.size\n        val applesAndOrangesInBasket\
    \ = applesAndOranges.split(\"and\").map(_.trim).map(_.toInt)\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.size\n        val mangoFruitsInBasket = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ => x % 2 == 0).size\n        val mangoFruitsInBasketCount = fruitsInBasket.filter(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7dqoimbg.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7dqoimbg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmangoFruitsInBasketCount\e[0m = fruitsInBasket.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m0\e[0m).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7dqoimbg.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = fruitsInBasket.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7dqoimbg.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = fruitsInBasket.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7dqoimbg.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mman"
  stdout: ''
  timestamp: 1659979900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val basket = fruits.toSet\n \
    \       val mangos = fruits.filter(x => x % 2 == 0)\n        val totalMangos =\
    \ mangos.size\n        val totalFruits = fruits.size\n        val totalMangoFruits\
    \ = totalMangos * totalFruits\n        val totalMangoFruitsPerApple = totalMangoFruits\
    \ / apples.sum\n        val totalMangoFruitsPerOrange = totalMangoFruits / oranges.sum\n\
    \        val totalMangoFruitsPerMango = totalMangoFruits / mangos.size\n     \
    \   val totalMangoFruitsPerAppleAndOrange = totalMangoFruitsPerApple * totalMangoFruitsPerOrange\n\
    \        val totalMangoFruitsPerAppleAndMango = totalMangoFruitsPerAppleAndOrange\
    \ * totalMangoFruitsPerMango\n        val totalMangoFruitsPerAppleAndMangoAndOrange\
    \ = totalMangoFruitsPerAppleAndMango * oranges.sum\n        val totalMangoFruitsPerAppleAndMangoAndOrangeAndApple\
    \ = totalMangoFruitsPerAppleAndMangoAndOrangeAndApple * apples.sum\n        val\
    \ totalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrange = totalMangoFruitsPerAppleAndMangoAndOrangeAndApple\
    \ * oranges.sum\n        val totalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMango\
    \ = totalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMango * mangos.size\n\
    \        val totalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMangoAndOrange\
    \ = totalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMango * oranges.sum\n\
    \        val totalMangoFruitsPerAppleAndMangoAndOrange\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp07dk1onf.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07dk1onf.scala:33:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalMangoFruitsPerAppleAndMangoAndOrangeAndApple\e[0m = totalMangoFruitsPerAppleAndMangoAndOrangeAndApple\
    \ * apples.sum\n\e[31m\e[31m   |\e[0m                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mtotalMangoFruitsPerAppleAndMangoAndOrangeAndApple\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp07dk1onf.scala:35:81 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mtotalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMango\e\
    [0m = totalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMango * mangos.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mtotalMangoFruitsPerAppleAndMangoAndOrangeAndAppleAndOrangeAndMango\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp07dk1onf.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979900
