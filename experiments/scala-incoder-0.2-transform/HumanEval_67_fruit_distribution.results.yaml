language: scala
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val fruitMap :\
    \ Map[String, Long] = fruits.split(\"\").map(x => (x.toLong, 1)).toMap\n     \
    \   val fruitCount = fruitMap.values.sum\n        val mangoCount = fruitCount\
    \ - apples\n        fruitMap(\"mango\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9h7cs7yy.scala:22:43\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfruitMap\e\
    [0m : \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mLong\e[0m] = fruits.split(\e[31m\"\
    \"\e[0m).map(\e[36mx\e[0m => (x.toLong, \e[31m1\e[0m)).toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Map[Long, Int]\n\e[31m\
    \   |\e[0m                          Required: collection.mutable.Map[String, Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\"and\").length\n  \
    \      val mangos = fruitsInBasket - oranges\n        val mangoFruits = mangos\
    \ * oranges\n        fruitsInBasket * mangoFruits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbxa88e92.scala:24:36 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmangos\e[0m = fruitsInBasket\
    \ - oranges\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((oranges : String))\n1 error found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges\
    \ - 1\n        val fruits = s.split(\" \")\n        val fruitCount = fruits.length\n\
    \        val appleCount = fruits(0).toInt\n        val orangeCount = fruits(1).toInt\n\
    \        val mangoCount = fruits(2).toInt\n        val totalCount = appleCount\
    \ + orangeCount + mangoCount\n        val appleFruits = appleCount * appleCount\n\
    \        val orangeFruits = orangeCount * orangeCount\n        val mangoFruits\
    \ = mangoCount * mangoCount\n        val totalFruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalMangoFruits = totalFruits - totalCount\n   \
    \     val mangoFruitPercentage = (totalMangoFruits/totalFruits).toInt\n      \
    \  val appleFruitPercentage = (appleFruits/totalFruits).toInt\n        val orangeFruitPercentage\
    \ = (orangeFruits/totalFruits).toInt\n        val totalPercentage = appleFruitPercentage\
    \ + orangeFruitPercentage + mangoFruitPercentage\n        val applePercentage\
    \ = appleFruitPercentage * appleCount\n        val orangePercentage = orangeFruitPercentage\
    \ * orangeCount\n        val mangoPercentage = mangoFruitPercentage * mangoCount\n\
    \        val totalPercentagePercentage = applePercentage + orangePercentage +\
    \ mangoPercentage\n        val totalPercentagePercentagePercentage = totalPercentage/totalCount\n\
    \        val totalPercentagePercentagePercentagePercentage = totalPercentagePercentage/totalFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentage = totalPercentagePercentagePercentage/totalMangoFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentage/totalPercentage\n        val\
    \ totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentage/totalFruits\n    \
    \    val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalMangoFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalPercentage\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage/totalFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentage\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb6_66g6f.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\e\
    [0m = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalPercentage\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpb6_66g6f.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\e\
    [0m = totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage/totalFruits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb6_66g6f.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longe"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleCount = apples.sum\n\
    \        val orangeCount = oranges.sum\n        val mangoCount = fruits.filter(_\
    \ % 2 == 0).sum\n        val mangoCount = fruits.filter(_ % 2 == 1).sum\n    \
    \    val mangoCount = fruits.filter(_ % 3 == 0).sum\n        val mangoCount =\
    \ fruits.filter(_ % 3 == 1).sum\n        val mangoCount = fruits.filter(_ % 5\
    \ == 0).sum\n        val mangoCount = fruits.filter(_ % 5 == 1).sum\n        val\
    \ mangoCount = fruits.filter(_ % 7 == 0).sum\n        val mangoCount = fruits.filter(_\
    \ % 7 == 1).sum\n        val mangoCount = fruits.filter(_ % 11 == 0).sum\n   \
    \     val mangoCount = fruits.filter(_ % 11 == 1).sum\n        val mangoCount\
    \ = fruits.filter(_ % 13 == 0).sum\n        val mangoCount = fruits.filter(_ %\
    \ 13 == 1).sum\n        val mangoCount = fruits.filter(_ % 17 == 0).sum\n    \
    \    val mangoCount = fruits.filter(_ % 17 == 1).sum\n        val mangoCount =\
    \ fruits.filter(_ % 19 == 0).sum\n        val mangoCount = fruits.filter(_ % 19\
    \ == 1).sum\n        val mangoCount = fruits.filter(_ % 23 == 0).sum\n       \
    \ val mangoCount = fruits.filter(_ % 23 == 1).sum\n        val mangoCount = fruits.filter(_\
    \ % 29 == 0).sum\n        val mangoCount = fruits.filter(_ % 29 == 1).sum\n  \
    \      val mangoCount = fruits.filter(_ % 31 == 0).sum\n        val mangoCount\
    \ = fruits.filter(_ % 31 == 1).sum\n        val mangoCount = fruits.filter(_ %\
    \ 37 == 0).sum\n        val mangoCount = fruits.filter(_ % 37 == 1).sum\n    \
    \    val mangoCount = fruits.filter(_ % 41 == 0).sum\n        val mangoCount =\
    \ fruits.filter(_ % 41 == 1).sum\n        val mangoCount = fruits.filter(_ % 47\
    \ == 0).sum\n        val mangoCount = fruits.filter(_ % 47 == 1).sum\n       \
    \ val mangoCount = fruits.filter(_ % 53 == 0).sum\n        val mangoCount = fruits.filter(_\
    \ % 53 == 1).sum\n        val mangoCount = fruits.filter(_ % 59 == 0).\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsi3c9nsg.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsi3c9nsg.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ % \e[31m2\e\
    [0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsi3c9nsg.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ %\
    \ \e[31m3\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsi3c9nsg.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ %\
    \ \e[31m3\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsi3c9nsg.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmangoCount\e[0m = fruits.filter(_ %\
    \ \e[31m5\e[0m == \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoCount is already defined as \e[33mvalue\e[0m \e[35mmangoCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659794865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong - apples.toLong\n\
    \        val mangos = apples.toLong - oranges.toLong\n        mangos\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpqc12nvxr.scala:19)\n\
    \tat Problem$.main(tmpqc12nvxr.scala:25)\n\tat Problem.main(tmpqc12nvxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\"and\").map(_.toInt).sum\n\
    \        val mangos = apples - oranges\n        mangos\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples \"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpz_y68o0g.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpz_y68o0g.scala:20)\n\
    \tat Problem$.main(tmpz_y68o0g.scala:25)\n\tat Problem.main(tmpz_y68o0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val fruits = apples\
    \ + oranges\n        val mangos = fruits - apples - oranges\n        mangos\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp20p8q9rd.scala:20)\n\
    \tat Problem$.main(tmp20p8q9rd.scala:26)\n\tat Problem.main(tmp20p8q9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \")\n        val\
    \ applesAndOrangesInBasket = applesAndOranges.split(\" \")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val fruitsInBasketCount = fruitsInBasket.length\n\
    \        val mangoFruitsInBasketCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsInBasket = fruitsInBasket.filter(_ == \"mango\")\n   \
    \     val mangoFruitsInBasketCount = mangoFruitsInBasket.length\n        val mangoFruitsInBasketCountInBasket\
    \ = mangoFruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsInBasketInBasket\
    \ = fruitsInBasket.filter(_ == \"mango\").filter(_ == \"mango\")\n        val\
    \ mangoFruitsInBasketCountInBasketInBasket = mangoFruitsInBasketInBasket.length\n\
    \        val mangoFruitsInBasketInBasketCount = mangoFruitsInBasketInBasket.length\n\
    \        val mangoFruitsInBasketInBasketCountInBasket = mangoFruitsInBasketInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val mangoFruitsInBasketInBasketCountInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasket.length\n        val mangoFruitsInBasketInBasketCountInBasketInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasketInBasket.length\n        val mangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasketInBasketInBasket.length\n        val\
    \ mangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasketInBasket = mangoFruitsInBasketInBasketCountIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppuoup23c.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = mangoFruitsInBasket.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppuoup23c.scala:35:104 -----------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketInBasketCountInBasketInBasket\e\
    [0m = mangoFruitsInBasketInBasketCountInBasket.length\n\e[31m\e[31m   |\e[0m \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppuoup23c.scala:38:87\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mmangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasketInBasket\e\
    [0m = mangoFruitsInBasketInBasketCountIn\n\e[31m\e[31m   |\e[0m              \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mangoFruitsInBasketInBasketCountIn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppuoup23c.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n      \
    \  val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples + \"\
    \ \" + oranges\n        val fruitsInBasket = fruits.split(\" \")\n        val\
    \ applesAndOrangesInBasket = applesAndOranges.split(\" \")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val fruitsInBasketCount = fruitsInBasket.length\n\
    \        val mangoFruitsInBasketCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsInBasket = fruitsInBasket.filter(_ == \"mango\")\n   \
    \     val mangoFruitsInBasketCount = mangoFruitsInBasket.length\n        val mangoFruitsInBasketCount\
    \ = mangoFruitsInBasketCount + applesAndOrangesInBasketCount\n        mangoFruitsInBasketCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmjjnsef0.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = mangoFruitsInBasket.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmjjnsef0.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmangoFruitsInBasketCount\e\
    [0m = mangoFruitsInBasketCount + applesAndOrangesInBasketCount\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmangoFruitsInBasketCount is already defined as \e[33mvalue\e\
    [0m \e[35mmangoFruitsInBasketCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n\
    \        val fruits = apples ++ oranges\n        val appleAndOranges = fruits.filter(x\
    \ => x >= 0 && x <= n)\n        val mangos = appleAndOranges.filter(x => x % 2\
    \ == 0)\n        mangos.size\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpky72eud6.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpky72eud6.scala:19)\n\
    \tat Problem$.main(tmpky72eud6.scala:27)\n\tat Problem.main(tmpky72eud6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val basket = new mutable.HashMap[String, Long]()\n      \
    \  basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n\
    \        basket.put(\"mangos\", mangos)\n        basket.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdn_o5bfj.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mbasket\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.split(\" \").filter(_ != \"\").length\n        val oranges\
    \ = s.split(\" \").filter(_ != \"\").length\n        val mangos = apples - oranges\n\
    \        mangos\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj56gvp9s.scala:25)\n\tat Problem.main(tmpj56gvp9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples - oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmprs_vrpic.scala:19)\n\
    \tat Problem$.main(tmprs_vrpic.scala:25)\n\tat Problem.main(tmprs_vrpic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")\n        val oranges = s.split(\"oranges and\
    \ \")\n        val mangos = s.split(\"mango and \")\n        val appleAndOranges\
    \ = apples.zip(oranges).map(x => x._1 + x._2)\n        val mangoAndOranges = mangos.zip(oranges).map(x\
    \ => x._1 + x._2)\n        val appleAndMangos = apples.zip(mangos).map(x => x._1\
    \ + x._2)\n        val orangeAndMangos = oranges.zip(mangos).map(x => x._1 + x._2)\n\
    \        val appleAndOrangesAndMangos = appleAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOranges = appleAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOranges = appleAndOrangesAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangos = appleAndMangosAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangos = appleAndOrangesAndMangosAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangosAndOranges = appleAndMangosAndOrangesAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = appleAndOrangesAndMangosAndOrangesAndMangos.zip(orangeAndMangos).map(x =>\
    \ x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndMangosAndOrangesAndMangosAndOranges.zip(orangeAndMangos).map(x =>\
    \ x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndOrangesAndMangosAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2i1naljl.scala:34:77 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mappleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\e\
    [0m = appleAndOrangesAndMangosAndOrangesAndMangosAnd\n\e[31m\e[31m   |\e[0m  \
    \                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: appleAndOrangesAndMangosAndOrangesAndMangosAnd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2i1naljl.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = s.split(\"apples and \")(0).trim\n        val oranges = s.split(\"\
    oranges and \")(0).trim\n        val mangos = s.split(\"mango and \")(0).trim\n\
    \        val applesAndOranges = apples + oranges\n        val applesAndMangos\
    \ = apples + mangos\n        val orangesAndMangos = oranges + mangos\n       \
    \ val applesAndOrangesAndMangos = applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mang\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcmey4q8_.scala:34:145 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mapplesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\e\
    [0m = applesAndOranges + mang\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                   Not found: mang\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmey4q8_.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n        val\
    \ fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val mangos = apples\
    \ - oranges\n        val count = fruits.split(\" \").length\n        val totalFruits\
    \ = apples + oranges + mangos\n        val totalFruitsPerApple = totalFruits /\
    \ apples\n        val totalFruitsPerOrange = totalFruits / oranges\n        val\
    \ totalFruitsPerMango = totalFruits / mangos\n        val totalFruitsPerAppleAndOrange\
    \ = totalFruitsPerApple * oranges\n        val totalFruitsPerAppleAndMango = totalFruitsPerApple\
    \ * mangos\n        val totalFruitsPerOrangeAndMango = totalFruitsPerOrange *\
    \ mangos\n        val totalFruitsPerMangoAndApple = totalFruitsPerMango * apples\n\
    \        val totalFruitsPerMangoAndOrange = totalFruitsPerMango * oranges\n  \
    \      val totalFruitsPerMangoAndMango = totalFruitsPerMango * mangos\n      \
    \  val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange * mangos\n\
    \        val totalFruitsPerAppleAndMangoAndOrange = totalFruitsPerAppleAndMango\
    \ * oranges\n        val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange\
    \ * mangos\n        val totalFruitsPerOrangeAndMangoAndApple = totalFruitsPerOrangeAndMango\
    \ * apples\n        val totalFruitsPerOrangeAndMangoAndOrange = totalFruitsPerOrangeAndMango\
    \ * oranges\n        val totalFruitsPerOrangeAndMangoAndMango = totalFruitsPerOrangeAndMango\
    \ * mangos\n        val totalFruitsPerMangoAndAppleAndOrange = totalFruitsPerMangoAndApple\
    \ * oranges\n        val totalFruitsPerMangoAndAppleAndMango = totalFruitsPerMangoAndApple\
    \ * mangos\n        val totalFruitsPerMangoAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8dezktt.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd8dezktt.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtotalFruitsPerAppleAndOrangeAndMango\e[0m = totalFruitsPerAppleAndOrange\
    \ * mangos\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtotalFruitsPerAppleAndOrangeAndMango is already defined as\
    \ \e[33mvalue\e[0m \e[35mtotalFruitsPerAppleAndOrangeAndMango\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd8dezktt.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos\
    \ = apples + oranges\n        mangos\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpz7qivyzy.scala:19)\n\
    \tat Problem$.main(tmpz7qivyzy.scala:25)\n\tat Problem.main(tmpz7qivyzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ apples = n.toInt\n        val oranges = s.toInt\n        val mangos = apples\
    \ - oranges\n        val fruits = apples + oranges + mangos\n        fruits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples and 6 oranges\"\
    \n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmpric08odv.scala:20)\n\
    \tat Problem$.main(tmpric08odv.scala:26)\n\tat Problem.main(tmpric08odv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794853
