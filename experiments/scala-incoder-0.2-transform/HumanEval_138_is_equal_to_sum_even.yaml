name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n \
  \   // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n\
  \    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n\
    \        for(i <- 0 until n) {\n            val x = n%i + 1\n            if(x\
    \ == 0) evens += x\n            sum += x\n        }\n        evens.size == 4 &&\
    \ sum == n", "        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        sumEvensSum4Sum\
    \ == sumEven", "        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = mutable.ListBuffer[Long]()\n        val n = n.toLong\n        for(i <- 0 until\
    \ n) {\n            val x = i.toLong\n            val y = x - 1\n            val\
    \ z = x + 1\n            val w = x - 2\n            val v = x + 2\n          \
    \  val u = x + 3\n            val x = x - 4\n            val y = x - 5\n     \
    \       val z = x - 6\n            val w = x - 7\n            val v = x - 8\n\
    \            val u = x - 9\n            val x = x - 10\n            val y = x\
    \ - 11\n            val z = x - 12\n            val w = x - 13\n            val\
    \ v = x - 14\n            val u = x - 15\n            val x = x - 16\n       \
    \     val y = x - 17\n            val z = x - 18\n            val w = x - 19\n\
    \            val v = x - 20\n            val u = x - 21\n            val x = x\
    \ - 22\n            val y = x - 23\n            val z = x - 24\n            val\
    \ w = x - 25\n            val v = x - 26\n            val u = x - 27\n       \
    \     val x = x - 28\n            val y = x - 29\n            val z = x - 30\n\
    \            val w = x - 31\n            val v = x - 32\n            val u = x\
    \ - 33\n            val x = x - 34\n            val y = x - 35\n            val\
    \ z = x - 36\n            val w = x - 37\n            val v = x - 38\n       \
    \     val u = x - 39\n            val x = x - 40\n            val y = x - 41\n\
    \            val z = x - 42\n            val w = x - 43\n            val v = x\
    \ - 44\n            val u = x - 45\n            val x = x - 46\n            val\
    \ y = x - 47\n            val z = x - 48\n            val w = x - 49\n       \
    \     val v = x - 50\n            val u = x - 51\n            val x = x - 52\n\
    \            val y = x - 53\n            val z = x - 54\n            val w = x\
    \ - 55\n            val v = x - 56\n            val u = x - 57\n            val\
    \ x = x - 58\n            val y = x - 59\n            val z = x - 60\n       \
    \     val w = x - 61\n            val v = x - 62\n            val u = x - 63\n\
    \            val x = x - 64\n            val y = x - 65\n            val z = x\
    \ - 66\n            val w = x - 67\n            val v = x - 68\n            val\
    \ u = x - 69\n            val x = x - 70\n            val y = x - 71\n       \
    \     val z = x - 72\n            val w = x - 73\n            val v = x - 74\n\
    \            val u = x - 75\n            val x = ", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven.filter(x => x % 2 == 0).length\n   \
    \     val sumEvensLessThanFour = sumEvens - 4\n        val sumEvensLessThanFourOrEqualToFour\
    \ = sumEvensLessThanFour >= 0\n        sumEvensLessThanFourOrEqualToFour", " \
    \       val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4", "        val sumEven = n.toInt\n \
    \       val sumEvens = sumEven.productIterator.toList\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum2 = sumEvens.sum * sumEvens.sum\n   \
    \     val sumEvensSum3 = sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val\
    \ sumEvensSum4 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n \
    \       val sumEvensSum5 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum\n        val sumEvensSum6 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val sumEvensSum7 = sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum\n        val sumEvensSum8 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum9 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum10 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum\n        val sumEvensSum11 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val sumEvensSum12 = sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum13 = sumEvens.sum * sumEvens.", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(x => x % 2 == 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4IsEven\
    \ = sumEvensSum4 == sumEvens\n        sumEvensSum4IsEven", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val sumEvensRemainder\
    \ = sumEven % 4\n        sumEvens == sumEvensRemainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ n){\n            val x = math.abs(i.toLong)\n            val y = math.abs(sum.toLong)\n\
    \            val z = math.abs(x - y)\n            if(z == 0){\n              \
    \  evens += x\n                sum += x\n            }\n        }\n        evens.size\
    \ == 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n\
    \        val remainder = sumEven % 4\n        sumEvens == remainder", "      \
    \  val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain"]
stop_tokens:
- "\n    }\n"
