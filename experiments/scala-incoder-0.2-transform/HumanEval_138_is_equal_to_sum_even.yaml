name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n \
  \   // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n\
  \    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n\
    \        for(i <- 0 until n) {\n            val x = n%i + 1\n            if(x\
    \ == 0) evens += x\n            sum += x\n        }\n        evens.size == 4 &&\
    \ sum == n", "        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        sumEvensSum4Sum\
    \ == sumEven", "        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = mutable.ListBuffer[Long]()\n        val n = n.toLong\n        for(i <- 0 until\
    \ n) {\n            val x = i.toLong\n            val y = x - 1\n            val\
    \ z = x + 1\n            val w = x - 2\n            val v = x + 2\n          \
    \  val u = x + 3\n            val x = x - 4\n            val y = x - 5\n     \
    \       val z = x - 6\n            val w = x - 7\n            val v = x - 8\n\
    \            val u = x - 9\n            val x = x - 10\n            val y = x\
    \ - 11\n            val z = x - 12\n            val w = x - 13\n            val\
    \ v = x - 14\n            val u = x - 15\n            val x = x - 16\n       \
    \     val y = x - 17\n            val z = x - 18\n            val w = x - 19\n\
    \            val v = x - 20\n            val u = x - 21\n            val x = x\
    \ - 22\n            val y = x - 23\n            val z = x - 24\n            val\
    \ w = x - 25\n            val v = x - 26\n            val u = x - 27\n       \
    \     val x = x - 28\n            val y = x - 29\n            val z = x - 30\n\
    \            val w = x - 31\n            val v = x - 32\n            val u = x\
    \ - 33\n            val x = x - 34\n            val y = x - 35\n            val\
    \ z = x - 36\n            val w = x - 37\n            val v = x - 38\n       \
    \     val u = x - 39\n            val x = x - 40\n            val y = x - 41\n\
    \            val z = x - 42\n            val w = x - 43\n            val v = x\
    \ - 44\n            val u = x - 45\n            val x = x - 46\n            val\
    \ y = x - 47\n            val z = x - 48\n            val w = x - 49\n       \
    \     val v = x - 50\n            val u = x - 51\n            val x = x - 52\n\
    \            val y = x - 53\n            val z = x - 54\n            val w = x\
    \ - 55\n            val v = x - 56\n            val u = x - 57\n            val\
    \ x = x - 58\n            val y = x - 59\n            val z = x - 60\n       \
    \     val w = x - 61\n            val v = x - 62\n            val u = x - 63\n\
    \            val x = x - 64\n            val y = x - 65\n            val z = x\
    \ - 66\n            val w = x - 67\n            val v = x - 68\n            val\
    \ u = x - 69\n            val x = x - 70\n            val y = x - 71\n       \
    \     val z = x - 72\n            val w = x - 73\n            val v = x - 74\n\
    \            val u = x - 75\n            val x = ", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven.filter(x => x % 2 == 0).length\n   \
    \     val sumEvensLessThanFour = sumEvens - 4\n        val sumEvensLessThanFourOrEqualToFour\
    \ = sumEvensLessThanFour >= 0\n        sumEvensLessThanFourOrEqualToFour", " \
    \       val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4", "        val sumEven = n.toInt\n \
    \       val sumEvens = sumEven.productIterator.toList\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum2 = sumEvens.sum * sumEvens.sum\n   \
    \     val sumEvensSum3 = sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val\
    \ sumEvensSum4 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n \
    \       val sumEvensSum5 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum\n        val sumEvensSum6 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val sumEvensSum7 = sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum\n        val sumEvensSum8 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum9 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum10 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum\n        val sumEvensSum11 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val sumEvensSum12 = sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum13 = sumEvens.sum * sumEvens.", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(x => x % 2 == 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4IsEven\
    \ = sumEvensSum4 == sumEvens\n        sumEvensSum4IsEven", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val sumEvensRemainder\
    \ = sumEven % 4\n        sumEvens == sumEvensRemainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ n){\n            val x = math.abs(i.toLong)\n            val y = math.abs(sum.toLong)\n\
    \            val z = math.abs(x - y)\n            if(z == 0){\n              \
    \  evens += x\n                sum += x\n            }\n        }\n        evens.size\
    \ == 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n\
    \        val remainder = sumEven % 4\n        sumEvens == remainder", "      \
    \  val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val\
    \ sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = math.abs(i)\n\
    \            val y = math.abs(n - i)\n            val z = math.abs(x - y)\n  \
    \          val w = math.abs(x - z) + math.abs(y - z)\n            val a = math.abs(x\
    \ - w) + math.abs(y - w) + math.abs(z - w)\n            val b = math.abs(x - w)\
    \ + math.abs(y - w) + math.abs(z - w)\n            val c = math.abs(x - w) + math.abs(y\
    \ - w) + math.abs(z - w)\n            val d = math.abs(x - w) + math.abs(y - w)\
    \ + math.abs(z - w)\n            val e = math.abs(x - w) + math.abs(y - w) + math.abs(z\
    \ - w)\n            val f = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n\
    \            val g = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n   \
    \         val h = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n      \
    \      val i = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n         \
    \   val j = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n            val\
    \ k = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n            val l =\
    \ math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n            val m = math.abs(x\
    \ - w) + math.abs(y - w) + math.abs(z - w)\n            val n = math.abs(x - w)\
    \ + math.abs(y - w) + math.abs(z - w)\n            val o = math.abs(x - w) + math.abs(y\
    \ - w) + math.abs(z - w)\n            val p = math.abs(x - w) + math.abs(y - w)\
    \ + math.abs(z - w)\n            val q = math.abs(x - w) + math.abs(y - w) + math.abs(z\
    \ - w)\n            val r = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n\
    \            val s = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n   \
    \         val t = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n      \
    \      val u = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n         \
    \   val v = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n            val\
    \ w = math.abs(x - w) + math.abs(y - w) + math.abs(z - w)\n            val x =\
    \ math.abs(x - w) + math.abs(y - w", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSum = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSum\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSum = mutable.ListBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSum = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSumSum\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n     \
    \   val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n      \
    \  val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSum", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0).sum\n        sumEvens == 4", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  sumEvens == 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0).sum\n        sumEvens == 4", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum\
    \ = sumEvensSum4.sum\n        sumEvensSum4Sum == sumEven", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val sumEvensRemainder\
    \ = sumEven % 4\n        val sumEvensRemainders = sumEvensRemainder / 4\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 4\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 4\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 4\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 4\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 4\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 4\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 4\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemain", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = i % 2\n\
    \            if(x == 0){\n                evens.append(i)\n            }\n   \
    \     }\n        for(i <- 0 until evens.size){\n            val x = evens(i)\n\
    \            sum += x\n        }\n        sum == n", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven -\
    \ sumEvens\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val\
    \ sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder -\
    \ sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        sumEvensSum4\
    \ == n", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n        val sumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven.filter(x => x % 2 == 0).length\n        val sumEvens4\
    \ = sumEvens - 4\n        val sumEvens4s = sumEvens4 - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4s - 4\n        val sumEvens4s3 = sumEvens4s - 4\n        val sumEvens4s3\
    \ = sumEvens4", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n     \
    \   val sumEven2 = mutable.ArrayBuffer.empty[Long]\n        val sumEven3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven4 = mutable.ArrayBuffer.empty[Long]\n        val sumEven5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven7 = mutable.ArrayBuffer.empty[Long]\n        val sumEven8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven10 = mutable.ArrayBuffer.empty[Long]\n        val sumEven11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven13 = mutable.ArrayBuffer.empty[Long]\n        val sumEven14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven16 = mutable.ArrayBuffer.empty[Long]\n        val sumEven17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven19 = mutable.ArrayBuffer.empty[Long]\n        val sumEven20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven22 = mutable.ArrayBuffer.empty[Long]\n        val sumEven23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven25 = mutable.ArrayBuffer.empty[Long]\n        val sumEven26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven28 = mutable.ArrayBuffer.empty[Long]\n        val sumEven29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven31 = mutable.ArrayBuffer.empty[Long]\n        val sumEven32\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEven33 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEven34 = mutable.ArrayBuffer.empty[Long]\n        val sumEven35\
    \ = mutable.ArrayBuffer.empty[Long]", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val sum = 0\n        val\
    \ n = n.toInt\n        for(i <- 0 until n) {\n            if(i % 2 == 0) {\n \
    \               evens += i\n            } else {\n                odds += i\n\
    \            }\n        }\n        for(i <- evens.iterator until evens.last) {\n\
    \            sum += i\n        }\n        for(i <- odds.iterator until odds.last)\
    \ {\n            sum += i\n        }\n        sum == n", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n  \
    \      val evenSum = 0\n        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSums", "        val sumEven = n.toInt\n        val sumEvens =\
    \ sumEven.filter(_ % 2 == 0).length\n        sumEvens == 4", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val remainder = sumEven\
    \ % 4\n        sumEvens == remainder", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n \
    \       val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n\
    \        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n  \
    \      val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemain",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        val\
    \ limit = math.max(math.abs(n), 4L)\n        val limit2 = limit * limit\n    \
    \    for(i <- 0 until limit) {\n            val x = math.abs(i) * i\n        \
    \    val y = math.abs(n) - x\n            val z = math.abs(n) - y\n          \
    \  val a = math.abs(n) - z\n            val b = math.abs(n) - a\n            val\
    \ c = math.abs(n) - b\n            val d = math.abs(n) - c\n            val e\
    \ = math.abs(n) - d\n            val f = math.abs(n) - e\n            val g =\
    \ math.abs(n) - f\n            val h = math.abs(n) - g\n            val i = math.abs(n)\
    \ - h\n            val j = math.abs(n) - i\n            val k = math.abs(n) -\
    \ j\n            val l = math.abs(n) - k\n            val m = math.abs(n) - l\n\
    \            val n = math.abs(n) - m\n            val o = math.abs(n) - n\n  \
    \          val p = math.abs(n) - o\n            val q = math.abs(n) - p\n    \
    \        val r = math.abs(n) - q\n            val s = math.abs(n) - r\n      \
    \      val t = math.abs(n) - s\n            val u = math.abs(n) - t\n        \
    \    val v = math.abs(n) - u\n            val w = math.abs(n) - v\n          \
    \  val x = math.abs(n) - w\n            val y = math.abs(n) - x\n            val\
    \ z = math.abs(n) - y\n            val a = math.abs(n) - z\n            val b\
    \ = math.abs(n) - a\n            val c = math.abs(n) - b\n            val d =\
    \ math.abs(n) - c\n            val e = math.abs(n) - d\n            val f = math.abs(n)\
    \ - e\n            val g = math.abs(n) - f\n            val h = math.abs(n) -\
    \ g\n            val i = math.abs(n) - h\n            val j = math.abs(n) - i\n\
    \            val k = math.abs(n) - j\n            val l = math.abs(n) - k\n  \
    \          val m = math.abs(n) - l\n            val n = math.abs(n) - m\n    \
    \        val o = math.abs(n) - n\n            val p = math.abs(n) - o\n      \
    \      val q = math.abs(n) - p\n            val r = math.abs(n) - q\n        \
    \    val s = math.abs(n) - r\n            val t = math.abs(n) - s\n          \
    \  val u = math.abs(n) - t\n            val v = math.abs(n) - u\n            val\
    \ w = math.abs(n", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = i\n  \
    \          val y = x + 1\n            val z = y + 1\n            val w = z + 1\n\
    \            val a = x + y + z + w\n            val b = x + y + z + w + 2\n  \
    \          val c = x + y + z + w + 3\n            val d = x + y + z + w + 4\n\
    \            val e = x + y + z + w + 5\n            val f = x + y + z + w + 6\n\
    \            val g = x + y + z + w + 7\n            val h = x + y + z + w + 8\n\
    \            val i = x + y + z + w + 9\n            val j = x + y + z + w + 10\n\
    \            val k = x + y + z + w + 11\n            val l = x + y + z + w + 12\n\
    \            val m = x + y + z + w + 13\n            val n = x + y + z + w + 14\n\
    \            val o = x + y + z + w + 15\n            val p = x + y + z + w + 16\n\
    \            val q = x + y + z + w + 17\n            val r = x + y + z + w + 18\n\
    \            val s = x + y + z + w + 19\n            val t = x + y + z + w + 20\n\
    \            val u = x + y + z + w + 21\n            val v = x + y + z + w + 22\n\
    \            val w = x + y + z + w + 23\n            val x = x + y + z + w + 24\n\
    \            val y = x + y + z + w + 25\n            val z = x + y + z + w + 26\n\
    \            val a = x + y + z + w + 27\n            val b = x + y + z + w + 28\n\
    \            val c = x + y + z + w + 29\n            val d = x + y + z + w + 30\n\
    \            val e = x + y + z + w + 31\n            val f = x + y + z + w + 32\n\
    \            val g = x + y + z + w + 33\n            val h = x + y + z + w + 34\n\
    \            val i = x + y + z + w + 35\n            val j = x + y + z + w + 36\n\
    \            val k = x + y + z + w + 37\n            val l = x + y + z + w + 38\n\
    \            val m = x + y + z + w + 39\n            val n = x + y + z + w + 40\n\
    \            val o = x + y + z + w + 41\n            val p = x + y + z + w + 42\n\
    \            val q = x + y + z + w + 43\n            val r = x + y + z + w + 44\n\
    \            val s = x + y + z + w + 45\n            val t = x + y + z + w + 46\n\
    \            val u = ", "        val sumEven = n.toInt\n        val sumEvens =\
    \ sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens == remainder",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = mutable.ListBuffer[Long]()\n        val n = n.toInt\n     \
    \   for(i <- 0 until n) {\n            val x = i.toLong\n            val y = x\
    \ + 1\n            val z = x + 2\n            val w = x + 3\n            val a\
    \ = x + 4\n            val b = x + 5\n            val c = x + 6\n            val\
    \ d = x + 7\n            val e = x + 8\n            val f = x + 9\n          \
    \  val g = x + 10\n            val h = x + 11\n            val i = x + 12\n  \
    \          val j = x + 13\n            val k = x + 14\n            val l = x +\
    \ 15\n            val m = x + 16\n            val n = x + 17\n            val\
    \ o = x + 18\n            val p = x + 19\n            val q = x + 20\n       \
    \     val r = x + 21\n            val s = x + 22\n            val t = x + 23\n\
    \            val u = x + 24\n            val v = x + 25\n            val w = x\
    \ + 26\n            val x = x + 27\n            val y = x + 28\n            val\
    \ z = x + 29\n            val a = x + 30\n            val b = x + 31\n       \
    \     val c = x + 32\n            val d = x + 33\n            val e = x + 34\n\
    \            val f = x + 35\n            val g = x + 36\n            val h = x\
    \ + 37\n            val i = x + 38\n            val j = x + 39\n            val\
    \ k = x + 40\n            val l = x + 41\n            val m = x + 42\n       \
    \     val n = x + 43\n            val o = x + 44\n            val p = x + 45\n\
    \            val q = x + 46\n            val r = x + 47\n            val s = x\
    \ + 48\n            val t = x + 49\n            val u = x + 50\n            val\
    \ v = x + 51\n            val w = x + 52\n            val x = x + 53\n       \
    \     val y = x + 54\n            val z = x + 55\n            val a = x + 56\n\
    \            val b = x + 57\n            val c = x + 58\n            val d = x\
    \ + 59\n            val e = x + 60\n            val f = x + 61\n            val\
    \ g = x + 62\n            val h = x + 63\n            val i = x + 64\n       \
    \     val j = x + 65\n            val k = x + 66\n            val l = x + 67\n\
    \            val m = x + 68\n            val n = x + 69\n            val o = x\
    \ + 70\n            val p = x + 71\n            val q = x + 72\n            val\
    \ r = x + 73\n            val s = x + 74\n            val t = x + 75\n       \
    \     val u = x + 76\n            val v = x + 77\n            val w = ", "   \
    \     val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n\
    \        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n\
    \        sumEvensSum4Sum == sumEven", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens\
    \ == remainder", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum =\
    \ sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum\
    \ = sumEvensSum4.sum\n        sumEvensSum4Sum == sumEven", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n       \
    \ sumEvens == remainder", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n\
    \        val sumEvensSum4 = sumEvensSum == 4\n        val sumEvensSum4AndEven\
    \ = sumEvensSum4 and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEven =\
    \ sumEvensSum4AndEven and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEven\
    \ = sumEvensSum4AndEvenEven and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEven and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEvenEven and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEvenEvenEven and (sumEven % 2 == 0)\n        val\
    \ sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEven = sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEven\
    \ and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEven and (sumEven % 2 ==\
    \ 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ and (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven and (sumEven\
    \ % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven and (sumEven\
    \ % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven and\
    \ (sumEven % 2 == 0)\n        val sumEvensSum4AndEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = sumEvens", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n\
    \        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n       \
    \ val sumEvensSum4Sum4 = sumEvensSum4Sum.filter(_ % 4 == 0).length\n        val\
    \ sumEvensSum4Sum4Sum = sumEvensSum4Sum4.toInt\n        val sumEvensSum4Sum4Sum4\
    \ = sumEvensSum4Sum4Sum.filter(_ % 4 == 0).length\n        val sumEvensSum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4.toInt\n        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum4Sum4.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum4Sum4Sum4.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum.filter(_\
    \ % 4 == 0).length\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum4Sum4Sum",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).filter(_ > 0)\n        val sumEvensSum = sumEvens.sum\n        sumEvensSum\
    \ == sumEven", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        val sum =\
    \ 0\n        while (n > 0) {\n            val remainder = n % 2\n            sum\
    \ += remainder\n            evens.append(remainder)\n            n /= 2\n    \
    \    }\n        evens.size == 4 && evens.forall(x => x == sum)", "        val\
    \ nums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n\
    \                evens += i\n            }\n            sum += i\n        }\n\
    \        val evenSum = evens.sum\n        val evenSum2 = evens.sum\n        val\
    \ evenSum3 = evens.sum\n        val evenSum4 = evens.sum\n        val evenSum5\
    \ = evens.sum\n        val evenSum6 = evens.sum\n        val evenSum7 = evens.sum\n\
    \        val evenSum8 = evens.sum\n        val evenSum9 = evens.sum\n        val\
    \ evenSum10 = evens.sum\n        val evenSum11 = evens.sum\n        val evenSum12\
    \ = evens.sum\n        val evenSum13 = evens.sum\n        val evenSum14 = evens.sum\n\
    \        val evenSum15 = evens.sum\n        val evenSum16 = evens.sum\n      \
    \  val evenSum17 = evens.sum\n        val evenSum18 = evens.sum\n        val evenSum19\
    \ = evens.sum\n        val evenSum20 = evens.sum\n        val evenSum21 = evens.sum\n\
    \        val evenSum22 = evens.sum\n        val evenSum23 = evens.sum\n      \
    \  val evenSum24 = evens.sum\n        val evenSum25 = evens.sum\n        val evenSum26\
    \ = evens.sum\n        val evenSum27 = evens.sum\n        val evenSum28 = evens.sum\n\
    \        val evenSum29 = evens.sum\n        val evenSum30 = evens.sum\n      \
    \  val evenSum31 = evens.sum\n        val evenSum32 = evens.sum\n        val evenSum33\
    \ = evens.sum\n        val evenSum34 = evens.sum\n        val evenSum35 = evens.sum\n\
    \        val evenSum36 = evens.sum\n        val evenSum37 = evens.sum\n      \
    \  val evenSum38 = evens.sum\n        val evenSum39 = evens.sum\n        val evenSum40\
    \ = evens.sum\n        val evenSum41 = evens.sum\n        val evenSum42 = evens.sum\n\
    \        val evenSum43 = evens.sum\n        val evenSum44 = evens.sum\n      \
    \  val evenSum45 = evens.sum\n        val evenSum46 = evens.sum\n        val evenSum47",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sum", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum == 4\n        val sumEvensSum4Evens = sumEvensSum4 * (sumEvensSum\
    \ - 4)\n        val sumEvensSum4EvensSum = sumEvensSum4Evens.toInt\n        val\
    \ sumEvensSum4EvensSum4 = sumEvensSum4EvensSum == 4\n        val sumEvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4 * (sumEvensSum4Evens - 4)\n        val sumEvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum == 4\n        val sumEvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4 * (sumEvensSum4EvensSum4Evens - 4)\n      \
    \  val sumEvensSum4EvensSum4EvensSum4EvensSum = sumEvensSum4EvensSum4EvensSum4EvensSum.toInt\n\
    \        val sumEvensSum4EvensSum4EvensSum4EvensSum4Evens = sumEvensSum4EvensSum4EvensSum4EvensSum4\
    \ * (sumEvensSum4EvensSum4EvensSum4Evens - 4)\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum * (sumEvensSum4EvensSum4EvensSum4EvensSum4Evens\
    \ - 4)\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4EvensSum =\
    \ sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4EvensSum.toInt\n        val\
    \ sum", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n \
    \       val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemain", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        val sum = 0\n        val limit\
    \ = math.max(math.abs(n), 4L)\n        val limitInt = limit.toInt\n        for(i\
    \ <- 0 until limitInt) {\n            val x = math.abs(n - i)\n            val\
    \ y = math.abs(n - sum)\n            val z = math.abs(n - sum + x)\n         \
    \   val w = math.abs(n - sum + x + y)\n            val v = math.abs(n - sum +\
    \ x + y + z)\n            val u = math.abs(n - sum + x + y + z + w)\n        \
    \    val t = math.abs(n - sum + x + y + z + w + v)\n            val s = math.abs(n\
    \ - sum + x + y + z + w + v + u)\n            val r = math.abs(n - sum + x + y\
    \ + z + w + v + u + t)\n            val q = math.abs(n - sum + x + y + z + w +\
    \ v + u + t + s)\n            val p = math.abs(n - sum + x + y + z + w + v + u\
    \ + t + s + r)\n            val m = math.abs(n - sum + x + y + z + w + v + u +\
    \ t + s + r + q)\n            val l = math.abs(n - sum + x + y + z + w + v + u\
    \ + t + s + r + q + p)\n            val k = math.abs(n - sum + x + y + z + w +\
    \ v + u + t + s + r + q + p + m)\n            val j = math.abs(n - sum + x + y\
    \ + z + w + v + u + t + s + r + q + p + m + l)\n            val h = math.abs(n\
    \ - sum + x + y + z + w + v + u + t + s + r + q + p + m + l + k)\n           \
    \ val g = math.abs(n - sum + x + y + z + w + v + u + t + s + r + q + p + m + l\
    \ + k + j)\n            val f = math.abs(n - sum + x + y + z + w + v + u + t +\
    \ s + r + q + p + m + l + k + j + h)\n            val e = math.abs(n - sum + x\
    \ + y + z + w + v + u + t + s + r + q + p + m + l + k + j + h + g)\n         \
    \   val d = math.abs(n - sum + x + y + z + w + v + u + t + s + r + q + p + m +\
    \ l + k + j + h + g + f)\n            val c = math.abs(n - sum + x + y + z + w\
    \ + v + u + t + s + r + q + p + m + ", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 4\n        val remainder = sumEven\
    \ % 4\n        sumEvens == remainder", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            if (n % 2 == 0) {\n             \
    \   nums += i\n            }\n        }\n        if (nums.size == 4) {\n     \
    \       return true\n        }\n        return false", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 4\n        val remainder = sumEven\
    \ % 4\n        sumEvens == remainder", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n \
    \           if (i % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                sum += i\n            }\n        }\n        evens.size ==\
    \ sum.size", "        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n\
    \        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(x => x % 2 == 0).length\n \
    \       val sumEvensSum = sumEvens.toInt\n        val sumEvensSum2 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum3 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum4 = sumEvensSum * sumEvensSum\n        val sumEvensSum5 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum6 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum7 = sumEvensSum * sumEvensSum\n        val sumEvensSum8 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum9 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum10 = sumEvensSum * sumEvensSum\n        val sumEvensSum11 =\
    \ sumEvensSum * sumEvensSum\n        val sumEvensSum12 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum13 = sumEvensSum * sumEvensSum\n        val sumEvensSum14\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum15 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum16 = sumEvensSum * sumEvensSum\n        val sumEvensSum17\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum18 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum19 = sumEvensSum * sumEvensSum\n        val sumEvensSum20\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum21 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum22 = sumEvensSum * sumEvensSum\n        val sumEvensSum23\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum24 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum25 = sumEvensSum * sumEvensSum\n        val sumEvensSum26\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum27 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum28 = sumEvensSum * sumEvens", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum =\
    \ sumEvens.sum\n        sumEvensSum == sumEven", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n       \
    \ sumEvens == remainder", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum =\
    \ sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        sumEvensSum4\
    \ == n", "        val evens = mutable.Set[Long]()\n        val evenSum = 0\n \
    \       val evenSums = mutable.Set[Long]()\n        val evenSumsSum = 0\n    \
    \    val evenSumsSums = mutable.Set[Long]()\n        val evenSumsSumsSum = 0\n\
    \        val evenSumsSumsSums = mutable.Set[Long]()\n        val evenSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSums = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSums = mutable.Set[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSums =\
    \ mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSum = 0\n     \
    \   val evenSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n   \
    \     val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSum", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 4\n        val remainder = sumEven % 4\n        if (sumEvens ==\
    \ sumEven) {\n            if (remainder == 0) {\n                return true\n\
    \            }\n        }\n        return false", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum\
    \ = sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum == 4\n        val sumEvensSum4AndSumEvensSum4\
    \ = sumEvensSum4 and sumEvensSum == 4\n        val sumEvensSum4AndSumEvensSum4AndSumEvensSum4\
    \ = sumEvensSum4AndSumEvensSum4 and sumEvensSum == 4\n        val sumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4\
    \ = sumEvensSum4AndSumEvensSum4AndSumEvensSum4 and sumEvensSum == 4\n        val\
    \ sumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4 = sumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4\
    \ and sumEvensSum == 4\n        val sumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4\
    \ = sumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4\n\
    \        val sumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4AndSumEvensSum4",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        val sumEvensSum4Sum4\
    \ = sumEvensSum4Sum * 4\n        sumEvensSum4Sum == sumEven", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n\
    \        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum2 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum3 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum4 = sumEvensSum * sumEvensSum\n        val sumEvensSum5 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum6 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum7 = sumEvensSum * sumEvensSum\n        val sumEvensSum8 = sumEvensSum\
    \ * sumEvensSum\n        val sumEvensSum9 = sumEvensSum * sumEvensSum\n      \
    \  val sumEvensSum10 = sumEvensSum * sumEvensSum\n        val sumEvensSum11 =\
    \ sumEvensSum * sumEvensSum\n        val sumEvensSum12 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum13 = sumEvensSum * sumEvensSum\n        val sumEvensSum14\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum15 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum16 = sumEvensSum * sumEvensSum\n        val sumEvensSum17\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum18 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum19 = sumEvensSum * sumEvensSum\n        val sumEvensSum20\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum21 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum22 = sumEvensSum * sumEvensSum\n        val sumEvensSum23\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum24 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum25 = sumEvensSum * sumEvensSum\n        val sumEvensSum26\
    \ = sumEvensSum * sumEvensSum\n        val sumEvensSum27 = sumEvensSum * sumEvensSum\n\
    \        val sumEvensSum28 = sumEvensSum * sumEvensSum\n        val sum", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n \
    \       val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven.filter(_ % 2 == 0).filter(_ > 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum * 4\n        sumEvensSum4\
    \ <= n", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n\
    \        val sumEvensSum4 = sumEvensSum.toInt\n        val sumEvensSum4Evens =\
    \ sumEvensSum4.filter(_ % 2 == 0).length\n        val sumEvensSum4EvensSum = sumEvensSum4Evens.toInt\n\
    \        val sumEvensSum4EvensSum4 = sumEvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum4.toInt\n        val sumEvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4.toInt\n        val sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens\
    \ = sumEvensSum4EvensSum4EvensSum4EvensSum4EvensSum4Evens.toInt\n        val sumEvensSum4EvensSum",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum =\
    \ sumEvens.sum\n        sumEvensSum == 4", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n\
    \                evens += i\n            }\n            sum += i\n        }\n\
    \        evens.size == 4", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOd",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        sumEvensSum == sumEven", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n   \
    \     val sumEvenSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n  \
    \      val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n \
    \       val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n       \
    \ sumEvens == remainder", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 4\n        val sumEvensRemainder = sumEven % 4\n        sumEvens\
    \ == sumEvensRemainder", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = mutable.ListBuffer[Long]()\n        sumEven.+=((2l))\n\
    \        sumEven.+=((4l))\n        sumEven.+=((6l))\n        sumEven.+=((8l))\n\
    \        sumEven.+=((10l))\n        sumEven.+=((12l))\n        sumEven.+=((14l))\n\
    \        sumEven.+=((16l))\n        sumEven.+=((18l))\n        sumEven.+=((20l))\n\
    \        sumEven.+=((22l))\n        sumEven.+=((24l))\n        sumEven.+=((26l))\n\
    \        sumEven.+=((28l))\n        sumEven.+=((30l))\n        sumEven.+=((32l))\n\
    \        sumEven.+=((34l))\n        sumEven.+=((36l))\n        sumEven.+=((38l))\n\
    \        sumEven.+=((40l))\n        sumEven.+=((42l))\n        sumEven.+=((44l))\n\
    \        sumEven.+=((46l))\n        sumEven.+=((48l))\n        sumEven.+=((50l))\n\
    \        sumEven.+=((52l))\n        sumEven.+=((54l))\n        sumEven.+=((56l))\n\
    \        sumEven.+=((58l))\n        sumEven.+=((60l))\n        sumEven.+=((62l))\n\
    \        sumEven.+=((64l))\n        sumEven.+=((66l))\n        sumEven.+=((68l))\n\
    \        sumEven.+=((70l))\n        sumEven.+=((72l))\n        sumEven.+=((74l))\n\
    \        sumEven.+=((76l))\n        sumEven.+=((78l))\n        sumEven.+=((80l))\n\
    \        sumEven.+=((82l))\n        sumEven.+=((84l))\n        sumEven.+=((86l))\n\
    \        sumEven.+=((88l))\n        sumEven.+=((90l))\n        sumEven.+=((92l))\n\
    \        sumEven.+=((94l))\n        sumEven.+=((96l))\n        sumEven.+=((98l))\n\
    \        sumEven.+=((100l", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   sumEvensSum == sumEven", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n\
    \        val sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        val sumEvensSum4Sum4Sum\
    \ = sumEvensSum4Sum4.sum\n        val sumEvensSum4Sum4Sum4 = sumEvensSum4Sum4Sum\
    \ * 4\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.sum\n      \
    \  val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum", "        val sumEven = n.toInt\n   \
    \     val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n      \
    \  sumEvens == remainder", "        val evens = mutable.ListBuffer[Long]()\n \
    \       val sum = 0\n        for(i <- 0 until n){\n            val x = i\n   \
    \         val y = n - i\n            val sum = x + y\n            val even = if\
    \ (sum % 2 == 0) sum else sum - 1\n            evens += even\n        }\n    \
    \    evens.size == 4", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val sum = 0\n        for(i <- 0 until n){\n            val x = i\n       \
    \     val y = n - i\n            val z = x + y\n            val a = z % 2\n  \
    \          val b = z / 2\n            val c = z / 4\n            val d = z / 8\n\
    \            val e = z / 16\n            val f = z / 32\n            val g = z\
    \ / 64\n            val h = z / 128\n            val i = z / 256\n           \
    \ val j = z / 512\n            val k = z / 1024\n            val l = z / 2048\n\
    \            val m = z / 4096\n            val n = z / 8192\n            val o\
    \ = z / 16384\n            val p = z / 32768\n            val q = z / 65536\n\
    \            val r = z / 131072\n            val s = z / 262144\n            val\
    \ t = z / 524288\n            val u = z / 1048576\n            val v = z / 2097152\n\
    \            val w = z / 4194304\n            val x = z / 8388608\n          \
    \  val y = z / 16777216\n            val z = z / 33554432\n            val a =\
    \ z % 2\n            val b = z / 2\n            val c = z / 4\n            val\
    \ d = z / 8\n            val e = z / 16\n            val f = z / 32\n        \
    \    val g = z / 64\n            val h = z / 128\n            val i = z / 256\n\
    \            val j = z / 512\n            val k = z / 1024\n            val l\
    \ = z / 2048\n            val m = z / 4096\n            val n = z / 8192\n   \
    \         val o = z / 16384\n            val p = z / 32768\n            val q\
    \ = z / 65536\n            val r = z / 131072\n            val s = z / 262144\n\
    \            val t = z / 524288\n            val u = z / 1048576\n           \
    \ val v = z / 2097152\n            val w = z / 4194304\n            val x = z\
    \ / 8388608\n            val y = z / 16777216\n            val z = z / 33554432\n\
    \            val a = z % 2\n            val b = z / 2\n            val c = z /\
    \ 4\n            val d = z / 8\n            val e = z / 16\n            val f\
    \ = z / 32\n            val g = z / 64\n            val h = z / 128\n        \
    \    val i = z", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).sum\n        sumEvens == 4", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val ", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n   \
    \     sumEvens == remainder", "        val evenSums = mutable.Set[Long]()\n  \
    \      val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val n = n.toInt\n        val evenSum = n.toInt\n        val oddSum =\
    \ n.toInt\n        val sum = 0\n        val evenSums = mutable.Set[Long]()\n \
    \       val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val evenSums = mutable.Set[Long]()\n        val oddSums = mutable.Set[Long]()\n\
    \        val sums = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val evenSums = mutable.Set[Long]()\n        val oddSums = mutable.Set[Long]()\n\
    \        val sums = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val evenSums = mutable.Set[Long]()\n        val oddSums = mutable.Set[Long]()\n\
    \        val sums = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val evenSums = mutable.Set[Long]()\n        val oddSums = mutable.Set[Long]()\n\
    \        val sums = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val evenSums = mutable.Set[Long]()\n        val oddSums = mutable.Set[Long]()\n\
    \        val sums = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val oddSums = mutable.Set[Long]()\n        val sums = mutable.Set[Long]()\n\
    \        val evenSums = mutable.Set[Long]()\n        val oddSums = mutable.Set[Long]()\n",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        val sum =\
    \ mutable.ListBuffer[Long]()\n        val n = n.toInt\n        val i = 2\n   \
    \     while (i <= n) {\n            if (n % i == 0) {\n                evens +=\
    \ i\n                sum += i\n            }\n            i += 1\n        }\n\
    \        evens.size == sum.size && evens.forall(x => sum.contains(x))", "    \
    \    val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemainders", "        val sumEven = n.toInt\n     \
    \   val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n\
    \        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n\
    \        val sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n        sumEvensSum4Sum ==\
    \ n", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n   \
    \     val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemain",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven %\
    \ 4\n        sumEvens == sumEvensRemainder", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven %\
    \ 4\n        sumEvens == sumEvensRemainder", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n\
    \                evens += i\n            }\n            sum += i\n        }\n\
    \        evens.size == 4", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        val sumEvensSum = sumEvens.toInt\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.toInt\n      \
    \  sumEvensSum4Sum == sumEven", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenSum = mutable.ListBuffer[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (i % 2 == 0) {\n                evens += i\n            }\n\
    \        }\n        evenSum += evens.sum\n        if (evenSum == List(4)) {\n\
    \            return true\n        }\n        return false", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven - sumEvens\n        val sumEvensRemainders = sumEvensRemainder / 2\n\
    \        val sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n\
    \        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).sum\n        sumEvens\
    \ == 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = mutable.ListBuffer[Long]()\n\
    \        sumEven.+=((2l))\n        sumEven.+=((4l))\n        sumEven.+=((6l))\n\
    \        sumEven.+=((8l))\n        sumEven.+=((10l))\n        sumEven.+=((12l))\n\
    \        sumEven.+=((14l))\n        sumEven.+=((16l))\n        sumEven.+=((18l))\n\
    \        sumEven.+=((20l))\n        sumEven.+=((22l))\n        sumEven.+=((24l))\n\
    \        sumEven.+=((26l))\n        sumEven.+=((28l))\n        sumEven.+=((30l))\n\
    \        sumEven.+=((32l))\n        sumEven.+=((34l))\n        sumEven.+=((36l))\n\
    \        sumEven.+=((38l))\n        sumEven.+=((40l))\n        sumEven.+=((42l))\n\
    \        sumEven.+=((44l))\n        sumEven.+=((46l))\n        sumEven.+=((48l))\n\
    \        sumEven.+=((50l))\n        sumEven.+=((52l))\n        sumEven.+=((54l))\n\
    \        sumEven.+=((56l))\n        sumEven.+=((58l))\n        sumEven.+=((60l))\n\
    \        sumEven.+=((62l))\n        sumEven.+=((64l))\n        sumEven.+=((66l))\n\
    \        sumEven.+=((68l))\n        sumEven.+=((70l))\n        sumEven.+=((72l))\n\
    \        sumEven.+=((74l))\n        sumEven.+=((76l))\n        sumEven.+=((78l))\n\
    \        sumEven.+=((80l))\n        sumEven.+=((82l))\n        sumEven.+=((84l))\n\
    \        sumEven.+=((86l))\n        sumEven.+=((88l))\n        sumEven.+=((90l))\n\
    \        sumEven.+=((92l))\n        sumEven.+=((94l))\n        sumEven.+=((96l))\n\
    \        sumEven.+=((98l))\n        sumEven.+=((100l", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val evenSum = 0\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum = 0\n        val evenSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSum = 0\n        val evenSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSum = 0\n\
    \        val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n     \
    \   val evenSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = 0\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = 0\n       \
    \ val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer",
  "        val sumEven = mutable.ListBuffer[Long]()\n        val sumEven2 = mutable.ListBuffer[Long]()\n\
    \        val sumEven3 = mutable.ListBuffer[Long]()\n        val sumEven4 = mutable.ListBuffer[Long]()\n\
    \        val sumEven5 = mutable.ListBuffer[Long]()\n        val sumEven6 = mutable.ListBuffer[Long]()\n\
    \        val sumEven7 = mutable.ListBuffer[Long]()\n        val sumEven8 = mutable.ListBuffer[Long]()\n\
    \        val sumEven9 = mutable.ListBuffer[Long]()\n        val sumEven10 = mutable.ListBuffer[Long]()\n\
    \        val sumEven11 = mutable.ListBuffer[Long]()\n        val sumEven12 = mutable.ListBuffer[Long]()\n\
    \        val sumEven13 = mutable.ListBuffer[Long]()\n        val sumEven14 = mutable.ListBuffer[Long]()\n\
    \        val sumEven15 = mutable.ListBuffer[Long]()\n        val sumEven16 = mutable.ListBuffer[Long]()\n\
    \        val sumEven17 = mutable.ListBuffer[Long]()\n        val sumEven18 = mutable.ListBuffer[Long]()\n\
    \        val sumEven19 = mutable.ListBuffer[Long]()\n        val sumEven20 = mutable.ListBuffer[Long]()\n\
    \        val sumEven21 = mutable.ListBuffer[Long]()\n        val sumEven22 = mutable.ListBuffer[Long]()\n\
    \        val sumEven23 = mutable.ListBuffer[Long]()\n        val sumEven24 = mutable.ListBuffer[Long]()\n\
    \        val sumEven25 = mutable.ListBuffer[Long]()\n        val sumEven26 = mutable.ListBuffer[Long]()\n\
    \        val sumEven27 = mutable.ListBuffer[Long]()\n        val sumEven28 = mutable.ListBuffer[Long]()\n\
    \        val sumEven29 = mutable.ListBuffer[Long]()\n        val sumEven30 = mutable.ListBuffer[Long]()\n\
    \        val sumEven31 = mutable.ListBuffer[Long]()\n        val sumEven32 = mutable.ListBuffer[Long]()\n\
    \        val sumEven33 = mutable.ListBuffer[Long]()\n        val sumEven34 = mutable.ListBuffer[Long]()\n\
    \        val sumEven35 = mutable.ListBuffer[Long]()", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val i = 2\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                sum += i\n                evens += i\n \
    \           }\n            i += 1\n        }\n        if (sum == n) {\n      \
    \      evens.size == 4\n        } else {\n            evens.size == 0\n      \
    \  }", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        sumEvensSum == sumEven",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4IsEven = sumEvensSum4 % 2 == 0\n        val sumEvensSum4IsEvenEven\
    \ = sumEvensSum4IsEven && sumEvensSum4IsEven\n        sumEvensSum4IsEvenEven",
  "        val sumEven = mutable.Set[Long]()\n        for (i <- 0 until n) {\n   \
    \         if (n % i == 0) {\n                sumEven.add(i)\n            }\n \
    \       }\n        sumEven.size == 4", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n \
    \       val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).toList\n        val sumEvensSum = sumEvens.sum\n        sumEvensSum\
    \ == sumEven", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ remainder = sumEven % 4\n        sumEvens == remainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val sum = 0\n        for\
    \ (i <- 0 until n) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val sumEven\
    \ = evens.sum\n        val sumOdd = odds.sum\n        if (sumEven == sumOdd) {\n\
    \            if (evenSum == sumEven) {\n                return true\n        \
    \    } else {\n                return false\n            }\n        } else {\n\
    \            return false\n        }", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n  \
    \      for(i <- 0 until n){\n            if(i % 2 == 0){\n                evens\
    \ += i\n            }\n            sum += i\n        }\n        if(evens.size\
    \ == 4){\n            for(i <- 0 until evens.size){\n                nums += evens(i)\n\
    \            }\n            if(nums.size == 4){\n                for(i <- 0 until\
    \ nums.size){\n                    if(nums(i) != sum){\n                     \
    \   return false\n                    }\n                }\n                return\
    \ true\n            }\n        }\n        return false", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0).length\n      \
    \  sumEvens == 4", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0l\n        for(i <- 0 until\
    \ n){\n            val x = i % 2\n            val y = i / 2\n            if(x\
    \ == 0){\n                evens += y\n            }else{\n                odds\
    \ += y\n            }\n            sum += y\n        }\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum == sum && oddSum ==\
    \ sum", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n \
    \       val sumEvensRemainder = sumEven % 4\n        sumEvens == sumEvensRemainder",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven % 4\n\
    \        sumEvens == sumEvensRemainder", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n       \
    \ sumEvens == remainder", "        val sumEven = mutable.Set[Long]()\n       \
    \ val sumEven2 = mutable.Set[Long]()\n        val sumEven3 = mutable.Set[Long]()\n\
    \        val sumEven4 = mutable.Set[Long]()\n        val sumEven5 = mutable.Set[Long]()\n\
    \        val sumEven6 = mutable.Set[Long]()\n        val sumEven7 = mutable.Set[Long]()\n\
    \        val sumEven8 = mutable.Set[Long]()\n        val sumEven9 = mutable.Set[Long]()\n\
    \        val sumEven10 = mutable.Set[Long]()\n        val sumEven11 = mutable.Set[Long]()\n\
    \        val sumEven12 = mutable.Set[Long]()\n        val sumEven13 = mutable.Set[Long]()\n\
    \        val sumEven14 = mutable.Set[Long]()\n        val sumEven15 = mutable.Set[Long]()\n\
    \        val sumEven16 = mutable.Set[Long]()\n        val sumEven17 = mutable.Set[Long]()\n\
    \        val sumEven18 = mutable.Set[Long]()\n        val sumEven19 = mutable.Set[Long]()\n\
    \        val sumEven20 = mutable.Set[Long]()\n        val sumEven21 = mutable.Set[Long]()\n\
    \        val sumEven22 = mutable.Set[Long]()\n        val sumEven23 = mutable.Set[Long]()\n\
    \        val sumEven24 = mutable.Set[Long]()\n        val sumEven25 = mutable.Set[Long]()\n\
    \        val sumEven26 = mutable.Set[Long]()\n        val sumEven27 = mutable.Set[Long]()\n\
    \        val sumEven28 = mutable.Set[Long]()\n        val sumEven29 = mutable.Set[Long]()\n\
    \        val sumEven30 = mutable.Set[Long]()\n        val sumEven31 = mutable.Set[Long]()\n\
    \        val sumEven32 = mutable.Set[Long]()\n        val sumEven33 = mutable.Set[Long]()\n\
    \        val sumEven34 = mutable.Set[Long]()\n        val sumEven35 = mutable.Set[Long]()\n\
    \        val sumEven36 = mutable.Set[Long]()\n        val sumEven37 = mutable.Set[Long]()\n\
    \        val sumEven38 = ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val total = 0\n      \
    \  for(i <- 0 until n){\n            val x = i % 2\n            if(x == 0){\n\
    \                evens += i\n            }else{\n                odds += i\n \
    \           }\n            total += i\n        }\n        if(evens.size == 4){\n\
    \            true\n        }else{\n            false\n        }", "        val\
    \ sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        sumEvens.length == 4", "        val sumEven = n.toInt\n \
    \       val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   sumEvensSum == sumEven", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemain",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val x = i\n  \
    \          val y = n - i\n            val z = x + y\n            val z2 = z *\
    \ z\n            val z3 = z2 * z\n            val z4 = z3 * z\n            val\
    \ z5 = z4 * z\n            val z6 = z5 * z\n            val z7 = z6 * z\n    \
    \        val z8 = z7 * z\n            val z9 = z8 * z\n            val z10 = z9\
    \ * z\n            val z11 = z10 * z\n            val z12 = z11 * z\n        \
    \    val z13 = z12 * z\n            val z14 = z13 * z\n            val z15 = z14\
    \ * z\n            val z16 = z15 * z\n            val z17 = z16 * z\n        \
    \    val z18 = z17 * z\n            val z19 = z18 * z\n            val z20 = z19\
    \ * z\n            val z21 = z20 * z\n            val z22 = z21 * z\n        \
    \    val z23 = z22 * z\n            val z24 = z23 * z\n            val z25 = z24\
    \ * z\n            val z26 = z25 * z\n            val z27 = z26 * z\n        \
    \    val z28 = z27 * z\n            val z29 = z28 * z\n            val z30 = z29\
    \ * z\n            val z31 = z30 * z\n            val z32 = z31 * z\n        \
    \    val z33 = z32 * z\n            val z34 = z33 * z\n            val z35 = z34\
    \ * z\n            val z36 = z35 * z\n            val z37 = z36 * z\n        \
    \    val z38 = z37 * z\n            val z39 = z38 * z\n            val z40 = z39\
    \ * z\n            val z41 = z40 * z\n            val z42 = z41 * z\n        \
    \    val z43 = z42 * z\n            val z44 = z43 * z\n            val z45 = z44\
    \ * z\n            val z46 = z45 * z\n            val z47 = z46 * z\n        \
    \    val z48 = z47 * z\n            val z49 = z48 * z\n            val z50 = z",
  "        val nums = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val sums = mutable.ArrayBuffer(2l,\
    \ 4l, 6l, 8l)\n        val evens = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n     \
    \   val evenSums = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSum\
    \ = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSumEvens = mutable.ArrayBuffer(2l,\
    \ 4l, 6l, 8l)\n        val evenSumsSumEvensSum = mutable.ArrayBuffer(2l, 4l, 6l,\
    \ 8l)\n        val evenSumsSumEvensSumEvens = mutable.ArrayBuffer(2l, 4l, 6l,\
    \ 8l)\n        val evenSumsSumEvensSumEvensSum = mutable.ArrayBuffer(2l, 4l, 6l,\
    \ 8l)\n        val evenSumsSumEvensSumEvensSumEvens = mutable.ArrayBuffer(2l,\
    \ 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSum = mutable.ArrayBuffer(2l,\
    \ 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvens = mutable.ArrayBuffer(2l,\
    \ 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSum = mutable.ArrayBuffer(2l,\
    \ 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSumEvens =\
    \ mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvens\
    \ = mutable.ArrayBuffer(2l, 4l, 6l, 8l)\n        val evenSumsSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSumEvensSum\
    \ = mutable.", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val sumOfEven = 0\n        val sumOfOdd = 0\n        val sumOfSum = 0\n\
    \        val sumOfEvenSum = 0\n        val sumOfOddSum = 0\n        val sumOfSumEven\
    \ = 0\n        val sumOfSumOdd = 0\n        val sumOfSumSum = 0\n        val sumOfSumEvenSum\
    \ = 0\n        val sumOfSumOddSum = 0\n        val sumOfSumSumEven = 0\n     \
    \   val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd\
    \ = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n     \
    \   val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven\
    \ = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n     \
    \   val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd\
    \ = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n     \
    \   val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven\
    \ = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n     \
    \   val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd\
    \ = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n     \
    \   val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven\
    \ = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n     \
    \   val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd\
    \ = 0\n        val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n     \
    \   val sumOfSumSumEven = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven\
    \ = 0\n        val sumOfSumSumOdd = 0\n        val sumOfSumSumEven = 0\n     \
    \   val ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemainder", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven.filter(_ % 2 == 0).length\n        val sumEvensSum =\
    \ sumEvens.toInt\n        val sumEvensSum4 = sumEvensSum * 4\n        val sumEvensSum4Sum\
    \ = sumEvensSum4.toInt\n        val sumEvensSum4Sum4 = sumEvensSum4Sum * 4\n \
    \       val sumEvensSum4Sum4Sum = sumEvensSum4Sum4.toInt\n        val sumEvensSum4Sum4Sum4\
    \ = sumEvensSum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4.toInt\n\
    \        val sumEvensSum4Sum4Sum4Sum4 = sumEvensSum4Sum4Sum4Sum * 4\n        val\
    \ sumEvensSum4Sum4Sum4Sum4Sum = sumEvensSum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum * 4\n        val sumEvensSum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum4Sum\
    \ = sumEvensSum4Sum4Sum4Sum4", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n     \
    \   val sumEvensSum4 = sumEvensSum * 4\n        sumEvensSum4 == n", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0\
    \ until n){\n            val x = math.abs(i.toLong)\n            if(x%2 == 0){\n\
    \                evens += x\n            }\n            sum += x\n        }\n\
    \        evens.size == 4 && sum == n", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens\
    \ == remainder", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).toList\n        val sumEvensSum = sumEvens.sum\n        sumEvensSum\
    \ == sumEven", "        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            val x = i\n            val y\
    \ = x - 1\n            val z = y - 1\n            val w = z - 1\n            val\
    \ a = x - 2\n            val b = y - 2\n            val c = z - 2\n          \
    \  val d = w - 2\n            val e = x - 3\n            val f = y - 3\n     \
    \       val g = z - 3\n            val h = w - 3\n            val sum = x + y\
    \ + z + w + e + f + g + h\n            if(sum % 2 == 0){\n                evens\
    \ += sum\n            }\n        }\n        evens.size == 4", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ n){\n            val x = n%2\n            val y = n/x\n            val z = x/y\n\
    \            val w = x/z\n            val v = x/w\n            val s = x/v\n \
    \           val r = x/s\n            val q = x/r\n            val p = x/q\n  \
    \          val m = x/p\n            val n = x/m\n            val a = x/n\n   \
    \         val b = x/a\n            val c = x/b\n            val d = x/c\n    \
    \        val e = x/d\n            val f = x/e\n            val g = x/f\n     \
    \       val h = x/g\n            val i = x/h\n            val j = x/i\n      \
    \      val k = x/j\n            val l = x/k\n            val m = x/l\n       \
    \     val n = x/m\n            val o = x/n\n            val p = x/o\n        \
    \    val q = x/p\n            val r = x/q\n            val s = x/r\n         \
    \   val t = x/s\n            val u = x/t\n            val v = x/u\n          \
    \  val w = x/v\n            val x = x/w\n            val y = x/x\n           \
    \ val z = x/y\n            val w = x/z\n            val v = x/w\n            val\
    \ s = x/v\n            val r = x/s\n            val q = x/r\n            val p\
    \ = x/q\n            val m = x/p\n            val n = x/m\n            val a =\
    \ x/n\n            val b = x/a\n            val c = x/b\n            val d = x/c\n\
    \            val e = x/d\n            val f = x/e\n            val g = x/f\n \
    \           val h = x/g\n            val i = x/h\n            val j = x/i\n  \
    \          val k = x/j\n            val l = x/k\n            val m = x/l\n   \
    \         val n = x/m\n            val o = x/n\n            val p = x/o\n    \
    \        val q = x/p\n            val r = x/q\n            val s = x/r\n     \
    \       val t = x/s\n            val u = x/t\n            val v = x/u\n      \
    \      val w = x/v\n            val x = x/w\n            val y = x/x\n       \
    \     val z = x/y\n            val w = x/z\n            val v = x/w\n        \
    \    val s = x/v\n            val r = x/s\n            val q = x/r\n         \
    \   val p = x/q\n            val m = x/p\n            val n = x/m\n          \
    \  val a = x/n\n            val b = x/", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemain"]
stop_tokens:
- "\n    }\n"
