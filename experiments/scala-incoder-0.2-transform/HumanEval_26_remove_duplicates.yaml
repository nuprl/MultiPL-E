name: HumanEval_26_remove_duplicates
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a list of integers, remove all elements that occur more than once.\n\
  \    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n\
  \    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
  \ 4l.toLong, 5l.toLong))));\n    }\n\n}\n"
completions: ["        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x)).sortWith(_ < _)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.filterNot(seen.add)",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val result = numbers.foldLeft(List[Long]())((acc, x)\
    \ => {\n            if (acc.contains(x)) {\n                acc\n            }\
    \ else {\n                acc :+ x\n            }\n        })\n        result",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)).sortBy(n\
    \ => n).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach{\
    \ n =>\n            if (seen.contains(n)) numbers.remove(n)\n            else\
    \ seen += n\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = numbers.filterNot(seen(_))\n        seen.toList", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        val result = numbers.filterNot(n\
    \ => seen.contains(n))\n        seen.clear()\n        result", "        val seen\
    \ = mutable.Set[Long]()\n        val result = numbers.filterNot(x => seen.contains(x))\n\
    \        seen.clear()\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n   \
    \         if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      val result = numbers.filterNot(x => seen.add(x))\n        result", "  \
    \      val seen = mutable.Set[Long]()\n        numbers.filter(x => !seen.add(x))",
  "        val seen = mutable.Set[Long]()\n        numbers.foreach { number =>\n \
    \           if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            }\n            else {\n             \
    \   seen += n\n            }\n        }\n        numbers", "        val seen =\
    \ mutable.Set[Long]()\n        numbers.filter(x => !seen.add(x))", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filter(x => !seen.contains(x)).sortWith(_ < _)", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach(x => if (seen.add(x)) x else\
    \ ())\n        numbers.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen.add(n)\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n   \
    \         if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(n)\n        \
    \    } else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        val result = numbers.filterNot(x\
    \ => seen.add(x))\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filterNot(seen.add)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.filterNot(seen.add)",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(n)\n        \
    \    } else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.Set[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(n\
    \ => !seen.contains(n)).sortBy(n => n).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortWith(_ < _).reverse", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(n)\n      \
    \      } else {\n                seen += n\n            }\n        }\n       \
    \ numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filterNot(seen.add)",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortWith(_\
    \ < _)", "        val seen = mutable.HashSet[Long]()\n        val result = numbers.filterNot(x\
    \ => seen.contains(x))\n        seen.clear()\n        result", "        val result\
    \ = numbers.foldLeft(List[Long]())((acc, x) => {\n            if (acc.contains(x))\
    \ {\n                acc\n            } else {\n                acc :+ x\n   \
    \         }\n        })\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            } else {\n         \
    \       seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n))\n        else seen += n)\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.Set[Long]()\n      \
    \  numbers.filterNot(seen(_)).sorted", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => !seen.contains(n)).sortBy(-_).reverse", "       \
    \ val seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)).sortBy(n\
    \ => n).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.Set[Long]()\n      \
    \  numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => seen.add(n)).sortBy(-_)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.Set[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)\
    \ && seen.add(n))", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => !seen.contains(n)).sortBy(_.toLong).reverse", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(n\
    \ => !seen.contains(n)).sortWith(_ < _)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filterNot(seen(_))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            }\n            else {\n             \
    \   seen += n\n            }\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filterNot(seen.add)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n))\n            else seen += n\n        }\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { number =>\n            if\
    \ (seen.contains(number)) {\n                numbers.remove(number)\n        \
    \    } else {\n                seen += number\n            }\n        }\n    \
    \    numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filterNot(seen(_))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filterNot(seen.add)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.add(x))", "        val seen = mutable.Set[Long]()\n\
    \        numbers.filter(x => !seen.add(x)).sort", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filterNot(seen.add)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x)).sortWith(_\
    \ < _)", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(x\
    \ => if (seen.contains(x)) numbers.remove(x))\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))",
  "        val result = numbers.foldLeft(List[Long]())((acc, x) => {\n           \
    \ if (acc.contains(x)) {\n                acc\n            } else {\n        \
    \        acc :+ x\n            }\n        })\n        result", "        val seen\
    \ = mutable.HashSet[Long]()\n        val result = numbers.filterNot(n => seen(n))\n\
    \        seen.clear()\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)).sortBy(_.toLong).reverse",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach{ n =>\n   \
    \         if (seen.contains(n)) {\n                numbers.remove(n)\n       \
    \     }\n            else {\n                seen += n\n            }\n      \
    \  }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortWith(_\
    \ < _).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(n)\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n) && seen.add(n))",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen\
    \ += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n     \
    \   numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)).sortBy(-_).toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val result =\
    \ numbers.foldLeft(List[Long]())((acc, x) => {\n            if (acc.contains(x))\
    \ acc else acc :+ x\n        })\n        result", "        val seen = mutable.Set[Long]()\n\
    \        numbers.filterNot(x => seen.contains(x)).sortBy(x => x).reverse", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filterNot(seen(_))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => if (seen.add(x)) numbers.remove(x))\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)).sortBy(n\
    \ => n).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(n)\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => !seen.contains(n)).sortBy(_.toLong).reverse", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers -= n\n          \
    \  } else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen.add(n)\n        }\n        numbers", "        val seen\
    \ = mutable.Set[Long]()\n        numbers.filterNot(seen(_)).sortWith(_ < _)",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.Set[Long]()\n      \
    \  numbers.foreach(n => {\n            if (seen.contains(n)) {\n             \
    \   numbers.remove(numbers.indexOf(n))\n            }\n            else {\n  \
    \              seen += n\n            }\n        })\n        numbers", "     \
    \   val seen = mutable.HashSet[Long]()\n        numbers.filterNot(seen.add)",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach{ n =>\n   \
    \         if (seen.contains(n)) {\n                numbers.remove(n)\n       \
    \     }\n            else {\n                seen += n\n            }\n      \
    \  }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortWith(_\
    \ < _)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            }\n            else {\n             \
    \   seen += n\n            }\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "     \
    \   val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n     \
    \       if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n           \
    \ else seen += n\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(numbers.indexOf(n)))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)\
    \ && seen.add(n))", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n        numbers.filterNot(seen.add)",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(n)\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.Set[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n   \
    \         if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n         \
    \   else seen.add(n)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortWith(_ < _).reverse", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n)))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val result = numbers.toSet.toList\n   \
    \     result.sortWith(_ < _)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filterNot(x => seen.contains(x)).sortBy(x => x).reverse", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.Set[Long]()\n        numbers.filter(x => !seen(x)).sortWith(_\
    \ < _).reverse", "        val seen = mutable.HashSet[Long]()\n        val result\
    \ = numbers.filterNot(seen(_))\n        result ++ seen.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n           \
    \ if (seen.contains(number)) numbers.remove(number)\n            else seen.add(number)\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      val result = numbers.filterNot(n => seen.contains(n))\n        seen.clear()\n\
    \        result", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.Set[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filterNot(seen.add)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => !seen.contains(n)).sortBy(n => n).reverse", "   \
    \     val result = numbers.foldLeft(List[Long]())((acc, x) => {\n            val\
    \ found = acc.find(_ == x)\n            if (found == None) acc :+ x\n        \
    \    else found\n        })\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => !seen.contains(n))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            } else {\n         \
    \       seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)\
    \ && seen.add(n))", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n      \
    \      if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            } else {\n                seen += number\n            }\n       \
    \ }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortWith(_ < _).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            } else {\n         \
    \       seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n)).sortWith(_\
    \ < _).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filterNot(seen(_))",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = numbers.filter(x => !seen.contains(x))\n        seen ++=\
    \ numbers\n        result", "        val seen = mutable.HashSet[Long]()\n    \
    \    numbers.foreach { n =>\n            if (seen.contains(n)) {\n           \
    \     numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse"]
stop_tokens:
- "\n    }\n"
