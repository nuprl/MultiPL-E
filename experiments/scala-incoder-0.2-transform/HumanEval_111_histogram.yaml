name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        }\n        map.toMap", "    \
    \    val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n      \
    \  val maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountPairs = maxLetterCounts.map(_._1)\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n\
    \        val maxLetterCountPairsCountSorted = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsCountSortedWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ != maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ == maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> count + 1\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size).toMap\n        letterCounts.filter(_._2 > 1).map(_._1)",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => map += letter -> (letters.count(_ == letter)))\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += letter ->\
    \ count + 1\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> count+1\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L) + 1L))\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        }\n        map.toMap"]
stop_tokens:
- "\n    }\n"
