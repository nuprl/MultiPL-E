name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        }\n        map.toMap", "    \
    \    val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n      \
    \  val maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountPairs = maxLetterCounts.map(_._1)\n\
    \        val maxLetterCountPairsCount = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n\
    \        val maxLetterCountPairsCountSorted = maxLetterCountPairsCount.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsCountSortedWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ != maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ == maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> count + 1\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size).toMap\n        letterCounts.filter(_._2 > 1).map(_._1)",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => map += letter -> (letters.count(_ == letter)))\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += letter ->\
    \ count + 1\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> count+1\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L) + 1L))\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters =\
    \ letterCounts.filter(_._2 == maxCount).map(_._1)\n        val maxLetterCounts\
    \ = letterCounts.filter(_._2 == maxCount)\n        val maxLetterCountMap = new\
    \ mutable.HashMap[String,Long]()\n        maxLetterCounts.foreach(x => maxLetterCountMap\
    \ += (x._1 -> x._2))\n        val maxLetterCountMapSorted = maxLetterCountMap.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapSortedKeys = maxLetterCountMapSorted.keys.toList\n\
    \        val maxLetterCountMapSortedValues = maxLetterCountMapSorted.values.toList\n\
    \        val maxLetterCountMapSortedKeysAndValues = maxLetterCountMapSorted.map{x\
    \ => (x._1, x._2)}\n        val maxLetterCountMapSortedKeysAndValuesSorted = maxLetterCountMapSortedKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeys = maxLetterCountMapSortedKeysAndValuesSorted.keys.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedValues = maxLetterCountMapSortedKeysAndValuesSorted.values.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues = maxLetterCountMapSortedKeysAndValuesSorted.map{x\
    \ => (x._1, x._2)}\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeys\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.keys.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.values.toList\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.map{x\
    \ => (x._1, x._2)}\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.sort",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = maxCount.toLong\n        val\
    \ maxLetterCount = letters.count(x => x == maxLetter)\n        val maxLetterCount\
    \ = maxLetterCount.toLong\n        val maxLetterCount = maxLetterCount / maxCount\n\
    \        val maxLetter = maxLetter.toString.toLowerCase // to handle cases like\
    \ \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n      \
    \  val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter = maxLetter.toString.toLowerCase\
    \ // to handle cases like \"A\" and \"a\"\n        val maxLetterCount = maxLetterCount.toLong\n\
    \        val maxLetterCount = maxLetterCount / maxCount\n        val maxLetter\
    \ = maxLetter.toString.toLowerCase // to handle cases like \"A\" and \"a\"\n \
    \       val maxLetterCount = maxLetterCount.toLong\n        val maxLetterCount\
    \ = maxLetterCount / maxCount\n        val maxLetter", "        val letters =\
    \ test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetterCount = result.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetterCount = result.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetterCount = result.maxBy(_._2)._2\n        val result = counts.filter(_._2\
    \ == maxLetterCount).filter(_._1 == maxLetter)\n        val maxCount = result.maxBy(_._2)._1\n\
    \        val maxLetter = result.maxBy(_._2)._2\n        val maxLetterCount = result.maxBy(_._2)._2\n\
    \        val result = counts.filter(_._2 == maxLetterCount).filter(_._1 == maxLetter)\n\
    \        val maxCount = result.maxBy(_._2)._1\n        val maxLetter = result.maxBy(_._2)._2\n\
    \        val maxLetter", "        val letters = test.split(\" \").toList\n   \
    \     val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            counts(letter) += letters.length\n        }\n   \
    \     counts.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val map = mutable.Map[String,Long]()\n        for (letter <- letters) {\n  \
    \          val count = map.getOrElse(letter,0)\n            map += letter -> (count+1)\n\
    \        }\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMap.toMap\n        val maxLetterCountMapWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicates.toSeq.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicates : Map[String,Long]\
    \ = maxLetterCountMapWithDuplicatesSorted.filter(_._2 > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicates.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted.toSeq.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSorted.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.toSeq.sortBy(_._1).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedSortedSorted.map{case\
    \ (letter,count) => (letter", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            counts(letter) += letters.length\n\
    \        })\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLettersCount = maxLetters.map(x => (x,counts.get(x)))\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val ", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter,map.getOrElse(letter,0L)+1L)\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter, 0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val map = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => map.updated(x, map.getOrElse(x, 0L) +\
    \ 1))\n        map.toMap", "        val letters = test.split(\" \").toList\n \
    \       val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            counts(letter) += 1\n      \
    \  })\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = scala.collection.mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            counts(letter) += 1\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.updated(letter, map.getOrElse(letter,\
    \ 0l) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCount = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = letterCount.getOrElse(letter,0)\n\
    \            letterCount += (letter -> count+1)\n        }\n        letterCount.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountPairs = maxLetterCounts.map(_._1)\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n        val maxLetterCountPairsCountSorted\
    \ = maxLetterCountPairsCount.sortBy(_._1).reverse\n        val maxLetterCountPairsCountSortedWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 != maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ == maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax = maxLetterCountPairsCountSorted.takeWhile(_._2\
    \ == maxLetterCountPairsCountSorted.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 == maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(x\
    \ => x == letter)\n            counts += letter -> count\n        })\n       \
    \ counts.toMap", "        val letters = test.split(\" \").toList\n        val\
    \ map = scala.collection.mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElse(letter, 0L)\n            map += letter\
    \ -> (count + 1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.updated(letter, map.getOrElse(letter, 0l) + 1)\n     \
    \   })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0L)\n          \
    \  map += (letter -> count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x =>\
    \ x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n \
    \       val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n   \
    \     val maxLetterCounts = letterCounts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLetterCountSum = maxLetterCounts.sum\n        val maxLetterCountAverage\
    \ = maxLetterCountSum / maxLetterCounts.size\n        val maxLetterCountAverageString\
    \ = maxLetterCountAverage.toString\n        val maxLetterCountAverageStringWithDecimals\
    \ = maxLetterCountAverageString.replace(\".\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpaces\
    \ = maxLetterCountAverageStringWithDecimals.replace(\",\", \" \")\n        val\
    \ maxLetterCountAverageStringWithDecimalsWithSpacesAndDot = maxLetterCountAverageStringWithDecimalsWithSpaces.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDot.replace(\",\", \"\
    \ \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpaces.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDot.replace(\"\
    ,\", \" \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpaces.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot.replace(\"\
    ,\", \" \")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot\
    \ = maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWithSpacesAndDotWithSpacesAndDot.replace(\"\
    .\", \",\")\n        val maxLetterCountAverageStringWithDecimalsWithSpacesAndDotWithSpacesAndDotWith",
  "        val map = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => map.updated(x, map.getOrElse(x, 0L) + 1))\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val map = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            val count = map.getOrElse(x,0L)\n            map += x -> count\
    \ + 1\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map.empty[String,Long]\n        for (letter\
    \ <- letters) {\n            val count = map.get(letter).getOrElse(0L)\n     \
    \       map += (letter -> (count + 1))\n        }\n        map.toMap", "     \
    \   val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = maxLetters.groupBy(x => x).mapValues(_.size)\n  \
    \      val maxLetterMaxCount = maxLetterCounts.maxBy(_._2)._2\n        val maxLetterMaxLetters\
    \ = maxLetterCounts.filter(_._2 == maxLetterMaxCount).map(_._1)\n        val maxLetterMaxLetterCounts\
    \ = maxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n        val maxLetterMaxLetterMaxCount\
    \ = maxLetterMaxLetterCounts.maxBy(_._2)._2\n        val maxLetterMaxLetterMaxLetters\
    \ = maxLetterMaxLetterCounts.filter(_._2 == maxLetterMaxLetterMaxCount).map(_._1)\n\
    \        val maxLetterMaxLetterMaxLetterCounts = maxLetterMaxLetterMaxLetters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxLetterMaxLetterMaxLetterMaxCount = maxLetterMaxLetterMaxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetters = maxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n        val maxLetterMaxLetterMaxLetterMaxLetterCounts\
    \ = maxLetterMaxLetterMaxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxCount = maxLetterMaxLetterMaxLetterMaxLetterCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxLetters = maxLetterMaxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n        val maxLetterMaxLetterMaxLetterMaxLetterMaxCounts\
    \ = maxLetterMaxLetterMaxLetterMaxLetterMaxLetters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCount = maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCounts.maxBy(_._2)._2\n\
    \        val maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetters = maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxLetterCounts.filter(_._2\
    \ == maxLetterMaxLetterMaxLetterMaxLetterMaxLetterMaxCount).map(_._1)\n      \
    \  val maxLetterMax", "        val letters = test.split(\" \").toList\n      \
    \  val counts = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            counts(letter) += letters.length\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.updated(letter,map.getOrElse(letter,0L)+1L)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.update(letter, map.getOrElse(letter, 0L) + 1L)\n     \
    \   })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += (letter -> count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x =>\
    \ x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n \
    \       val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n   \
    \     val maxLetterCounts = letterCounts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLetterCountMap = new mutable.HashMap[String,Long]()\n        maxLetterCounts.foreach(x\
    \ => maxLetterCountMap += (x -> x.toLong))\n        val maxLetterCountMap2 = new\
    \ mutable.HashMap[String,Long]()\n        maxLetterCountMap.foreach(x => maxLetterCountMap2\
    \ += (x._1 -> x._2))\n        val maxLetterCountMap3 = new mutable.HashMap[String,Long]()\n\
    \        maxLetterCountMap2.foreach(x => maxLetterCountMap3 += (x._1 -> x._2))\n\
    \        val maxLetterCountMap4 = new mutable.HashMap[String,Long]()\n       \
    \ maxLetterCountMap3.foreach(x => maxLetterCountMap4 += (x._1 -> x._2))\n    \
    \    val maxLetterCountMap5 = new mutable.HashMap[String,Long]()\n        maxLetterCountMap4.foreach(x\
    \ => maxLetterCountMap5 += (x._1 -> x._2))\n        val maxLetterCountMap6 = new\
    \ mutable.HashMap[String,Long]()\n        maxLetterCountMap5.foreach(x => maxLetterCountMap6\
    \ += (x._1 -> x._2))\n        val maxLetterCountMap7 = new mutable.HashMap[String,Long]()\n\
    \        maxLetterCountMap6.foreach(x => maxLetterCountMap7 += (x._1 -> x._2))\n\
    \        val maxLetterCountMap8 = new mutable.HashMap[String,Long]()\n       \
    \ maxLetterCountMap7.foreach(x => maxLetterCountMap8 += (x._1 -> x._2))\n    \
    \    val maxLetterCountMap9 = new mutable.HashMap[String,Long]()\n        maxLetterCountMap8.foreach(x\
    \ => maxLetterCountMap9 += (x._1 -> x._2))\n        val maxLetterCountMap10 =\
    \ new mutable.HashMap[String,Long]()\n        maxLetterCountMap9.foreach(x =>\
    \ maxLetterCountMap10 += (x._1 -> x._2))\n        val maxLetterCountMap11 = new\
    \ mutable.HashMap[String,Long]()\n        maxLetterCountMap10.foreach(x => maxLetterCountMap11",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            map.get(letter) match {\n  \
    \              case Some(count) => map.put(letter, count + 1)\n              \
    \  case None => map.put(letter, 1)\n            }\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        })\n        map", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        })\n        map", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += letter -> count + 1\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val map = mutable.HashMap[String,Long]()\n        test.split(\" \").foreach(x\
    \ => map.update(x,map.getOrElse(x,0L) + 1L))\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(x\
    \ => x == letter)\n            counts(letter) = count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCount\
    \ = maxLetters.map(x => (x,counts.get(x)))\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount =\
    \ maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2\
    \ > 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 >\
    \ 1).map(_._1)\n        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n\
    \        val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n  \
    \      val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n    \
    \    val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n      \
    \  val maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val\
    \ maxLettersCount = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val maxLettersCount\
    \ = maxLettersCount.filter(_._2 > 1).map(_._1)\n        val ", "        val letters\
    \ = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        letterCounts.filter(_._2 == maxCount).map(_._1)", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> count + 1\n        })\n        map", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLetterCountSum = maxLetterCounts.sum\n        val maxLetterCountAverage\
    \ = maxLetterCountSum / maxLetterCounts.size\n        val maxLetterCountAverageString\
    \ = maxLetterCountAverage.toString\n        val maxLetterCountAverageStringWithDecimals\
    \ = maxLetterCountAverageString.replace(\".\",\",\")\n        val maxLetterCountAverageStringWithDecimalsWithCommas\
    \ = maxLetterCountAverageStringWithDecimals.replace(\",\",\".\")\n        val\
    \ maxLetterCountAverageStringWithDecimalsWithCommasWithSpaces = maxLetterCountAverageStringWithDecimalsWithCommas.replace(\"\
    \ \",\"\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDots\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpaces.replace(\".\"\
    ,\",\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommas\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDots.replace(\"\
    ,\",\".\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommas.replace(\"\
    \ \",\"\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDots.replace(\"\
    .\",\",\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommas\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommas.replace(\"\
    ,\",\".\")\n        val maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommasWithSpaces\
    \ = maxLetterCountAverageStringWithDecimalsWithCommasWithSpacesWithDotsWithCommasWithSpacesWithDotsWithCommasWithSpaces.replace(\"\
    \ \",\"\")\n        val ", "        val letters = test.split(\" \").toList\n \
    \       val map = mutable.Map[String,Long]()\n        letters.foreach(letter =>\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val map = mutable.Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            val count = map.getOrElse(x,0L)\n\
    \            map += x -> count + 1\n        })\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.map(letter => (letter, letters.count(letter\
    \ => letter == letter)).toMap\n        letterCounts.maxBy(_._2)._1", "       \
    \ val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(x => x._2 == maxCount).map(_._1)\n       \
    \ val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(", "        val letters = test.split(\" \").toList\n      \
    \  val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.filter(x => x._2 == maxLetterCount).map(_._1)\n\
    \        val maxLetterCountMap = new scala.collection.mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(x => maxLetterCountMap += (x._1 -> x._2))\n \
    \       val maxLetterCountMapWithMaxCount = maxLetterCountMap + (maxLetter ->\
    \ maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxLetter = maxLetterCountMapWithMaxCount.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetter.filter(_._2 == maxCount)\n    \
    \    val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter =\
    \ maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCount.filter(_._1 == maxLetter)\n\
    \        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetter\
    \ = maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount.filter(_._1\
    \ == maxLetter)\n        val maxLetterCountMapWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCountWithMaxLetterWithMaxCount\
    \ = maxLetterCountMapWithMaxCountWithMaxLetter", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map", "        val letters = test.split(\" \").toList\n        val map\
    \ = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n        \
    \    val count = map.getOrElse(letter,0)\n            map += (letter -> count\
    \ + 1)\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0L)\n            map +=\
    \ letter -> count + 1\n        })\n        map.toMap", "        val letters =\
    \ test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n   \
    \     letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0L)\n\
    \            counts += letter -> count + 1\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map", "       \
    \ val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += letter -> (count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letterCounts.getOrElse(letter,0L)\n\
    \            letterCounts += letter -> count+1\n        }\n        letterCounts",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter).getOrElse(0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.put(letter,map.getOrElse(letter,0l)+1))\n\
    \        map", "        val letters = test.split(\" \").toList\n        val map\
    \ = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n        \
    \    map.update(letter, map.getOrElse(letter, 0L) + 1L)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts(letter) += letters.length\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> count + 1\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxCount = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(x\
    \ => x._2 == maxCount).map(_._1).mkString(\" \")\n        val maxLetterCount =\
    \ counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCounts\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSums\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSumsSum\
    \ = counts.filter(x => x._2 == maxCount).map(_._2).sum\n        val maxLetterCountSumsSumsSumsSumsSumsSumsSum",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(_ == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountMap = maxLetterCounts.map(_._1)\n        val maxLetterCountMapWithCount\
    \ = maxLetterCountMap.toMap\n        val maxLetterCountMapWithCountWithMax = maxLetterCountMapWithCount.map{case\
    \ (k, v) => (k, v.toLong)}\n        val maxLetterCountMapWithCountWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMax.map{case (k, v) => (k, v)}\n        val\
    \ maxLetterCountMapWithCountWithMaxWithMaxWithMax = maxLetterCountMapWithCountWithMaxWithMax.map{case\
    \ (k, v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMax.map{case (k, v) => (k, v)}\n\
    \        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMax = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMax.map{case\
    \ (k, v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{case (k,\
    \ v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{case (k,\
    \ v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMax.map{case (k,\
    \ v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.map{case\
    \ (k, v) => (k, v)}\n        val maxLetterCountMapWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountMapWithCountWithMaxWithMax", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> (count+1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L)+1))\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,0L)\
    \ + 1L)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts(letter) = count\n        }\n        counts.toMap", "        val map\
    \ = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x => map.updated(x,\
    \ map.getOrElse(x, 0L) + 1))\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.put(letter,map.getOrElse(letter,0l)+1))\n        map.toMap", "      \
    \  val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountPairs = maxLetterCounts.map(_._1)\n        val maxLetterCountPairsCount\
    \ = maxLetterCountPairs.map(x => (x, letterCounts(x)))\n        val maxLetterCountPairsCountSorted\
    \ = maxLetterCountPairsCount.sortBy(_._1).reverse\n        val maxLetterCountPairsCountSortedWithMax\
    \ = maxLetterCountPairsCountSorted.takeWhile(_._2 != maxLetterCountPairsCountSorted.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMax = maxLetterCountPairsCountSortedWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMax.last._2)\n        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSortedWithMaxWithMax.map(_._1).takeWhile(_._2 != maxLetterCountPairsCountSortedWithMaxWithMax.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax = maxLetterCountPairsCountSortedWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMax.last._2)\n        val\
    \ maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax = maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMax.last._2)\n   \
    \     val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax =\
    \ maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.map(_._1).takeWhile(_._2\
    \ != maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMax.last._2)\n\
    \        val maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = maxLetterCountPairsCountSortedWithMaxWithMaxWithMaxWith", "        val letters\
    \ = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x =>\
    \ x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n \
    \       letterCounts.filter(_._2 == maxCount).map(_._1)", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => map.put(letter,map.getOrElse(letter,0L)+1))\n\
    \        map", "        val letters = test.split(\" \").toList\n        val letterCounts\
    \ = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCounts.maxBy(_._1)._1\n        val\
    \ maxLetterCountPairs = maxLetterCounts.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetterCountPairs.filter(_._1 == maxLetterCountPair).map(_._2)\n\
    \        val maxLetterCountPair = maxLetterCountPairs.maxBy(_._1)._1\n       \
    \ val maxLetterCountPairs = maxLetter", "        val letters = test.split(\" \"\
    ).toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap", "        val map\
    \ = mutable.Map[String,Long]()\n        test.split(\" \").foreach(x => {\n   \
    \         val count = map.getOrElse(x,0L)\n            map += x -> count + 1\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter).getOrElse(0L)\n            map\
    \ += (letter -> count + 1)\n        })\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        letterCounts.maxBy(_._2)._1", "        val letters = test.split(\" \"\
    ).toList\n        val letterCounts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letterCounts.getOrElse(letter,0L)\n \
    \           letterCounts += letter -> count + 1\n        }\n        letterCounts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            counts(letter) += letters.length\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.update(letter,map.getOrElse(letter,0L) + 1L)\n       \
    \ })\n        map.toMap", "        val letters = test.split(\" \").toList\n  \
    \      val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter, map.getOrElse(letter, 0L) + 1)\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val counts = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            counts(letter) += 1\n        })\n        counts.toMap", "       \
    \ val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.updated(letter,map.getOrElse(letter,0L)+1L)\n\
    \        })\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n      \
    \  val maxCount = letterCounts.maxBy(_._2)._2\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case\
    \ (letter,count) => (letter,count)}\n        val maxLetterCountMapWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMap.toMap\n        val maxLetterCountMapWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicates : Map[String,Long]\
    \ = maxLetterCountMapWithDuplicatesSorted.filter(_._2 > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates.toSeq.sortBy(_._2).reverse\n\
    \        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ : Map[String,Long] = maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.filter(_._2\
    \ > 1)\n        val maxLetterCountMapWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWith",
  "        val letters = test.split(\" \").toList\n        val map = scala.collection.mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            counts(letter) += letters.length\n\
    \        })\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += letter -> (count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => map += letter -> (letters.count(_ == letter)))\n\
    \        map", "        val letters = test.split(\" \").toList\n        val map\
    \ = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n        \
    \    val count = map.getOrElse(letter, 0)\n            map += (letter -> count\
    \ + 1)\n        })\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = letters.count(x => x == letter)\n            counts\
    \ += letter -> count\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            map.put(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count+1)\n        }\n        map", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0L)\n            map += letter -> count + 1\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => map.updated(letter, map.getOrElse(letter, 0L)\
    \ + 1))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += letter\
    \ -> (count+1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map", "        val letters = test.split(\" \").toList\n        val map\
    \ = scala.collection.mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0L)\n            counts\
    \ += letter -> count + 1\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> count+1\n        })\n        counts.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            map.update(letter, map.getOrElse(letter,\
    \ 0L) + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += letter\
    \ -> count + 1\n        })\n        map", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += (letter -> count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter).getOrElse(0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxCount = counts.maxBy(_._2)._1\n    \
    \    val maxLetters = counts.filter(x => x._2 == maxCount).map(_._1)\n       \
    \ val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(x => x._1).size\n        val maxLettersCount = maxLetters.map(x\
    \ => x._1).size\n        val maxLettersCount = maxLetters.map(x => x._1).size\n\
    \        val maxLettersCount = maxLetters.map(x => x._1).size\n        val maxLettersCount\
    \ = maxLetters.map(", "        val letters = test.split(\" \").toList\n      \
    \  val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter, 0)\n            map += letter ->\
    \ (count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            map.put(letter, map.getOrElse(letter, 0l) + 1)\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val map = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n\
    \            val count = map.getOrElse(letter,0)\n            map += (letter ->\
    \ count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count+1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map.empty[String,Long]\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0L)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L)+1))\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map.empty[String,Long]\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter).getOrElse(0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => counts(letter) += 1)\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0L)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap"]
stop_tokens:
- "\n    }\n"
