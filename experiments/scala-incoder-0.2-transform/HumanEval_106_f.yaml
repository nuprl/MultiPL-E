name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        val factorials = mutable.ListBuffer[Long]()\n        factorials\
    \ += 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n            if(i%2\
    \ == 0) {\n                factorials += i.toLong\n            } else {\n    \
    \            factorials += (i.toLong + factorials.last)\n            }\n     \
    \   }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        for (i <- 1 to n) {\n            if (i % 2\
    \ == 0) {\n                factorial *= i\n                factorials += factorial\n\
    \            } else {\n                factorial += i\n                factorials\
    \ += factorial\n            }\n        }\n        factorials.toList", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }\n            else{\n                factorial\
    \ = factorial*i\n                sum = sum + i\n            }\n        }\n   \
    \     factorials += factorial\n        sums += sum\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1l\n        val sum = 1l\n        val even = 1l\n   \
    \     val odd = 1l\n        val i = 2l\n        while (i <= n) {\n           \
    \ if (i % 2 == 0) {\n                evens += i.toLong\n            } else {\n\
    \                odds += i.toLong\n            }\n            factorial *= i\n\
    \            sum += i\n            factorials += factorial\n            sums +=\
    \ sum\n            even += i\n            odd += i\n            i += 1\n     \
    \   }\n        evens.toList ++ sums.toList ++ evens.toList ++ odds.toList", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        for(i <- 1 to n){\n            factorial *= i\n            if(i % 2 ==\
    \ 0){\n                factorials += factorial\n            }\n        }\n   \
    \     factorials", "        val factorials = mutable.ListBuffer[Long]()\n    \
    \    for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += factorials.reduceLeft(_\
    \ * _)\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= factorials.take(n).filter(_ % 2 == 0).map(_ * _)\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i.toLong\n \
    \           } else {\n                factorials += factorials.last * i\n    \
    \        }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += factorials.sum\
    \ + i.toLong\n            }\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n \
    \           if(i%2 == 0) {\n                factorials += i.toLong\n         \
    \   } else {\n                factorials += (i.toLong + factorials.last)\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials += n\n\
    \        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 6\n        factorials += 24\n        factorials += 15\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var i = 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorials += i.toLong\n            } else {\n              \
    \  factorials += factorials.foldLeft(1l) { (acc, x) => acc * x }\n           \
    \ }\n            i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n        var sum\
    \ = 1\n        var i = 0\n        while (i < n) {\n            if (i % 2 == 0)\
    \ {\n                factorials += factorial\n                factorial = 1\n\
    \            }\n            else {\n                factorial *= i\n         \
    \       sum += factorial\n            }\n            i += 1\n        }\n     \
    \   factorials += factorial\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i % 2 == 0) {\n                factorials += factorial\n     \
    \           sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ ++= sums\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 4\n        factorials += 5\n        factorials += 6\n  \
    \      factorials += 7\n        factorials += 8\n        factorials += 9\n   \
    \     factorials += 10\n        factorials += 11\n        factorials += 12\n \
    \       factorials += 13\n        factorials += 14\n        factorials += 15\n\
    \        factorials += 16\n        factorials += 17\n        factorials += 18\n\
    \        factorials += 19\n        factorials += 20\n        factorials += 21\n\
    \        factorials += 22\n        factorials += 23\n        factorials += 24\n\
    \        factorials += 25\n        factorials += 26\n        factorials += 27\n\
    \        factorials += 28\n        factorials += 29\n        factorials += 30\n\
    \        factorials += 31\n        factorials += 32\n        factorials += 33\n\
    \        factorials += 34\n        factorials += 35\n        factorials += 36\n\
    \        factorials += 37\n        factorials += 38\n        factorials += 39\n\
    \        factorials += 40\n        factorials += 41\n        factorials += 42\n\
    \        factorials += 43\n        factorials += 44\n        factorials += 45\n\
    \        factorials += 46\n        factorials += 47\n        factorials += 48\n\
    \        factorials += 49\n        factorials += 50\n        factorials += 51\n\
    \        factorials += 52\n        factorials += 53\n        factorials += 54\n\
    \        factorials += 55\n        factorials += 56\n        factorials += 57\n\
    \        factorials += 58\n        factorials += 59\n        factorials += 60\n\
    \        factorials += 61\n        factorials += 62\n        factorials += 63\n\
    \        factorials += 64\n        factorials += 65\n        factorials += 66\n\
    \        factorials += 67\n        factorials += 68\n        factorials += 69\n\
    \        factorials += 70\n        factorials += 71\n        factorials += 72\n\
    \        factorials += 73\n        factorials += 74\n        factorials += 75\n\
    \        factorials += 76\n        factorials += 77\n        factorials += 78\n\
    \        factorials += 79\n        factorials += 80\n        factorials += 81\n\
    \        factorials += 82\n        factorials += 83\n", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        var sum = 0\n\
    \        var i = 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorials += factorial\n                factorial = 1\n    \
    \        } else {\n                factorial *= i\n                sum += factorial\n\
    \            }\n            i += 1\n        }\n        factorials += factorial\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n   \
    \             factorials += factorial\n                sums += sum\n         \
    \   }\n            else{\n                factorial = factorial * i\n        \
    \        sum = sum + i\n            }\n        }\n        factorials += factorial\n\
    \        sums += sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sum += i\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials.filter(_ % 2 == 0).map(x =>\
    \ x * factorials.indexOf(x) + factorials.indexOf(x) + 1)", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val number = 1l\n        val sum = 1l\n \
    \       val factorialSum = 1l\n        val factorialSumOfNumbers = 1l\n      \
    \  val factorialSumOfNumbersOfNumbers = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbers = 1l\n  \
    \      val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers = 1l\n  \
    \      val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 1l\n        val factorialSumOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOf",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 1 // start from 1\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                evens += i.toLong\n            } else {\n     \
    \           odds += i.toLong\n            }\n            factorials += i.toLong\
    \ * factorials.last\n            sums += i.toLong * sums.last\n            i +=\
    \ 1\n        }\n        evens.toList ++ sums.toList ++ factorials.toList", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1\
    \ to n\n        factorials ++= factorials.drop(1).map(x => x * x)\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSums = mutable.ArrayBuffer.empty[Long]\n        val oddSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactorials = mutable.ArrayBuffer.empty[Long]\n        val evenSumFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumFactorialsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n \
    \       val oddFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n   \
    \     val evenSumFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n \
    \       val oddSumFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSumFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactorialsSumFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumFactorialsSumFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumFactorialsSumFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSumFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactorialsSumFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumFactorialsSumFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumFactorialsSumFactorialsSumFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialsSumFactorialsSumFactorialsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactor", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong * factorials.last\n            }else{\n                factorials\
    \ += i.toLong\n            }\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += n\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong * factorials.last\n            }else{\n                factorials\
    \ += i.toLong\n            }\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i\
    \ <- 1 to n){\n            if(i%2 == 0){\n                factorials += i.toLong\n\
    \            }else{\n                sum += i.toLong\n            }\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 1\n        for(i <- 1 to n){\n \
    \           factorials += factorial\n            sum += i\n            factorial\
    \ *= i\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            factorials += factorial\n\
    \            sums += sum\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n   \
    \     factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(_))", "  \
    \      val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(x)\
    \ + factorials.indexOf(x) + 1)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var i = 1 // i starts from 1\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                factorials += i.toLong\n            } else {\n\
    \                factorials += (i.toLong + factorials.last)\n            }\n \
    \           i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val evenFactorial = 1\n        val oddFactorial = 1\n\
    \        val evenSum = 1\n        val oddSum = 1\n        val evenSumFactorial\
    \ = 1\n        val oddSumFactorial = 1\n        val evenEven = 1\n        val\
    \ evenOdd = 1\n        val oddEven = 1\n        val oddOdd = 1\n        val evenEvenFactorial\
    \ = 1\n        val evenOddFactorial = 1\n        val oddEvenFactorial = 1\n  \
    \      val oddOddFactorial = 1\n        val evenOddSum = 1\n        val evenEvenSum\
    \ = 1\n        val evenOddSumFactorial = 1\n        val evenEvenSumFactorial =\
    \ 1\n        val oddEvenSum = 1\n        val oddEvenSumFactorial = 1\n       \
    \ val evenOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven = 1\n\
    \        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEvenEven\
    \ = 1\n        val oddOddEven = 1\n        val evenOddOdd = 1\n        val oddEven",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2l\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        odds ++= factorials.drop(evens.size)\n        evens\
    \ ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n  \
    \      evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n\
    \        evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n\
    \        evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n\
    \        evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n\
    \        evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n\
    \        evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop(evens.size)\n\
    \        evens ++= sums.take(evens.size)\n        odds ++= factorials.drop(evens.size)\n\
    \        evens ++= factorials.take(evens.size)\n        odds ++= sums.drop", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }else{\n                factorial *= i\n    \
    \            sum += i\n            }\n        }\n        factorials += factorial\n\
    \        sums += sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ i = 2l\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += i\n            } else {\n                odds += i\n         \
    \   }\n            factorial *= i\n            sum += i\n            factorials\
    \ += factorial\n            sums += sum\n            even += i\n            odd\
    \ += i\n            i += 2l\n        }\n        odds ++= evens\n        sums ++=\
    \ evens\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong*i\n            }\n            else{\n                factorials\
    \ += i.toLong\n            }\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += 2\n        factorials += 3\n        factorials += 6\n      \
    \  factorials += 24\n        factorials += 15\n        factorials.take(n)", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += factorial\n        \
    \        sums += sum\n            }\n            else{\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        evens.toList.map(x => factorials.map(y => x * y)).toList\
    \ ++ sums.toList", "        val factorials = mutable.ListBuffer[Long]()\n    \
    \    factorials += 1\n        factorials += 2\n        factorials += n\n     \
    \   factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        while (i < n) {\n            if (i % 2 == 0) {\n            \
    \    factorials += i.toLong\n                sum += i.toLong\n            } else\
    \ {\n                sums += i.toLong\n            }\n            i += 1\n   \
    \     }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // i is 1 because\
    \ we start from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n \
    \               evens += i.toLong\n            } else {\n                odds\
    \ += i.toLong\n            }\n            factorials += i.toLong * factorials.last\n\
    \            sums += i.toLong * sums.last\n            i += 1\n        }\n   \
    \     evens.toList ++ sums.toList ++ factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val evenSum = 1\n        val oddSum = 1\n        val evenFactorial\
    \ = 1\n        val oddFactorial = 1\n        val evenSumFactorial = 1\n      \
    \  val oddSumFactorial = 1\n        val evenSumEven = 1\n        val oddSumEven\
    \ = 1\n        val evenSumOdd = 1\n        val oddSumOdd = 1\n        val evenSumEvenFactorial\
    \ = 1\n        val oddSumEvenFactorial = 1\n        val evenSumOddFactorial =\
    \ 1\n        val oddSumOddFactorial = 1\n        val evenSumEvenSum = 1\n    \
    \    val oddSumEvenSum = 1\n        val evenSumOddSum = 1\n        val oddSumOddSum\
    \ = 1\n        val evenSumEvenSumFactorial = 1\n        val oddSumEvenSumFactorial\
    \ = 1\n        val evenSumOddSumFactorial = 1\n        val oddSumOddSumFactorial\
    \ = 1\n        val evenSumEvenSumEven = 1\n        val oddSumEvenSumEven = 1\n\
    \        val evenSumOddSumEven = 1\n        val oddSumOddSumEven = 1\n       \
    \ val evenSumEvenSumOdd = 1\n        val oddSumEvenSumOdd = 1\n        val evenSumOddSumOdd\
    \ = 1\n        val oddSumOddSumOdd = 1\n        val evenSumEvenSumEvenFactorial\
    \ = 1\n        val oddSumEvenSumEvenFactorial = 1\n        val evenSumOddSumEvenFactorial\
    \ = 1\n        val oddSumOddSumEvenFactorial = 1\n        val evenSumEvenSumOddFactorial\
    \ = 1\n        val oddSumEvenSumOddFactorial = 1\n        val evenSumOddSumOddFactorial\
    \ = 1\n        val evenSumEvenSumEvenSum = 1\n        val oddSumEvenSumEvenSum\
    \ = 1\n        val evenSumOddSumEvenSum = 1\n        val oddSumOddSumEvenSum =\
    \ 1\n        val evenSumEvenSumOddSum = 1\n        val oddSumEvenSumOddSum = 1",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(x)\
    \ + factorials.indexOf(x) + 1)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += factorials.foldLeft(1l.toLong)(_\
    \ * _)\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorials = mutable.ArrayBuffer.empty[Long]\n        val oddFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val oddSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenFactorialSums = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialSums = mutable.ArrayBuffer.empty[Long]\n        val sumEvenFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOddFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumFactorials = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddSumFactorials = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenFactorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumEvenFactorials = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddSumOddFactorials = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialSumEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenFactorialSumOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddFactorialSumEvens = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddFactorialSumOdds = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenFactorialEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenFactorialOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddFactorialEvens = mutable.ArrayBuffer.empty[Long]\n    \
    \    val evenSumOddFactorialOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddSumEvenFactorialEvens = mutable.ArrayBuffer.empty[Long]\n        val oddSumEvenFactorialOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 4\n        factorials += 5\n        factorials += 6\n  \
    \      factorials += 7\n        factorials += 8\n        factorials += 9\n   \
    \     factorials += 10\n        factorials += 11\n        factorials += 12\n \
    \       factorials += 13\n        factorials += 14\n        factorials += 15\n\
    \        factorials += 16\n        factorials += 17\n        factorials += 18\n\
    \        factorials += 19\n        factorials += 20\n        factorials += 21\n\
    \        factorials += 22\n        factorials += 23\n        factorials += 24\n\
    \        factorials += 25\n        factorials += 26\n        factorials += 27\n\
    \        factorials += 28\n        factorials += 29\n        factorials += 30\n\
    \        factorials += 31\n        factorials += 32\n        factorials += 33\n\
    \        factorials += 34\n        factorials += 35\n        factorials += 36\n\
    \        factorials += 37\n        factorials += 38\n        factorials += 39\n\
    \        factorials += 40\n        factorials += 41\n        factorials += 42\n\
    \        factorials += 43\n        factorials += 44\n        factorials += 45\n\
    \        factorials += 46\n        factorials += 47\n        factorials += 48\n\
    \        factorials += 49\n        factorials += 50\n        factorials += 51\n\
    \        factorials += 52\n        factorials += 53\n        factorials += 54\n\
    \        factorials += 55\n        factorials += 56\n        factorials += 57\n\
    \        factorials += 58\n        factorials += 59\n        factorials += 60\n\
    \        factorials += 61\n        factorials += 62\n        factorials += 63\n\
    \        factorials += 64\n        factorials += 65\n        factorials += 66\n\
    \        factorials += 67\n        factorials += 68\n        factorials += 69\n\
    \        factorials += 70\n        factorials += 71\n        factorials += 72\n\
    \        factorials += 73\n        factorials += 74\n        factorials += 75\n\
    \        factorials += 76\n        factorials += 77\n        factorials += 78\n\
    \        factorials += 79\n        factorials += 80\n        factorials += 81\n\
    \        factorials += 82\n        factorials += 83\n", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var i = 1;\n        while(i <= n){\n            factorials += i.toLong\
    \ * factorials.last\n            i += 1\n        }\n        factorials", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n \
    \       factorials += 2\n        factorials += 3\n        factorials += 4\n  \
    \      factorials += 5\n        factorials += 6\n        factorials += 7\n   \
    \     factorials += 8\n        factorials += 9\n        factorials += 10\n   \
    \     factorials += 11\n        factorials += 12\n        factorials += 13\n \
    \       factorials += 14\n        factorials += 15\n        factorials += 16\n\
    \        factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else {\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials += factorial\n        sums\
    \ += sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 2l\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                evens += i.toLong\n\
    \            } else {\n                odds += i.toLong\n            }\n     \
    \       factorials += i.toLong * factorials.last\n            sums += i.toLong\
    \ * sums.last\n            i += 1\n        }\n        factorials.reverse\n   \
    \     sums.reverse\n        evens.reverse\n        odds.reverse", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += factorial\n    \
    \            sums += sum\n            } else {\n                factorial *= i\n\
    \                sum += i\n            }\n        }\n        factorials ++= factorial\n\
    \        sums ++= sum\n        factorials.toList ++ sums.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head\n        factorials += factorials.head * factorials.tail\n \
    \       factorials += factorials.head * factorials.tail * factorials.tail\n  \
    \      factorials.take(n)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong\n            }else{\n                factorials += (i.toLong + factorials.last)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val number = 1\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += factorial\n        \
    \        numbers += number\n            }\n            else{\n               \
    \ factorials += factorial * number\n                numbers += number\n      \
    \      }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        val sum = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n   \
    \     val factorial = 1\n        ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong*i\n            }else{\n                factorials += i.toLong\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += factorial\n        \
    \        sums += sum\n            }else{\n                factorial *= i\n   \
    \             sum += i\n            }\n        }\n        factorials += factorial\n\
    \        sums += sum\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorial = 1\n        for(i <- 1 to n){\n            factorial *=\
    \ i\n            if(i % 2 == 0){\n                factorials += factorial\n  \
    \          }else{\n                factorials += factorial.toLong\n          \
    \  }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += (i.toLong +\
    \ factorials.last)\n            }\n        }\n        factorials.toList", "  \
    \      val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials ++= factorial\n        sums ++= sum\n     \
    \   factorials.toList ++ sums.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.take(n).toList\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        val number = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val factorial = 1\n        ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials += factorial\n        sums\
    \ += sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += factorials.foldLeft(0l)\
    \ { (acc, x) => acc * x }\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        for(i <- 1 to n){\n            factorial *= i\n            if(i % 2 ==\
    \ 0){\n                factorials += factorial\n            }\n        }\n   \
    \     factorials", "        val factorials = mutable.ListBuffer[Long]()\n    \
    \    factorials += 1\n        factorials += 2\n        factorials += n\n     \
    \   factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val factorial = 1l\n \
    \       val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ i = 2l\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += i\n                factorial *= i\n            } else {\n    \
    \            odds += i\n                factorial *= i\n            }\n      \
    \      factorials += factorial\n            sums += sum\n            sum += i\n\
    \            i += 2l\n        }\n        evens.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorial", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong * factorials.last\n            }else{\n                factorials\
    \ += i.toLong\n            }\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n \
    \           if (i % 2 == 0) {\n                factorials += i.toLong\n      \
    \      } else {\n                factorials += factorials.sum + i.toLong\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials += 2\n\
    \        factorials += 3\n        factorials += 4\n        factorials += 5\n \
    \       factorials += 6\n        factorials += 7\n        factorials += 8\n  \
    \      factorials += 9\n        factorials += 10\n        factorials += 11\n \
    \       factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i.toLong*i.toLong\n\
    \            }\n            else{\n                factorials += i.toLong\n  \
    \          }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i.toLong\n            } else {\n                odds\
    \ += i.toLong\n            }\n            factorials += i.toLong * factorials.last\n\
    \            sums += i.toLong * sums.last\n            i += 1\n        }\n   \
    \     factorials.reverse\n        sums.reverse\n        evens.reverse\n      \
    \  odds.reverse", "        val factorials = mutable.ListBuffer[Long]()\n     \
    \   factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n   \
    \         if(i%2 == 0){\n                factorials += i.toLong\n            }else{\n\
    \                factorials += (i*(i+1l)).toLong\n            }\n        }\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val i = 1 // i starts\
    \ from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      factorials += i.toLong\n            } else {\n                sums += i\n\
    \            }\n            i += 1\n        }\n        factorials.toList ++ sums.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += 2\n        factorials += 6\n        factorials += 24\n\
    \        factorials += 15\n        factorials.take(n)", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorials ++= factorials.drop(1).map(x => x * x)\n        factorials ++=\
    \ factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorials ++= factorials.drop(1).map(x => x * x)\n        factorials ++=\
    \ factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorials ++= factorials.drop(1).map(x => x * x)\n        factorials ++=\
    \ factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorials ++= factorials.drop(1).map(x => x * x)\n        factorials ++=\
    \ factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorials ++= factorials.drop(1).map(x => x * x)\n        factorials ++=\
    \ factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorials ++= factorials.drop(1).map(x => x * x)\n        factorials ++=\
    \ factorials.drop(1).map(x => x * x)\n        factorials ++= factorials.drop(1).map(x\
    \ => x * x)\n        factorials ++= factorials.drop(1).map(x => x * x)\n     \
    \   factorial", "        val factorials = mutable.ListBuffer[Long]()\n       \
    \ factorials += 1\n        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += n\n        factorials.reverse",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials ++=\
    \ 1 to n\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(_))",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i.toLong\n \
    \           } else {\n                factorials += (i.toLong + factorials.last)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 1 to n){\n\
    \            val factorial = factorials.foldLeft(1l)((acc, x) => acc * x)\n  \
    \          factorials += factorial\n            sum += factorial\n        }\n\
    \        factorials", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       var factorial = 1\n        for(i <- 1 to n){\n            factorial *=\
    \ i\n            if(i % 2 == 0){\n                factorials += factorial\n  \
    \          }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i.toLong\n            } else {\n                factorials += (i.toLong *\
    \ (i-1).toLong)\n            }\n        }\n        factorials.toList", "     \
    \   val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n \
    \           if(i%2==0){\n                factorials += i.toLong*i\n          \
    \  }\n            else{\n                factorials += i.toLong\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong*i\n            }else{\n                factorials += i.toLong\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= factorials.drop(1).map(x => x * x)\n        factorials.toList", "      \
    \  val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial = 1\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += factorial\n            }\n            else {\n                factorials\
    \ += factorial * (i + 1).toLong\n            }\n            factorial = 1\n  \
    \      }\n        factorials += factorial\n        factorials.toList", "     \
    \   val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1l\n        val sum = 1l\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += factorial\n    \
    \            sums += sum\n            } else {\n                factorial *= i\n\
    \                sum += i\n            }\n        }\n        factorials ++= factorial\n\
    \        sums ++= sum\n        factorials.toList ++ sums.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n   \
    \     factorials.filter(_ % 2 == 0).map(_ * _).toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n           \
    \ if (i % 2 == 0) {\n                factorials += i.toLong\n            } else\
    \ {\n                factorials += (i.toLong + factorials.last)\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // i is always\
    \ 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ evens += i.toLong\n            } else {\n                odds += i.toLong\n\
    \            }\n            factorials += i.toLong * factorials.last\n       \
    \     sums += i.toLong * sums.last\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val evenSum = 1\n        val oddSum = 1\n        val evenFactorial\
    \ = 1\n        val oddFactorial = 1\n        val evenSumFactorial = 1\n      \
    \  val oddSumFactorial = 1\n        val evenSumSum = 1\n        val oddSumSum\
    \ = 1\n        val evenFactorialSum = 1\n        val oddFactorialSum = 1\n   \
    \     val evenSumFactorialSum = 1\n        val oddSumFactorialSum = 1\n      \
    \  val evenSumSumFactorial = 1\n        val oddSumSumFactorial = 1\n        val\
    \ evenFactorialFactorial = 1\n        val oddFactorialFactorial = 1\n        val\
    \ evenSumFactorialFactorial = 1\n        val oddSumFactorialFactorial = 1\n  \
    \      val evenSumSumFactorialFactorial = 1\n        val oddSumSumFactorialFactorial\
    \ = 1\n        val evenFactorialSumSum = 1\n        val oddFactorialSumSum = 1\n\
    \        val evenSumFactorialSumSum = 1\n        val oddSumFactorialSumSum = 1\n\
    \        val evenSumSumFactorialSumSum = 1\n        val oddSumSumFactorialSumSum\
    \ = 1\n        val evenFactorialFactorialSum = 1\n        val oddFactorialFactorialSum\
    \ = 1\n        val evenSumFactorialFactorial = 1\n        val oddSumFactorialFactorial\
    \ = 1\n        val evenSumSumFactorialFactorial = 1\n        val oddSumSumFactorialFactorial\
    \ = 1\n        val evenFactorialFactorialFactorial = 1\n        val oddFactorialFactorialFactorial\
    \ = 1\n        val evenSumFactorialFactorialFactorial = 1\n        val oddSumFactorialFactorialFactorial\
    \ = 1\n        val evenSumSumFactorialFactorialFactorial = 1\n        val oddSumSumFactorialFactorialFactorial\
    \ = 1\n        val evenFactorialSumFactorialSum = 1\n        val oddFactor", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 0\n        for(i <- 1 to n) {\n            factorial *= i\n\
    \            sum += i\n            factorials += factorial\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sum += i\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1l\n        val number = 0l\n        for(i <- 1 to n) {\n            number\
    \ += 1l\n            if(i % 2 == 0) {\n                factorials += factorial\n\
    \            }\n            else {\n                factorials += factorial *\
    \ number\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += 3\n        factorials += 4\n        factorials += 5\n\
    \        factorials += 6\n        factorials += 7\n        factorials += 8\n \
    \       factorials += 9\n        factorials += 10\n        factorials += 11\n\
    \        factorials += 12\n        factorials += 13\n        factorials += 14\n\
    \        factorials += 15\n        factorials += 16\n        factorials += 17\n\
    \        factorials += 18\n        factorials += 19\n        factorials += 20\n\
    \        factorials += 21\n        factorials += 22\n        factorials += 23\n\
    \        factorials += 24\n        factorials += 25\n        factorials += 26\n\
    \        factorials += 27\n        factorials += 28\n        factorials += 29\n\
    \        factorials += 30\n        factorials += 31\n        factorials += 32\n\
    \        factorials += 33\n        factorials += 34\n        factorials += 35\n\
    \        factorials += 36\n        factorials += 37\n        factorials += 38\n\
    \        factorials += 39\n        factorials += 40\n        factorials += 41\n\
    \        factorials += 42\n        factorials += 43\n        factorials += 44\n\
    \        factorials += 45\n        factorials += 46\n        factorials += 47\n\
    \        factorials += 48\n        factorials += 49\n        factorials += 50\n\
    \        factorials += 51\n        factorials += 52\n        factorials += 53\n\
    \        factorials += 54\n        factorials += 55\n        factorials += 56\n\
    \        factorials += 57\n        factorials += 58\n        factorials += 59\n\
    \        factorials += 60\n        factorials += 61\n        factorials += 62\n\
    \        factorials += 63\n        factorials += 64\n        factorials += 65\n\
    \        factorials += 66\n        factorials += 67\n        factorials += 68\n\
    \        factorials += 69\n        factorials += 70\n        factorials += 71\n\
    \        factorials += 72\n        factorials += 73\n        factorials += 74\n\
    \        factorials += 75\n        factorials += 76\n        factorials += 77\n\
    \        factorials += 78\n        factorials += 79\n        factorials += 80\n\
    \        factorials += 81\n        factorials += 82\n        factorials += 83\n",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1l\n        val sum = 1l\n        val even = 1l\n   \
    \     val odd = 1l\n        val evens = mutable.ArrayBuffer.empty[Long]\n    \
    \    val odds = mutable.ArrayBuffer.empty[Long]\n        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1l\n\
    \        val sum = 1l\n        val even = 1l\n        val odd = 1l\n        val\
    \ evens = mutable.ArrayBuffer.empty[Long]\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            if(i % 2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials += factorial\n        sums\
    \ += sum\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1l\n        val sumOfNumbers = 1l\n        for(i <- 1 to n){\n           \
    \ if(i%2 == 0){\n                factorials += factorial\n                sumOfNumbers\
    \ += sumOfNumbers\n            }\n            else{\n                factorials\
    \ += factorial * i\n                sumOfNumbers += i\n            }\n       \
    \ }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials ++= factorial\n        sums\
    \ ++= sum\n        factorials.toList ++ sums.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n            if (i\
    \ % 2 == 0) {\n                factorials += i.toLong\n            } else {\n\
    \                factorials += (i.toLong + 1)\n            }\n        }\n    \
    \    factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 4\n        factorials += 5\n        factorials += 6\n  \
    \      factorials += 7\n        factorials += 8\n        factorials += 9\n   \
    \     factorials += 10\n        factorials += 11\n        factorials += 12\n \
    \       factorials += 13\n        factorials += 14\n        factorials += 15\n\
    \        factorials += 16\n        factorials += 17\n        factorials += 18\n\
    \        factorials += 19\n        factorials += 20\n        factorials += 21\n\
    \        factorials += 22\n        factorials += 23\n        factorials += 24\n\
    \        factorials += 25\n        factorials += 26\n        factorials += 27\n\
    \        factorials += 28\n        factorials += 29\n        factorials += 30\n\
    \        factorials += 31\n        factorials += 32\n        factorials += 33\n\
    \        factorials += 34\n        factorials += 35\n        factorials += 36\n\
    \        factorials += 37\n        factorials += 38\n        factorials += 39\n\
    \        factorials += 40\n        factorials += 41\n        factorials += 42\n\
    \        factorials += 43\n        factorials += 44\n        factorials += 45\n\
    \        factorials += 46\n        factorials += 47\n        factorials += 48\n\
    \        factorials += 49\n        factorials += 50\n        factorials += 51\n\
    \        factorials += 52\n        factorials += 53\n        factorials += 54\n\
    \        factorials += 55\n        factorials += 56\n        factorials += 57\n\
    \        factorials += 58\n        factorials += 59\n        factorials += 60\n\
    \        factorials += 61\n        factorials += 62\n        factorials += 63\n\
    \        factorials += 64\n        factorials += 65\n        factorials += 66\n\
    \        factorials += 67\n        factorials += 68\n        factorials += 69\n\
    \        factorials += 70\n        factorials += 71\n        factorials += 72\n\
    \        factorials += 73\n        factorials += 74\n        factorials += 75\n\
    \        factorials += 76\n        factorials += 77\n        factorials += 78\n\
    \        factorials += 79\n        factorials += 80\n        factorials += 81\n\
    \        factorials += 82\n        factorials += 83\n", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvens = mutable.ArrayBuffer.empty[Long]\n        val sumOdds =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvenOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n   \
    \     val evenSumEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n     \
    \   val evenSumOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n    \
    \    val evenSumEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n   \
    \     val evenSumOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvenO", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 1 // i starts from 1\n        while (i <= n) {\n            if\
    \ (i % 2 == 0) {\n                evens += i.toLong\n            } else {\n  \
    \              odds += i.toLong\n            }\n            factorials += i.toLong\
    \ * factorials.last\n            sums += i.toLong * sums.last\n            i +=\
    \ 1\n        }\n        evens.toList ++ sums.toList ++ factorials.toList", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        for (i <- 1 to n) {\n            if (i % 2 == 0)\
    \ {\n                factorial *= i\n                factorials += factorial\n\
    \            } else {\n                sum += i\n            }\n        }\n  \
    \      factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factori", "        val factorials = mutable.ArrayBuffer.empty[Long]\n      \
    \  factorials += 1\n        factorials += 2\n        factorials += n\n       \
    \ factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       factorials += 1\n        factorials += 2\n        factorials += n\n  \
    \      factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 6\n        factorials += 24\n        factorials += 15\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += i.toLong\n            }\n            else{\n   \
    \             sum += i.toLong\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials.toList", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += 2\n        factorials += 3\n        factorials += 4\n      \
    \  factorials += 5\n        factorials += 6\n        factorials += 7\n       \
    \ factorials += 8\n        factorials += 9\n        factorials += 10\n       \
    \ factorials += 11\n        factorials += 12\n        factorials += 13\n     \
    \   factorials += 14\n        factorials += 15\n        factorials += 16\n   \
    \     factorials += 17\n        factorials += 18\n        factorials += 19\n \
    \       factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 6\n \
    \       factorials += 24\n        factorials += 15\n        factorials.take(n)",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }\n            else{\n                factorial\
    \ = factorial * i\n                sum = sum + i\n            }\n        }\n \
    \       factorials += factorial\n        sums += sum\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    for(i <- 1 to n) {\n            val factorial = factorials.foldLeft(1l) {\
    \ (acc, i) => acc * i }\n            factorials += factorial\n            sum\
    \ += factorial\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            factorials\
    \ += factorial\n            sums += i\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            factorial *= i\n            sum += factorial\n        }\n       \
    \ factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       factorials += 1\n        factorials += 2\n        factorials += n\n  \
    \      factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 6\n        factorials += 24\n        factorials += 15\n\
    \        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n     \
    \   while (i <= n) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        \
    \    factorials += i\n            sums += i\n            i += 1\n        }\n \
    \       evens.toList ++ sums.toList ++ factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            if(i%2 == 0) {\n                factorials += factorial\n       \
    \         sums += sum\n            }\n            else {\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ ++= factorial\n        sums ++= sum\n        factorials.toList ++ sums.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factori", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += n\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 2l\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                evens += i.toLong\n\
    \            } else {\n                odds += i.toLong\n            }\n     \
    \       factorials += i.toLong * factorials.last\n            sums += i.toLong\
    \ * sums.last\n            i += 1\n        }\n        factorials.toList", "  \
    \      val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    for(i <- 1 to n) {\n            val factorial = factorials.foldLeft(1l)((acc,\
    \ x) => acc * x)\n            factorials += factorial\n            sum += factorial\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 4\n        factorials += 5\n        factorials += 6\n  \
    \      factorials += 7\n        factorials += 8\n        factorials += 9\n   \
    \     factorials += 10\n        factorials += 11\n        factorials += 12\n \
    \       factorials += 13\n        factorials += 14\n        factorials += 15\n\
    \        factorials += 16\n        factorials += 17\n        factorials += 18\n\
    \        factorials += 19\n        factorials += 20\n        factorials += 21\n\
    \        factorials += 22\n        factorials += 23\n        factorials += 24\n\
    \        factorials += 25\n        factorials += 26\n        factorials += 27\n\
    \        factorials += 28\n        factorials += 29\n        factorials += 30\n\
    \        factorials += 31\n        factorials += 32\n        factorials += 33\n\
    \        factorials += 34\n        factorials += 35\n        factorials += 36\n\
    \        factorials += 37\n        factorials += 38\n        factorials += 39\n\
    \        factorials += 40\n        factorials += 41\n        factorials += 42\n\
    \        factorials += 43\n        factorials += 44\n        factorials += 45\n\
    \        factorials += 46\n        factorials += 47\n        factorials += 48\n\
    \        factorials += 49\n        factorials += 50\n        factorials += 51\n\
    \        factorials += 52\n        factorials += 53\n        factorials += 54\n\
    \        factorials += 55\n        factorials += 56\n        factorials += 57\n\
    \        factorials += 58\n        factorials += 59\n        factorials += 60\n\
    \        factorials += 61\n        factorials += 62\n        factorials += 63\n\
    \        factorials += 64\n        factorials += 65\n        factorials += 66\n\
    \        factorials += 67\n        factorials += 68\n        factorials += 69\n\
    \        factorials += 70\n        factorials += 71\n        factorials += 72\n\
    \        factorials += 73\n        factorials += 74\n        factorials += 75\n\
    \        factorials += 76\n        factorials += 77\n        factorials += 78\n\
    \        factorials += 79\n        factorials += 80\n        factorials += 81\n\
    \        factorials += 82\n        factorials += 83\n", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials.filter(_\
    \ % 2 == 0).map(x => x * factorials.indexOf(x) + factorials.indexOf(x) + 1)",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= factorials.drop(1).map(x => x * x)\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n\
    \            factorials += i.toLong * factorials.last\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val evenSum = 1\n        val oddSum = 1\n        val evenFactorial\
    \ = 1\n        val oddFactorial = 1\n        val evenSumFactorial = 1\n      \
    \  val oddSumFactorial = 1\n        val evenSumOdd = 1\n        val oddSumOdd\
    \ = 1\n        val evenFactorialOdd = 1\n        val oddFactorialOdd = 1\n   \
    \     val evenSumFactorialOdd = 1\n        val oddSumFactorialOdd = 1\n      \
    \  val evenSumOddOdd = 1\n        val oddSumOddOdd = 1\n        val evenFactorialEven\
    \ = 1\n        val oddFactorialEven = 1\n        val evenSumFactorialEven = 1\n\
    \        val oddSumFactorialEven = 1\n        val evenSumOddEven = 1\n       \
    \ val oddSumOddEven = 1\n        val evenFactorialOddEven = 1\n        val oddFactorialOddEven\
    \ = 1\n        val evenSumFactorialOddEven = 1\n        val oddSumFactorialOddEven\
    \ = 1\n        val evenSumOddOddEven = 1\n        val oddSumOddOddEven = 1\n \
    \       val evenFactorialEvenEven = 1\n        val oddFactorialEvenEven = 1\n\
    \        val evenSumFactorialEvenEven = 1\n        val oddSumFactorialEvenEven\
    \ = 1\n        val evenSumOddEvenEven = 1\n        val oddSumOddEvenEven = 1\n\
    \        val evenFactorialOddEvenEven = 1\n        val oddFactorialOddEvenEven\
    \ = 1\n        val evenSumFactorialOddEvenEven = 1\n        val oddSumFactorialOddEvenEven\
    \ = 1\n        val evenSumOddOddEvenEven = 1\n        val oddSumOddOddEvenEven\
    \ = 1\n        val evenFactorialEvenOddEven = 1\n        val oddFactorialEvenOddEven\
    \ = 1\n        val evenSumFactorialEvenOddEven = 1\n        val oddSumFactorialEven",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += 2\n        factorials += n\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        val even = 1l\n   \
    \     val odd = 1l\n        val i = 2l\n        while (i <= n) {\n           \
    \ if (i % 2 == 0) {\n                evens += i\n            } else {\n      \
    \          odds += i\n            }\n            factorial *= i\n            sum\
    \ += i\n            factorials += factorial\n            sums += sum\n       \
    \     even += i\n            odd += i\n            i += 2l\n        }\n      \
    \  evens.toList ++ sums.toList ++ factorials.toList ++ evens.toList ++ odds.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = factorials.size + sums.size\n        val odd = evens.size\
    \ + odds.size\n        val evenFactorials = factorials.toList\n        val oddSums\
    \ = sums.toList\n        val evenSums = evens.toList\n        val oddEvens = evenSums.size\
    \ + oddSums.size\n        val evenOdds = oddEvens.size + evenSums.size\n     \
    \   factorials ++= 1 to n\n        sums ++= 1 to n\n        evens ++= 1 to n\n\
    \        odds ++= 1 to n\n        factorials.zip(sums).zip(evens).zip(odds).zip(evenFactorials).zip(oddSums).zip(evenSums).zip(oddEvens).zip(evenOdds)",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += 2\n        factorials += 3\n        factorials += 4\n\
    \        factorials += 5\n        factorials += 6\n        factorials += 7\n \
    \       factorials += 8\n        factorials += 9\n        factorials += 10\n \
    \       factorials += 11\n        factorials += 12\n        factorials += 13\n\
    \        factorials += 14\n        factorials += 15\n        factorials += 16\n\
    \        factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        factorials += 81\n        factorials += 82\n\
    \        factorials += 83\n", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += n\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val sum = 1l\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            if(i\
    \ % 2 == 0) {\n                factorial = factorial * i\n                sum\
    \ = sum + i\n            } else {\n                factorial = factorial * (i\
    \ + 1l)\n                sum = sum + i + 1l\n            }\n        }\n      \
    \  factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.take(n).map(_\
    \ * _)\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 6\n        factorials += 24\n        factorials += 15\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                evens += i\n    \
    \        } else {\n                odds += i\n            }\n            factorials\
    \ += i\n            sums += i\n            i += 1\n        }\n        evens.toList\
    \ ++ sums.toList ++ factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += n\n \
    \       factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val numbers = mutable.ListBuffer[Long]()\n        val factorial = 1l\n\
    \        val number = 1\n        while (number <= n) {\n            if (number\
    \ % 2 == 0) {\n                factorials += factorial\n                numbers\
    \ += number\n            }\n            else {\n                factorials +=\
    \ factorial * (number - 1)\n                numbers += number\n            }\n\
    \            factorial *= number\n            number *= number\n        }\n  \
    \      factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += factorial\n                sums += i\n            }\n            else{\n\
    \                factorial *= i\n            }\n        }\n        factorials\
    \ ++= sums\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials ++= factorials.tail.filter(_\
    \ % 2 == 0).map(x => x * x)\n        factorials ++= factorials.tail.filter(_ %\
    \ 2 == 1).map(x => x + 1)\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        var i = 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                factorials += i.toLong\n            } else {\n              \
    \  sums += i\n            }\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    for(i <- 1 to n){\n            val factorial = factorials.foldLeft(1l) {\
    \ (acc, x) => acc * x }\n            sum += factorial\n            factorials\
    \ += factorial\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val even = 1\n      \
    \  val odd = 1\n        val i = 2\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                factorials += factorial\n                numbers\
    \ += sum\n                even *= i\n                sum += even\n           \
    \ } else {\n                factorials += factorial\n                numbers +=\
    \ odd\n                odd *= i\n                sum += odd\n            }\n \
    \           i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }\n            else{\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n   \
    \     factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorial", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ 2\n        factorials += n\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n){\n            if(i%2\
    \ == 0){\n                factorials += i.toLong\n            }\n            else{\n\
    \                factorials += (i.toLong)*(1l.toLong)\n            }\n       \
    \ }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfNumbers = mutable.ListBuffer[Long]()\n        val evenNumbers\
    \ = mutable.ListBuffer[Long]()\n        val oddNumbers = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evenNumbers += i.toLong\n            } else {\n             \
    \   oddNumbers += i.toLong\n            }\n            factorials += i.toLong\
    \ * factorials(i - 1)\n            sumOfNumbers += i\n            i += 1\n   \
    \     }\n        evenNumbers.toList ++ oddNumbers.toList ++ factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i.toLong\n \
    \           } else {\n                factorials += (i.toLong + factorials.last)\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1l\n        val number = 1l\n        for(i <- 1 to n){\n\
    \            if(i % 2 == 0){\n                factorials += factorial\n      \
    \          numbers += number\n            }\n            else{\n             \
    \   factorials += factorial * number\n                numbers += number\n    \
    \        }\n        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n            if(i % 2 == 0) {\n                factorials += factorial\n\
    \            }\n            else {\n                factorials += factorial +\
    \ 1\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials.filter(_\
    \ % 2 == 0).map(x => x * factorials.indexOf(x) + factorials.indexOf(x) + 1)",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to\
    \ n) {\n            if (i % 2 == 0) {\n                factorials += i.toLong\n\
    \            } else {\n                factorials += factorials.reduceLeft(_ *\
    \ _)\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evenFactorials = mutable.ListBuffer[Long]()\n        val oddFactorials\
    \ = mutable.ListBuffer[Long]()\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val oddSums = mutable.ListBuffer[Long]()\n        val evenSumsSum = mutable.ListBuffer[Long]()\n\
    \        val oddSumsSum = mutable.ListBuffer[Long]()\n        val evenFactorialsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddFactorialsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumSum = mutable.ListBuffer[Long]()\n        val oddSumsSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evenFactorialsSumSum = mutable.ListBuffer[Long]()\n\
    \        val oddFactorialsSumSum = mutable.ListBuffer[Long]()\n        val evenSumsSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialsSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ oddFactorialsSumSumSum = mutable.ListBuffer[Long]()\n        val evenSumsSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialsSumSumSumSum = mutable.ListBuffer[Long]()\n       \
    \ val oddFactorialsSumSumSumSum = mutable.ListBuffer[Long]()\n        val evenSumsSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenFactorialsSumSumSumSumSum = mutable.ListBuffer[Long]()\n    \
    \    val oddFactorialsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val oddSumsSumSumSumSum",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorials += factorial\n         \
    \       sums += sum\n            }\n            else{\n                factorial\
    \ *= i\n                sum += i\n            }\n        }\n        factorials\
    \ += factorial\n        sums += sum\n        factorials.toList", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n \
    \           if(i%2 == 0) {\n                factorials += i.toLong\n         \
    \   } else {\n                factorials += (i.toLong + factorials.last)\n   \
    \         }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                evens += i\n            } else {\n                odds += i\n\
    \            }\n            factorials += i\n            sums += i\n         \
    \   i += 1\n        }\n        val evenFactorials = factorials.filter(_ % 2 ==\
    \ 0)\n        val oddFactorials = factorials.filter(_ % 2 != 0)\n        val evenSums\
    \ = sums.filter(_ % 2 == 0)\n        val oddSums = sums.filter(_ % 2 != 0)\n \
    \       evenFactorials.zip(evenSums).map(x => x._1 * x._2)\n        oddFactorials.zip(oddSums).map(x\
    \ => x._1 + x._2)", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i.toLong * factorials.last\n            }else{\n                factorials\
    \ += i.toLong\n            }\n        }\n        factorials"]
stop_tokens:
- "\n    }\n"
