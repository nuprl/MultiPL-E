name: HumanEval_48_is_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n\
  \    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"\
  aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n\
  \    def isPalindrome(text : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"\
  )) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        val reversed = new StringBuilder(text.reverse)\n        val\
    \ reversedString = reversed.toString\n        text == reversedString", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val chars = text.map(_.toChar)\n        val reversed = chars.reverse\n\
    \        chars.forall(c => c == reversed.head)", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val first = text.head\n        val last  = text.last\n        val isPalindrome\
    \ = reversed.head == first && reversed.last == last\n        return isPalindrome",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        var reversed = \"\"\n        var i = 0\n        var j =\
    \ 0\n        while (i < text.length && j < text.length) {\n            reversed\
    \ = reversed + text.charAt(i)\n            i = i + 1\n            j = j + 1\n\
    \        }\n        if (text == reversed) {\n            return true\n       \
    \ }\n        else {\n            return false\n        }", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var i = 0\n\
    \        var j = 0\n        while(i < text.length && j < text.length) {\n    \
    \        if(text.charAt(i) == text.charAt(j)) {\n                reversed = reversed.concat(text.charAt(i))\n\
    \                i += 1\n                j += 1\n            } else if(text.charAt(i)\
    \ != text.charAt(j)) {\n                return false\n            }\n        }\n\
    \        if(i < text.length && j < text.length) {\n            return false\n\
    \        }\n        return true", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.map(_.toInt).toList\n  \
    \      val reversed = chars.reverse\n        chars.forall(x => x == reversed.head)",
  "        val reversed = new StringBuilder(text).reverse.toString()\n        text\
    \ == reversed", "        val reversed = text.mkString.reverse\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        return text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val reversedString = reversed.mkString(\"\")\n        text == reversedString",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        val reversedText = reversed.toString\n        text == reversedText",
  "        val chars = text.map(_.toChar)\n        val reversed = chars.reverse\n\
    \        chars.forall(c => c == reversed(c))", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val reversedString = reversed.mkString(\"\")\n        text == reversedString",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val chars = text.map(c => c.toInt)\n    \
    \    val reversed = chars.reverse\n        val result = chars.forall(c => c ==\
    \ reversed.head)\n        result", "        val reversed = text.tails.reverse\n\
    \        val firstHalf = text.take(text.length / 2)\n        val secondHalf =\
    \ text.drop(text.length / 2)\n        firstHalf == secondHalf", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text.reverse)\n        val isPalindrome\
    \ = reversed.equals(text)\n        return isPalindrome", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text.reverse).reverse.toString\n      \
    \  text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reverseArray = charArray.reverse\n        val isPalindrome = charArray.zip(reverseArray).forall\
    \ { case (left, right) => left == right }\n        isPalindrome", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text.reverse).reverse.toString\n     \
    \   text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversedText = text\n        var reversedTextLength\
    \ = reversedText.length\n        var i = 0\n        var j = 0\n        while (i\
    \ < reversedTextLength) {\n            reversedText = reversedText.dropRight(1)\n\
    \            reversedTextLength = reversedText.length\n            i += 1\n  \
    \      }\n        if (text == reversedText) {\n            return true\n     \
    \   }\n        else {\n            return false\n        }", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text).reverse.toString()\n        text\
    \ == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tail.reverse\n      \
    \  val reversedString = reversed.mkString\n        val reversedStringLength =\
    \ reversedString.length\n        val textLength = text.length\n        if (reversedStringLength\
    \ == textLength) {\n            true\n        } else {\n            false\n  \
    \      }", "        val reversed = new StringBuilder(text.reverse)\n        return\
    \ text == reversed.toString", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = text.tails.reverse\n     \
    \   val isPalindrome = text == reversed\n        return isPalindrome", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val charArray = text.toCharArray\n        val reversed =\
    \ new Array[Char](charArray.length)\n        var i = 0\n        while (i < charArray.length)\
    \ {\n            reversed(i) = charArray(i)\n            i += 1\n        }\n \
    \       val textArray = reversed.toArray\n        val textArrayLength = textArray.length\n\
    \        if (textArrayLength == 0) {\n            return true\n        }\n   \
    \     var j = 0\n        while (j < textArrayLength) {\n            if (textArray(j)\
    \ != textArrayLength - 1 - j) {\n                return false\n            }\n\
    \            j += 1\n        }\n        return true", "        val reversed =\
    \ new StringBuilder(text).reverse.toString\n        text == reversed", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        var reversed = new StringBuilder(text).reverse.toString\n        return\
    \ text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var i = 0\n        var j = text.length -\
    \ 1\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder(text).reverse.toString()\n\
    \        val chars = text.chars\n        var i = 0\n        var j = 0\n      \
    \  while (i < chars.length && j < chars.length) {\n            if (chars(i) !=\
    \ chars(j)) {\n                return false\n            }\n            i += 1\n\
    \            j += 1\n        }\n        return i == chars.length", "        var\
    \ reversed = new StringBuilder(text).reverse.toString\n        text.equals(reversed)",
  "        var reversed = \"\"\n        var i = 0\n        var j = 0\n        while\
    \ (i < text.length && j < text.length) {\n            reversed = reversed + text.charAt(i)\n\
    \            i = i + 1\n            j = j + 1\n        }\n        return text\
    \ == reversed", "        var reversed = \"\"\n        var i = 0\n        while\
    \ (i < text.length) {\n            reversed = reversed + text.charAt(i)\n    \
    \        i += 1\n        }\n        reversed.equals(text)", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse)\n\
    \        reversed.equals(text)", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text.reverse).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder()\n    \
    \    var index = 0\n        while (index < text.length) {\n            reversed.append(text.charAt(index))\n\
    \            index += 1\n        }\n        return text == reversed.toString",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder(text).reverse.toString\n\
    \        val chars = text.chars\n        chars.toList.zip(chars.reverse.toList).forall\
    \ {\n            case (left, right) => left == right\n        }", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString()\n        text\
    \ == reversed", "        val reversed = text.tail.reverse\n        val firstHalf\
    \ = text.take(text.length / 2)\n        val secondHalf = text.drop(text.length\
    \ / 2)\n        reversed.equals(firstHalf + secondHalf)", "        val reversed\
    \ = new StringBuilder(text).reverse.toString()\n        text == reversed", " \
    \       val reversed = new StringBuilder(text).reverse.toString\n        text\
    \ == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var i = 0\n        var j = text.length -\
    \ 1\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j))\
    \ {\n                return false\n            }\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        val reversed = text.tail.reverse\n\
    \        val isPalindrome = text.head == reversed\n        return isPalindrome",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = \"\"\n        var i = 0\n\
    \        var j = 0\n        while (i < text.length && j < text.length) {\n   \
    \         if (text.charAt(i) != text.charAt(j)) {\n                return false\n\
    \            }\n            i += 1\n            j += 1\n        }\n        if\
    \ (i == text.length) {\n            return true\n        }\n        return false",
  "        var reversed = \"\"\n        var i = 0\n        var j = 0\n        while\
    \ (i < text.length && j < text.length) {\n            if (text.charAt(i) == text.charAt(j))\
    \ {\n                i += 1\n                j += 1\n            } else {\n  \
    \              reversed = reversed + text.charAt(j)\n                j += 1\n\
    \            }\n        }\n        if (i == text.length && j == text.length) {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }", "        val reversed = new StringBuilder(text).reverse.toString\n     \
    \   text == reversed", "        var reversed = \"\"\n        var i = 0\n     \
    \   var j = 0\n        while (i < text.length && j < text.length) {\n        \
    \    if (text.charAt(i) == text.charAt(j)) {\n                reversed = reversed\
    \ + text.charAt(i)\n                i = i + 1\n                j = j + 1\n   \
    \         } else {\n                reversed = reversed + text.charAt(i)\n   \
    \             i = i + 1\n            }\n        }\n        return reversed ==\
    \ text", "        val reversed = new StringBuilder(text).reverse.toString\n  \
    \      text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        var reversed = new StringBuilder()\n    \
    \    var index = 0\n        while (index < text.length / 2) {\n            reversed.append(text.charAt(index))\n\
    \            index += 1\n        }\n        if (text == reversed.toString) {\n\
    \            return true\n        }\n        return false", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        var reversed = new StringBuilder(text).reverse.toString()\n\
    \        return text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.map(c => c.toInt)\n    \
    \    val reversed = chars.reverse\n        val result = reversed.forall(c => c\
    \ == 0)\n        result"]
stop_tokens:
- "\n    }\n"
