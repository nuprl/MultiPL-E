language: scala
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesCorrect = guessesScores.filter(_._1 ==\
    \ gameScores.values.toSet.size).map(_._2)\n        val guessesIncorrect = guessesScores.filter(_._1\
    \ != gameScores.values.toSet.size).map(_._2)\n        val guessesDiff = guessesIncorrect\
    \ diff guessesCorrect\n        val guessesDiffWithIndex = guessesDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndex\
    \ = guessesDiffWithIndex.sortBy(_._1)\n        val guessesDiffWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndex.filter(_._2 == guessesCorrect.size)\n  \
    \      val guessesDiffWithIndexSortedByIndexWithCorrectWithIndex = guessesDiffWithIndexSortedByIndexWithCorrect.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n     \
    \   val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvice1_mk.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvice1_mk.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesDiff\e[0m = guessesIncorrect diff guessesCorrect\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ diff is not a member of scala.collection.immutable.Iterable[Int] - did you mean\
    \ guessesIncorrect.drop?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvice1_mk.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(_.swap)\n        val guessesScores = guess.zipWithIndex.map(_.swap)\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keySet\n        val guessesScoreKeys\
    \ = guessesScoreMap.keySet\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeys.toSet\n        val gameScoreKeysSetSet\
    \ = gameScoreKeysSet.intersect(guessesScoreKeysSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(guessesScoreKeysSet)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeysSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(gameScoreKeysSetSet)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeysSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeysSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined "
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n \
    \       val guessScoreListSize = guessScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = game\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSize\e[0m =\
    \ guessScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreListSize\e[0m\
    \ = guessScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffCount\e[0m\
    \ = gameScoreDiff.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffCount\e[0m\
    \ = guessScoreDiff.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSum\e[0m =\
    \ gameScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffSum\e[0m =\
    \ guessScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffCount\e[0m\
    \ = gameS"
  stdout: ''
  timestamp: 1659798268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val guessesScores = guess.zipWithIndex.map{ case (score, index) => score -\
    \ game(index) }\n        gameScores.zip(guessesScores).map{ case (gameScore, guessesScore)\
    \ => gameScore - guessesScore }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd40ly9uh.scala:22)\n\tat Problem.main(tmpd40ly9uh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - gameScoreCount\n        val guessScoreDiff\
    \ = guessScoreSum - guessScoreCount\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray\
    \ = Array.ofDim[Long](gameScoreCount)\n        val guessScoreDiffAbsArray = Array.ofDim[Long](guessScoreCount)\n\
    \        var i = 0\n        while (i < gameScoreCount) {\n            gameScoreDiffAbsArray(i)\
    \ = gameScoreDiffAbs\n            guessScoreDiffAbsArray(i) = guessScoreDiffAbs\n\
    \            i += 1\n        }\n        val gameScoreDiffArray = Array.ofDim[Long](gameScoreCount)\n\
    \        val guessScoreDiffArray = Array.ofDim[Long](guessScoreCount)\n      \
    \  var j = 0\n        while (j < guessScoreCount) {\n            gameScoreDiffArray(j)\
    \ = gameScoreDiff\n            guessScoreDiffArray(j) = guessScoreDiff\n     \
    \       j += 1\n        }\n        val gameScoreDiffArrayAbs = gameScoreDiffArray.zip(gameScoreDiffArray).map\
    \ { case (gameScoreDiff, gameScoreDiffAbs) => gameScoreDiff }\n        val guessScoreDiffArrayAbs\
    \ = guessScoreDiffArray.zip(guessScoreDiffArray).map { case (guessScoreDiff, guessScoreDiffAbs)\
    \ => guessScoreDiff }\n        val gameScoreDiffArrayAbsArray = gameScoreDiffArrayAbs.zip(gameScoreDiffArrayAbs).map\
    \ { case (gameScoreDiffAbs, gameScoreDiffAbsArray) => gameScoreDiffAbs }\n   \
    \     val guessScoreDiffArrayAbsArray = guessScoreDiffArrayAbs.zip(guessScoreDiffArrayAbs).map\
    \ { case (guessScoreDiffAbs, guessScoreDiffArrayAbsArray) => guessScoreDiffAbs\
    \ }\n        val gameScoreDiffArrayAbsArraySum = gameScoreDiffArrayAbsArray.sum\n\
    \        val guessScoreDiffArrayAbsArraySum = guessScoreDiffArrayAbsArray.sum\n\
    \        val gameScoreDiffArray\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmc4jyiun.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmc4jyiun.scala:23:41\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mgameScoreDiff\e[0m = gameScoreSum - gameScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((gameScoreCount\
    \ : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmc4jyiun.scala:24:43\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mguessScoreDiff\e[0m = guessScoreSum - guessScoreCount\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((guessScoreCount\
    \ : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmc4jyiun.scala:27:54\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArray\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](gameScoreCount)\n\e[31m\e[31m   |\e[0m    \
    \                                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Found:    (gameScoreCount : (Long => Boolean) =>\
    \ Int)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreCount = gameScores.count\n        val guessScoreCount = guessScores.count\n\
    \        val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiff\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_poq7ry.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5_poq7ry.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffCount\e[0m = gameScoreDiff.count\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreDiffCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5_poq7ry.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffCount\e[0m = guessScoreDiff.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5_poq7ry.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSum\e[0m =\
    \ gameScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5_poq7ry.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffSum\e[0m =\
    \ guessScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesCount\
    \ = guess.size\n        val gameCount = game.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gameScore = game.foldLeft(0L) { (sum, score) => sum + score }\n \
    \       val guessScore = guess.foldLeft(0L) { (sum, guess) => sum + guess }\n\
    \        var gameGuess = 0\n        var guessGuess = 0\n        var gameDiff =\
    \ 0\n        var guessDiff = 0\n        var gameDiffCount = 0\n        var guessDiffCount\
    \ = 0\n        var gameDiffCountMax = 0\n        var guessDiffCountMax = 0\n \
    \       var gameDiffCountMin = 0\n        var guessDiffCountMin = 0\n        var\
    \ gameDiffCountMaxMax = 0\n        var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMin\
    \ = 0\n        var guessDiffCountMinMin = 0\n        var gameDiffCountMaxMin =\
    \ 0\n        var guessDiffCountMaxMin = 0\n        var gameDiffCountMinMax = 0\n\
    \        var guessDiffCountMinMax = 0\n        var gameDiffCountMaxMax = 0\n \
    \       var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMinMax = 0\n\
    \        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax =\
    \ 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMax\
    \ = 0\n        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax\
    \ = 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var game\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm0_1mv1z.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0_1mv1z.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mgameDiffCountMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameDiffCountMaxMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mgameDiffCountMaxMax\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0_1mv1z.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mguessDiffCountMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessDiffCountMaxMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mguessDiffCountMaxMax\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0_1mv1z.scala:46:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mgameDiffCountMinMinMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameDiffCountMinMinMax\
    \ is already defined as \e[33mvariable\e[0m \e[35mgameDiffCountMinMinMax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm0_1mv1z.scala:47:12 ---------------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m        \e[33mvar\e[0m \e[36mguessDiffCountMinMinMax\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessDiffCountMinMinMax is already defined as \e[33mvariable\e[0m \e\
    [35mguessDiffCountMinMinMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- "
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guessesWithIndexesWithScores.map {\
    \ case (score, index) => index -> index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexes.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:24:65 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexesWithScores\e\
    [0m = guessesWithIndexesWithIndexesWithIndexes.map { \e[33mcase\e[0m (score, index)\
    \ => index -> score }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: guessesWithIndexesWithIndexesWithIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:25:76\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\e[0m = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \         Not found: guessesWithIndexesWithIndexesWithIndexesWithIndexes\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:26:87 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\e\
    [0m = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { \e\
    [33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNot found: guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:27:98\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m      "
  stdout: ''
  timestamp: 1659798265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val gameScoreList:\
    \ List[Long] = gameScoreMap.keySet.toList.sortBy(_._1).reverse.map(x => gameScoreMap.get(x))\n\
    \        val guessScoreList: List[Long] = guessScoreMap.keySet.toList.sortBy(_._1).reverse.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map(x\
    \ => Math.abs(x(0) - x(1)))\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val gameScoreDiffListMap = gameScoreDiffList.groupBy(x => x).toMap\n\
    \        val gameScoreDiffListMapKeys = gameScoreDiffListMap.keys\n        val\
    \ gameScoreDiffListMapValues = gameScoreDiffListMap.values\n        val gameScoreDiffListMapValuesList\
    \ = gameScoreDiffListMapValues.map(x => x.toList)\n        val gameScoreDiffListMapValuesListSorted\
    \ = gameScoreDiffListMapValuesList.toList.sortBy(_._1).reverse\n        val gameScoreDiffListMapValuesListSortedMap\
    \ = gameScoreDiffListMapValuesListSorted.groupBy(x => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMap.keys\n        val gameScoreDiffListMapValuesListSortedMapValues\
    \ = gameScoreDiffListMapValuesListSortedMap.values\n        val gameScoreDiffListMapValuesListSortedMapValuesList\
    \ = gameScoreDiffListMapValuesListSortedMapValues.map(x => x.toList)\n       \
    \ val gameScoreDiffListMapValuesListSortedMapValuesListSorted = gameScoreDiffListMapValuesListSortedMapValuesList.toList.sortBy(_._1).reverse\n\
    \        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMap = gameScoreDiffListMapValuesListSortedMapValuesListSorted.groupBy(x\
    \ => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys.keys\n    \
    \    val gameScoreDiffListMapValuesList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo3hewpmn.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:19:48\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:19:70\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \  value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:20:72\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo3hewpmn.scala:21:76 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m: \e[35mList\e[0m[\e[35mLong\e\
    [0m] = gameScoreMap.keySet.toList.sortBy(_._1).reverse.map(\e[36mx\e[0m => gameScoreMap.get(x))\n\
    \e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659798269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - game(index) }\n        gameScores.zip(guessesScores).map { case (gameScore,\
    \ guessesScore) => if (gameScore == 0) 0 else abs(gameScore - guessesScore) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpleh2ue7o.scala:22)\n\tat Problem.main(tmpleh2ue7o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(x => x).map { case (score, index) => index\
    \ -> score.size }.toMap\n        val guessScoreMap = guessScores.groupBy(x =>\
    \ x).map { case (score, index) => index -> score.size }.toMap\n        val gameScoreArray\
    \ = gameScores.map { case (score, index) => index -> score }.toArray\n       \
    \ val guessScoreArray = guessScores.map { case (score, index) => index -> score\
    \ }.toArray\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdhzs84wo.scala:35:73 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayMap\e[0m =\
    \ gameScoreArray.groupBy(\e[36mx\e[0m => x).map { \e[33mcase\e[0m \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdhzs84wo.scala:45:0 ----------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdhzs84wo.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayMap\e[0m =\
    \ gameScoreArray.groupBy(\e[36mx\e[0m => x).map { \e[33mcase\e[0m (score, index)\
    \ => index -> score.size }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreArrayMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhzs84wo.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreArrayMap\e[0m\
    \ = guessScoreArray.groupBy(\e[36mx\e[0m => x).map { \e[33mcase\e[0m (score, index)\
    \ => index -> score.size }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreArrayMap is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhzs84wo.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesWithIndex\
    \ = guessesScores.zipWithIndex.map{case (score, index) => index}.toList\n    \
    \    val gameWithIndex = gameScores.zipWithIndex.map{case (score, index) => index}.toList\n\
    \        val gameWithIndexAndScores = gameWithIndex.zip(gameScores).toList\n \
    \       val guessesWithIndexAndScores = guessesWithIndex.zip(guessesScores).toList\n\
    \        val gameWithIndexAndScoreAndIndex = gameWithIndexAndScores.zip(guessesWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyr9g69g4.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScore = guessesWithIndexesSorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuess = guessesWithIndexesSortedSortedByScore.map\
    \ { case (index, score) => (index, score, guessesWithIndexesSortedSortedByScoreAndGuess(index))\
    \ }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly\
    \ = guessesWithIndexesSortedSortedByScoreAndGuess.map { case (index, score, guess)\
    \ => (index, score, guess, guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly(index))\
    \ }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuess\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore.map\
    \ { case (index, score, guess, guessSortedByScoreAndGuess) => (index, score, guess,\
    \ guessSortedByScoreAndGuess(index)) }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuessAndGuessedCorrectly\
    \ = guessesWithIndexesSortedSortedByScoreAndGue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmtyb6lzq.scala:23:142 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedSortedByScoreAndGuess\e\
    [0m = guessesWithIndexesSortedSortedByScore.map { \e[33mcase\e[0m (index, score)\
    \ => (index, score, guessesWithIndexesSortedSortedByScoreAndGuess(index)) }\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedSortedByScoreAndGuess\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmtyb6lzq.scala:24:183\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly\e[0m\
    \ = guessesWithIndexesSortedSortedByScoreAndGuess.map { \e[33mcase\e[0m (index,\
    \ score, guess) => (index, score, guess, guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly(index))\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpmtyb6lzq.scala:27:276\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuess\e\
    [0m = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore.map\
    \ { \e[33mcase\e[0m (index, score, guess, guessSortedByScoreAndGuess) => (index,\
    \ score, guess, guessSortedByScoreAndGuess(index)) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                  "
  stdout: ''
  timestamp: 1659798267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwwytlnwk.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpwwytlnwk.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwwytlnwk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwwytlnwk.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwwytlnwk.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e[35mguessesScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded "
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(_._1).map { case (score, index) => index ->\
    \ score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map { case\
    \ (score, index) => index -> score }.toMap\n        val gameScoreList = gameScores.map\
    \ { case (score, index) => index -> score }.toList\n        val guessScoreList\
    \ = guessScores.map { case (score, index) => index -> score }.toList\n       \
    \ val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmupkbpn7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_._1).map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmupkbpn7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.groupBy(_._1).map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmupkbpn7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmupkbpn7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi3ofubij.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi3ofubij.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.zipWithIndex.map { \e[33mcase\e[0m\
    \ (score, index) => Math.abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3ofubij.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => Math.abs(score - gameScore) }\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3ofubij.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => Math.abs(score - gameScore) }\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3ofubij.scala:"
  stdout: ''
  timestamp: 1659798267
